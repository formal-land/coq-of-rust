(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module dev.
  (*
  Enum FailureLocation
  {
    ty_params := [];
    variants :=
      [
        {
          name := "InRegion";
          item :=
            StructRecord
              [
                ("region", Ty.path "halo2_proofs::dev::metadata::Region");
                ("offset", Ty.path "usize")
              ];
          discriminant := None;
        };
        {
          name := "OutsideRegion";
          item := StructRecord [ ("row", Ty.path "usize") ];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_core_fmt_Debug_for_halo2_proofs_dev_FailureLocation.
    Definition Self : Ty.t := Ty.path "halo2_proofs::dev::FailureLocation".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "halo2_proofs::dev::FailureLocation::InRegion",
                        "region"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "halo2_proofs::dev::FailureLocation::InRegion",
                        "offset"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field2_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "InRegion" |);
                          M.read (| Value.String "region" |);
                          (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                          M.read (| Value.String "offset" |);
                          (* Unsize *) M.pointer_coercion __self_1
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "halo2_proofs::dev::FailureLocation::OutsideRegion",
                        "row"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "OutsideRegion" |);
                          M.read (| Value.String "row" |);
                          (* Unsize *) M.pointer_coercion __self_0
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_halo2_proofs_dev_FailureLocation.
  
  Module Impl_core_marker_StructuralPartialEq_for_halo2_proofs_dev_FailureLocation.
    Definition Self : Ty.t := Ty.path "halo2_proofs::dev::FailureLocation".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_halo2_proofs_dev_FailureLocation.
  
  Module Impl_core_cmp_PartialEq_for_halo2_proofs_dev_FailureLocation.
    Definition Self : Ty.t := Ty.path "halo2_proofs::dev::FailureLocation".
    
    (* PartialEq *)
    Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "halo2_proofs::dev::FailureLocation" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "halo2_proofs::dev::FailureLocation" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (|
              LogicalOp.and (|
                BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)),
                ltac:(M.monadic
                  (M.read (|
                    M.match_operator (|
                      M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "halo2_proofs::dev::FailureLocation::InRegion",
                                "region"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "halo2_proofs::dev::FailureLocation::InRegion",
                                "offset"
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let __self_1 := M.alloc (| γ2_1 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "halo2_proofs::dev::FailureLocation::InRegion",
                                "region"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "halo2_proofs::dev::FailureLocation::InRegion",
                                "offset"
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            let __arg1_1 := M.alloc (| γ2_1 |) in
                            M.alloc (|
                              LogicalOp.and (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.path "halo2_proofs::dev::metadata::Region",
                                    [ Ty.path "halo2_proofs::dev::metadata::Region" ],
                                    "eq",
                                    []
                                  |),
                                  [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                |),
                                ltac:(M.monadic
                                  (BinOp.Pure.eq
                                    (M.read (| M.read (| __self_1 |) |))
                                    (M.read (| M.read (| __arg1_1 |) |))))
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "halo2_proofs::dev::FailureLocation::OutsideRegion",
                                "row"
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "halo2_proofs::dev::FailureLocation::OutsideRegion",
                                "row"
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              BinOp.Pure.eq
                                (M.read (| M.read (| __self_0 |) |))
                                (M.read (| M.read (| __arg1_0 |) |))
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::intrinsics::unreachable", [] |),
                                  []
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)))
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_halo2_proofs_dev_FailureLocation.
  
  Module Impl_core_fmt_Display_for_halo2_proofs_dev_FailureLocation.
    Definition Self : Ty.t := Ty.path "halo2_proofs::dev::FailureLocation".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            match self {
                Self::InRegion { region, offset } => write!(f, "in {} at offset {}", region, offset),
                Self::OutsideRegion { row } => {
                    write!(f, "on row {}", row)
                }
            }
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "halo2_proofs::dev::FailureLocation::InRegion",
                        "region"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "halo2_proofs::dev::FailureLocation::InRegion",
                        "offset"
                      |) in
                    let region := M.alloc (| γ1_0 |) in
                    let offset := M.alloc (| γ1_1 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  Value.Array
                                    [
                                      M.read (| Value.String "in " |);
                                      M.read (| Value.String " at offset " |)
                                    ]
                                |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  Value.Array
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::rt::Argument",
                                          "new_display",
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [ Ty.path "halo2_proofs::dev::metadata::Region" ]
                                          ]
                                        |),
                                        [ region ]
                                      |);
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::rt::Argument",
                                          "new_display",
                                          [ Ty.apply (Ty.path "&") [ Ty.path "usize" ] ]
                                        |),
                                        [ offset ]
                                      |)
                                    ]
                                |))
                            ]
                          |)
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "halo2_proofs::dev::FailureLocation::OutsideRegion",
                        "row"
                      |) in
                    let row := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_fmt",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (| Value.Array [ M.read (| Value.String "on row " |) ] |));
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  Value.Array
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::rt::Argument",
                                          "new_display",
                                          [ Ty.apply (Ty.path "&") [ Ty.path "usize" ] ]
                                        |),
                                        [ row ]
                                      |)
                                    ]
                                |))
                            ]
                          |)
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_halo2_proofs_dev_FailureLocation.
  
  Module Impl_halo2_proofs_dev_FailureLocation.
    Definition Self : Ty.t := Ty.path "halo2_proofs::dev::FailureLocation".
    
    (*
        fn find_expressions<'a, F: Field>(
            cs: &ConstraintSystem<F>,
            regions: &[Region],
            failure_row: usize,
            failure_expressions: impl Iterator<Item = &'a Expression<F>>,
        ) -> Self {
            let failure_columns: HashSet<Column<Any>> = failure_expressions
                .flat_map(|expression| {
                    expression.evaluate(
                        &|_| vec![],
                        &|_| panic!("virtual selectors are removed during optimization"),
                        &|index, _, _| vec![cs.fixed_queries[index].0.into()],
                        &|index, _, _| vec![cs.advice_queries[index].0.into()],
                        &|index, _, _| vec![cs.instance_queries[index].0.into()],
                        &|a| a,
                        &|mut a, mut b| {
                            a.append(&mut b);
                            a
                        },
                        &|a, b| {
                            let mut a = a();
                            let mut b = b();
                            a.append(&mut b);
                            a
                        },
                        &|a, _| a,
                    )
                })
                .collect();
    
            Self::find(regions, failure_row, failure_columns)
        }
    *)
    Definition find_expressions (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ F; impl_Iterator_Item____'a_Expression_F__ ],
          [ cs; regions; failure_row; failure_expressions ] =>
        ltac:(M.monadic
          (let cs := M.alloc (| cs |) in
          let regions := M.alloc (| regions |) in
          let failure_row := M.alloc (| failure_row |) in
          let failure_expressions := M.alloc (| failure_expressions |) in
          M.read (|
            let failure_columns :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::flatten::FlatMap")
                      [
                        impl_Iterator_Item____'a_Expression_F__;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                              [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                      [ F ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::circuit::Column")
                                [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ],
                    [],
                    "collect",
                    [
                      Ty.apply
                        (Ty.path "std::collections::hash::set::HashSet")
                        [
                          Ty.apply
                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                            [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                          Ty.path "std::hash::random::RandomState"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        impl_Iterator_Item____'a_Expression_F__,
                        [],
                        "flat_map",
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::circuit::Column")
                                [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                        [ F ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                  [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                                Ty.path "alloc::alloc::Global"
                              ])
                        ]
                      |),
                      [
                        M.read (| failure_expressions |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let expression := M.copy (| γ |) in
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ],
                                            "evaluate",
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                    [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [ Ty.tuple [ F ] ]
                                                (Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Column")
                                                      [ Ty.path "halo2_proofs::plonk::circuit::Any"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]);
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.path
                                                        "halo2_proofs::plonk::circuit::Selector"
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Column")
                                                      [ Ty.path "halo2_proofs::plonk::circuit::Any"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]);
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.path "usize";
                                                      Ty.path "usize";
                                                      Ty.path "halo2_proofs::poly::Rotation"
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Column")
                                                      [ Ty.path "halo2_proofs::plonk::circuit::Any"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]);
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.path "usize";
                                                      Ty.path "usize";
                                                      Ty.path "halo2_proofs::poly::Rotation"
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Column")
                                                      [ Ty.path "halo2_proofs::plonk::circuit::Any"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]);
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.path "usize";
                                                      Ty.path "usize";
                                                      Ty.path "halo2_proofs::poly::Rotation"
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Column")
                                                      [ Ty.path "halo2_proofs::plonk::circuit::Any"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]);
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Column")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::Any"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Column")
                                                      [ Ty.path "halo2_proofs::plonk::circuit::Any"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]);
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Column")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::Any"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Column")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::Any"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Column")
                                                      [ Ty.path "halo2_proofs::plonk::circuit::Any"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]);
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.dyn
                                                            [ ("core::ops::function::Fn::Trait", [])
                                                            ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.dyn
                                                            [ ("core::ops::function::Fn::Trait", [])
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Column")
                                                      [ Ty.path "halo2_proofs::plonk::circuit::Any"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]);
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Column")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::Any"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      F
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Column")
                                                      [ Ty.path "halo2_proofs::plonk::circuit::Any"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ])
                                            ]
                                          |),
                                          [
                                            M.read (| expression |);
                                            M.alloc (|
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::Any"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  "new",
                                                                  []
                                                                |),
                                                                []
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            |);
                                            M.alloc (|
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.never_to_any (|
                                                                M.call_closure (|
                                                                  M.get_function (|
                                                                    "std::panicking::begin_panic",
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [ Ty.path "str" ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      Value.String
                                                                        "virtual selectors are removed during optimization"
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            |);
                                            M.alloc (|
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0; α1; α2 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let index := M.copy (| γ |) in
                                                              M.match_operator (|
                                                                M.alloc (| α1 |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.match_operator (|
                                                                        M.alloc (| α2 |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                        [
                                                                                          Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Any"
                                                                                        ]
                                                                                    ],
                                                                                  "into_vec",
                                                                                  [
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                                |),
                                                                                [
                                                                                  (* Unsize *)
                                                                                  M.pointer_coercion
                                                                                    (M.read (|
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::boxed::Box")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "array")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Any"
                                                                                                    ]
                                                                                                ];
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          "new",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.alloc (|
                                                                                            Value.Array
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::convert::Into",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::Fixed"
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::circuit::Any"
                                                                                                        ]
                                                                                                    ],
                                                                                                    "into",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "core::ops::index::Index",
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              [
                                                                                                                Ty.tuple
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "halo2_proofs::plonk::circuit::Fixed"
                                                                                                                      ];
                                                                                                                    Ty.path
                                                                                                                      "halo2_proofs::poly::Rotation"
                                                                                                                  ];
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ],
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "usize"
                                                                                                            ],
                                                                                                            "index",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                                              M.read (|
                                                                                                                cs
                                                                                                              |),
                                                                                                              "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                                                              "fixed_queries"
                                                                                                            |);
                                                                                                            M.read (|
                                                                                                              index
                                                                                                            |)
                                                                                                          ]
                                                                                                        |),
                                                                                                        0
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |))
                                                                                ]
                                                                              |)))
                                                                        ]
                                                                      |)))
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            |);
                                            M.alloc (|
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0; α1; α2 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let index := M.copy (| γ |) in
                                                              M.match_operator (|
                                                                M.alloc (| α1 |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.match_operator (|
                                                                        M.alloc (| α2 |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                        [
                                                                                          Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Any"
                                                                                        ]
                                                                                    ],
                                                                                  "into_vec",
                                                                                  [
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                                |),
                                                                                [
                                                                                  (* Unsize *)
                                                                                  M.pointer_coercion
                                                                                    (M.read (|
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::boxed::Box")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "array")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Any"
                                                                                                    ]
                                                                                                ];
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          "new",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.alloc (|
                                                                                            Value.Array
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::convert::Into",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::Advice"
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::circuit::Any"
                                                                                                        ]
                                                                                                    ],
                                                                                                    "into",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "core::ops::index::Index",
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              [
                                                                                                                Ty.tuple
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "halo2_proofs::plonk::circuit::Advice"
                                                                                                                      ];
                                                                                                                    Ty.path
                                                                                                                      "halo2_proofs::poly::Rotation"
                                                                                                                  ];
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ],
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "usize"
                                                                                                            ],
                                                                                                            "index",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                                              M.read (|
                                                                                                                cs
                                                                                                              |),
                                                                                                              "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                                                              "advice_queries"
                                                                                                            |);
                                                                                                            M.read (|
                                                                                                              index
                                                                                                            |)
                                                                                                          ]
                                                                                                        |),
                                                                                                        0
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |))
                                                                                ]
                                                                              |)))
                                                                        ]
                                                                      |)))
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            |);
                                            M.alloc (|
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0; α1; α2 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let index := M.copy (| γ |) in
                                                              M.match_operator (|
                                                                M.alloc (| α1 |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.match_operator (|
                                                                        M.alloc (| α2 |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                        [
                                                                                          Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Any"
                                                                                        ]
                                                                                    ],
                                                                                  "into_vec",
                                                                                  [
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                                |),
                                                                                [
                                                                                  (* Unsize *)
                                                                                  M.pointer_coercion
                                                                                    (M.read (|
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::boxed::Box")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "array")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Any"
                                                                                                    ]
                                                                                                ];
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          "new",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.alloc (|
                                                                                            Value.Array
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::convert::Into",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::Instance"
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::circuit::Any"
                                                                                                        ]
                                                                                                    ],
                                                                                                    "into",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "core::ops::index::Index",
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              [
                                                                                                                Ty.tuple
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "halo2_proofs::plonk::circuit::Instance"
                                                                                                                      ];
                                                                                                                    Ty.path
                                                                                                                      "halo2_proofs::poly::Rotation"
                                                                                                                  ];
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ],
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "usize"
                                                                                                            ],
                                                                                                            "index",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                                              M.read (|
                                                                                                                cs
                                                                                                              |),
                                                                                                              "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                                                              "instance_queries"
                                                                                                            |);
                                                                                                            M.read (|
                                                                                                              index
                                                                                                            |)
                                                                                                          ]
                                                                                                        |),
                                                                                                        0
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |))
                                                                                ]
                                                                              |)))
                                                                        ]
                                                                      |)))
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            |);
                                            M.alloc (|
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let a := M.copy (| γ |) in
                                                              M.read (| a |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            |);
                                            M.alloc (|
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0; α1 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let a := M.copy (| γ |) in
                                                              M.match_operator (|
                                                                M.alloc (| α1 |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let b := M.copy (| γ |) in
                                                                      M.read (|
                                                                        let _ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                      [
                                                                                        Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Any"
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                "append",
                                                                                []
                                                                              |),
                                                                              [ a; b ]
                                                                            |)
                                                                          |) in
                                                                        a
                                                                      |)))
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            |);
                                            M.alloc (|
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0; α1 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let a := M.copy (| γ |) in
                                                              M.match_operator (|
                                                                M.alloc (| α1 |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let b := M.copy (| γ |) in
                                                                      M.read (|
                                                                        let a :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::function::Fn",
                                                                                Ty.dyn
                                                                                  [
                                                                                    ("core::ops::function::Fn::Trait",
                                                                                      [])
                                                                                  ],
                                                                                [ Ty.tuple [] ],
                                                                                "call",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| a |);
                                                                                Value.Tuple []
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        let b :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::function::Fn",
                                                                                Ty.dyn
                                                                                  [
                                                                                    ("core::ops::function::Fn::Trait",
                                                                                      [])
                                                                                  ],
                                                                                [ Ty.tuple [] ],
                                                                                "call",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| b |);
                                                                                Value.Tuple []
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        let _ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                      [
                                                                                        Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Any"
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                "append",
                                                                                []
                                                                              |),
                                                                              [ a; b ]
                                                                            |)
                                                                          |) in
                                                                        a
                                                                      |)))
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            |);
                                            M.alloc (|
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0; α1 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let a := M.copy (| γ |) in
                                                              M.match_operator (|
                                                                M.alloc (| α1 |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.read (| a |)))
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "halo2_proofs::dev::FailureLocation",
                  "find",
                  []
                |),
                [ M.read (| regions |); M.read (| failure_row |); M.read (| failure_columns |) ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_find_expressions :
      M.IsAssociatedFunction Self "find_expressions" find_expressions.
    
    (*
        fn find(regions: &[Region], failure_row: usize, failure_columns: HashSet<Column<Any>>) -> Self {
            regions
                .iter()
                .enumerate()
                .find(|(_, r)| {
                    let (start, end) = r.rows.unwrap();
                    // We match the region if any input columns overlap, rather than all of
                    // them, because matching complex selector columns is hard. As long as
                    // regions are rectangles, and failures occur due to assignments entirely
                    // within single regions, "any" will be equivalent to "all". If these
                    // assumptions change, we'll start getting bug reports from users :)
                    (start..=end).contains(&failure_row) && !failure_columns.is_disjoint(&r.columns)
                })
                .map(|(r_i, r)| FailureLocation::InRegion {
                    region: (r_i, r.name.clone()).into(),
                    offset: failure_row as usize - r.rows.unwrap().0 as usize,
                })
                .unwrap_or_else(|| FailureLocation::OutsideRegion {
                    row: failure_row as usize,
                })
        }
    *)
    Definition find (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ regions; failure_row; failure_columns ] =>
        ltac:(M.monadic
          (let regions := M.alloc (| regions |) in
          let failure_row := M.alloc (| failure_row |) in
          let failure_columns := M.alloc (| failure_columns |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::option::Option")
                [ Ty.path "halo2_proofs::dev::FailureLocation" ],
              "unwrap_or_else",
              [ Ty.function [ Ty.tuple [] ] (Ty.path "halo2_proofs::dev::FailureLocation") ]
            |),
            [
              M.call_closure (|
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    [
                      Ty.tuple
                        [
                          Ty.path "usize";
                          Ty.apply (Ty.path "&") [ Ty.path "halo2_proofs::dev::Region" ]
                        ]
                    ],
                  "map",
                  [
                    Ty.path "halo2_proofs::dev::FailureLocation";
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.tuple
                              [
                                Ty.path "usize";
                                Ty.apply (Ty.path "&") [ Ty.path "halo2_proofs::dev::Region" ]
                              ]
                          ]
                      ]
                      (Ty.path "halo2_proofs::dev::FailureLocation")
                  ]
                |),
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            [ Ty.path "halo2_proofs::dev::Region" ]
                        ],
                      [],
                      "find",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  [
                                    Ty.tuple
                                      [
                                        Ty.path "usize";
                                        Ty.apply
                                          (Ty.path "&")
                                          [ Ty.path "halo2_proofs::dev::Region" ]
                                      ]
                                  ]
                              ]
                          ]
                          (Ty.path "bool")
                      ]
                    |),
                    [
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              [ Ty.path "halo2_proofs::dev::Region" ],
                            [],
                            "enumerate",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [ Ty.path "halo2_proofs::dev::Region" ],
                                "iter",
                                []
                              |),
                              [ M.read (| regions |) ]
                            |)
                          ]
                        |)
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ := M.read (| γ |) in
                                      let γ1_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ1_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let r := M.alloc (| γ1_1 |) in
                                      M.read (|
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
                                                "unwrap",
                                                []
                                              |),
                                              [
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| M.read (| r |) |),
                                                    "halo2_proofs::dev::Region",
                                                    "rows"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let start := M.copy (| γ0_0 |) in
                                                let end_ := M.copy (| γ0_1 |) in
                                                M.alloc (|
                                                  LogicalOp.and (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::ops::range::RangeInclusive")
                                                          [ Ty.path "usize" ],
                                                        "contains",
                                                        [ Ty.path "usize" ]
                                                      |),
                                                      [
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::ops::range::RangeInclusive")
                                                                [ Ty.path "usize" ],
                                                              "new",
                                                              []
                                                            |),
                                                            [ M.read (| start |); M.read (| end_ |)
                                                            ]
                                                          |)
                                                        |);
                                                        failure_row
                                                      ]
                                                    |),
                                                    ltac:(M.monadic
                                                      (UnOp.Pure.not
                                                        (M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "std::collections::hash::set::HashSet")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::Any"
                                                                  ];
                                                                Ty.path
                                                                  "std::hash::random::RandomState"
                                                              ],
                                                            "is_disjoint",
                                                            []
                                                          |),
                                                          [
                                                            failure_columns;
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| M.read (| r |) |),
                                                              "halo2_proofs::dev::Region",
                                                              "columns"
                                                            |)
                                                          ]
                                                        |))))
                                                  |)
                                                |)))
                                          ]
                                        |)
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let r_i := M.copy (| γ0_0 |) in
                                  let r := M.copy (| γ0_1 |) in
                                  Value.StructRecord
                                    "halo2_proofs::dev::FailureLocation::InRegion"
                                    [
                                      ("region",
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::convert::Into",
                                            Ty.tuple
                                              [ Ty.path "usize"; Ty.path "alloc::string::String" ],
                                            [ Ty.path "halo2_proofs::dev::metadata::Region" ],
                                            "into",
                                            []
                                          |),
                                          [
                                            Value.Tuple
                                              [
                                                M.read (| r_i |);
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::clone::Clone",
                                                    Ty.path "alloc::string::String",
                                                    [],
                                                    "clone",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| r |),
                                                      "halo2_proofs::dev::Region",
                                                      "name"
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          ]
                                        |));
                                      ("offset",
                                        BinOp.Panic.sub (|
                                          Integer.Usize,
                                          M.read (| M.use failure_row |),
                                          M.read (|
                                            M.use
                                              (M.SubPointer.get_tuple_field (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        [
                                                          Ty.tuple
                                                            [ Ty.path "usize"; Ty.path "usize" ]
                                                        ],
                                                      "unwrap",
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| r |),
                                                          "halo2_proofs::dev::Region",
                                                          "rows"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                0
                                              |))
                                          |)
                                        |))
                                    ]))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                ]
              |);
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      M.match_operator (|
                        M.alloc (| α0 |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (Value.StructRecord
                                "halo2_proofs::dev::FailureLocation::OutsideRegion"
                                [ ("row", M.read (| M.use failure_row |)) ]))
                        ]
                      |)
                    | _ => M.impossible (||)
                    end))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_find : M.IsAssociatedFunction Self "find" find.
  End Impl_halo2_proofs_dev_FailureLocation.
  
  (*
  Enum VerifyFailure
  {
    ty_params := [];
    variants :=
      [
        {
          name := "CellNotAssigned";
          item :=
            StructRecord
              [
                ("gate", Ty.path "halo2_proofs::dev::metadata::Gate");
                ("region", Ty.path "halo2_proofs::dev::metadata::Region");
                ("column",
                  Ty.apply
                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                    [ Ty.path "halo2_proofs::plonk::circuit::Any" ]);
                ("offset", Ty.path "isize")
              ];
          discriminant := None;
        };
        {
          name := "ConstraintNotSatisfied";
          item :=
            StructRecord
              [
                ("constraint", Ty.path "halo2_proofs::dev::metadata::Constraint");
                ("location", Ty.path "halo2_proofs::dev::FailureLocation");
                ("cell_values",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [
                      Ty.tuple
                        [
                          Ty.path "halo2_proofs::dev::metadata::VirtualCell";
                          Ty.path "alloc::string::String"
                        ];
                      Ty.path "alloc::alloc::Global"
                    ])
              ];
          discriminant := None;
        };
        {
          name := "ConstraintPoisoned";
          item :=
            StructRecord [ ("constraint", Ty.path "halo2_proofs::dev::metadata::Constraint") ];
          discriminant := None;
        };
        {
          name := "Lookup";
          item :=
            StructRecord
              [
                ("name", Ty.apply (Ty.path "&") [ Ty.path "str" ]);
                ("lookup_index", Ty.path "usize");
                ("location", Ty.path "halo2_proofs::dev::FailureLocation")
              ];
          discriminant := None;
        };
        {
          name := "Permutation";
          item :=
            StructRecord
              [ ("column", Ty.path "halo2_proofs::dev::metadata::Column"); ("row", Ty.path "usize")
              ];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_core_fmt_Debug_for_halo2_proofs_dev_VerifyFailure.
    Definition Self : Ty.t := Ty.path "halo2_proofs::dev::VerifyFailure".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "halo2_proofs::dev::VerifyFailure::CellNotAssigned",
                        "gate"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "halo2_proofs::dev::VerifyFailure::CellNotAssigned",
                        "region"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "halo2_proofs::dev::VerifyFailure::CellNotAssigned",
                        "column"
                      |) in
                    let γ1_3 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "halo2_proofs::dev::VerifyFailure::CellNotAssigned",
                        "offset"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    let __self_3 := M.alloc (| γ1_3 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field4_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "CellNotAssigned" |);
                          M.read (| Value.String "gate" |);
                          (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                          M.read (| Value.String "region" |);
                          (* Unsize *) M.pointer_coercion (M.read (| __self_1 |));
                          M.read (| Value.String "column" |);
                          (* Unsize *) M.pointer_coercion (M.read (| __self_2 |));
                          M.read (| Value.String "offset" |);
                          (* Unsize *) M.pointer_coercion __self_3
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "halo2_proofs::dev::VerifyFailure::ConstraintNotSatisfied",
                        "constraint"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "halo2_proofs::dev::VerifyFailure::ConstraintNotSatisfied",
                        "location"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "halo2_proofs::dev::VerifyFailure::ConstraintNotSatisfied",
                        "cell_values"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field3_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "ConstraintNotSatisfied" |);
                          M.read (| Value.String "constraint" |);
                          (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                          M.read (| Value.String "location" |);
                          (* Unsize *) M.pointer_coercion (M.read (| __self_1 |));
                          M.read (| Value.String "cell_values" |);
                          (* Unsize *) M.pointer_coercion __self_2
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "halo2_proofs::dev::VerifyFailure::ConstraintPoisoned",
                        "constraint"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "ConstraintPoisoned" |);
                          M.read (| Value.String "constraint" |);
                          (* Unsize *) M.pointer_coercion __self_0
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "halo2_proofs::dev::VerifyFailure::Lookup",
                        "name"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "halo2_proofs::dev::VerifyFailure::Lookup",
                        "lookup_index"
                      |) in
                    let γ1_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "halo2_proofs::dev::VerifyFailure::Lookup",
                        "location"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    let __self_2 := M.alloc (| γ1_2 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field3_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "Lookup" |);
                          M.read (| Value.String "name" |);
                          (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                          M.read (| Value.String "lookup_index" |);
                          (* Unsize *) M.pointer_coercion (M.read (| __self_1 |));
                          M.read (| Value.String "location" |);
                          (* Unsize *) M.pointer_coercion __self_2
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "halo2_proofs::dev::VerifyFailure::Permutation",
                        "column"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "halo2_proofs::dev::VerifyFailure::Permutation",
                        "row"
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    let __self_1 := M.alloc (| γ1_1 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field2_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "Permutation" |);
                          M.read (| Value.String "column" |);
                          (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                          M.read (| Value.String "row" |);
                          (* Unsize *) M.pointer_coercion __self_1
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_halo2_proofs_dev_VerifyFailure.
  
  Module Impl_core_marker_StructuralPartialEq_for_halo2_proofs_dev_VerifyFailure.
    Definition Self : Ty.t := Ty.path "halo2_proofs::dev::VerifyFailure".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_for_halo2_proofs_dev_VerifyFailure.
  
  Module Impl_core_cmp_PartialEq_for_halo2_proofs_dev_VerifyFailure.
    Definition Self : Ty.t := Ty.path "halo2_proofs::dev::VerifyFailure".
    
    (* PartialEq *)
    Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "halo2_proofs::dev::VerifyFailure" ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.path "halo2_proofs::dev::VerifyFailure" ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (|
              LogicalOp.and (|
                BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)),
                ltac:(M.monadic
                  (M.read (|
                    M.match_operator (|
                      M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "halo2_proofs::dev::VerifyFailure::CellNotAssigned",
                                "gate"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "halo2_proofs::dev::VerifyFailure::CellNotAssigned",
                                "region"
                              |) in
                            let γ2_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "halo2_proofs::dev::VerifyFailure::CellNotAssigned",
                                "column"
                              |) in
                            let γ2_3 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "halo2_proofs::dev::VerifyFailure::CellNotAssigned",
                                "offset"
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let __self_1 := M.alloc (| γ2_1 |) in
                            let __self_2 := M.alloc (| γ2_2 |) in
                            let __self_3 := M.alloc (| γ2_3 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "halo2_proofs::dev::VerifyFailure::CellNotAssigned",
                                "gate"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "halo2_proofs::dev::VerifyFailure::CellNotAssigned",
                                "region"
                              |) in
                            let γ2_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "halo2_proofs::dev::VerifyFailure::CellNotAssigned",
                                "column"
                              |) in
                            let γ2_3 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "halo2_proofs::dev::VerifyFailure::CellNotAssigned",
                                "offset"
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            let __arg1_1 := M.alloc (| γ2_1 |) in
                            let __arg1_2 := M.alloc (| γ2_2 |) in
                            let __arg1_3 := M.alloc (| γ2_3 |) in
                            M.alloc (|
                              LogicalOp.and (|
                                LogicalOp.and (|
                                  LogicalOp.and (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.path "halo2_proofs::dev::metadata::Gate",
                                        [ Ty.path "halo2_proofs::dev::metadata::Gate" ],
                                        "eq",
                                        []
                                      |),
                                      [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        M.get_trait_method (|
                                          "core::cmp::PartialEq",
                                          Ty.path "halo2_proofs::dev::metadata::Region",
                                          [ Ty.path "halo2_proofs::dev::metadata::Region" ],
                                          "eq",
                                          []
                                        |),
                                        [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                      |)))
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Column")
                                          [ Ty.path "halo2_proofs::plonk::circuit::Any" ],
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                                            [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                        ],
                                        "eq",
                                        []
                                      |),
                                      [ M.read (| __self_2 |); M.read (| __arg1_2 |) ]
                                    |)))
                                |),
                                ltac:(M.monadic
                                  (BinOp.Pure.eq
                                    (M.read (| M.read (| __self_3 |) |))
                                    (M.read (| M.read (| __arg1_3 |) |))))
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "halo2_proofs::dev::VerifyFailure::ConstraintNotSatisfied",
                                "constraint"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "halo2_proofs::dev::VerifyFailure::ConstraintNotSatisfied",
                                "location"
                              |) in
                            let γ2_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "halo2_proofs::dev::VerifyFailure::ConstraintNotSatisfied",
                                "cell_values"
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let __self_1 := M.alloc (| γ2_1 |) in
                            let __self_2 := M.alloc (| γ2_2 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "halo2_proofs::dev::VerifyFailure::ConstraintNotSatisfied",
                                "constraint"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "halo2_proofs::dev::VerifyFailure::ConstraintNotSatisfied",
                                "location"
                              |) in
                            let γ2_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "halo2_proofs::dev::VerifyFailure::ConstraintNotSatisfied",
                                "cell_values"
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            let __arg1_1 := M.alloc (| γ2_1 |) in
                            let __arg1_2 := M.alloc (| γ2_2 |) in
                            M.alloc (|
                              LogicalOp.and (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.path "halo2_proofs::dev::metadata::Constraint",
                                      [ Ty.path "halo2_proofs::dev::metadata::Constraint" ],
                                      "eq",
                                      []
                                    |),
                                    [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.path "halo2_proofs::dev::FailureLocation",
                                        [ Ty.path "halo2_proofs::dev::FailureLocation" ],
                                        "eq",
                                        []
                                      |),
                                      [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                    |)))
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "halo2_proofs::dev::metadata::VirtualCell";
                                              Ty.path "alloc::string::String"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "halo2_proofs::dev::metadata::VirtualCell";
                                                Ty.path "alloc::string::String"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                      "eq",
                                      []
                                    |),
                                    [ M.read (| __self_2 |); M.read (| __arg1_2 |) ]
                                  |)))
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "halo2_proofs::dev::VerifyFailure::ConstraintPoisoned",
                                "constraint"
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "halo2_proofs::dev::VerifyFailure::ConstraintPoisoned",
                                "constraint"
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.path "halo2_proofs::dev::metadata::Constraint",
                                  [ Ty.path "halo2_proofs::dev::metadata::Constraint" ],
                                  "eq",
                                  []
                                |),
                                [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "halo2_proofs::dev::VerifyFailure::Lookup",
                                "name"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "halo2_proofs::dev::VerifyFailure::Lookup",
                                "lookup_index"
                              |) in
                            let γ2_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "halo2_proofs::dev::VerifyFailure::Lookup",
                                "location"
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let __self_1 := M.alloc (| γ2_1 |) in
                            let __self_2 := M.alloc (| γ2_2 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "halo2_proofs::dev::VerifyFailure::Lookup",
                                "name"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "halo2_proofs::dev::VerifyFailure::Lookup",
                                "lookup_index"
                              |) in
                            let γ2_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "halo2_proofs::dev::VerifyFailure::Lookup",
                                "location"
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            let __arg1_1 := M.alloc (| γ2_1 |) in
                            let __arg1_2 := M.alloc (| γ2_2 |) in
                            M.alloc (|
                              LogicalOp.and (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply (Ty.path "&") [ Ty.path "str" ],
                                      [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ],
                                      "eq",
                                      []
                                    |),
                                    [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                  |),
                                  ltac:(M.monadic
                                    (BinOp.Pure.eq
                                      (M.read (| M.read (| __self_1 |) |))
                                      (M.read (| M.read (| __arg1_1 |) |))))
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.path "halo2_proofs::dev::FailureLocation",
                                      [ Ty.path "halo2_proofs::dev::FailureLocation" ],
                                      "eq",
                                      []
                                    |),
                                    [ M.read (| __self_2 |); M.read (| __arg1_2 |) ]
                                  |)))
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "halo2_proofs::dev::VerifyFailure::Permutation",
                                "column"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_0,
                                "halo2_proofs::dev::VerifyFailure::Permutation",
                                "row"
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let __self_1 := M.alloc (| γ2_1 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "halo2_proofs::dev::VerifyFailure::Permutation",
                                "column"
                              |) in
                            let γ2_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ0_1,
                                "halo2_proofs::dev::VerifyFailure::Permutation",
                                "row"
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            let __arg1_1 := M.alloc (| γ2_1 |) in
                            M.alloc (|
                              LogicalOp.and (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.path "halo2_proofs::dev::metadata::Column",
                                    [ Ty.path "halo2_proofs::dev::metadata::Column" ],
                                    "eq",
                                    []
                                  |),
                                  [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                |),
                                ltac:(M.monadic
                                  (BinOp.Pure.eq
                                    (M.read (| M.read (| __self_1 |) |))
                                    (M.read (| M.read (| __arg1_1 |) |))))
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::intrinsics::unreachable", [] |),
                                  []
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)))
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::cmp::PartialEq"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method eq) ].
  End Impl_core_cmp_PartialEq_for_halo2_proofs_dev_VerifyFailure.
  
  Module Impl_core_fmt_Display_for_halo2_proofs_dev_VerifyFailure.
    Definition Self : Ty.t := Ty.path "halo2_proofs::dev::VerifyFailure".
    
    (*
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            match self {
                Self::CellNotAssigned {
                    gate,
                    region,
                    column,
                    offset,
                } => {
                    write!(
                        f,
                        "{} uses {}, which requires cell in column {:?} at offset {} to be assigned.",
                        region, gate, column, offset
                    )
                }
                Self::ConstraintNotSatisfied {
                    constraint,
                    location,
                    cell_values,
                } => {
                    writeln!(f, "{} is not satisfied {}", constraint, location)?;
                    for (name, value) in cell_values {
                        writeln!(f, "- {} = {}", name, value)?;
                    }
                    Ok(())
                }
                Self::ConstraintPoisoned { constraint } => {
                    write!(
                        f,
                        "{} is active on an unusable row - missing selector?",
                        constraint
                    )
                }
                Self::Lookup {
                    name,
                    lookup_index,
                    location,
                } => {
                    write!(
                        f,
                        "Lookup {}(index: {}) is not satisfied {}",
                        name, lookup_index, location
                    )
                }
                Self::Permutation { column, row } => {
                    write!(
                        f,
                        "Equality constraint not satisfied by cell ({:?}, {})",
                        column, row
                    )
                }
            }
        }
    *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::dev::VerifyFailure::CellNotAssigned",
                            "gate"
                          |) in
                        let γ1_1 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::dev::VerifyFailure::CellNotAssigned",
                            "region"
                          |) in
                        let γ1_2 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::dev::VerifyFailure::CellNotAssigned",
                            "column"
                          |) in
                        let γ1_3 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::dev::VerifyFailure::CellNotAssigned",
                            "offset"
                          |) in
                        let gate := M.alloc (| γ1_0 |) in
                        let region := M.alloc (| γ1_1 |) in
                        let column := M.alloc (| γ1_2 |) in
                        let offset := M.alloc (| γ1_3 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Formatter",
                              "write_fmt",
                              []
                            |),
                            [
                              M.read (| f |);
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "core::fmt::Arguments",
                                  "new_v1",
                                  []
                                |),
                                [
                                  (* Unsize *)
                                  M.pointer_coercion
                                    (M.alloc (|
                                      Value.Array
                                        [
                                          M.read (| Value.String "" |);
                                          M.read (| Value.String " uses " |);
                                          M.read (|
                                            Value.String ", which requires cell in column "
                                          |);
                                          M.read (| Value.String " at offset " |);
                                          M.read (| Value.String " to be assigned." |)
                                        ]
                                    |));
                                  (* Unsize *)
                                  M.pointer_coercion
                                    (M.alloc (|
                                      Value.Array
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_display",
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [ Ty.path "halo2_proofs::dev::metadata::Region" ]
                                              ]
                                            |),
                                            [ region ]
                                          |);
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_display",
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [ Ty.path "halo2_proofs::dev::metadata::Gate" ]
                                              ]
                                            |),
                                            [ gate ]
                                          |);
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_debug",
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Column")
                                                      [ Ty.path "halo2_proofs::plonk::circuit::Any"
                                                      ]
                                                  ]
                                              ]
                                            |),
                                            [ column ]
                                          |);
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_display",
                                              [ Ty.apply (Ty.path "&") [ Ty.path "isize" ] ]
                                            |),
                                            [ offset ]
                                          |)
                                        ]
                                    |))
                                ]
                              |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::dev::VerifyFailure::ConstraintNotSatisfied",
                            "constraint"
                          |) in
                        let γ1_1 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::dev::VerifyFailure::ConstraintNotSatisfied",
                            "location"
                          |) in
                        let γ1_2 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::dev::VerifyFailure::ConstraintNotSatisfied",
                            "cell_values"
                          |) in
                        let constraint := M.alloc (| γ1_0 |) in
                        let location := M.alloc (| γ1_1 |) in
                        let cell_values := M.alloc (| γ1_2 |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::Formatter",
                                      "write_fmt",
                                      []
                                    |),
                                    [
                                      M.read (| f |);
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::Arguments",
                                          "new_v1",
                                          []
                                        |),
                                        [
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.alloc (|
                                              Value.Array
                                                [
                                                  M.read (| Value.String "" |);
                                                  M.read (| Value.String " is not satisfied " |);
                                                  M.read (| Value.String "
" |)
                                                ]
                                            |));
                                          (* Unsize *)
                                          M.pointer_coercion
                                            (M.alloc (|
                                              Value.Array
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "core::fmt::rt::Argument",
                                                      "new_display",
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::dev::metadata::Constraint"
                                                          ]
                                                      ]
                                                    |),
                                                    [ constraint ]
                                                  |);
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "core::fmt::rt::Argument",
                                                      "new_display",
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::dev::FailureLocation"
                                                          ]
                                                      ]
                                                    |),
                                                    [ location ]
                                                  |)
                                                ]
                                            |))
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "core::fmt::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        let _ :=
                          M.use
                            (M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::collect::IntoIterator",
                                    Ty.apply
                                      (Ty.path "&")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "halo2_proofs::dev::metadata::VirtualCell";
                                                Ty.path "alloc::string::String"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    [],
                                    "into_iter",
                                    []
                                  |),
                                  [ M.read (| cell_values |) ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let iter := M.copy (| γ |) in
                                    M.loop (|
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::dev::metadata::VirtualCell";
                                                          Ty.path "alloc::string::String"
                                                        ]
                                                    ],
                                                  [],
                                                  "next",
                                                  []
                                                |),
                                                [ iter ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.alloc (|
                                                    M.never_to_any (| M.read (| M.break (||) |) |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let γ0_0 := M.read (| γ0_0 |) in
                                                  let γ2_0 :=
                                                    M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                  let γ2_1 :=
                                                    M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                  let name := M.alloc (| γ2_0 |) in
                                                  let value := M.alloc (| γ2_1 |) in
                                                  let _ :=
                                                    M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::Try",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path "core::fmt::Error"
                                                              ],
                                                            [],
                                                            "branch",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Formatter",
                                                                "write_fmt",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| f |);
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path "core::fmt::Arguments",
                                                                    "new_v1",
                                                                    []
                                                                  |),
                                                                  [
                                                                    (* Unsize *)
                                                                    M.pointer_coercion
                                                                      (M.alloc (|
                                                                        Value.Array
                                                                          [
                                                                            M.read (|
                                                                              Value.String "- "
                                                                            |);
                                                                            M.read (|
                                                                              Value.String " = "
                                                                            |);
                                                                            M.read (|
                                                                              Value.String "
"
                                                                            |)
                                                                          ]
                                                                      |));
                                                                    (* Unsize *)
                                                                    M.pointer_coercion
                                                                      (M.alloc (|
                                                                        Value.Array
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "core::fmt::rt::Argument",
                                                                                "new_display",
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [
                                                                                      Ty.path
                                                                                        "halo2_proofs::dev::metadata::VirtualCell"
                                                                                    ]
                                                                                ]
                                                                              |),
                                                                              [ name ]
                                                                            |);
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "core::fmt::rt::Argument",
                                                                                "new_display",
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [
                                                                                      Ty.path
                                                                                        "alloc::string::String"
                                                                                    ]
                                                                                ]
                                                                              |),
                                                                              [ value ]
                                                                            |)
                                                                          ]
                                                                      |))
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Break",
                                                                0
                                                              |) in
                                                            let residual := M.copy (| γ0_0 |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::try_trait::FromResidual",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.tuple [];
                                                                            Ty.path
                                                                              "core::fmt::Error"
                                                                          ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            [
                                                                              Ty.path
                                                                                "core::convert::Infallible";
                                                                              Ty.path
                                                                                "core::fmt::Error"
                                                                            ]
                                                                        ],
                                                                        "from_residual",
                                                                        []
                                                                      |),
                                                                      [ M.read (| residual |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Continue",
                                                                0
                                                              |) in
                                                            let val := M.copy (| γ0_0 |) in
                                                            val))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                    |)))
                              ]
                            |)) in
                        M.alloc (|
                          Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::dev::VerifyFailure::ConstraintPoisoned",
                            "constraint"
                          |) in
                        let constraint := M.alloc (| γ1_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Formatter",
                              "write_fmt",
                              []
                            |),
                            [
                              M.read (| f |);
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "core::fmt::Arguments",
                                  "new_v1",
                                  []
                                |),
                                [
                                  (* Unsize *)
                                  M.pointer_coercion
                                    (M.alloc (|
                                      Value.Array
                                        [
                                          M.read (| Value.String "" |);
                                          M.read (|
                                            Value.String
                                              " is active on an unusable row - missing selector?"
                                          |)
                                        ]
                                    |));
                                  (* Unsize *)
                                  M.pointer_coercion
                                    (M.alloc (|
                                      Value.Array
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_display",
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.path
                                                      "halo2_proofs::dev::metadata::Constraint"
                                                  ]
                                              ]
                                            |),
                                            [ constraint ]
                                          |)
                                        ]
                                    |))
                                ]
                              |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::dev::VerifyFailure::Lookup",
                            "name"
                          |) in
                        let γ1_1 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::dev::VerifyFailure::Lookup",
                            "lookup_index"
                          |) in
                        let γ1_2 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::dev::VerifyFailure::Lookup",
                            "location"
                          |) in
                        let name := M.alloc (| γ1_0 |) in
                        let lookup_index := M.alloc (| γ1_1 |) in
                        let location := M.alloc (| γ1_2 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Formatter",
                              "write_fmt",
                              []
                            |),
                            [
                              M.read (| f |);
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "core::fmt::Arguments",
                                  "new_v1",
                                  []
                                |),
                                [
                                  (* Unsize *)
                                  M.pointer_coercion
                                    (M.alloc (|
                                      Value.Array
                                        [
                                          M.read (| Value.String "Lookup " |);
                                          M.read (| Value.String "(index: " |);
                                          M.read (| Value.String ") is not satisfied " |)
                                        ]
                                    |));
                                  (* Unsize *)
                                  M.pointer_coercion
                                    (M.alloc (|
                                      Value.Array
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_display",
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ]
                                              ]
                                            |),
                                            [ name ]
                                          |);
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_display",
                                              [ Ty.apply (Ty.path "&") [ Ty.path "usize" ] ]
                                            |),
                                            [ lookup_index ]
                                          |);
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_display",
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [ Ty.path "halo2_proofs::dev::FailureLocation" ]
                                              ]
                                            |),
                                            [ location ]
                                          |)
                                        ]
                                    |))
                                ]
                              |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::dev::VerifyFailure::Permutation",
                            "column"
                          |) in
                        let γ1_1 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::dev::VerifyFailure::Permutation",
                            "row"
                          |) in
                        let column := M.alloc (| γ1_0 |) in
                        let row := M.alloc (| γ1_1 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Formatter",
                              "write_fmt",
                              []
                            |),
                            [
                              M.read (| f |);
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.path "core::fmt::Arguments",
                                  "new_v1",
                                  []
                                |),
                                [
                                  (* Unsize *)
                                  M.pointer_coercion
                                    (M.alloc (|
                                      Value.Array
                                        [
                                          M.read (|
                                            Value.String
                                              "Equality constraint not satisfied by cell ("
                                          |);
                                          M.read (| Value.String ", " |);
                                          M.read (| Value.String ")" |)
                                        ]
                                    |));
                                  (* Unsize *)
                                  M.pointer_coercion
                                    (M.alloc (|
                                      Value.Array
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_debug",
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [ Ty.path "halo2_proofs::dev::metadata::Column" ]
                                              ]
                                            |),
                                            [ column ]
                                          |);
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_display",
                                              [ Ty.apply (Ty.path "&") [ Ty.path "usize" ] ]
                                            |),
                                            [ row ]
                                          |)
                                        ]
                                    |))
                                ]
                              |)
                            ]
                          |)
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Display"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Display_for_halo2_proofs_dev_VerifyFailure.
  
  (* StructRecord
    {
      name := "Region";
      ty_params := [];
      fields :=
        [
          ("name", Ty.path "alloc::string::String");
          ("columns",
            Ty.apply
              (Ty.path "std::collections::hash::set::HashSet")
              [
                Ty.apply
                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                  [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                Ty.path "std::hash::random::RandomState"
              ]);
          ("rows",
            Ty.apply
              (Ty.path "core::option::Option")
              [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ]);
          ("enabled_selectors",
            Ty.apply
              (Ty.path "std::collections::hash::map::HashMap")
              [
                Ty.path "halo2_proofs::plonk::circuit::Selector";
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                Ty.path "std::hash::random::RandomState"
              ]);
          ("cells",
            Ty.apply
              (Ty.path "std::collections::hash::map::HashMap")
              [
                Ty.tuple
                  [
                    Ty.apply
                      (Ty.path "halo2_proofs::plonk::circuit::Column")
                      [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                    Ty.path "usize"
                  ];
                Ty.path "usize";
                Ty.path "std::hash::random::RandomState"
              ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_for_halo2_proofs_dev_Region.
    Definition Self : Ty.t := Ty.path "halo2_proofs::dev::Region".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field5_finish",
              []
            |),
            [
              M.read (| f |);
              M.read (| Value.String "Region" |);
              M.read (| Value.String "name" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::dev::Region",
                  "name"
                |));
              M.read (| Value.String "columns" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::dev::Region",
                  "columns"
                |));
              M.read (| Value.String "rows" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::dev::Region",
                  "rows"
                |));
              M.read (| Value.String "enabled_selectors" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::dev::Region",
                  "enabled_selectors"
                |));
              M.read (| Value.String "cells" |);
              (* Unsize *)
              M.pointer_coercion
                (M.alloc (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::dev::Region",
                    "cells"
                  |)
                |))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_halo2_proofs_dev_Region.
  
  Module Impl_halo2_proofs_dev_Region.
    Definition Self : Ty.t := Ty.path "halo2_proofs::dev::Region".
    
    (*
        fn update_extent(&mut self, column: Column<Any>, row: usize) {
            self.columns.insert(column);
    
            // The region start is the earliest row assigned to.
            // The region end is the latest row assigned to.
            let (mut start, mut end) = self.rows.unwrap_or((row, row));
            if row < start {
                // The first row assigned was not at start 0 within the region.
                start = row;
            }
            if row > end {
                end = row;
            }
            self.rows = Some((start, end));
        }
    *)
    Definition update_extent (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; column; row ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let column := M.alloc (| column |) in
          let row := M.alloc (| row |) in
          M.read (|
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "std::collections::hash::set::HashSet")
                      [
                        Ty.apply
                          (Ty.path "halo2_proofs::plonk::circuit::Column")
                          [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                        Ty.path "std::hash::random::RandomState"
                      ],
                    "insert",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::dev::Region",
                      "columns"
                    |);
                    M.read (| column |)
                  ]
                |)
              |) in
            M.match_operator (|
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      [ Ty.tuple [ Ty.path "usize"; Ty.path "usize" ] ],
                    "unwrap_or",
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::dev::Region",
                        "rows"
                      |)
                    |);
                    Value.Tuple [ M.read (| row |); M.read (| row |) ]
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let start := M.copy (| γ0_0 |) in
                    let end_ := M.copy (| γ0_1 |) in
                    let _ :=
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    BinOp.Pure.lt (M.read (| row |)) (M.read (| start |))
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              let _ := M.write (| start, M.read (| row |) |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let _ :=
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    BinOp.Pure.gt (M.read (| row |)) (M.read (| end_ |))
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              let _ := M.write (| end_, M.read (| row |) |) in
                              M.alloc (| Value.Tuple [] |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let _ :=
                      M.write (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::dev::Region",
                          "rows"
                        |),
                        Value.StructTuple
                          "core::option::Option::Some"
                          [ Value.Tuple [ M.read (| start |); M.read (| end_ |) ] ]
                      |) in
                    M.alloc (| Value.Tuple [] |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_update_extent :
      M.IsAssociatedFunction Self "update_extent" update_extent.
    
    (*
        fn track_cell(&mut self, column: Column<Any>, row: usize) {
            // Keep track of how many times this cell has been assigned to.
            let count = *self.cells.get(&(column, row)).unwrap_or(&0);
            self.cells.insert((column, row), count + 1);
        }
    *)
    Definition track_cell (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; column; row ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let column := M.alloc (| column |) in
          let row := M.alloc (| row |) in
          M.read (|
            let count :=
              M.copy (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      [ Ty.apply (Ty.path "&") [ Ty.path "usize" ] ],
                    "unwrap_or",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::collections::hash::map::HashMap")
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                  [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                                Ty.path "usize"
                              ];
                            Ty.path "usize";
                            Ty.path "std::hash::random::RandomState"
                          ],
                        "get",
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::circuit::Column")
                                [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                              Ty.path "usize"
                            ]
                        ]
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::dev::Region",
                          "cells"
                        |);
                        M.alloc (| Value.Tuple [ M.read (| column |); M.read (| row |) ] |)
                      ]
                    |);
                    M.alloc (| Value.Integer 0 |)
                  ]
                |)
              |) in
            let _ :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "std::collections::hash::map::HashMap")
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                              [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                            Ty.path "usize"
                          ];
                        Ty.path "usize";
                        Ty.path "std::hash::random::RandomState"
                      ],
                    "insert",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::dev::Region",
                      "cells"
                    |);
                    Value.Tuple [ M.read (| column |); M.read (| row |) ];
                    BinOp.Panic.add (| Integer.Usize, M.read (| count |), Value.Integer 1 |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_track_cell : M.IsAssociatedFunction Self "track_cell" track_cell.
    
    (*
        fn is_assigned(&self, column: Column<Any>, row: usize) -> bool {
            self.cells.contains_key(&(column, row))
        }
    *)
    Definition is_assigned (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; column; row ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let column := M.alloc (| column |) in
          let row := M.alloc (| row |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply
                (Ty.path "std::collections::hash::map::HashMap")
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                        [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                      Ty.path "usize"
                    ];
                  Ty.path "usize";
                  Ty.path "std::hash::random::RandomState"
                ],
              "contains_key",
              [
                Ty.tuple
                  [
                    Ty.apply
                      (Ty.path "halo2_proofs::plonk::circuit::Column")
                      [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                    Ty.path "usize"
                  ]
              ]
            |),
            [
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "halo2_proofs::dev::Region",
                "cells"
              |);
              M.alloc (| Value.Tuple [ M.read (| column |); M.read (| row |) ] |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_is_assigned : M.IsAssociatedFunction Self "is_assigned" is_assigned.
  End Impl_halo2_proofs_dev_Region.
  
  (*
  Enum CellValue
  {
    ty_params := [ "F" ];
    variants :=
      [
        {
          name := "Unassigned";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Assigned";
          item := StructTuple [ F ];
          discriminant := None;
        };
        {
          name := "Poison";
          item := StructTuple [ Ty.path "usize" ];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_CellValue_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ].
    
    (* Clone *)
    Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    M.alloc (| Value.StructTuple "halo2_proofs::dev::CellValue::Unassigned" [] |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "halo2_proofs::dev::CellValue::Assigned",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "halo2_proofs::dev::CellValue::Assigned"
                        [
                          M.call_closure (|
                            M.get_trait_method (| "core::clone::Clone", F, [], "clone", [] |),
                            [ M.read (| __self_0 |) ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "halo2_proofs::dev::CellValue::Poison",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "halo2_proofs::dev::CellValue::Poison"
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.path "usize",
                              [],
                              "clone",
                              []
                            |),
                            [ M.read (| __self_0 |) ]
                          |)
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_CellValue_F.
  
  Module Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_CellValue_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ].
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::marker::Copy"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_CellValue_F.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_CellValue_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ].
    
    (* Debug *)
    Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          []
                        |),
                        [ M.read (| f |); M.read (| Value.String "Unassigned" |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "halo2_proofs::dev::CellValue::Assigned",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "Assigned" |);
                          (* Unsize *) M.pointer_coercion __self_0
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "halo2_proofs::dev::CellValue::Poison",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "Poison" |);
                          (* Unsize *) M.pointer_coercion __self_0
                        ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_CellValue_F.
  
  Module Impl_core_marker_StructuralPartialEq_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_CellValue_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ].
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_CellValue_F.
  
  Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_CellValue_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ].
    
    (* PartialEq *)
    Definition eq (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ] ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ] ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (|
              LogicalOp.and (|
                BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)),
                ltac:(M.monadic
                  (M.read (|
                    M.match_operator (|
                      M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "halo2_proofs::dev::CellValue::Assigned",
                                0
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "halo2_proofs::dev::CellValue::Assigned",
                                0
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (| "core::cmp::PartialEq", F, [ F ], "eq", [] |),
                                [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "halo2_proofs::dev::CellValue::Poison",
                                0
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "halo2_proofs::dev::CellValue::Poison",
                                0
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              BinOp.Pure.eq
                                (M.read (| M.read (| __self_0 |) |))
                                (M.read (| M.read (| __arg1_0 |) |))
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Bool true |)))
                      ]
                    |)
                  |)))
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method (eq F)) ].
  End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_CellValue_F.
  
  Module Impl_core_marker_StructuralEq_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_CellValue_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ].
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::marker::StructuralEq"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralEq_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_CellValue_F.
  
  Module Impl_core_cmp_Eq_where_core_cmp_Eq_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_CellValue_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ].
    
    (* Eq *)
    Definition assert_receiver_is_total_eq (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::cmp::Eq"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method (assert_receiver_is_total_eq F)) ].
  End Impl_core_cmp_Eq_where_core_cmp_Eq_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_CellValue_F.
  
  (*
  Enum Value
  {
    ty_params := [ "F" ];
    variants :=
      [
        {
          name := "Real";
          item := StructTuple [ F ];
          discriminant := None;
        };
        {
          name := "Poison";
          item := StructTuple [];
          discriminant := None;
        }
      ];
  }
  *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ].
    
    (* Clone *)
    Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "halo2_proofs::dev::Value::Real",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "halo2_proofs::dev::Value::Real"
                        [
                          M.call_closure (|
                            M.get_trait_method (| "core::clone::Clone", F, [], "clone", [] |),
                            [ M.read (| __self_0 |) ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    M.alloc (| Value.StructTuple "halo2_proofs::dev::Value::Poison" [] |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
  
  Module Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ].
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::marker::Copy"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_where_core_marker_Copy_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ].
    
    (* Debug *)
    Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "halo2_proofs::dev::Value::Real",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ1_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          []
                        |),
                        [
                          M.read (| f |);
                          M.read (| Value.String "Real" |);
                          (* Unsize *) M.pointer_coercion __self_0
                        ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          []
                        |),
                        [ M.read (| f |); M.read (| Value.String "Poison" |) ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
  
  Module Impl_core_marker_StructuralPartialEq_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ].
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::marker::StructuralPartialEq"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralPartialEq_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
  
  Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ].
    
    (* PartialEq *)
    Definition eq (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ] ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ] ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.alloc (|
              LogicalOp.and (|
                BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)),
                ltac:(M.monadic
                  (M.read (|
                    M.match_operator (|
                      M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "halo2_proofs::dev::Value::Real",
                                0
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "halo2_proofs::dev::Value::Real",
                                0
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (| "core::cmp::PartialEq", F, [ F ], "eq", [] |),
                                [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Bool true |)))
                      ]
                    |)
                  |)))
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::cmp::PartialEq"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("eq", InstanceField.Method (eq F)) ].
  End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
  
  Module Impl_core_marker_StructuralEq_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ].
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::marker::StructuralEq"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_StructuralEq_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
  
  Module Impl_core_cmp_Eq_where_core_cmp_Eq_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ].
    
    (* Eq *)
    Definition assert_receiver_is_total_eq (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::cmp::Eq"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("assert_receiver_is_total_eq", InstanceField.Method (assert_receiver_is_total_eq F)) ].
  End Impl_core_cmp_Eq_where_core_cmp_Eq_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
  
  Module Impl_core_cmp_Ord_where_core_cmp_Ord_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ].
    
    (* Ord *)
    Definition cmp (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ] ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ] ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.match_operator (|
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (| "core::cmp::Ord", Ty.path "isize", [], "cmp", [] |),
                  [ __self_tag; __arg1_tag ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_0 := M.read (| γ0_0 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "halo2_proofs::dev::Value::Real",
                                0
                              |) in
                            let __self_0 := M.alloc (| γ2_0 |) in
                            let γ0_1 := M.read (| γ0_1 |) in
                            let γ2_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "halo2_proofs::dev::Value::Real",
                                0
                              |) in
                            let __arg1_0 := M.alloc (| γ2_0 |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (| "core::cmp::Ord", F, [], "cmp", [] |),
                                [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (| Value.StructTuple "core::cmp::Ordering::Equal" [] |)))
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let cmp := M.copy (| γ |) in
                    cmp))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::cmp::Ord"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("cmp", InstanceField.Method (cmp F)) ].
  End Impl_core_cmp_Ord_where_core_cmp_Ord_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
  
  Module Impl_core_cmp_PartialOrd_where_core_cmp_PartialOrd_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ].
    
    (* PartialOrd *)
    Definition partial_cmp (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self; other ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let other := M.alloc (| other |) in
          M.read (|
            let __self_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ] ]
                  |),
                  [ M.read (| self |) ]
                |)
              |) in
            let __arg1_tag :=
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "core::intrinsics::discriminant_value",
                    [ Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ] ]
                  |),
                  [ M.read (| other |) ]
                |)
              |) in
            M.match_operator (|
              M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let γ0_0 := M.read (| γ0_0 |) in
                    let γ2_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_0,
                        "halo2_proofs::dev::Value::Real",
                        0
                      |) in
                    let __self_0 := M.alloc (| γ2_0 |) in
                    let γ0_1 := M.read (| γ0_1 |) in
                    let γ2_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_1,
                        "halo2_proofs::dev::Value::Real",
                        0
                      |) in
                    let __arg1_0 := M.alloc (| γ2_0 |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::cmp::PartialOrd",
                          F,
                          [ F ],
                          "partial_cmp",
                          []
                        |),
                        [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::cmp::PartialOrd",
                          Ty.path "isize",
                          [ Ty.path "isize" ],
                          "partial_cmp",
                          []
                        |),
                        [ __self_tag; __arg1_tag ]
                      |)
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::cmp::PartialOrd"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("partial_cmp", InstanceField.Method (partial_cmp F)) ].
  End Impl_core_cmp_PartialOrd_where_core_cmp_PartialOrd_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
  
  Module Impl_core_convert_From_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_halo2_proofs_dev_CellValue_F_for_halo2_proofs_dev_Value_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ].
    
    (*
        fn from(value: CellValue<F>) -> Self {
            match value {
                // Cells that haven't been explicitly assigned to, default to zero.
                CellValue::Unassigned => Value::Real(F::zero()),
                CellValue::Assigned(v) => Value::Real(v),
                CellValue::Poison(_) => Value::Poison,
            }
        }
    *)
    Definition from (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ value ] =>
        ltac:(M.monadic
          (let value := M.alloc (| value |) in
          M.read (|
            M.match_operator (|
              value,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (|
                      Value.StructTuple
                        "halo2_proofs::dev::Value::Real"
                        [
                          M.call_closure (|
                            M.get_trait_method (| "ff::Field", F, [], "zero", [] |),
                            []
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "halo2_proofs::dev::CellValue::Assigned",
                        0
                      |) in
                    let v := M.copy (| γ0_0 |) in
                    M.alloc (|
                      Value.StructTuple "halo2_proofs::dev::Value::Real" [ M.read (| v |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "halo2_proofs::dev::CellValue::Poison",
                        0
                      |) in
                    M.alloc (| Value.StructTuple "halo2_proofs::dev::Value::Poison" [] |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::From"
        (Self F)
        (* Trait polymorphic types *)
        [ (* T *) Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ] ]
        (* Instance *) [ ("from", InstanceField.Method (from F)) ].
  End Impl_core_convert_From_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_halo2_proofs_dev_CellValue_F_for_halo2_proofs_dev_Value_F.
  
  Module Impl_core_ops_arith_Neg_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ].
    
    (*     type Output = Self; *)
    Definition _Output (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ].
    
    (*
        fn neg(self) -> Self::Output {
            match self {
                Value::Real(a) => Value::Real(-a),
                _ => Value::Poison,
            }
        }
    *)
    Definition neg (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "halo2_proofs::dev::Value::Real",
                        0
                      |) in
                    let a := M.copy (| γ0_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "halo2_proofs::dev::Value::Real"
                        [
                          M.call_closure (|
                            M.get_trait_method (| "core::ops::arith::Neg", F, [], "neg", [] |),
                            [ M.read (| a |) ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (| Value.StructTuple "halo2_proofs::dev::Value::Poison" [] |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::Neg"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("Output", InstanceField.Ty (_Output F)); ("neg", InstanceField.Method (neg F)) ].
  End Impl_core_ops_arith_Neg_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
  
  Module Impl_core_ops_arith_Add_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ].
    
    (*     type Output = Self; *)
    Definition _Output (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ].
    
    (*
        fn add(self, rhs: Self) -> Self::Output {
            match (self, rhs) {
                (Value::Real(a), Value::Real(b)) => Value::Real(a + b),
                _ => Value::Poison,
            }
        }
    *)
    Definition add (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.match_operator (|
              M.alloc (| Value.Tuple [ M.read (| self |); M.read (| rhs |) ] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_0,
                        "halo2_proofs::dev::Value::Real",
                        0
                      |) in
                    let a := M.copy (| γ1_0 |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_1,
                        "halo2_proofs::dev::Value::Real",
                        0
                      |) in
                    let b := M.copy (| γ1_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "halo2_proofs::dev::Value::Real"
                        [
                          M.call_closure (|
                            M.get_trait_method (| "core::ops::arith::Add", F, [ F ], "add", [] |),
                            [ M.read (| a |); M.read (| b |) ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (| Value.StructTuple "halo2_proofs::dev::Value::Poison" [] |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::Add"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("Output", InstanceField.Ty (_Output F)); ("add", InstanceField.Method (add F)) ].
  End Impl_core_ops_arith_Add_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
  
  Module Impl_core_ops_arith_Mul_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ].
    
    (*     type Output = Self; *)
    Definition _Output (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ].
    
    (*
        fn mul(self, rhs: Self) -> Self::Output {
            match (self, rhs) {
                (Value::Real(a), Value::Real(b)) => Value::Real(a * b),
                // If poison is multiplied by zero, then we treat the poison as unconstrained
                // and we don't propagate it.
                (Value::Real(x), Value::Poison) | (Value::Poison, Value::Real(x))
                    if x.is_zero_vartime() =>
                {
                    Value::Real(F::zero())
                }
                _ => Value::Poison,
            }
        }
    *)
    Definition mul (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.match_operator (|
              M.alloc (| Value.Tuple [ M.read (| self |); M.read (| rhs |) ] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_0,
                        "halo2_proofs::dev::Value::Real",
                        0
                      |) in
                    let a := M.copy (| γ1_0 |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ0_1,
                        "halo2_proofs::dev::Value::Real",
                        0
                      |) in
                    let b := M.copy (| γ1_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "halo2_proofs::dev::Value::Real"
                        [
                          M.call_closure (|
                            M.get_trait_method (| "core::ops::arith::Mul", F, [ F ], "mul", [] |),
                            [ M.read (| a |); M.read (| b |) ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.find_or_pattern (|
                      γ,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_0,
                                "halo2_proofs::dev::Value::Real",
                                0
                              |) in
                            let x := M.copy (| γ1_0 |) in
                            Value.Tuple [ x ]));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ0_1,
                                "halo2_proofs::dev::Value::Real",
                                0
                              |) in
                            let x := M.copy (| γ1_0 |) in
                            Value.Tuple [ x ]))
                      ],
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ x ] =>
                              let γ :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "ff::Field",
                                      F,
                                      [],
                                      "is_zero_vartime",
                                      []
                                    |),
                                    [ x ]
                                  |)
                                |) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (|
                                Value.StructTuple
                                  "halo2_proofs::dev::Value::Real"
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (| "ff::Field", F, [], "zero", [] |),
                                      []
                                    |)
                                  ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (| Value.StructTuple "halo2_proofs::dev::Value::Poison" [] |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::Mul"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("Output", InstanceField.Ty (_Output F)); ("mul", InstanceField.Method (mul F)) ].
  End Impl_core_ops_arith_Mul_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_Value_F.
  
  Module Impl_core_ops_arith_Mul_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_F_for_halo2_proofs_dev_Value_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ].
    
    (*     type Output = Self; *)
    Definition _Output (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::Value") [ F ].
    
    (*
        fn mul(self, rhs: F) -> Self::Output {
            match self {
                Value::Real(lhs) => Value::Real(lhs * rhs),
                // If poison is multiplied by zero, then we treat the poison as unconstrained
                // and we don't propagate it.
                Value::Poison if rhs.is_zero_vartime() => Value::Real(F::zero()),
                _ => Value::Poison,
            }
        }
    *)
    Definition mul (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self; rhs ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let rhs := M.alloc (| rhs |) in
          M.read (|
            M.match_operator (|
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "halo2_proofs::dev::Value::Real",
                        0
                      |) in
                    let lhs := M.copy (| γ0_0 |) in
                    M.alloc (|
                      Value.StructTuple
                        "halo2_proofs::dev::Value::Real"
                        [
                          M.call_closure (|
                            M.get_trait_method (| "core::ops::arith::Mul", F, [ F ], "mul", [] |),
                            [ M.read (| lhs |); M.read (| rhs |) ]
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (| "ff::Field", F, [], "is_zero_vartime", [] |),
                          [ rhs ]
                        |)
                      |) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      Value.StructTuple
                        "halo2_proofs::dev::Value::Real"
                        [
                          M.call_closure (|
                            M.get_trait_method (| "ff::Field", F, [], "zero", [] |),
                            []
                          |)
                        ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.alloc (| Value.StructTuple "halo2_proofs::dev::Value::Poison" [] |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::ops::arith::Mul"
        (Self F)
        (* Trait polymorphic types *) [ (* Rhs *) F ]
        (* Instance *)
        [ ("Output", InstanceField.Ty (_Output F)); ("mul", InstanceField.Method (mul F)) ].
  End Impl_core_ops_arith_Mul_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_F_for_halo2_proofs_dev_Value_F.
  
  (* StructRecord
    {
      name := "MockProver";
      ty_params := [ "F" ];
      fields :=
        [
          ("k", Ty.path "u32");
          ("n", Ty.path "u32");
          ("cs", Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ]);
          ("regions",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "halo2_proofs::dev::Region"; Ty.path "alloc::alloc::Global" ]);
          ("current_region",
            Ty.apply
              (Ty.path "core::option::Option")
              [
                Ty.tuple
                  [
                    Ty.path "halo2_proofs::dev::Region";
                    Ty.apply (Ty.path "std::sync::mutex::MutexGuard") [ Ty.tuple [] ]
                  ]
              ]);
          ("fixed",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ];
                    Ty.path "alloc::alloc::Global"
                  ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("advice",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ];
                    Ty.path "alloc::alloc::Global"
                  ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("instance",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply (Ty.path "alloc::vec::Vec") [ F; Ty.path "alloc::alloc::Global" ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("selectors",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("permutation", Ty.path "halo2_proofs::plonk::permutation::keygen::ParallelAssembly");
          ("usable_rows", Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_MockProver_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ].
    
    (* Debug *)
    Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            let names :=
              M.alloc (|
                M.alloc (|
                  Value.Array
                    [
                      M.read (| Value.String "k" |);
                      M.read (| Value.String "n" |);
                      M.read (| Value.String "cs" |);
                      M.read (| Value.String "regions" |);
                      M.read (| Value.String "current_region" |);
                      M.read (| Value.String "fixed" |);
                      M.read (| Value.String "advice" |);
                      M.read (| Value.String "instance" |);
                      M.read (| Value.String "selectors" |);
                      M.read (| Value.String "permutation" |);
                      M.read (| Value.String "usable_rows" |)
                    ]
                |)
              |) in
            let values :=
              M.alloc (|
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    Value.Array
                      [
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::dev::MockProver",
                            "k"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::dev::MockProver",
                            "n"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::dev::MockProver",
                            "cs"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::dev::MockProver",
                            "regions"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::dev::MockProver",
                            "current_region"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::dev::MockProver",
                            "fixed"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::dev::MockProver",
                            "advice"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::dev::MockProver",
                            "instance"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::dev::MockProver",
                            "selectors"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::dev::MockProver",
                            "permutation"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.alloc (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::dev::MockProver",
                              "usable_rows"
                            |)
                          |))
                      ]
                  |))
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_fields_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "MockProver" |);
                  (* Unsize *) M.pointer_coercion (M.read (| names |));
                  M.read (| values |)
                ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_MockProver_F.
  
  (* StructRecord
    {
      name := "MockVerifier";
      ty_params := [ "F" ];
      fields :=
        [
          ("n", Ty.path "u32");
          ("cs", Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ]);
          ("regions",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [ Ty.path "halo2_proofs::dev::Region"; Ty.path "alloc::alloc::Global" ]);
          ("fixed",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ];
                    Ty.path "alloc::alloc::Global"
                  ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("advice",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ];
                    Ty.path "alloc::alloc::Global"
                  ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("instance",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply (Ty.path "alloc::vec::Vec") [ F; Ty.path "alloc::alloc::Global" ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("permutation", Ty.path "halo2_proofs::plonk::permutation::keygen::Assembly");
          ("usable_rows", Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_MockVerifier_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::MockVerifier") [ F ].
    
    (* Debug *)
    Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            let names :=
              M.alloc (|
                M.alloc (|
                  Value.Array
                    [
                      M.read (| Value.String "n" |);
                      M.read (| Value.String "cs" |);
                      M.read (| Value.String "regions" |);
                      M.read (| Value.String "fixed" |);
                      M.read (| Value.String "advice" |);
                      M.read (| Value.String "instance" |);
                      M.read (| Value.String "permutation" |);
                      M.read (| Value.String "usable_rows" |)
                    ]
                |)
              |) in
            let values :=
              M.alloc (|
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    Value.Array
                      [
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::dev::MockVerifier",
                            "n"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::dev::MockVerifier",
                            "cs"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::dev::MockVerifier",
                            "regions"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::dev::MockVerifier",
                            "fixed"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::dev::MockVerifier",
                            "advice"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::dev::MockVerifier",
                            "instance"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::dev::MockVerifier",
                            "permutation"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.alloc (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::dev::MockVerifier",
                              "usable_rows"
                            |)
                          |))
                      ]
                  |))
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_fields_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "MockVerifier" |);
                  (* Unsize *) M.pointer_coercion (M.read (| names |));
                  M.read (| values |)
                ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_for_halo2_proofs_dev_MockVerifier_F.
  
  Module Impl_core_convert_Into_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_halo2_proofs_dev_MockVerifier_F_for_halo2_proofs_dev_MockProver_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ].
    
    (*
        fn into(self) -> MockVerifier<F> {
            MockVerifier {
                n: self.n,
                cs: self.cs,
                regions: self.regions,
                fixed: self.fixed,
                advice: self.advice,
                instance: self.instance,
                permutation: self.permutation.into(),
                usable_rows: self.usable_rows,
            }
        }
    *)
    Definition into (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "halo2_proofs::dev::MockVerifier"
            [
              ("n",
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "halo2_proofs::dev::MockProver",
                    "n"
                  |)
                |));
              ("cs",
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "halo2_proofs::dev::MockProver",
                    "cs"
                  |)
                |));
              ("regions",
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "halo2_proofs::dev::MockProver",
                    "regions"
                  |)
                |));
              ("fixed",
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "halo2_proofs::dev::MockProver",
                    "fixed"
                  |)
                |));
              ("advice",
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "halo2_proofs::dev::MockProver",
                    "advice"
                  |)
                |));
              ("instance",
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "halo2_proofs::dev::MockProver",
                    "instance"
                  |)
                |));
              ("permutation",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::convert::Into",
                    Ty.path "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                    [ Ty.path "halo2_proofs::plonk::permutation::keygen::Assembly" ],
                    "into",
                    []
                  |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        self,
                        "halo2_proofs::dev::MockProver",
                        "permutation"
                      |)
                    |)
                  ]
                |));
              ("usable_rows",
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "halo2_proofs::dev::MockProver",
                    "usable_rows"
                  |)
                |))
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "core::convert::Into"
        (Self F)
        (* Trait polymorphic types *)
        [ (* T *) Ty.apply (Ty.path "halo2_proofs::dev::MockVerifier") [ F ] ]
        (* Instance *) [ ("into", InstanceField.Method (into F)) ].
  End Impl_core_convert_Into_where_pairing_bn256_arithmetic_Group_F_where_ff_Field_F_halo2_proofs_dev_MockVerifier_F_for_halo2_proofs_dev_MockProver_F.
  
  Module Impl_halo2_proofs_plonk_circuit_Assignment_where_ff_Field_F_where_pairing_bn256_arithmetic_Group_F_F_for_halo2_proofs_parallel_Parallel_halo2_proofs_dev_MockProver_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "halo2_proofs::parallel::Parallel")
        [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ].
    
    (*
        fn is_in_prove_mode(&self) -> bool {
            false
        }
    *)
    Definition is_in_prove_mode (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.Bool false))
      | _, _ => M.impossible
      end.
    
    (*
        fn enter_region<NR, N>(&self, name: N)
        where
            NR: Into<String>,
            N: FnOnce() -> NR,
        {
            let region_lock = REGION_LOCK.lock().unwrap();
    
            let mut prover = self.lock().unwrap();
    
            assert!(prover.current_region.is_none());
            prover.current_region = Some((
                Region {
                    name: name().into(),
                    columns: HashSet::default(),
                    rows: None,
                    enabled_selectors: HashMap::default(),
                    cells: HashMap::default(),
                },
                region_lock,
            ));
        }
    *)
    Definition enter_region (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [ NR; N ], [ self; name ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let name := M.alloc (| name |) in
          M.read (|
            let region_lock :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [
                        Ty.apply (Ty.path "std::sync::mutex::MutexGuard") [ Ty.tuple [] ];
                        Ty.apply
                          (Ty.path "std::sync::poison::PoisonError")
                          [ Ty.apply (Ty.path "std::sync::mutex::MutexGuard") [ Ty.tuple [] ] ]
                      ],
                    "unwrap",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "std::sync::mutex::Mutex") [ Ty.tuple [] ],
                        "lock",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::deref::Deref",
                            Ty.path "halo2_proofs::dev::REGION_LOCK",
                            [],
                            "deref",
                            []
                          |),
                          [ M.read (| M.get_constant (| "halo2_proofs::dev::REGION_LOCK" |) |) ]
                        |)
                      ]
                    |)
                  ]
                |)
              |) in
            let prover :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [
                        Ty.apply
                          (Ty.path "std::sync::mutex::MutexGuard")
                          [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ];
                        Ty.apply
                          (Ty.path "std::sync::poison::PoisonError")
                          [
                            Ty.apply
                              (Ty.path "std::sync::mutex::MutexGuard")
                              [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ]
                          ]
                      ],
                    "unwrap",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "halo2_proofs::parallel::Parallel")
                          [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ],
                        "lock",
                        []
                      |),
                      [ M.read (| self |) ]
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.Pure.not
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "halo2_proofs::dev::Region";
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::MutexGuard")
                                            [ Ty.tuple [] ]
                                        ]
                                    ],
                                  "is_none",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::MutexGuard")
                                          [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ]
                                          ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [ prover ]
                                    |),
                                    "halo2_proofs::dev::MockProver",
                                    "current_region"
                                  |)
                                ]
                              |))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            M.get_function (| "core::panicking::panic", [] |),
                            [
                              M.read (|
                                Value.String "assertion failed: prover.current_region.is_none()"
                              |)
                            ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let _ :=
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::deref::DerefMut",
                      Ty.apply
                        (Ty.path "std::sync::mutex::MutexGuard")
                        [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ],
                      [],
                      "deref_mut",
                      []
                    |),
                    [ prover ]
                  |),
                  "halo2_proofs::dev::MockProver",
                  "current_region"
                |),
                Value.StructTuple
                  "core::option::Option::Some"
                  [
                    Value.Tuple
                      [
                        Value.StructRecord
                          "halo2_proofs::dev::Region"
                          [
                            ("name",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::convert::Into",
                                  NR,
                                  [ Ty.path "alloc::string::String" ],
                                  "into",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::function::FnOnce",
                                      N,
                                      [ Ty.tuple [] ],
                                      "call_once",
                                      []
                                    |),
                                    [ M.read (| name |); Value.Tuple [] ]
                                  |)
                                ]
                              |));
                            ("columns",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::default::Default",
                                  Ty.apply
                                    (Ty.path "std::collections::hash::set::HashSet")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                                      Ty.path "std::hash::random::RandomState"
                                    ],
                                  [],
                                  "default",
                                  []
                                |),
                                []
                              |));
                            ("rows", Value.StructTuple "core::option::Option::None" []);
                            ("enabled_selectors",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::default::Default",
                                  Ty.apply
                                    (Ty.path "std::collections::hash::map::HashMap")
                                    [
                                      Ty.path "halo2_proofs::plonk::circuit::Selector";
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "std::hash::random::RandomState"
                                    ],
                                  [],
                                  "default",
                                  []
                                |),
                                []
                              |));
                            ("cells",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::default::Default",
                                  Ty.apply
                                    (Ty.path "std::collections::hash::map::HashMap")
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                                            [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                                          Ty.path "usize"
                                        ];
                                      Ty.path "usize";
                                      Ty.path "std::hash::random::RandomState"
                                    ],
                                  [],
                                  "default",
                                  []
                                |),
                                []
                              |))
                          ];
                        M.read (| region_lock |)
                      ]
                  ]
              |) in
            M.alloc (| Value.Tuple [] |)
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn exit_region(&self) {
            let mut prover = self.lock().unwrap();
    
            let (region, _) = prover.current_region.take().unwrap();
            prover.regions.push(region);
        }
    *)
    Definition exit_region (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (|
            let prover :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [
                        Ty.apply
                          (Ty.path "std::sync::mutex::MutexGuard")
                          [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ];
                        Ty.apply
                          (Ty.path "std::sync::poison::PoisonError")
                          [
                            Ty.apply
                              (Ty.path "std::sync::mutex::MutexGuard")
                              [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ]
                          ]
                      ],
                    "unwrap",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "halo2_proofs::parallel::Parallel")
                          [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ],
                        "lock",
                        []
                      |),
                      [ M.read (| self |) ]
                    |)
                  ]
                |)
              |) in
            M.match_operator (|
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      [
                        Ty.tuple
                          [
                            Ty.path "halo2_proofs::dev::Region";
                            Ty.apply (Ty.path "std::sync::mutex::MutexGuard") [ Ty.tuple [] ]
                          ]
                      ],
                    "unwrap",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          [
                            Ty.tuple
                              [
                                Ty.path "halo2_proofs::dev::Region";
                                Ty.apply (Ty.path "std::sync::mutex::MutexGuard") [ Ty.tuple [] ]
                              ]
                          ],
                        "take",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::DerefMut",
                              Ty.apply
                                (Ty.path "std::sync::mutex::MutexGuard")
                                [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ],
                              [],
                              "deref_mut",
                              []
                            |),
                            [ prover ]
                          |),
                          "halo2_proofs::dev::MockProver",
                          "current_region"
                        |)
                      ]
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let region := M.copy (| γ0_0 |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.path "halo2_proofs::dev::Region"; Ty.path "alloc::alloc::Global"
                              ],
                            "push",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::DerefMut",
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::MutexGuard")
                                    [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ],
                                  [],
                                  "deref_mut",
                                  []
                                |),
                                [ prover ]
                              |),
                              "halo2_proofs::dev::MockProver",
                              "regions"
                            |);
                            M.read (| region |)
                          ]
                        |)
                      |) in
                    M.alloc (| Value.Tuple [] |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn enable_selector<A, AR>(&self, _: A, selector: &Selector, row: usize) -> Result<(), Error>
        where
            A: FnOnce() -> AR,
            AR: Into<String>,
        {
            let mut prover = self.lock().unwrap();
    
            if !prover.usable_rows.contains(&row) {
                return Err(Error::not_enough_rows_available(prover.k));
            }
    
            // Track that this selector was enabled. We require that all selectors are enabled
            // inside some region (i.e. no floating selectors).
            prover
                .current_region
                .as_mut()
                .unwrap()
                .0
                .enabled_selectors
                .entry( *selector)
                .or_default()
                .push(row);
    
            prover.selectors[selector.0][row] = true;
    
            Ok(())
        }
    *)
    Definition enable_selector (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [ A; AR ], [ self; β1; selector; row ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let β1 := M.alloc (| β1 |) in
          let selector := M.alloc (| selector |) in
          let row := M.alloc (| row |) in
          M.match_operator (|
            β1,
            [
              fun γ =>
                ltac:(M.monadic
                  (M.catch_return (|
                    ltac:(M.monadic
                      (M.read (|
                        let prover :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::MutexGuard")
                                      [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ];
                                    Ty.apply
                                      (Ty.path "std::sync::poison::PoisonError")
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::MutexGuard")
                                          [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ]
                                          ]
                                      ]
                                  ],
                                "unwrap",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "halo2_proofs::parallel::Parallel")
                                      [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ],
                                    "lock",
                                    []
                                  |),
                                  [ M.read (| self |) ]
                                |)
                              ]
                            |)
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.Pure.not
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                [ Ty.path "usize" ],
                                              "contains",
                                              [ Ty.path "usize" ]
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path "std::sync::mutex::MutexGuard")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::dev::MockProver")
                                                          [ F ]
                                                      ],
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [ prover ]
                                                |),
                                                "halo2_proofs::dev::MockProver",
                                                "usable_rows"
                                              |);
                                              row
                                            ]
                                          |))
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          Value.StructTuple
                                            "core::result::Result::Err"
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::plonk::error::Error",
                                                  "not_enough_rows_available",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::deref::Deref",
                                                          Ty.apply
                                                            (Ty.path "std::sync::mutex::MutexGuard")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::dev::MockProver")
                                                                [ F ]
                                                            ],
                                                          [],
                                                          "deref",
                                                          []
                                                        |),
                                                        [ prover ]
                                                      |),
                                                      "halo2_proofs::dev::MockProver",
                                                      "k"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let _ :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                "push",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "std::collections::hash::map::Entry")
                                      [
                                        Ty.path "halo2_proofs::plonk::circuit::Selector";
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                      ],
                                    "or_default",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "std::collections::hash::map::HashMap")
                                          [
                                            Ty.path "halo2_proofs::plonk::circuit::Selector";
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                                            Ty.path "std::hash::random::RandomState"
                                          ],
                                        "entry",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.SubPointer.get_tuple_field (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.path "halo2_proofs::dev::Region";
                                                            Ty.apply
                                                              (Ty.path
                                                                "std::sync::mutex::MutexGuard")
                                                              [ Ty.tuple [] ]
                                                          ]
                                                      ]
                                                  ],
                                                "unwrap",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.path "halo2_proofs::dev::Region";
                                                            Ty.apply
                                                              (Ty.path
                                                                "std::sync::mutex::MutexGuard")
                                                              [ Ty.tuple [] ]
                                                          ]
                                                      ],
                                                    "as_mut",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::deref::DerefMut",
                                                          Ty.apply
                                                            (Ty.path "std::sync::mutex::MutexGuard")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::dev::MockProver")
                                                                [ F ]
                                                            ],
                                                          [],
                                                          "deref_mut",
                                                          []
                                                        |),
                                                        [ prover ]
                                                      |),
                                                      "halo2_proofs::dev::MockProver",
                                                      "current_region"
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |),
                                            0
                                          |),
                                          "halo2_proofs::dev::Region",
                                          "enabled_selectors"
                                        |);
                                        M.read (| M.read (| selector |) |)
                                      ]
                                    |)
                                  ]
                                |);
                                M.read (| row |)
                              ]
                            |)
                          |) in
                        let _ :=
                          M.write (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::index::IndexMut",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ],
                                [ Ty.path "usize" ],
                                "index_mut",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::index::IndexMut",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [ Ty.path "usize" ],
                                    "index_mut",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::DerefMut",
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::MutexGuard")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::dev::MockProver")
                                                [ F ]
                                            ],
                                          [],
                                          "deref_mut",
                                          []
                                        |),
                                        [ prover ]
                                      |),
                                      "halo2_proofs::dev::MockProver",
                                      "selectors"
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_tuple_field (|
                                        M.read (| selector |),
                                        "halo2_proofs::plonk::circuit::Selector",
                                        0
                                      |)
                                    |)
                                  ]
                                |);
                                M.read (| row |)
                              ]
                            |),
                            Value.Bool true
                          |) in
                        M.alloc (|
                          Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                        |)
                      |)))
                  |)))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn query_instance(&self, column: Column<Instance>, row: usize) -> Result<Option<F>, Error> {
            let prover = self.lock().unwrap();
    
            if !prover.usable_rows.contains(&row) {
                return Err(Error::not_enough_rows_available(prover.k));
            }
    
            prover
                .instance
                .get(column.index())
                .and_then(|column| column.get(row))
                .map(|v| Some( *v))
                .ok_or(Error::BoundsFailure)
        }
    *)
    Definition query_instance (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self; column; row ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let column := M.alloc (| column |) in
          let row := M.alloc (| row |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let prover :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [
                            Ty.apply
                              (Ty.path "std::sync::mutex::MutexGuard")
                              [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ];
                            Ty.apply
                              (Ty.path "std::sync::poison::PoisonError")
                              [
                                Ty.apply
                                  (Ty.path "std::sync::mutex::MutexGuard")
                                  [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ]
                              ]
                          ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::parallel::Parallel")
                              [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ],
                            "lock",
                            []
                          |),
                          [ M.read (| self |) ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.Pure.not
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        [ Ty.path "usize" ],
                                      "contains",
                                      [ Ty.path "usize" ]
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "std::sync::mutex::MutexGuard")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::dev::MockProver")
                                                  [ F ]
                                              ],
                                            [],
                                            "deref",
                                            []
                                          |),
                                          [ prover ]
                                        |),
                                        "halo2_proofs::dev::MockProver",
                                        "usable_rows"
                                      |);
                                      row
                                    ]
                                  |))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "halo2_proofs::plonk::error::Error",
                                          "not_enough_rows_available",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "std::sync::mutex::MutexGuard")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::dev::MockProver")
                                                        [ F ]
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [ prover ]
                                              |),
                                              "halo2_proofs::dev::MockProver",
                                              "k"
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [ Ty.apply (Ty.path "core::option::Option") [ F ] ],
                      "ok_or",
                      [ Ty.path "halo2_proofs::plonk::error::Error" ]
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            [ Ty.apply (Ty.path "&") [ F ] ],
                          "map",
                          [
                            Ty.apply (Ty.path "core::option::Option") [ F ];
                            Ty.function
                              [ Ty.tuple [ Ty.apply (Ty.path "&") [ F ] ] ]
                              (Ty.apply (Ty.path "core::option::Option") [ F ])
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ F; Ty.path "alloc::alloc::Global" ]
                                    ]
                                ],
                              "and_then",
                              [
                                Ty.apply (Ty.path "&") [ F ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "core::option::Option")
                                    [ Ty.apply (Ty.path "&") [ F ] ])
                              ]
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ F; Ty.path "alloc::alloc::Global" ]
                                    ],
                                  "get",
                                  [ Ty.path "usize" ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ F; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "std::sync::mutex::MutexGuard")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::dev::MockProver")
                                                  [ F ]
                                              ],
                                            [],
                                            "deref",
                                            []
                                          |),
                                          [ prover ]
                                        |),
                                        "halo2_proofs::dev::MockProver",
                                        "instance"
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Instance" ],
                                      "index",
                                      []
                                    |),
                                    [ column ]
                                  |)
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      M.match_operator (|
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let column := M.copy (| γ |) in
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [ F ],
                                                  "get",
                                                  [ Ty.path "usize" ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [ F; Ty.path "alloc::alloc::Global" ],
                                                      [],
                                                      "deref",
                                                      []
                                                    |),
                                                    [ M.read (| column |) ]
                                                  |);
                                                  M.read (| row |)
                                                ]
                                              |)))
                                        ]
                                      |)
                                    | _ => M.impossible (||)
                                    end))
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let v := M.copy (| γ |) in
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            [ M.read (| M.read (| v |) |) ]))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |);
                      Value.StructTuple "halo2_proofs::plonk::error::Error::BoundsFailure" []
                    ]
                  |)
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn assign_advice<V, VR, A, AR>(
            &self,
            _: A,
            column: Column<Advice>,
            row: usize,
            to: V,
        ) -> Result<(), Error>
        where
            V: FnOnce() -> Result<VR, Error>,
            VR: Into<Assigned<F>>,
            A: FnOnce() -> AR,
            AR: Into<String>,
        {
            let mut prover = self.lock().unwrap();
    
            if !prover.usable_rows.contains(&row) {
                return Err(Error::not_enough_rows_available(prover.k));
            }
    
            if let Some((region, _)) = prover.current_region.as_mut() {
                region.update_extent(column.into(), row);
                region.track_cell(column.into(), row);
            }
    
            *prover
                .advice
                .get_mut(column.index())
                .and_then(|v| v.get_mut(row))
                .ok_or(Error::BoundsFailure)? = CellValue::Assigned(to()?.into().evaluate());
    
            Ok(())
        }
    *)
    Definition assign_advice (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [ V; VR; A; AR ], [ self; β1; column; row; to ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let β1 := M.alloc (| β1 |) in
          let column := M.alloc (| column |) in
          let row := M.alloc (| row |) in
          let to := M.alloc (| to |) in
          M.match_operator (|
            β1,
            [
              fun γ =>
                ltac:(M.monadic
                  (M.catch_return (|
                    ltac:(M.monadic
                      (M.read (|
                        let prover :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::MutexGuard")
                                      [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ];
                                    Ty.apply
                                      (Ty.path "std::sync::poison::PoisonError")
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::MutexGuard")
                                          [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ]
                                          ]
                                      ]
                                  ],
                                "unwrap",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "halo2_proofs::parallel::Parallel")
                                      [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ],
                                    "lock",
                                    []
                                  |),
                                  [ M.read (| self |) ]
                                |)
                              ]
                            |)
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.Pure.not
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                [ Ty.path "usize" ],
                                              "contains",
                                              [ Ty.path "usize" ]
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path "std::sync::mutex::MutexGuard")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::dev::MockProver")
                                                          [ F ]
                                                      ],
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [ prover ]
                                                |),
                                                "halo2_proofs::dev::MockProver",
                                                "usable_rows"
                                              |);
                                              row
                                            ]
                                          |))
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          Value.StructTuple
                                            "core::result::Result::Err"
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::plonk::error::Error",
                                                  "not_enough_rows_available",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::deref::Deref",
                                                          Ty.apply
                                                            (Ty.path "std::sync::mutex::MutexGuard")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::dev::MockProver")
                                                                [ F ]
                                                            ],
                                                          [],
                                                          "deref",
                                                          []
                                                        |),
                                                        [ prover ]
                                                      |),
                                                      "halo2_proofs::dev::MockProver",
                                                      "k"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "halo2_proofs::dev::Region";
                                                  Ty.apply
                                                    (Ty.path "std::sync::mutex::MutexGuard")
                                                    [ Ty.tuple [] ]
                                                ]
                                            ],
                                          "as_mut",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::DerefMut",
                                                Ty.apply
                                                  (Ty.path "std::sync::mutex::MutexGuard")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::dev::MockProver")
                                                      [ F ]
                                                  ],
                                                [],
                                                "deref_mut",
                                                []
                                              |),
                                              [ prover ]
                                            |),
                                            "halo2_proofs::dev::MockProver",
                                            "current_region"
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let γ0_0 := M.read (| γ0_0 |) in
                                  let γ2_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                  let γ2_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                  let region := M.alloc (| γ2_0 |) in
                                  let _ :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "halo2_proofs::dev::Region",
                                          "update_extent",
                                          []
                                        |),
                                        [
                                          M.read (| region |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::Into",
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                [ Ty.path "halo2_proofs::plonk::circuit::Advice" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                  [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                              ],
                                              "into",
                                              []
                                            |),
                                            [ M.read (| column |) ]
                                          |);
                                          M.read (| row |)
                                        ]
                                      |)
                                    |) in
                                  let _ :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "halo2_proofs::dev::Region",
                                          "track_cell",
                                          []
                                        |),
                                        [
                                          M.read (| region |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::Into",
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                [ Ty.path "halo2_proofs::plonk::circuit::Advice" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                  [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                              ],
                                              "into",
                                              []
                                            |),
                                            [ M.read (| column |) ]
                                          |);
                                          M.read (| row |)
                                        ]
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let _ :=
                          M.write (|
                            M.read (|
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::dev::CellValue")
                                                [ F ]
                                            ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::dev::CellValue")
                                                    [ F ]
                                                ]
                                            ],
                                          "ok_or",
                                          [ Ty.path "halo2_proofs::plonk::error::Error" ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                [
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "halo2_proofs::dev::CellValue")
                                                            [ F ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ],
                                              "and_then",
                                              [
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::dev::CellValue")
                                                      [ F ]
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::dev::CellValue")
                                                                  [ F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "halo2_proofs::dev::CellValue")
                                                            [ F ]
                                                        ]
                                                    ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "halo2_proofs::dev::CellValue")
                                                            [ F ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  "get_mut",
                                                  [ Ty.path "usize" ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::deref::DerefMut",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::dev::CellValue")
                                                                [ F ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      "deref_mut",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::DerefMut",
                                                            Ty.apply
                                                              (Ty.path
                                                                "std::sync::mutex::MutexGuard")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::dev::MockProver")
                                                                  [ F ]
                                                              ],
                                                            [],
                                                            "deref_mut",
                                                            []
                                                          |),
                                                          [ prover ]
                                                        |),
                                                        "halo2_proofs::dev::MockProver",
                                                        "advice"
                                                      |)
                                                    ]
                                                  |);
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Column")
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::plonk::circuit::Advice"
                                                        ],
                                                      "index",
                                                      []
                                                    |),
                                                    [ column ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let v := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::dev::CellValue")
                                                                        [ F ]
                                                                    ],
                                                                  "get_mut",
                                                                  [ Ty.path "usize" ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::DerefMut",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::dev::CellValue")
                                                                            [ F ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      "deref_mut",
                                                                      []
                                                                    |),
                                                                    [ M.read (| v |) ]
                                                                  |);
                                                                  M.read (| row |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |);
                                          Value.StructTuple
                                            "halo2_proofs::plonk::error::Error::BoundsFailure"
                                            []
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |)
                            |),
                            Value.StructTuple
                              "halo2_proofs::dev::CellValue::Assigned"
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                      [ F ],
                                    "evaluate",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::Into",
                                        VR,
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                            [ F ]
                                        ],
                                        "into",
                                        []
                                      |),
                                      [
                                        M.read (|
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      VR;
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::function::FnOnce",
                                                      V,
                                                      [ Ty.tuple [] ],
                                                      "call_once",
                                                      []
                                                    |),
                                                    [ M.read (| to |); Value.Tuple [] ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                          |) in
                        M.alloc (|
                          Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                        |)
                      |)))
                  |)))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn assign_fixed<V, VR, A, AR>(
            &self,
            _: A,
            column: Column<Fixed>,
            row: usize,
            to: V,
        ) -> Result<(), Error>
        where
            V: FnOnce() -> Result<VR, Error>,
            VR: Into<Assigned<F>>,
            A: FnOnce() -> AR,
            AR: Into<String>,
        {
            let mut prover = self.lock().unwrap();
    
            if !prover.usable_rows.contains(&row) {
                return Err(Error::not_enough_rows_available(prover.k));
            }
    
            if let Some((region, _)) = prover.current_region.as_mut() {
                region.update_extent(column.into(), row);
                region.track_cell(column.into(), row);
            }
    
            *prover
                .fixed
                .get_mut(column.index())
                .and_then(|v| v.get_mut(row))
                .ok_or(Error::BoundsFailure)? = CellValue::Assigned(to()?.into().evaluate());
    
            Ok(())
        }
    *)
    Definition assign_fixed (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [ V; VR; A; AR ], [ self; β1; column; row; to ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let β1 := M.alloc (| β1 |) in
          let column := M.alloc (| column |) in
          let row := M.alloc (| row |) in
          let to := M.alloc (| to |) in
          M.match_operator (|
            β1,
            [
              fun γ =>
                ltac:(M.monadic
                  (M.catch_return (|
                    ltac:(M.monadic
                      (M.read (|
                        let prover :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::MutexGuard")
                                      [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ];
                                    Ty.apply
                                      (Ty.path "std::sync::poison::PoisonError")
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::MutexGuard")
                                          [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ]
                                          ]
                                      ]
                                  ],
                                "unwrap",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "halo2_proofs::parallel::Parallel")
                                      [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ],
                                    "lock",
                                    []
                                  |),
                                  [ M.read (| self |) ]
                                |)
                              ]
                            |)
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.Pure.not
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                [ Ty.path "usize" ],
                                              "contains",
                                              [ Ty.path "usize" ]
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path "std::sync::mutex::MutexGuard")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::dev::MockProver")
                                                          [ F ]
                                                      ],
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [ prover ]
                                                |),
                                                "halo2_proofs::dev::MockProver",
                                                "usable_rows"
                                              |);
                                              row
                                            ]
                                          |))
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          Value.StructTuple
                                            "core::result::Result::Err"
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::plonk::error::Error",
                                                  "not_enough_rows_available",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::deref::Deref",
                                                          Ty.apply
                                                            (Ty.path "std::sync::mutex::MutexGuard")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::dev::MockProver")
                                                                [ F ]
                                                            ],
                                                          [],
                                                          "deref",
                                                          []
                                                        |),
                                                        [ prover ]
                                                      |),
                                                      "halo2_proofs::dev::MockProver",
                                                      "k"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "halo2_proofs::dev::Region";
                                                  Ty.apply
                                                    (Ty.path "std::sync::mutex::MutexGuard")
                                                    [ Ty.tuple [] ]
                                                ]
                                            ],
                                          "as_mut",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::DerefMut",
                                                Ty.apply
                                                  (Ty.path "std::sync::mutex::MutexGuard")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::dev::MockProver")
                                                      [ F ]
                                                  ],
                                                [],
                                                "deref_mut",
                                                []
                                              |),
                                              [ prover ]
                                            |),
                                            "halo2_proofs::dev::MockProver",
                                            "current_region"
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let γ0_0 := M.read (| γ0_0 |) in
                                  let γ2_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                  let γ2_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                  let region := M.alloc (| γ2_0 |) in
                                  let _ :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "halo2_proofs::dev::Region",
                                          "update_extent",
                                          []
                                        |),
                                        [
                                          M.read (| region |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::Into",
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                  [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                              ],
                                              "into",
                                              []
                                            |),
                                            [ M.read (| column |) ]
                                          |);
                                          M.read (| row |)
                                        ]
                                      |)
                                    |) in
                                  let _ :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "halo2_proofs::dev::Region",
                                          "track_cell",
                                          []
                                        |),
                                        [
                                          M.read (| region |);
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::convert::Into",
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                  [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                              ],
                                              "into",
                                              []
                                            |),
                                            [ M.read (| column |) ]
                                          |);
                                          M.read (| row |)
                                        ]
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let _ :=
                          M.write (|
                            M.read (|
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::dev::CellValue")
                                                [ F ]
                                            ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::dev::CellValue")
                                                    [ F ]
                                                ]
                                            ],
                                          "ok_or",
                                          [ Ty.path "halo2_proofs::plonk::error::Error" ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                [
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "halo2_proofs::dev::CellValue")
                                                            [ F ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ],
                                              "and_then",
                                              [
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::dev::CellValue")
                                                      [ F ]
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::dev::CellValue")
                                                                  [ F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "halo2_proofs::dev::CellValue")
                                                            [ F ]
                                                        ]
                                                    ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "halo2_proofs::dev::CellValue")
                                                            [ F ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  "get_mut",
                                                  [ Ty.path "usize" ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::deref::DerefMut",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::dev::CellValue")
                                                                [ F ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      "deref_mut",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::DerefMut",
                                                            Ty.apply
                                                              (Ty.path
                                                                "std::sync::mutex::MutexGuard")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::dev::MockProver")
                                                                  [ F ]
                                                              ],
                                                            [],
                                                            "deref_mut",
                                                            []
                                                          |),
                                                          [ prover ]
                                                        |),
                                                        "halo2_proofs::dev::MockProver",
                                                        "fixed"
                                                      |)
                                                    ]
                                                  |);
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Column")
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::plonk::circuit::Fixed"
                                                        ],
                                                      "index",
                                                      []
                                                    |),
                                                    [ column ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let v := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::dev::CellValue")
                                                                        [ F ]
                                                                    ],
                                                                  "get_mut",
                                                                  [ Ty.path "usize" ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::DerefMut",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::dev::CellValue")
                                                                            [ F ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      "deref_mut",
                                                                      []
                                                                    |),
                                                                    [ M.read (| v |) ]
                                                                  |);
                                                                  M.read (| row |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |);
                                          Value.StructTuple
                                            "halo2_proofs::plonk::error::Error::BoundsFailure"
                                            []
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |)
                            |),
                            Value.StructTuple
                              "halo2_proofs::dev::CellValue::Assigned"
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                      [ F ],
                                    "evaluate",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::convert::Into",
                                        VR,
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                            [ F ]
                                        ],
                                        "into",
                                        []
                                      |),
                                      [
                                        M.read (|
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      VR;
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::function::FnOnce",
                                                      V,
                                                      [ Ty.tuple [] ],
                                                      "call_once",
                                                      []
                                                    |),
                                                    [ M.read (| to |); Value.Tuple [] ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                          |) in
                        M.alloc (|
                          Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                        |)
                      |)))
                  |)))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn copy(
            &self,
            left_column: Column<Any>,
            left_row: usize,
            right_column: Column<Any>,
            right_row: usize,
        ) -> Result<(), crate::plonk::Error> {
            let mut prover = self.lock().unwrap();
    
            if !prover.usable_rows.contains(&left_row) || !prover.usable_rows.contains(&right_row) {
                return Err(Error::not_enough_rows_available(prover.k));
            }
    
            prover
                .permutation
                .copy(left_column, left_row, right_column, right_row)
        }
    *)
    Definition copy (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self; left_column; left_row; right_column; right_row ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let left_column := M.alloc (| left_column |) in
          let left_row := M.alloc (| left_row |) in
          let right_column := M.alloc (| right_column |) in
          let right_row := M.alloc (| right_row |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let prover :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [
                            Ty.apply
                              (Ty.path "std::sync::mutex::MutexGuard")
                              [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ];
                            Ty.apply
                              (Ty.path "std::sync::poison::PoisonError")
                              [
                                Ty.apply
                                  (Ty.path "std::sync::mutex::MutexGuard")
                                  [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ]
                              ]
                          ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::parallel::Parallel")
                              [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ],
                            "lock",
                            []
                          |),
                          [ M.read (| self |) ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                LogicalOp.or (|
                                  UnOp.Pure.not
                                    (M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          [ Ty.path "usize" ],
                                        "contains",
                                        [ Ty.path "usize" ]
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "std::sync::mutex::MutexGuard")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::dev::MockProver")
                                                    [ F ]
                                                ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [ prover ]
                                          |),
                                          "halo2_proofs::dev::MockProver",
                                          "usable_rows"
                                        |);
                                        left_row
                                      ]
                                    |)),
                                  ltac:(M.monadic
                                    (UnOp.Pure.not
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            [ Ty.path "usize" ],
                                          "contains",
                                          [ Ty.path "usize" ]
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "std::sync::mutex::MutexGuard")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::dev::MockProver")
                                                      [ F ]
                                                  ],
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [ prover ]
                                            |),
                                            "halo2_proofs::dev::MockProver",
                                            "usable_rows"
                                          |);
                                          right_row
                                        ]
                                      |))))
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "halo2_proofs::plonk::error::Error",
                                          "not_enough_rows_available",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "std::sync::mutex::MutexGuard")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::dev::MockProver")
                                                        [ F ]
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [ prover ]
                                              |),
                                              "halo2_proofs::dev::MockProver",
                                              "k"
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.path "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                      "copy",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::deref::DerefMut",
                            Ty.apply
                              (Ty.path "std::sync::mutex::MutexGuard")
                              [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ],
                            [],
                            "deref_mut",
                            []
                          |),
                          [ prover ]
                        |),
                        "halo2_proofs::dev::MockProver",
                        "permutation"
                      |);
                      M.read (| left_column |);
                      M.read (| left_row |);
                      M.read (| right_column |);
                      M.read (| right_row |)
                    ]
                  |)
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn fill_from_row(
            &self,
            col: Column<Fixed>,
            from_row: usize,
            to: Option<Assigned<F>>,
        ) -> Result<(), Error> {
            let prover = self.lock().unwrap();
    
            if !prover.usable_rows.contains(&from_row) {
                return Err(Error::not_enough_rows_available(prover.k));
            }
    
            let usable_rows = prover.usable_rows.clone();
            drop(prover);
    
            for row in usable_rows.skip(from_row) {
                self.assign_fixed(|| "", col, row, || to.ok_or(Error::Synthesis))?;
            }
    
            Ok(())
        }
    *)
    Definition fill_from_row (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self; col; from_row; to ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let col := M.alloc (| col |) in
          let from_row := M.alloc (| from_row |) in
          let to := M.alloc (| to |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let prover :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [
                            Ty.apply
                              (Ty.path "std::sync::mutex::MutexGuard")
                              [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ];
                            Ty.apply
                              (Ty.path "std::sync::poison::PoisonError")
                              [
                                Ty.apply
                                  (Ty.path "std::sync::mutex::MutexGuard")
                                  [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ]
                              ]
                          ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::parallel::Parallel")
                              [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ],
                            "lock",
                            []
                          |),
                          [ M.read (| self |) ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.Pure.not
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        [ Ty.path "usize" ],
                                      "contains",
                                      [ Ty.path "usize" ]
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "std::sync::mutex::MutexGuard")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::dev::MockProver")
                                                  [ F ]
                                              ],
                                            [],
                                            "deref",
                                            []
                                          |),
                                          [ prover ]
                                        |),
                                        "halo2_proofs::dev::MockProver",
                                        "usable_rows"
                                      |);
                                      from_row
                                    ]
                                  |))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "halo2_proofs::plonk::error::Error",
                                          "not_enough_rows_available",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "std::sync::mutex::MutexGuard")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::dev::MockProver")
                                                        [ F ]
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [ prover ]
                                              |),
                                              "halo2_proofs::dev::MockProver",
                                              "k"
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let usable_rows :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "std::sync::mutex::MutexGuard")
                                [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ],
                              [],
                              "deref",
                              []
                            |),
                            [ prover ]
                          |),
                          "halo2_proofs::dev::MockProver",
                          "usable_rows"
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "core::mem::drop",
                        [
                          Ty.apply
                            (Ty.path "std::sync::mutex::MutexGuard")
                            [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ]
                        ]
                      |),
                      [ M.read (| prover |) ]
                    |)
                  |) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::skip::Skip")
                              [ Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ] ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                                [],
                                "skip",
                                []
                              |),
                              [ M.read (| usable_rows |); M.read (| from_row |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::skip::Skip")
                                            [
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                [ Ty.path "usize" ]
                                            ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let row := M.copy (| γ0_0 |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "halo2_proofs::plonk::circuit::Assignment",
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::parallel::Parallel")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::dev::MockProver")
                                                              [ F ]
                                                          ],
                                                        [ F ],
                                                        "assign_fixed",
                                                        [
                                                          Ty.function
                                                            [ Ty.tuple [] ]
                                                            (Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::assigned::Assigned")
                                                                  [ F ];
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ]);
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::assigned::Assigned")
                                                            [ F ];
                                                          Ty.function
                                                            [ Ty.tuple [] ]
                                                            (Ty.apply
                                                              (Ty.path "&")
                                                              [ Ty.path "str" ]);
                                                          Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                                        ]
                                                      |),
                                                      [
                                                        M.read (| self |);
                                                        M.closure
                                                          (fun γ =>
                                                            ltac:(M.monadic
                                                              match γ with
                                                              | [ α0 ] =>
                                                                M.match_operator (|
                                                                  M.alloc (| α0 |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (M.read (|
                                                                          Value.String ""
                                                                        |)))
                                                                  ]
                                                                |)
                                                              | _ => M.impossible (||)
                                                              end));
                                                        M.read (| col |);
                                                        M.read (| row |);
                                                        M.closure
                                                          (fun γ =>
                                                            ltac:(M.monadic
                                                              match γ with
                                                              | [ α0 ] =>
                                                                M.match_operator (|
                                                                  M.alloc (| α0 |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::assigned::Assigned")
                                                                                  [ F ]
                                                                              ],
                                                                            "ok_or",
                                                                            [
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::error::Error"
                                                                            ]
                                                                          |),
                                                                          [
                                                                            M.read (| to |);
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::error::Error::Synthesis"
                                                                              []
                                                                          ]
                                                                        |)))
                                                                  ]
                                                                |)
                                                              | _ => M.impossible (||)
                                                              end))
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::error::Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn push_namespace<NR, N>(&self, _: N)
        where
            NR: Into<String>,
            N: FnOnce() -> NR,
        {
            // TODO: Do something with namespaces :)
        }
    *)
    Definition push_namespace (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [ NR; N ], [ self; β1 ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let β1 := M.alloc (| β1 |) in
          M.match_operator (| β1, [ fun γ => ltac:(M.monadic (Value.Tuple [])) ] |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn pop_namespace(&self, _: Option<String>) {
            // TODO: Do something with namespaces :)
        }
    *)
    Definition pop_namespace (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self; β1 ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let β1 := M.alloc (| β1 |) in
          M.match_operator (| β1, [ fun γ => ltac:(M.monadic (Value.Tuple [])) ] |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "halo2_proofs::plonk::circuit::Assignment"
        (Self F)
        (* Trait polymorphic types *) [ (* F *) F ]
        (* Instance *)
        [
          ("is_in_prove_mode", InstanceField.Method (is_in_prove_mode F));
          ("enter_region", InstanceField.Method (enter_region F));
          ("exit_region", InstanceField.Method (exit_region F));
          ("enable_selector", InstanceField.Method (enable_selector F));
          ("query_instance", InstanceField.Method (query_instance F));
          ("assign_advice", InstanceField.Method (assign_advice F));
          ("assign_fixed", InstanceField.Method (assign_fixed F));
          ("copy", InstanceField.Method (copy F));
          ("fill_from_row", InstanceField.Method (fill_from_row F));
          ("push_namespace", InstanceField.Method (push_namespace F));
          ("pop_namespace", InstanceField.Method (pop_namespace F))
        ].
  End Impl_halo2_proofs_plonk_circuit_Assignment_where_ff_Field_F_where_pairing_bn256_arithmetic_Group_F_F_for_halo2_proofs_parallel_Parallel_halo2_proofs_dev_MockProver_F.
  
  Module Impl_halo2_proofs_dev_MockProver_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ].
    
    (*
        pub fn run<ConcreteCircuit: Circuit<F>>(
            k: u32,
            circuit: &ConcreteCircuit,
            instance: Vec<Vec<F>>,
        ) -> Result<MockVerifier<F>, Error> {
            let n = 1 << k;
    
            let mut cs = ConstraintSystem::default();
            let config = ConcreteCircuit::configure(&mut cs);
            let cs = cs;
    
            if n < cs.minimum_rows() {
                return Err(Error::not_enough_rows_available(k));
            }
    
            if instance.len() != cs.num_instance_columns {
                return Err(Error::InvalidInstances);
            }
    
            let instance = instance
                .into_iter()
                .map(|mut instance| {
                    if instance.len() > n - (cs.blinding_factors() + 1) {
                        return Err(Error::InstanceTooLarge);
                    }
    
                    instance.resize(n, F::zero());
                    Ok(instance)
                })
                .collect::<Result<Vec<_>, _>>()?;
    
            // Fixed columns contain no blinding factors.
            let fixed = vec![vec![CellValue::Unassigned; n]; cs.num_fixed_columns];
            let selectors = vec![vec![false; n]; cs.num_selectors];
            // Advice columns contain blinding factors.
            let blinding_factors = cs.blinding_factors();
            let usable_rows = n - (blinding_factors + 1);
            let advice = vec![
                {
                    let mut column = vec![CellValue::Unassigned; n];
                    // Poison unusable rows.
                    for (i, cell) in column.iter_mut().enumerate().skip(usable_rows) {
                        *cell = CellValue::Poison(i);
                    }
                    column
                };
                cs.num_advice_columns
            ];
            let permutation = permutation::keygen::ParallelAssembly::new(n, &cs.permutation);
            let constants = cs.constants.clone();
    
            let mut prover = Parallel::new(MockProver {
                k,
                n: n as u32,
                cs,
                regions: vec![],
                current_region: None,
                fixed,
                advice,
                instance,
                selectors,
                permutation,
                usable_rows: 0..usable_rows,
            });
    
            ConcreteCircuit::FloorPlanner::synthesize(&mut prover, circuit, config, constants)?;
    
            let mut prover = prover.into_inner();
    
            let (cs, selector_polys) = prover.cs.compress_selectors(prover.selectors.clone());
            prover.cs = cs;
            prover.fixed.extend(selector_polys.into_iter().map(|poly| {
                let mut v = vec![CellValue::Unassigned; n];
                for (v, p) in v.iter_mut().zip(&poly[..]) {
                    *v = CellValue::Assigned( *p);
                }
                v
            }));
    
            Ok(prover.into())
        }
    *)
    Definition run (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [ ConcreteCircuit ], [ k; circuit; instance ] =>
        ltac:(M.monadic
          (let k := M.alloc (| k |) in
          let circuit := M.alloc (| circuit |) in
          let instance := M.alloc (| instance |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let n := M.alloc (| BinOp.Panic.shl (| Value.Integer 1, M.read (| k |) |) |) in
                let cs :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        [],
                        "default",
                        []
                      |),
                      []
                    |)
                  |) in
                let config :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "halo2_proofs::plonk::circuit::Circuit",
                        ConcreteCircuit,
                        [ F ],
                        "configure",
                        []
                      |),
                      [ cs ]
                    |)
                  |) in
                let cs := M.copy (| cs |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.Pure.lt
                                  (M.read (| n |))
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                                        [ F ],
                                      "minimum_rows",
                                      []
                                    |),
                                    [ cs ]
                                  |))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "halo2_proofs::plonk::error::Error",
                                          "not_enough_rows_available",
                                          []
                                        |),
                                        [ M.read (| k |) ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.Pure.ne
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ F; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "len",
                                      []
                                    |),
                                    [ instance ]
                                  |))
                                  (M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      cs,
                                      "halo2_proofs::plonk::circuit::ConstraintSystem",
                                      "num_instance_columns"
                                    |)
                                  |))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      Value.StructTuple
                                        "halo2_proofs::plonk::error::Error::InvalidInstances"
                                        []
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let instance :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ F; Ty.path "alloc::alloc::Global" ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "halo2_proofs::plonk::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ F; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ F; Ty.path "alloc::alloc::Global" ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ F; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ])
                                  ],
                                [],
                                "collect",
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ F; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "halo2_proofs::plonk::error::Error"
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ F; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "map",
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ F; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ F; Ty.path "alloc::alloc::Global" ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ])
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ F; Ty.path "alloc::alloc::Global" ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "into_iter",
                                        []
                                      |),
                                      [ M.read (| instance |) ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let instance := M.copy (| γ |) in
                                                    M.read (|
                                                      let _ :=
                                                        M.match_operator (|
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      BinOp.Pure.gt
                                                                        (M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              [
                                                                                F;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            "len",
                                                                            []
                                                                          |),
                                                                          [ instance ]
                                                                        |))
                                                                        (BinOp.Panic.sub (|
                                                                          Integer.Usize,
                                                                          M.read (| n |),
                                                                          BinOp.Panic.add (|
                                                                            Integer.Usize,
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                                                  [ F ],
                                                                                "blinding_factors",
                                                                                []
                                                                              |),
                                                                              [ cs ]
                                                                            |),
                                                                            Value.Integer 1
                                                                          |)
                                                                        |))
                                                                    |)) in
                                                                let _ :=
                                                                  M.is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (|
                                                                      M.return_ (|
                                                                        Value.StructTuple
                                                                          "core::result::Result::Err"
                                                                          [
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::error::Error::InstanceTooLarge"
                                                                              []
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |) in
                                                      let _ :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [ F; Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "resize",
                                                              []
                                                            |),
                                                            [
                                                              instance;
                                                              M.read (| n |);
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "ff::Field",
                                                                  F,
                                                                  [],
                                                                  "zero",
                                                                  []
                                                                |),
                                                                []
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      M.alloc (|
                                                        Value.StructTuple
                                                          "core::result::Result::Ok"
                                                          [ M.read (| instance |) ]
                                                      |)
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::dev::MockVerifier")
                                              [ F ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let fixed :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "alloc::vec::from_elem",
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_function (|
                            "alloc::vec::from_elem",
                            [ Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ] ]
                          |),
                          [
                            Value.StructTuple "halo2_proofs::dev::CellValue::Unassigned" [];
                            M.read (| n |)
                          ]
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            cs,
                            "halo2_proofs::plonk::circuit::ConstraintSystem",
                            "num_fixed_columns"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let selectors :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "alloc::vec::from_elem",
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_function (| "alloc::vec::from_elem", [ Ty.path "bool" ] |),
                          [ Value.Bool false; M.read (| n |) ]
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            cs,
                            "halo2_proofs::plonk::circuit::ConstraintSystem",
                            "num_selectors"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let blinding_factors :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "blinding_factors",
                        []
                      |),
                      [ cs ]
                    |)
                  |) in
                let usable_rows :=
                  M.alloc (|
                    BinOp.Panic.sub (|
                      Integer.Usize,
                      M.read (| n |),
                      BinOp.Panic.add (|
                        Integer.Usize,
                        M.read (| blinding_factors |),
                        Value.Integer 1
                      |)
                    |)
                  |) in
                let advice :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "alloc::vec::from_elem",
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                      |),
                      [
                        M.read (|
                          let column :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_function (|
                                  "alloc::vec::from_elem",
                                  [ Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ] ]
                                |),
                                [
                                  Value.StructTuple "halo2_proofs::dev::CellValue::Unassigned" [];
                                  M.read (| n |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.use
                              (M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::collect::IntoIterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::skip::Skip")
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::IterMut")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::dev::CellValue")
                                                    [ F ]
                                                ]
                                            ]
                                        ],
                                      [],
                                      "into_iter",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::IterMut")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::dev::CellValue")
                                                    [ F ]
                                                ]
                                            ],
                                          [],
                                          "skip",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::slice::iter::IterMut")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::dev::CellValue")
                                                    [ F ]
                                                ],
                                              [],
                                              "enumerate",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::dev::CellValue")
                                                        [ F ]
                                                    ],
                                                  "iter_mut",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::deref::DerefMut",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "halo2_proofs::dev::CellValue")
                                                            [ F ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      "deref_mut",
                                                      []
                                                    |),
                                                    [ column ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |);
                                          M.read (| usable_rows |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let iter := M.copy (| γ |) in
                                      M.loop (|
                                        ltac:(M.monadic
                                          (let _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::skip::Skip")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::enumerate::Enumerate")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::IterMut")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::dev::CellValue")
                                                                  [ F ]
                                                              ]
                                                          ]
                                                      ],
                                                    [],
                                                    "next",
                                                    []
                                                  |),
                                                  [ iter ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.alloc (|
                                                      M.never_to_any (| M.read (| M.break (||) |) |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::option::Option::Some",
                                                        0
                                                      |) in
                                                    let γ1_0 :=
                                                      M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                    let γ1_1 :=
                                                      M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                    let i := M.copy (| γ1_0 |) in
                                                    let cell := M.copy (| γ1_1 |) in
                                                    let _ :=
                                                      M.write (|
                                                        M.read (| cell |),
                                                        Value.StructTuple
                                                          "halo2_proofs::dev::CellValue::Poison"
                                                          [ M.read (| i |) ]
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)))
                                              ]
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                      |)))
                                ]
                              |)) in
                          column
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            cs,
                            "halo2_proofs::plonk::circuit::ConstraintSystem",
                            "num_advice_columns"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let permutation :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                        "new",
                        []
                      |),
                      [
                        M.read (| n |);
                        M.SubPointer.get_struct_record_field (|
                          cs,
                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                          "permutation"
                        |)
                      ]
                    |)
                  |) in
                let constants :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                              [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          cs,
                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                          "constants"
                        |)
                      ]
                    |)
                  |) in
                let prover :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "halo2_proofs::parallel::Parallel")
                          [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ],
                        "new",
                        []
                      |),
                      [
                        Value.StructRecord
                          "halo2_proofs::dev::MockProver"
                          [
                            ("k", M.read (| k |));
                            ("n", M.rust_cast (M.read (| n |)));
                            ("cs", M.read (| cs |));
                            ("regions",
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.path "halo2_proofs::dev::Region";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "new",
                                  []
                                |),
                                []
                              |));
                            ("current_region", Value.StructTuple "core::option::Option::None" []);
                            ("fixed", M.read (| fixed |));
                            ("advice", M.read (| advice |));
                            ("instance", M.read (| instance |));
                            ("selectors", M.read (| selectors |));
                            ("permutation", M.read (| permutation |));
                            ("usable_rows",
                              Value.StructRecord
                                "core::ops::range::Range"
                                [ ("start", Value.Integer 0); ("end_", M.read (| usable_rows |)) ])
                          ]
                      ]
                    |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "halo2_proofs::plonk::circuit::FloorPlanner",
                              Ty.associated,
                              [],
                              "synthesize",
                              [
                                F;
                                Ty.apply
                                  (Ty.path "halo2_proofs::parallel::Parallel")
                                  [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ];
                                ConcreteCircuit
                              ]
                            |),
                            [
                              prover;
                              M.read (| circuit |);
                              M.read (| config |);
                              M.read (| constants |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::dev::MockVerifier")
                                            [ F ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let prover :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "halo2_proofs::parallel::Parallel")
                          [ Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ] ],
                        "into_inner",
                        []
                      |),
                      [ M.read (| prover |) ]
                    |)
                  |) in
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ F ],
                        "compress_selectors",
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            prover,
                            "halo2_proofs::dev::MockProver",
                            "cs"
                          |)
                        |);
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            "clone",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              prover,
                              "halo2_proofs::dev::MockProver",
                              "selectors"
                            |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let cs := M.copy (| γ0_0 |) in
                        let selector_polys := M.copy (| γ0_1 |) in
                        let _ :=
                          M.write (|
                            M.SubPointer.get_struct_record_field (|
                              prover,
                              "halo2_proofs::dev::MockProver",
                              "cs"
                            |),
                            M.read (| cs |)
                          |) in
                        let _ :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::Extend",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                                "extend",
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::map::Map")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ F; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ])
                                    ]
                                ]
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  prover,
                                  "halo2_proofs::dev::MockProver",
                                  "fixed"
                                |);
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ F; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "map",
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [ F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply (Ty.path "halo2_proofs::dev::CellValue") [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ])
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ F; Ty.path "alloc::alloc::Global" ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "into_iter",
                                        []
                                      |),
                                      [ M.read (| selector_polys |) ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let poly := M.copy (| γ |) in
                                                    M.read (|
                                                      let v :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_function (|
                                                              "alloc::vec::from_elem",
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::dev::CellValue")
                                                                  [ F ]
                                                              ]
                                                            |),
                                                            [
                                                              Value.StructTuple
                                                                "halo2_proofs::dev::CellValue::Unassigned"
                                                                [];
                                                              M.read (| n |)
                                                            ]
                                                          |)
                                                        |) in
                                                      let _ :=
                                                        M.use
                                                          (M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::collect::IntoIterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::zip::Zip")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::IterMut")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::dev::CellValue")
                                                                            [ F ]
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        [ F ]
                                                                    ],
                                                                  [],
                                                                  "into_iter",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::IterMut")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::dev::CellValue")
                                                                            [ F ]
                                                                        ],
                                                                      [],
                                                                      "zip",
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              [ F ]
                                                                          ]
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::dev::CellValue")
                                                                                [ F ]
                                                                            ],
                                                                          "iter_mut",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::deref::DerefMut",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::dev::CellValue")
                                                                                    [ F ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [],
                                                                              "deref_mut",
                                                                              []
                                                                            |),
                                                                            [ v ]
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::index::Index",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              F;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [
                                                                            Ty.path
                                                                              "core::ops::range::RangeFull"
                                                                          ],
                                                                          "index",
                                                                          []
                                                                        |),
                                                                        [
                                                                          poly;
                                                                          Value.StructTuple
                                                                            "core::ops::range::RangeFull"
                                                                            []
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let iter := M.copy (| γ |) in
                                                                  M.loop (|
                                                                    ltac:(M.monadic
                                                                      (let _ :=
                                                                        M.match_operator (|
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::iter::traits::iterator::Iterator",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::iter::adapters::zip::Zip")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::slice::iter::IterMut")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::dev::CellValue")
                                                                                          [ F ]
                                                                                      ];
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::slice::iter::Iter")
                                                                                      [ F ]
                                                                                  ],
                                                                                [],
                                                                                "next",
                                                                                []
                                                                              |),
                                                                              [ iter ]
                                                                            |)
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (M.alloc (|
                                                                                  M.never_to_any (|
                                                                                    M.read (|
                                                                                      M.break (||)
                                                                                    |)
                                                                                  |)
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ0_0 :=
                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                    γ,
                                                                                    "core::option::Option::Some",
                                                                                    0
                                                                                  |) in
                                                                                let γ1_0 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ0_0,
                                                                                    0
                                                                                  |) in
                                                                                let γ1_1 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ0_0,
                                                                                    1
                                                                                  |) in
                                                                                let v :=
                                                                                  M.copy (|
                                                                                    γ1_0
                                                                                  |) in
                                                                                let p :=
                                                                                  M.copy (|
                                                                                    γ1_1
                                                                                  |) in
                                                                                let _ :=
                                                                                  M.write (|
                                                                                    M.read (| v |),
                                                                                    Value.StructTuple
                                                                                      "halo2_proofs::dev::CellValue::Assigned"
                                                                                      [
                                                                                        M.read (|
                                                                                          M.read (|
                                                                                            p
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)))
                                                                          ]
                                                                        |) in
                                                                      M.alloc (| Value.Tuple [] |)))
                                                                  |)))
                                                            ]
                                                          |)) in
                                                      v
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::convert::Into",
                                  Ty.apply (Ty.path "halo2_proofs::dev::MockProver") [ F ],
                                  [ Ty.apply (Ty.path "halo2_proofs::dev::MockVerifier") [ F ] ],
                                  "into",
                                  []
                                |),
                                [ M.read (| prover |) ]
                              |)
                            ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_run : forall (F : Ty.t), M.IsAssociatedFunction (Self F) "run" (run F).
  End Impl_halo2_proofs_dev_MockProver_F.
  
  Module Impl_halo2_proofs_dev_MockVerifier_F.
    Definition Self (F : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::dev::MockVerifier") [ F ].
    
    (*
        pub fn verify(&self) -> Result<(), Vec<VerifyFailure>> {
            self.verify_at_rows(self.usable_rows.clone(), self.usable_rows.clone())
        }
    *)
    Definition verify (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply (Ty.path "halo2_proofs::dev::MockVerifier") [ F ],
              "verify_at_rows",
              [ Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ] ]
            |),
            [
              M.read (| self |);
              M.call_closure (|
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                  [],
                  "clone",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::dev::MockVerifier",
                    "usable_rows"
                  |)
                ]
              |);
              M.call_closure (|
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                  [],
                  "clone",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::dev::MockVerifier",
                    "usable_rows"
                  |)
                ]
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_verify :
      forall (F : Ty.t),
      M.IsAssociatedFunction (Self F) "verify" (verify F).
    
    (*
        pub fn verify_at_rows<I: Clone + Iterator<Item = usize>>(
            &self,
            gate_row_ids: I,
            lookup_input_row_ids: I,
        ) -> Result<(), Vec<VerifyFailure>> {
            let n = self.n as i32;
    
            // check all the row ids are valid
            for row_id in gate_row_ids.clone() {
                if !self.usable_rows.contains(&row_id) {
                    panic!("invalid gate row id {}", row_id)
                }
            }
            for row_id in lookup_input_row_ids.clone() {
                if !self.usable_rows.contains(&row_id) {
                    panic!("invalid lookup row id {}", row_id)
                }
            }
    
            // Check that within each region, all cells used in instantiated gates have been
            // assigned to.
            let selector_errors = self.regions.iter().enumerate().flat_map(|(r_i, r)| {
                r.enabled_selectors.iter().flat_map(move |(selector, at)| {
                    // Find the gates enabled by this selector
                    self.cs
                        .gates
                        .iter()
                        // Assume that if a queried selector is enabled, the user wants to use the
                        // corresponding gate in some way.
                        //
                        // TODO: This will trip up on the reverse case, where leaving a selector
                        // un-enabled keeps a gate enabled. We could alternatively require that
                        // every selector is explicitly enabled or disabled on every row? But that
                        // seems messy and confusing.
                        .enumerate()
                        .filter(move |(_, g)| g.queried_selectors().contains(selector))
                        .flat_map(move |(gate_index, gate)| {
                            at.iter().flat_map(move |selector_row| {
                                // Selectors are queried with no rotation.
                                let gate_row = *selector_row as i32;
    
                                gate.queried_cells().iter().filter_map(move |cell| {
                                    // Determine where this cell should have been assigned.
                                    let cell_row = ((gate_row + n + cell.rotation.0) % n) as usize;
    
                                    // Check that it was assigned!
                                    if r.is_assigned(cell.column, cell_row) {
                                        None
                                    } else {
                                        Some(VerifyFailure::CellNotAssigned {
                                            gate: (gate_index, gate.name()).into(),
                                            region: (r_i, r.name.clone()).into(),
                                            column: cell.column,
                                            offset: cell_row as isize - r.rows.unwrap().0 as isize,
                                        })
                                    }
                                })
                            })
                        })
                })
            });
    
            // Check that all gates are satisfied for all rows.
            let gate_errors =
                self.cs
                    .gates
                    .iter()
                    .enumerate()
                    .flat_map(|(gate_index, gate)| {
                        let blinding_rows =
                            (self.n as usize - (self.cs.blinding_factors() + 1))..(self.n as usize);
                        (gate_row_ids
                            .clone()
                            .into_iter()
                            .chain(blinding_rows.into_iter()))
                        .flat_map(move |row| {
                            fn load_instance<'a, F: FieldExt, T: ColumnType>(
                                n: i32,
                                row: i32,
                                queries: &'a [(Column<T>, Rotation)],
                                cells: &'a [Vec<F>],
                            ) -> impl Fn(usize, usize, Rotation) -> Value<F> + 'a
                            {
                                move |index, _, _| {
                                    let (column, at) = &queries[index];
                                    let resolved_row = (row + n + at.0) % n;
                                    Value::Real(cells[column.index()][resolved_row as usize])
                                }
                            }
    
                            fn load<'a, F: FieldExt, T: ColumnType>(
                                n: i32,
                                row: i32,
                                queries: &'a [(Column<T>, Rotation)],
                                cells: &'a [Vec<CellValue<F>>],
                            ) -> impl Fn(usize, usize, Rotation) -> Value<F> + 'a
                            {
                                move |index, _, _| {
                                    let (column, at) = &queries[index];
                                    let resolved_row = (row + n + at.0) % n;
                                    cells[column.index()][resolved_row as usize].into()
                                }
                            }
                            let row = row as i32;
                            gate.polynomials().iter().enumerate().filter_map(
                                move |(poly_index, poly)| match poly.evaluate_lazy(
                                    &|scalar| Value::Real(scalar),
                                    &|_| panic!("virtual selectors are removed during optimization"),
                                    &load(n, row, &self.cs.fixed_queries, &self.fixed),
                                    &load(n, row, &self.cs.advice_queries, &self.advice),
                                    &load_instance(n, row, &self.cs.instance_queries, &self.instance),
                                    &|a| -a,
                                    &|a, b| a + b,
                                    &|a, b| a * b,
                                    &|a, scalar| a * scalar,
                                    &Value::Real(F::zero()),
                                ) {
                                    Value::Real(x) if x.is_zero_vartime() => None,
                                    Value::Real(_) => Some(VerifyFailure::ConstraintNotSatisfied {
                                        constraint: (
                                            (gate_index, gate.name()).into(),
                                            poly_index,
                                            gate.constraint_name(poly_index),
                                        )
                                            .into(),
                                        location: FailureLocation::find_expressions(
                                            &self.cs,
                                            &self.regions,
                                            row as usize,
                                            Some(poly).into_iter(),
                                        ),
                                        cell_values: util::cell_values(
                                            gate,
                                            poly,
                                            &load(n, row, &self.cs.fixed_queries, &self.fixed),
                                            &load(n, row, &self.cs.advice_queries, &self.advice),
                                            &load_instance(
                                                n,
                                                row,
                                                &self.cs.instance_queries,
                                                &self.instance,
                                            ),
                                        ),
                                    }),
                                    Value::Poison => Some(VerifyFailure::ConstraintPoisoned {
                                        constraint: (
                                            (gate_index, gate.name()).into(),
                                            poly_index,
                                            gate.constraint_name(poly_index),
                                        )
                                            .into(),
                                    }),
                                },
                            )
                        })
                    });
    
            // Check that all lookups exist in their respective tables.
            let lookup_errors =
                self.cs
                    .lookups
                    .iter()
                    .enumerate()
                    .flat_map(|(lookup_index, lookup)| {
                        let load = |expression: &Expression<F>, row| {
                            expression.evaluate_lazy(
                                &|scalar| Value::Real(scalar),
                                &|_| panic!("virtual selectors are removed during optimization"),
                                &|index, _, _| {
                                    let query = self.cs.fixed_queries[index];
                                    let column_index = query.0.index();
                                    let rotation = query.1 .0;
                                    self.fixed[column_index]
                                        [(row as i32 + n + rotation) as usize % n as usize]
                                        .into()
                                },
                                &|index, _, _| {
                                    let query = self.cs.advice_queries[index];
                                    let column_index = query.0.index();
                                    let rotation = query.1 .0;
                                    self.advice[column_index]
                                        [(row as i32 + n + rotation) as usize % n as usize]
                                        .into()
                                },
                                &|index, _, _| {
                                    let query = self.cs.instance_queries[index];
                                    let column_index = query.0.index();
                                    let rotation = query.1 .0;
                                    Value::Real(
                                        self.instance[column_index]
                                            [(row as i32 + n + rotation) as usize % n as usize],
                                    )
                                },
                                &|a| -a,
                                &|a, b| a + b,
                                &|a, b| a * b,
                                &|a, scalar| a * scalar,
                                &Value::Real(F::zero()),
                            )
                        };
    
                        // In the real prover, the lookup expressions are never enforced on
                        // unusable rows, due to the (1 - (l_last(X) + l_blind(X))) term.
                        let table: std::collections::BTreeSet<Vec<_>> = self
                            .usable_rows
                            .clone()
                            .map(|table_row| {
                                lookup
                                    .table_expressions
                                    .iter()
                                    .map(move |c| load(c, table_row))
                                    .collect::<Vec<_>>()
                            })
                            .collect();
                        lookup_input_row_ids
                            .clone()
                            .into_iter()
                            .filter_map(move |input_row| {
                                let inputs: Vec<_> = lookup
                                    .input_expressions
                                    .iter()
                                    .map(|c| load(c, input_row))
                                    .collect();
                                let lookup_passes = table.contains(&inputs);
                                if lookup_passes {
                                    None
                                } else {
                                    Some(VerifyFailure::Lookup {
                                        name: lookup.name,
                                        lookup_index,
                                        location: FailureLocation::find_expressions(
                                            &self.cs,
                                            &self.regions,
                                            input_row,
                                            lookup.input_expressions.iter(),
                                        ),
                                    })
                                }
                            })
                    });
    
            // Check that permutations preserve the original values of the cells.
            let perm_errors = {
                // Original values of columns involved in the permutation.
                let original = |column, row| {
                    self.cs
                        .permutation
                        .get_columns()
                        .get(column)
                        .map(|c: &Column<Any>| match c.column_type() {
                            Any::Advice => self.advice[c.index()][row],
                            Any::Fixed => self.fixed[c.index()][row],
                            Any::Instance => CellValue::Assigned(self.instance[c.index()][row]),
                        })
                        .unwrap()
                };
    
                // Iterate over each column of the permutation
                self.permutation
                    .mapping
                    .iter()
                    .enumerate()
                    .flat_map(move |(column, values)| {
                        // Iterate over each row of the column to check that the cell's
                        // value is preserved by the mapping.
                        values.iter().enumerate().filter_map(move |(row, cell)| {
                            let original_cell = original(column, row);
                            let permuted_cell = original(cell.0 as usize, cell.1 as usize);
                            if original_cell == permuted_cell {
                                None
                            } else {
                                Some(VerifyFailure::Permutation {
                                    column: ( *self.cs.permutation.get_columns().get(column).unwrap())
                                        .into(),
                                    row,
                                })
                            }
                        })
                    })
            };
    
            let mut errors: Vec<_> = iter::empty()
                .chain(selector_errors)
                .chain(gate_errors)
                .chain(lookup_errors)
                .chain(perm_errors)
                .collect();
            if errors.is_empty() {
                Ok(())
            } else {
                // Remove any duplicate `ConstraintPoisoned` errors (we check all unavailable
                // rows in case the trigger is row-specific, but the error message only points
                // at the constraint).
                errors.dedup_by(|a, b| match (a, b) {
                    (
                        a @ VerifyFailure::ConstraintPoisoned { .. },
                        b @ VerifyFailure::ConstraintPoisoned { .. },
                    ) => a == b,
                    _ => false,
                });
                Err(errors)
            }
        }
    *)
    Definition verify_at_rows (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [ _ as I ], [ self; gate_row_ids; lookup_input_row_ids ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let gate_row_ids := M.alloc (| gate_row_ids |) in
          let lookup_input_row_ids := M.alloc (| lookup_input_row_ids |) in
          M.read (|
            let n :=
              M.alloc (|
                M.rust_cast
                  (M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::dev::MockVerifier",
                      "n"
                    |)
                  |))
              |) in
            let _ :=
              M.use
                (M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        I,
                        [],
                        "into_iter",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (| "core::clone::Clone", I, [], "clone", [] |),
                          [ gate_row_ids ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          ltac:(M.monadic
                            (let _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      I,
                                      [],
                                      "next",
                                      []
                                    |),
                                    [ iter ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let row_id := M.copy (| γ0_0 |) in
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    UnOp.Pure.not
                                                      (M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            [ Ty.path "usize" ],
                                                          "contains",
                                                          [ Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| self |),
                                                            "halo2_proofs::dev::MockVerifier",
                                                            "usable_rows"
                                                          |);
                                                          row_id
                                                        ]
                                                      |))
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "core::panicking::panic_fmt",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::Arguments",
                                                          "new_v1",
                                                          []
                                                        |),
                                                        [
                                                          (* Unsize *)
                                                          M.pointer_coercion
                                                            (M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.read (|
                                                                    Value.String
                                                                      "invalid gate row id "
                                                                  |)
                                                                ]
                                                            |));
                                                          (* Unsize *)
                                                          M.pointer_coercion
                                                            (M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "core::fmt::rt::Argument",
                                                                      "new_display",
                                                                      [ Ty.path "usize" ]
                                                                    |),
                                                                    [ row_id ]
                                                                  |)
                                                                ]
                                                            |))
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            let _ :=
              M.use
                (M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        I,
                        [],
                        "into_iter",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (| "core::clone::Clone", I, [], "clone", [] |),
                          [ lookup_input_row_ids ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          ltac:(M.monadic
                            (let _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      I,
                                      [],
                                      "next",
                                      []
                                    |),
                                    [ iter ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let row_id := M.copy (| γ0_0 |) in
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    UnOp.Pure.not
                                                      (M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            [ Ty.path "usize" ],
                                                          "contains",
                                                          [ Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| self |),
                                                            "halo2_proofs::dev::MockVerifier",
                                                            "usable_rows"
                                                          |);
                                                          row_id
                                                        ]
                                                      |))
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "core::panicking::panic_fmt",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::Arguments",
                                                          "new_v1",
                                                          []
                                                        |),
                                                        [
                                                          (* Unsize *)
                                                          M.pointer_coercion
                                                            (M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.read (|
                                                                    Value.String
                                                                      "invalid lookup row id "
                                                                  |)
                                                                ]
                                                            |));
                                                          (* Unsize *)
                                                          M.pointer_coercion
                                                            (M.alloc (|
                                                              Value.Array
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "core::fmt::rt::Argument",
                                                                      "new_display",
                                                                      [ Ty.path "usize" ]
                                                                    |),
                                                                    [ row_id ]
                                                                  |)
                                                                ]
                                                            |))
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |)) in
            let selector_errors :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          [ Ty.path "halo2_proofs::dev::Region" ]
                      ],
                    [],
                    "flat_map",
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::flatten::FlatMap")
                        [
                          Ty.apply
                            (Ty.path "std::collections::hash::map::Iter")
                            [
                              Ty.path "halo2_proofs::plonk::circuit::Selector";
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.apply
                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::filter::Filter")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                            [ F ]
                                        ]
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "usize";
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Gate")
                                                        [ F ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]
                                    (Ty.path "bool")
                                ];
                              Ty.apply
                                (Ty.path "core::iter::adapters::flatten::FlatMap")
                                [
                                  Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "usize" ];
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [ Ty.path "halo2_proofs::plonk::circuit::VirtualCell" ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.path
                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "core::option::Option")
                                          [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                    ];
                                  Ty.function
                                    [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "usize" ] ] ]
                                    (Ty.apply
                                      (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [ Ty.path "halo2_proofs::plonk::circuit::VirtualCell" ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                  ]
                                              ]
                                          ]
                                          (Ty.apply
                                            (Ty.path "core::option::Option")
                                            [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                      ])
                                ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "usize";
                                          Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                                [ F ]
                                            ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [ Ty.path "usize" ];
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [ Ty.path "halo2_proofs::plonk::circuit::VirtualCell" ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                  ]
                                              ]
                                          ]
                                          (Ty.apply
                                            (Ty.path "core::option::Option")
                                            [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                      ];
                                    Ty.function
                                      [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "usize" ] ] ]
                                      (Ty.apply
                                        (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [ Ty.path "halo2_proofs::plonk::circuit::VirtualCell" ];
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.path
                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                    ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path "core::option::Option")
                                              [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                        ])
                                  ])
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Selector" ];
                                      Ty.apply
                                        (Ty.path "&")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                        ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "core::iter::adapters::flatten::FlatMap")
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::filter::Filter")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                              [ F ]
                                          ]
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.path "usize";
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Gate")
                                                          [ F ]
                                                      ]
                                                  ]
                                              ]
                                          ]
                                      ]
                                      (Ty.path "bool")
                                  ];
                                Ty.apply
                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [ Ty.path "usize" ];
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [ Ty.path "halo2_proofs::plonk::circuit::VirtualCell" ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                  ]
                                              ]
                                          ]
                                          (Ty.apply
                                            (Ty.path "core::option::Option")
                                            [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                      ];
                                    Ty.function
                                      [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "usize" ] ] ]
                                      (Ty.apply
                                        (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [ Ty.path "halo2_proofs::plonk::circuit::VirtualCell" ];
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.path
                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                    ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path "core::option::Option")
                                              [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                        ])
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "usize";
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                                  [ F ]
                                              ]
                                          ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "core::iter::adapters::flatten::FlatMap")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [ Ty.path "usize" ];
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [ Ty.path "halo2_proofs::plonk::circuit::VirtualCell" ];
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.path
                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                    ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path "core::option::Option")
                                              [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                        ];
                                      Ty.function
                                        [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "usize" ] ] ]
                                        (Ty.apply
                                          (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [ Ty.path "halo2_proofs::plonk::circuit::VirtualCell"
                                              ];
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.path
                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                      ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "core::option::Option")
                                                [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                          ])
                                    ])
                              ])
                        ];
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.tuple
                                [
                                  Ty.path "usize";
                                  Ty.apply (Ty.path "&") [ Ty.path "halo2_proofs::dev::Region" ]
                                ]
                            ]
                        ]
                        (Ty.apply
                          (Ty.path "core::iter::adapters::flatten::FlatMap")
                          [
                            Ty.apply
                              (Ty.path "std::collections::hash::map::Iter")
                              [
                                Ty.path "halo2_proofs::plonk::circuit::Selector";
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                              ];
                            Ty.apply
                              (Ty.path "core::iter::adapters::flatten::FlatMap")
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::filter::Filter")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                              [ F ]
                                          ]
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.path "usize";
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Gate")
                                                          [ F ]
                                                      ]
                                                  ]
                                              ]
                                          ]
                                      ]
                                      (Ty.path "bool")
                                  ];
                                Ty.apply
                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [ Ty.path "usize" ];
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [ Ty.path "halo2_proofs::plonk::circuit::VirtualCell" ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.path
                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                  ]
                                              ]
                                          ]
                                          (Ty.apply
                                            (Ty.path "core::option::Option")
                                            [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                      ];
                                    Ty.function
                                      [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "usize" ] ] ]
                                      (Ty.apply
                                        (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [ Ty.path "halo2_proofs::plonk::circuit::VirtualCell" ];
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.path
                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                    ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path "core::option::Option")
                                              [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                        ])
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "usize";
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                                  [ F ]
                                              ]
                                          ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "core::iter::adapters::flatten::FlatMap")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [ Ty.path "usize" ];
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [ Ty.path "halo2_proofs::plonk::circuit::VirtualCell" ];
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.path
                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                    ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path "core::option::Option")
                                              [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                        ];
                                      Ty.function
                                        [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "usize" ] ] ]
                                        (Ty.apply
                                          (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [ Ty.path "halo2_proofs::plonk::circuit::VirtualCell"
                                              ];
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.path
                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                      ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "core::option::Option")
                                                [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                          ])
                                    ])
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [ Ty.path "halo2_proofs::plonk::circuit::Selector" ];
                                        Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                          ]
                                      ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "core::iter::adapters::flatten::FlatMap")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::filter::Filter")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                                [ F ]
                                            ]
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.path "usize";
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Gate")
                                                            [ F ]
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                        (Ty.path "bool")
                                    ];
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::flatten::FlatMap")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [ Ty.path "usize" ];
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [ Ty.path "halo2_proofs::plonk::circuit::VirtualCell" ];
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.path
                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                    ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path "core::option::Option")
                                              [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                        ];
                                      Ty.function
                                        [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "usize" ] ] ]
                                        (Ty.apply
                                          (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [ Ty.path "halo2_proofs::plonk::circuit::VirtualCell"
                                              ];
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.path
                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                      ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "core::option::Option")
                                                [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                          ])
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "core::iter::adapters::flatten::FlatMap")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [ Ty.path "usize" ];
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [ Ty.path "halo2_proofs::plonk::circuit::VirtualCell"
                                              ];
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.path
                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                      ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "core::option::Option")
                                                [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                          ];
                                        Ty.function
                                          [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "usize" ] ]
                                          ]
                                          (Ty.apply
                                            (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [
                                                  Ty.path
                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                            ])
                                      ])
                                ])
                          ])
                    ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          [ Ty.path "halo2_proofs::dev::Region" ],
                        [],
                        "enumerate",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [ Ty.path "halo2_proofs::dev::Region" ],
                            "iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path "halo2_proofs::dev::Region";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "deref",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::dev::MockVerifier",
                                  "regions"
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            M.match_operator (|
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let r_i := M.copy (| γ0_0 |) in
                                    let r := M.copy (| γ0_1 |) in
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "std::collections::hash::map::Iter")
                                          [
                                            Ty.path "halo2_proofs::plonk::circuit::Selector";
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        [],
                                        "flat_map",
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                                            [
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::filter::Filter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::enumerate::Enumerate")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Gate")
                                                            [ F ]
                                                        ]
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Gate")
                                                                        [ F ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.path "bool")
                                                ];
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [ Ty.path "usize" ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::filter_map::FilterMap")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::dev::VerifyFailure"
                                                          ])
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [ Ty.apply (Ty.path "&") [ Ty.path "usize" ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::filter_map::FilterMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::dev::VerifyFailure"
                                                            ])
                                                      ])
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "usize";
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Gate")
                                                                [ F ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [ Ty.path "usize" ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::filter_map::FilterMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::dev::VerifyFailure"
                                                            ])
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [ Ty.path "usize" ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ])
                                                  ])
                                            ];
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::plonk::circuit::Selector"
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.path "usize";
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path "core::iter::adapters::flatten::FlatMap")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::filter::Filter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::enumerate::Enumerate")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Gate")
                                                              [ F ]
                                                          ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Gate")
                                                                          [ F ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.path "bool")
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [ Ty.path "usize" ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::filter_map::FilterMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::dev::VerifyFailure"
                                                            ])
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [ Ty.path "usize" ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ])
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.path "usize";
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Gate")
                                                                  [ F ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::flatten::FlatMap")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [ Ty.path "usize" ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "usize" ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ])
                                                    ])
                                              ])
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "std::collections::hash::map::HashMap")
                                              [
                                                Ty.path "halo2_proofs::plonk::circuit::Selector";
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.path "std::hash::random::RandomState"
                                              ],
                                            "iter",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| r |),
                                              "halo2_proofs::dev::Region",
                                              "enabled_selectors"
                                            |)
                                          ]
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                M.match_operator (|
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                        let γ0_1 :=
                                                          M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                        let selector := M.copy (| γ0_0 |) in
                                                        let at_ := M.copy (| γ0_1 |) in
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::filter::Filter")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::enumerate::Enumerate")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Gate")
                                                                          [ F ]
                                                                      ]
                                                                  ];
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Gate")
                                                                                      [ F ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  (Ty.path "bool")
                                                              ],
                                                            [],
                                                            "flat_map",
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::flatten::FlatMap")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    [ Ty.path "usize" ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::filter_map::FilterMap")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ];
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                                ]
                                                                            ]
                                                                        ]
                                                                        (Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::dev::VerifyFailure"
                                                                          ])
                                                                    ];
                                                                  Ty.function
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [ Ty.path "usize" ]
                                                                        ]
                                                                    ]
                                                                    (Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::filter_map::FilterMap")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            [
                                                                              Ty.path
                                                                                "halo2_proofs::dev::VerifyFailure"
                                                                            ])
                                                                      ])
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Gate")
                                                                                [ F ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::flatten::FlatMap")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      [ Ty.path "usize" ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::filter_map::FilterMap")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            [
                                                                              Ty.path
                                                                                "halo2_proofs::dev::VerifyFailure"
                                                                            ])
                                                                      ];
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              [ Ty.path "usize" ]
                                                                          ]
                                                                      ]
                                                                      (Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::filter_map::FilterMap")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            [
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                                            ];
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [
                                                                                      Ty.path
                                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              [
                                                                                Ty.path
                                                                                  "halo2_proofs::dev::VerifyFailure"
                                                                              ])
                                                                        ])
                                                                  ])
                                                            ]
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::enumerate::Enumerate")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Gate")
                                                                          [ F ]
                                                                      ]
                                                                  ],
                                                                [],
                                                                "filter",
                                                                [
                                                                  Ty.function
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.path "usize";
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Gate")
                                                                                        [ F ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                    (Ty.path "bool")
                                                                ]
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Gate")
                                                                          [ F ]
                                                                      ],
                                                                    [],
                                                                    "enumerate",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Gate")
                                                                              [ F ]
                                                                          ],
                                                                        "iter",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::deref::Deref",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Gate")
                                                                                  [ F ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            "deref",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.read (| self |),
                                                                                "halo2_proofs::dev::MockVerifier",
                                                                                "cs"
                                                                              |),
                                                                              "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                              "gates"
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.closure
                                                                  (fun γ =>
                                                                    ltac:(M.monadic
                                                                      match γ with
                                                                      | [ α0 ] =>
                                                                        M.match_operator (|
                                                                          M.alloc (| α0 |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ :=
                                                                                  M.read (| γ |) in
                                                                                let γ1_0 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ,
                                                                                    0
                                                                                  |) in
                                                                                let γ1_1 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ,
                                                                                    1
                                                                                  |) in
                                                                                let g :=
                                                                                  M.alloc (|
                                                                                    γ1_1
                                                                                  |) in
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "slice")
                                                                                      [
                                                                                        Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Selector"
                                                                                      ],
                                                                                    "contains",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Gate")
                                                                                          [ F ],
                                                                                        "queried_selectors",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          M.read (|
                                                                                            g
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.read (|
                                                                                      selector
                                                                                    |)
                                                                                  ]
                                                                                |)))
                                                                          ]
                                                                        |)
                                                                      | _ => M.impossible (||)
                                                                      end))
                                                              ]
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                0
                                                                              |) in
                                                                            let γ0_1 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                1
                                                                              |) in
                                                                            let gate_index :=
                                                                              M.copy (| γ0_0 |) in
                                                                            let gate :=
                                                                              M.copy (| γ0_1 |) in
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::iter::traits::iterator::Iterator",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::slice::iter::Iter")
                                                                                  [ Ty.path "usize"
                                                                                  ],
                                                                                [],
                                                                                "flat_map",
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::iter::adapters::filter_map::FilterMap")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::Iter")
                                                                                        [
                                                                                          Ty.path
                                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                                        ];
                                                                                      Ty.function
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                        (Ty.apply
                                                                                          (Ty.path
                                                                                            "core::option::Option")
                                                                                          [
                                                                                            Ty.path
                                                                                              "halo2_proofs::dev::VerifyFailure"
                                                                                          ])
                                                                                    ];
                                                                                  Ty.function
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                    (Ty.apply
                                                                                      (Ty.path
                                                                                        "core::iter::adapters::filter_map::FilterMap")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::slice::iter::Iter")
                                                                                          [
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                                                          ];
                                                                                        Ty.function
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                                                  ]
                                                                                              ]
                                                                                          ]
                                                                                          (Ty.apply
                                                                                            (Ty.path
                                                                                              "core::option::Option")
                                                                                            [
                                                                                              Ty.path
                                                                                                "halo2_proofs::dev::VerifyFailure"
                                                                                            ])
                                                                                      ])
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "slice")
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ],
                                                                                    "iter",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::deref::Deref",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize";
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        [],
                                                                                        "deref",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          at_
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.closure
                                                                                  (fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      match γ with
                                                                                      | [ α0 ] =>
                                                                                        M.match_operator (|
                                                                                          M.alloc (|
                                                                                            α0
                                                                                          |),
                                                                                          [
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (let
                                                                                                      selector_row :=
                                                                                                  M.copy (|
                                                                                                    γ
                                                                                                  |) in
                                                                                                M.read (|
                                                                                                  let
                                                                                                        gate_row :=
                                                                                                    M.alloc (|
                                                                                                      M.rust_cast
                                                                                                        (M.read (|
                                                                                                          M.read (|
                                                                                                            selector_row
                                                                                                          |)
                                                                                                        |))
                                                                                                    |) in
                                                                                                  M.alloc (|
                                                                                                    M.call_closure (|
                                                                                                      M.get_trait_method (|
                                                                                                        "core::iter::traits::iterator::Iterator",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::slice::iter::Iter")
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                                                                          ],
                                                                                                        [],
                                                                                                        "filter_map",
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::dev::VerifyFailure";
                                                                                                          Ty.function
                                                                                                            [
                                                                                                              Ty.tuple
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "&")
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                                                                    ]
                                                                                                                ]
                                                                                                            ]
                                                                                                            (Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::option::Option")
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "halo2_proofs::dev::VerifyFailure"
                                                                                                              ])
                                                                                                        ]
                                                                                                      |),
                                                                                                      [
                                                                                                        M.call_closure (|
                                                                                                          M.get_associated_function (|
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "slice")
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                                                                              ],
                                                                                                            "iter",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            M.call_closure (|
                                                                                                              M.get_associated_function (|
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "halo2_proofs::plonk::circuit::Gate")
                                                                                                                  [
                                                                                                                    F
                                                                                                                  ],
                                                                                                                "queried_cells",
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                M.read (|
                                                                                                                  gate
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          ]
                                                                                                        |);
                                                                                                        M.closure
                                                                                                          (fun
                                                                                                              γ =>
                                                                                                            ltac:(M.monadic
                                                                                                              match
                                                                                                                γ
                                                                                                              with
                                                                                                              | [
                                                                                                                    α0
                                                                                                                  ] =>
                                                                                                                M.match_operator (|
                                                                                                                  M.alloc (|
                                                                                                                    α0
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    fun
                                                                                                                        γ =>
                                                                                                                      ltac:(M.monadic
                                                                                                                        (let
                                                                                                                              cell :=
                                                                                                                          M.copy (|
                                                                                                                            γ
                                                                                                                          |) in
                                                                                                                        M.read (|
                                                                                                                          let
                                                                                                                                cell_row :=
                                                                                                                            M.alloc (|
                                                                                                                              M.rust_cast
                                                                                                                                (BinOp.Panic.rem (|
                                                                                                                                  Integer.I32,
                                                                                                                                  BinOp.Panic.add (|
                                                                                                                                    Integer.I32,
                                                                                                                                    BinOp.Panic.add (|
                                                                                                                                      Integer.I32,
                                                                                                                                      M.read (|
                                                                                                                                        gate_row
                                                                                                                                      |),
                                                                                                                                      M.read (|
                                                                                                                                        n
                                                                                                                                      |)
                                                                                                                                    |),
                                                                                                                                    M.read (|
                                                                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                                                          M.read (|
                                                                                                                                            cell
                                                                                                                                          |),
                                                                                                                                          "halo2_proofs::plonk::circuit::VirtualCell",
                                                                                                                                          "rotation"
                                                                                                                                        |),
                                                                                                                                        "halo2_proofs::poly::Rotation",
                                                                                                                                        0
                                                                                                                                      |)
                                                                                                                                    |)
                                                                                                                                  |),
                                                                                                                                  M.read (|
                                                                                                                                    n
                                                                                                                                  |)
                                                                                                                                |))
                                                                                                                            |) in
                                                                                                                          M.match_operator (|
                                                                                                                            M.alloc (|
                                                                                                                              Value.Tuple
                                                                                                                                []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              fun
                                                                                                                                  γ =>
                                                                                                                                ltac:(M.monadic
                                                                                                                                  (let
                                                                                                                                        γ :=
                                                                                                                                    M.use
                                                                                                                                      (M.alloc (|
                                                                                                                                        M.call_closure (|
                                                                                                                                          M.get_associated_function (|
                                                                                                                                            Ty.path
                                                                                                                                              "halo2_proofs::dev::Region",
                                                                                                                                            "is_assigned",
                                                                                                                                            []
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            M.read (|
                                                                                                                                              r
                                                                                                                                            |);
                                                                                                                                            M.read (|
                                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                                M.read (|
                                                                                                                                                  cell
                                                                                                                                                |),
                                                                                                                                                "halo2_proofs::plonk::circuit::VirtualCell",
                                                                                                                                                "column"
                                                                                                                                              |)
                                                                                                                                            |);
                                                                                                                                            M.read (|
                                                                                                                                              cell_row
                                                                                                                                            |)
                                                                                                                                          ]
                                                                                                                                        |)
                                                                                                                                      |)) in
                                                                                                                                  let
                                                                                                                                        _ :=
                                                                                                                                    M.is_constant_or_break_match (|
                                                                                                                                      M.read (|
                                                                                                                                        γ
                                                                                                                                      |),
                                                                                                                                      Value.Bool
                                                                                                                                        true
                                                                                                                                    |) in
                                                                                                                                  M.alloc (|
                                                                                                                                    Value.StructTuple
                                                                                                                                      "core::option::Option::None"
                                                                                                                                      []
                                                                                                                                  |)));
                                                                                                                              fun
                                                                                                                                  γ =>
                                                                                                                                ltac:(M.monadic
                                                                                                                                  (M.alloc (|
                                                                                                                                    Value.StructTuple
                                                                                                                                      "core::option::Option::Some"
                                                                                                                                      [
                                                                                                                                        Value.StructRecord
                                                                                                                                          "halo2_proofs::dev::VerifyFailure::CellNotAssigned"
                                                                                                                                          [
                                                                                                                                            ("gate",
                                                                                                                                              M.call_closure (|
                                                                                                                                                M.get_trait_method (|
                                                                                                                                                  "core::convert::Into",
                                                                                                                                                  Ty.tuple
                                                                                                                                                    [
                                                                                                                                                      Ty.path
                                                                                                                                                        "usize";
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "&")
                                                                                                                                                        [
                                                                                                                                                          Ty.path
                                                                                                                                                            "str"
                                                                                                                                                        ]
                                                                                                                                                    ],
                                                                                                                                                  [
                                                                                                                                                    Ty.path
                                                                                                                                                      "halo2_proofs::dev::metadata::Gate"
                                                                                                                                                  ],
                                                                                                                                                  "into",
                                                                                                                                                  []
                                                                                                                                                |),
                                                                                                                                                [
                                                                                                                                                  Value.Tuple
                                                                                                                                                    [
                                                                                                                                                      M.read (|
                                                                                                                                                        gate_index
                                                                                                                                                      |);
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        M.get_associated_function (|
                                                                                                                                                          Ty.apply
                                                                                                                                                            (Ty.path
                                                                                                                                                              "halo2_proofs::plonk::circuit::Gate")
                                                                                                                                                            [
                                                                                                                                                              F
                                                                                                                                                            ],
                                                                                                                                                          "name",
                                                                                                                                                          []
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          M.read (|
                                                                                                                                                            gate
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                      |)
                                                                                                                                                    ]
                                                                                                                                                ]
                                                                                                                                              |));
                                                                                                                                            ("region",
                                                                                                                                              M.call_closure (|
                                                                                                                                                M.get_trait_method (|
                                                                                                                                                  "core::convert::Into",
                                                                                                                                                  Ty.tuple
                                                                                                                                                    [
                                                                                                                                                      Ty.path
                                                                                                                                                        "usize";
                                                                                                                                                      Ty.path
                                                                                                                                                        "alloc::string::String"
                                                                                                                                                    ],
                                                                                                                                                  [
                                                                                                                                                    Ty.path
                                                                                                                                                      "halo2_proofs::dev::metadata::Region"
                                                                                                                                                  ],
                                                                                                                                                  "into",
                                                                                                                                                  []
                                                                                                                                                |),
                                                                                                                                                [
                                                                                                                                                  Value.Tuple
                                                                                                                                                    [
                                                                                                                                                      M.read (|
                                                                                                                                                        r_i
                                                                                                                                                      |);
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        M.get_trait_method (|
                                                                                                                                                          "core::clone::Clone",
                                                                                                                                                          Ty.path
                                                                                                                                                            "alloc::string::String",
                                                                                                                                                          [],
                                                                                                                                                          "clone",
                                                                                                                                                          []
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                                                                            M.read (|
                                                                                                                                                              r
                                                                                                                                                            |),
                                                                                                                                                            "halo2_proofs::dev::Region",
                                                                                                                                                            "name"
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                      |)
                                                                                                                                                    ]
                                                                                                                                                ]
                                                                                                                                              |));
                                                                                                                                            ("column",
                                                                                                                                              M.read (|
                                                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                                                  M.read (|
                                                                                                                                                    cell
                                                                                                                                                  |),
                                                                                                                                                  "halo2_proofs::plonk::circuit::VirtualCell",
                                                                                                                                                  "column"
                                                                                                                                                |)
                                                                                                                                              |));
                                                                                                                                            ("offset",
                                                                                                                                              BinOp.Panic.sub (|
                                                                                                                                                Integer.Isize,
                                                                                                                                                M.rust_cast
                                                                                                                                                  (M.read (|
                                                                                                                                                    cell_row
                                                                                                                                                  |)),
                                                                                                                                                M.rust_cast
                                                                                                                                                  (M.read (|
                                                                                                                                                    M.SubPointer.get_tuple_field (|
                                                                                                                                                      M.alloc (|
                                                                                                                                                        M.call_closure (|
                                                                                                                                                          M.get_associated_function (|
                                                                                                                                                            Ty.apply
                                                                                                                                                              (Ty.path
                                                                                                                                                                "core::option::Option")
                                                                                                                                                              [
                                                                                                                                                                Ty.tuple
                                                                                                                                                                  [
                                                                                                                                                                    Ty.path
                                                                                                                                                                      "usize";
                                                                                                                                                                    Ty.path
                                                                                                                                                                      "usize"
                                                                                                                                                                  ]
                                                                                                                                                              ],
                                                                                                                                                            "unwrap",
                                                                                                                                                            []
                                                                                                                                                          |),
                                                                                                                                                          [
                                                                                                                                                            M.read (|
                                                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                                                M.read (|
                                                                                                                                                                  r
                                                                                                                                                                |),
                                                                                                                                                                "halo2_proofs::dev::Region",
                                                                                                                                                                "rows"
                                                                                                                                                              |)
                                                                                                                                                            |)
                                                                                                                                                          ]
                                                                                                                                                        |)
                                                                                                                                                      |),
                                                                                                                                                      0
                                                                                                                                                    |)
                                                                                                                                                  |))
                                                                                                                                              |))
                                                                                                                                          ]
                                                                                                                                      ]
                                                                                                                                  |)))
                                                                                                                            ]
                                                                                                                          |)
                                                                                                                        |)))
                                                                                                                  ]
                                                                                                                |)
                                                                                                              | _ =>
                                                                                                                M.impossible (||)
                                                                                                              end))
                                                                                                      ]
                                                                                                    |)
                                                                                                  |)
                                                                                                |)))
                                                                                          ]
                                                                                        |)
                                                                                      | _ =>
                                                                                        M.impossible (||)
                                                                                      end))
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)))
                                                  ]
                                                |)
                                              | _ => M.impossible (||)
                                              end))
                                      ]
                                    |)))
                              ]
                            |)
                          | _ => M.impossible (||)
                          end))
                  ]
                |)
              |) in
            let gate_errors :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Gate") [ F ] ]
                      ],
                    [],
                    "flat_map",
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::flatten::FlatMap")
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            [ I; Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ] ];
                          Ty.apply
                            (Ty.path "core::iter::adapters::filter_map::FilterMap")
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                        [ F ]
                                    ]
                                ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "usize";
                                          Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                                [ F ]
                                            ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "core::option::Option")
                                  [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                            ];
                          Ty.function
                            [ Ty.tuple [ Ty.path "usize" ] ]
                            (Ty.apply
                              (Ty.path "core::iter::adapters::filter_map::FilterMap")
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                          [ F ]
                                      ]
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "usize";
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ]
                                              ]
                                          ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "core::option::Option")
                                    [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                              ])
                        ];
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.tuple
                                [
                                  Ty.path "usize";
                                  Ty.apply
                                    (Ty.path "&")
                                    [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Gate") [ F ]
                                    ]
                                ]
                            ]
                        ]
                        (Ty.apply
                          (Ty.path "core::iter::adapters::flatten::FlatMap")
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              [ I; Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ]
                              ];
                            Ty.apply
                              (Ty.path "core::iter::adapters::filter_map::FilterMap")
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                          [ F ]
                                      ]
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "usize";
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::Expression")
                                                  [ F ]
                                              ]
                                          ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "core::option::Option")
                                    [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                              ];
                            Ty.function
                              [ Ty.tuple [ Ty.path "usize" ] ]
                              (Ty.apply
                                (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ]
                                        ]
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::circuit::Expression")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "core::option::Option")
                                      [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                ])
                          ])
                    ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Gate") [ F ] ],
                        [],
                        "enumerate",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              [ Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Gate") [ F ] ],
                            "iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Gate") [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "deref",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "halo2_proofs::dev::MockVerifier",
                                    "cs"
                                  |),
                                  "halo2_proofs::plonk::circuit::ConstraintSystem",
                                  "gates"
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            M.match_operator (|
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let gate_index := M.copy (| γ0_0 |) in
                                    let gate := M.copy (| γ0_1 |) in
                                    M.read (|
                                      let blinding_rows :=
                                        M.alloc (|
                                          Value.StructRecord
                                            "core::ops::range::Range"
                                            [
                                              ("start",
                                                BinOp.Panic.sub (|
                                                  Integer.Usize,
                                                  M.rust_cast
                                                    (M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "halo2_proofs::dev::MockVerifier",
                                                        "n"
                                                      |)
                                                    |)),
                                                  BinOp.Panic.add (|
                                                    Integer.Usize,
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                          [ F ],
                                                        "blinding_factors",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| self |),
                                                          "halo2_proofs::dev::MockVerifier",
                                                          "cs"
                                                        |)
                                                      ]
                                                    |),
                                                    Value.Integer 1
                                                  |)
                                                |));
                                              ("end_",
                                                M.rust_cast
                                                  (M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "halo2_proofs::dev::MockVerifier",
                                                      "n"
                                                    |)
                                                  |)))
                                            ]
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::chain::Chain")
                                              [
                                                I;
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  [ Ty.path "usize" ]
                                              ],
                                            [],
                                            "flat_map",
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::filter_map::FilterMap")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::enumerate::Enumerate")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ]
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path "usize";
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      [ Ty.path "halo2_proofs::dev::VerifyFailure"
                                                      ])
                                                ];
                                              Ty.function
                                                [ Ty.tuple [ Ty.path "usize" ] ]
                                                (Ty.apply
                                                  (Ty.path
                                                    "core::iter::adapters::filter_map::FilterMap")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::enumerate::Enumerate")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ]
                                                          ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path "usize";
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ F ]
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        [ Ty.path "halo2_proofs::dev::VerifyFailure"
                                                        ])
                                                  ])
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                I,
                                                [],
                                                "chain",
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    [ Ty.path "usize" ]
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    I,
                                                    [],
                                                    "into_iter",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::clone::Clone",
                                                        I,
                                                        [],
                                                        "clone",
                                                        []
                                                      |),
                                                      [ gate_row_ids ]
                                                    |)
                                                  ]
                                                |);
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::Range")
                                                      [ Ty.path "usize" ],
                                                    [],
                                                    "into_iter",
                                                    []
                                                  |),
                                                  [ M.read (| blinding_rows |) ]
                                                |)
                                              ]
                                            |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let row := M.copy (| γ |) in
                                                            M.read (|
                                                              let row :=
                                                                M.alloc (|
                                                                  M.rust_cast (M.read (| row |))
                                                                |) in
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ]
                                                                          ]
                                                                      ],
                                                                    [],
                                                                    "filter_map",
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::dev::VerifyFailure";
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.path "usize";
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                        (Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::dev::VerifyFailure"
                                                                          ])
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ F ]
                                                                          ],
                                                                        [],
                                                                        "enumerate",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ F ]
                                                                              ],
                                                                            "iter",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Gate")
                                                                                  [ F ],
                                                                                "polynomials",
                                                                                []
                                                                              |),
                                                                              [ M.read (| gate |) ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ0_0 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ,
                                                                                        0
                                                                                      |) in
                                                                                    let γ0_1 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ,
                                                                                        1
                                                                                      |) in
                                                                                    let
                                                                                          poly_index :=
                                                                                      M.copy (|
                                                                                        γ0_0
                                                                                      |) in
                                                                                    let poly :=
                                                                                      M.copy (|
                                                                                        γ0_1
                                                                                      |) in
                                                                                    M.read (|
                                                                                      M.match_operator (|
                                                                                        M.alloc (|
                                                                                          M.call_closure (|
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                [ F
                                                                                                ],
                                                                                              "evaluate_lazy",
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "halo2_proofs::dev::Value")
                                                                                                  [
                                                                                                    F
                                                                                                  ];
                                                                                                Ty.function
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      [
                                                                                                        F
                                                                                                      ]
                                                                                                  ]
                                                                                                  (Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::dev::Value")
                                                                                                    [
                                                                                                      F
                                                                                                    ]);
                                                                                                Ty.function
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::Selector"
                                                                                                      ]
                                                                                                  ]
                                                                                                  (Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::dev::Value")
                                                                                                    [
                                                                                                      F
                                                                                                    ]);
                                                                                                Ty.associated;
                                                                                                Ty.associated;
                                                                                                Ty.associated;
                                                                                                Ty.function
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "halo2_proofs::dev::Value")
                                                                                                          [
                                                                                                            F
                                                                                                          ]
                                                                                                      ]
                                                                                                  ]
                                                                                                  (Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::dev::Value")
                                                                                                    [
                                                                                                      F
                                                                                                    ]);
                                                                                                Ty.function
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "halo2_proofs::dev::Value")
                                                                                                          [
                                                                                                            F
                                                                                                          ];
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "halo2_proofs::dev::Value")
                                                                                                          [
                                                                                                            F
                                                                                                          ]
                                                                                                      ]
                                                                                                  ]
                                                                                                  (Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::dev::Value")
                                                                                                    [
                                                                                                      F
                                                                                                    ]);
                                                                                                Ty.function
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "halo2_proofs::dev::Value")
                                                                                                          [
                                                                                                            F
                                                                                                          ];
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "halo2_proofs::dev::Value")
                                                                                                          [
                                                                                                            F
                                                                                                          ]
                                                                                                      ]
                                                                                                  ]
                                                                                                  (Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::dev::Value")
                                                                                                    [
                                                                                                      F
                                                                                                    ]);
                                                                                                Ty.function
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "halo2_proofs::dev::Value")
                                                                                                          [
                                                                                                            F
                                                                                                          ];
                                                                                                        F
                                                                                                      ]
                                                                                                  ]
                                                                                                  (Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::dev::Value")
                                                                                                    [
                                                                                                      F
                                                                                                    ])
                                                                                              ]
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                poly
                                                                                              |);
                                                                                              M.alloc (|
                                                                                                M.closure
                                                                                                  (fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      match
                                                                                                        γ
                                                                                                      with
                                                                                                      | [
                                                                                                            α0
                                                                                                          ] =>
                                                                                                        M.match_operator (|
                                                                                                          M.alloc (|
                                                                                                            α0
                                                                                                          |),
                                                                                                          [
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                (let
                                                                                                                      scalar :=
                                                                                                                  M.copy (|
                                                                                                                    γ
                                                                                                                  |) in
                                                                                                                Value.StructTuple
                                                                                                                  "halo2_proofs::dev::Value::Real"
                                                                                                                  [
                                                                                                                    M.read (|
                                                                                                                      scalar
                                                                                                                    |)
                                                                                                                  ]))
                                                                                                          ]
                                                                                                        |)
                                                                                                      | _ =>
                                                                                                        M.impossible (||)
                                                                                                      end))
                                                                                              |);
                                                                                              M.alloc (|
                                                                                                M.closure
                                                                                                  (fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      match
                                                                                                        γ
                                                                                                      with
                                                                                                      | [
                                                                                                            α0
                                                                                                          ] =>
                                                                                                        M.match_operator (|
                                                                                                          M.alloc (|
                                                                                                            α0
                                                                                                          |),
                                                                                                          [
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                (M.never_to_any (|
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_function (|
                                                                                                                      "std::panicking::begin_panic",
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "&")
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "str"
                                                                                                                          ]
                                                                                                                      ]
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.read (|
                                                                                                                        Value.String
                                                                                                                          "virtual selectors are removed during optimization"
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                |)))
                                                                                                          ]
                                                                                                        |)
                                                                                                      | _ =>
                                                                                                        M.impossible (||)
                                                                                                      end))
                                                                                              |);
                                                                                              M.alloc (|
                                                                                                M.call_closure (|
                                                                                                  M.read (|
                                                                                                    (* Unimplemented parent_kind *)
                                                                                                    M.alloc (|
                                                                                                      Value.Tuple
                                                                                                        []
                                                                                                    |)
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      n
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      row
                                                                                                    |);
                                                                                                    M.call_closure (|
                                                                                                      M.get_trait_method (|
                                                                                                        "core::ops::deref::Deref",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          [
                                                                                                            Ty.tuple
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "halo2_proofs::plonk::circuit::Fixed"
                                                                                                                  ];
                                                                                                                Ty.path
                                                                                                                  "halo2_proofs::poly::Rotation"
                                                                                                              ];
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ],
                                                                                                        [],
                                                                                                        "deref",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                            M.read (|
                                                                                                              self
                                                                                                            |),
                                                                                                            "halo2_proofs::dev::MockVerifier",
                                                                                                            "cs"
                                                                                                          |),
                                                                                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                                                          "fixed_queries"
                                                                                                        |)
                                                                                                      ]
                                                                                                    |);
                                                                                                    M.call_closure (|
                                                                                                      M.get_trait_method (|
                                                                                                        "core::ops::deref::Deref",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "halo2_proofs::dev::CellValue")
                                                                                                                  [
                                                                                                                    F
                                                                                                                  ];
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ];
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ],
                                                                                                        [],
                                                                                                        "deref",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                          M.read (|
                                                                                                            self
                                                                                                          |),
                                                                                                          "halo2_proofs::dev::MockVerifier",
                                                                                                          "fixed"
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |);
                                                                                              M.alloc (|
                                                                                                M.call_closure (|
                                                                                                  M.read (|
                                                                                                    (* Unimplemented parent_kind *)
                                                                                                    M.alloc (|
                                                                                                      Value.Tuple
                                                                                                        []
                                                                                                    |)
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      n
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      row
                                                                                                    |);
                                                                                                    M.call_closure (|
                                                                                                      M.get_trait_method (|
                                                                                                        "core::ops::deref::Deref",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          [
                                                                                                            Ty.tuple
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "halo2_proofs::plonk::circuit::Advice"
                                                                                                                  ];
                                                                                                                Ty.path
                                                                                                                  "halo2_proofs::poly::Rotation"
                                                                                                              ];
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ],
                                                                                                        [],
                                                                                                        "deref",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                            M.read (|
                                                                                                              self
                                                                                                            |),
                                                                                                            "halo2_proofs::dev::MockVerifier",
                                                                                                            "cs"
                                                                                                          |),
                                                                                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                                                          "advice_queries"
                                                                                                        |)
                                                                                                      ]
                                                                                                    |);
                                                                                                    M.call_closure (|
                                                                                                      M.get_trait_method (|
                                                                                                        "core::ops::deref::Deref",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "halo2_proofs::dev::CellValue")
                                                                                                                  [
                                                                                                                    F
                                                                                                                  ];
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ];
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ],
                                                                                                        [],
                                                                                                        "deref",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                          M.read (|
                                                                                                            self
                                                                                                          |),
                                                                                                          "halo2_proofs::dev::MockVerifier",
                                                                                                          "advice"
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |);
                                                                                              M.alloc (|
                                                                                                M.call_closure (|
                                                                                                  M.read (|
                                                                                                    (* Unimplemented parent_kind *)
                                                                                                    M.alloc (|
                                                                                                      Value.Tuple
                                                                                                        []
                                                                                                    |)
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      n
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      row
                                                                                                    |);
                                                                                                    M.call_closure (|
                                                                                                      M.get_trait_method (|
                                                                                                        "core::ops::deref::Deref",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          [
                                                                                                            Ty.tuple
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "halo2_proofs::plonk::circuit::Instance"
                                                                                                                  ];
                                                                                                                Ty.path
                                                                                                                  "halo2_proofs::poly::Rotation"
                                                                                                              ];
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ],
                                                                                                        [],
                                                                                                        "deref",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                            M.read (|
                                                                                                              self
                                                                                                            |),
                                                                                                            "halo2_proofs::dev::MockVerifier",
                                                                                                            "cs"
                                                                                                          |),
                                                                                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                                                          "instance_queries"
                                                                                                        |)
                                                                                                      ]
                                                                                                    |);
                                                                                                    M.call_closure (|
                                                                                                      M.get_trait_method (|
                                                                                                        "core::ops::deref::Deref",
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              [
                                                                                                                F;
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ];
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ],
                                                                                                        [],
                                                                                                        "deref",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                          M.read (|
                                                                                                            self
                                                                                                          |),
                                                                                                          "halo2_proofs::dev::MockVerifier",
                                                                                                          "instance"
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |);
                                                                                              M.alloc (|
                                                                                                M.closure
                                                                                                  (fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      match
                                                                                                        γ
                                                                                                      with
                                                                                                      | [
                                                                                                            α0
                                                                                                          ] =>
                                                                                                        M.match_operator (|
                                                                                                          M.alloc (|
                                                                                                            α0
                                                                                                          |),
                                                                                                          [
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                (let
                                                                                                                      a :=
                                                                                                                  M.copy (|
                                                                                                                    γ
                                                                                                                  |) in
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::ops::arith::Neg",
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "halo2_proofs::dev::Value")
                                                                                                                      [
                                                                                                                        F
                                                                                                                      ],
                                                                                                                    [],
                                                                                                                    "neg",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.read (|
                                                                                                                      a
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)))
                                                                                                          ]
                                                                                                        |)
                                                                                                      | _ =>
                                                                                                        M.impossible (||)
                                                                                                      end))
                                                                                              |);
                                                                                              M.alloc (|
                                                                                                M.closure
                                                                                                  (fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      match
                                                                                                        γ
                                                                                                      with
                                                                                                      | [
                                                                                                            α0;
                                                                                                            α1
                                                                                                          ] =>
                                                                                                        M.match_operator (|
                                                                                                          M.alloc (|
                                                                                                            α0
                                                                                                          |),
                                                                                                          [
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                (let
                                                                                                                      a :=
                                                                                                                  M.copy (|
                                                                                                                    γ
                                                                                                                  |) in
                                                                                                                M.match_operator (|
                                                                                                                  M.alloc (|
                                                                                                                    α1
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    fun
                                                                                                                        γ =>
                                                                                                                      ltac:(M.monadic
                                                                                                                        (let
                                                                                                                              b :=
                                                                                                                          M.copy (|
                                                                                                                            γ
                                                                                                                          |) in
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::ops::arith::Add",
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "halo2_proofs::dev::Value")
                                                                                                                              [
                                                                                                                                F
                                                                                                                              ],
                                                                                                                            [
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "halo2_proofs::dev::Value")
                                                                                                                                [
                                                                                                                                  F
                                                                                                                                ]
                                                                                                                            ],
                                                                                                                            "add",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.read (|
                                                                                                                              a
                                                                                                                            |);
                                                                                                                            M.read (|
                                                                                                                              b
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)))
                                                                                                                  ]
                                                                                                                |)))
                                                                                                          ]
                                                                                                        |)
                                                                                                      | _ =>
                                                                                                        M.impossible (||)
                                                                                                      end))
                                                                                              |);
                                                                                              M.alloc (|
                                                                                                M.closure
                                                                                                  (fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      match
                                                                                                        γ
                                                                                                      with
                                                                                                      | [
                                                                                                            α0;
                                                                                                            α1
                                                                                                          ] =>
                                                                                                        M.match_operator (|
                                                                                                          M.alloc (|
                                                                                                            α0
                                                                                                          |),
                                                                                                          [
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                (let
                                                                                                                      a :=
                                                                                                                  M.copy (|
                                                                                                                    γ
                                                                                                                  |) in
                                                                                                                M.match_operator (|
                                                                                                                  M.alloc (|
                                                                                                                    α1
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    fun
                                                                                                                        γ =>
                                                                                                                      ltac:(M.monadic
                                                                                                                        (let
                                                                                                                              b :=
                                                                                                                          M.copy (|
                                                                                                                            γ
                                                                                                                          |) in
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::ops::arith::Mul",
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "halo2_proofs::dev::Value")
                                                                                                                              [
                                                                                                                                F
                                                                                                                              ],
                                                                                                                            [
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "halo2_proofs::dev::Value")
                                                                                                                                [
                                                                                                                                  F
                                                                                                                                ]
                                                                                                                            ],
                                                                                                                            "mul",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.read (|
                                                                                                                              a
                                                                                                                            |);
                                                                                                                            M.read (|
                                                                                                                              b
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)))
                                                                                                                  ]
                                                                                                                |)))
                                                                                                          ]
                                                                                                        |)
                                                                                                      | _ =>
                                                                                                        M.impossible (||)
                                                                                                      end))
                                                                                              |);
                                                                                              M.alloc (|
                                                                                                M.closure
                                                                                                  (fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      match
                                                                                                        γ
                                                                                                      with
                                                                                                      | [
                                                                                                            α0;
                                                                                                            α1
                                                                                                          ] =>
                                                                                                        M.match_operator (|
                                                                                                          M.alloc (|
                                                                                                            α0
                                                                                                          |),
                                                                                                          [
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                (let
                                                                                                                      a :=
                                                                                                                  M.copy (|
                                                                                                                    γ
                                                                                                                  |) in
                                                                                                                M.match_operator (|
                                                                                                                  M.alloc (|
                                                                                                                    α1
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    fun
                                                                                                                        γ =>
                                                                                                                      ltac:(M.monadic
                                                                                                                        (let
                                                                                                                              scalar :=
                                                                                                                          M.copy (|
                                                                                                                            γ
                                                                                                                          |) in
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::ops::arith::Mul",
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "halo2_proofs::dev::Value")
                                                                                                                              [
                                                                                                                                F
                                                                                                                              ],
                                                                                                                            [
                                                                                                                              F
                                                                                                                            ],
                                                                                                                            "mul",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.read (|
                                                                                                                              a
                                                                                                                            |);
                                                                                                                            M.read (|
                                                                                                                              scalar
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)))
                                                                                                                  ]
                                                                                                                |)))
                                                                                                          ]
                                                                                                        |)
                                                                                                      | _ =>
                                                                                                        M.impossible (||)
                                                                                                      end))
                                                                                              |);
                                                                                              M.alloc (|
                                                                                                Value.StructTuple
                                                                                                  "halo2_proofs::dev::Value::Real"
                                                                                                  [
                                                                                                    M.call_closure (|
                                                                                                      M.get_trait_method (|
                                                                                                        "ff::Field",
                                                                                                        F,
                                                                                                        [],
                                                                                                        "zero",
                                                                                                        []
                                                                                                      |),
                                                                                                      []
                                                                                                    |)
                                                                                                  ]
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |),
                                                                                        [
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (let
                                                                                                    γ0_0 :=
                                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                                  γ,
                                                                                                  "halo2_proofs::dev::Value::Real",
                                                                                                  0
                                                                                                |) in
                                                                                              let
                                                                                                    x :=
                                                                                                M.copy (|
                                                                                                  γ0_0
                                                                                                |) in
                                                                                              let
                                                                                                    γ :=
                                                                                                M.alloc (|
                                                                                                  M.call_closure (|
                                                                                                    M.get_trait_method (|
                                                                                                      "ff::Field",
                                                                                                      F,
                                                                                                      [],
                                                                                                      "is_zero_vartime",
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      x
                                                                                                    ]
                                                                                                  |)
                                                                                                |) in
                                                                                              let
                                                                                                    _ :=
                                                                                                M.is_constant_or_break_match (|
                                                                                                  M.read (|
                                                                                                    γ
                                                                                                  |),
                                                                                                  Value.Bool
                                                                                                    true
                                                                                                |) in
                                                                                              M.alloc (|
                                                                                                Value.StructTuple
                                                                                                  "core::option::Option::None"
                                                                                                  []
                                                                                              |)));
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (let
                                                                                                    γ0_0 :=
                                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                                  γ,
                                                                                                  "halo2_proofs::dev::Value::Real",
                                                                                                  0
                                                                                                |) in
                                                                                              M.alloc (|
                                                                                                Value.StructTuple
                                                                                                  "core::option::Option::Some"
                                                                                                  [
                                                                                                    Value.StructRecord
                                                                                                      "halo2_proofs::dev::VerifyFailure::ConstraintNotSatisfied"
                                                                                                      [
                                                                                                        ("constraint",
                                                                                                          M.call_closure (|
                                                                                                            M.get_trait_method (|
                                                                                                              "core::convert::Into",
                                                                                                              Ty.tuple
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "halo2_proofs::dev::metadata::Gate";
                                                                                                                  Ty.path
                                                                                                                    "usize";
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "&")
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "str"
                                                                                                                    ]
                                                                                                                ],
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "halo2_proofs::dev::metadata::Constraint"
                                                                                                              ],
                                                                                                              "into",
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              Value.Tuple
                                                                                                                [
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::convert::Into",
                                                                                                                      Ty.tuple
                                                                                                                        [
                                                                                                                          Ty.path
                                                                                                                            "usize";
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "&")
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "str"
                                                                                                                            ]
                                                                                                                        ],
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "halo2_proofs::dev::metadata::Gate"
                                                                                                                      ],
                                                                                                                      "into",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      Value.Tuple
                                                                                                                        [
                                                                                                                          M.read (|
                                                                                                                            gate_index
                                                                                                                          |);
                                                                                                                          M.call_closure (|
                                                                                                                            M.get_associated_function (|
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "halo2_proofs::plonk::circuit::Gate")
                                                                                                                                [
                                                                                                                                  F
                                                                                                                                ],
                                                                                                                              "name",
                                                                                                                              []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              M.read (|
                                                                                                                                gate
                                                                                                                              |)
                                                                                                                            ]
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                    ]
                                                                                                                  |);
                                                                                                                  M.read (|
                                                                                                                    poly_index
                                                                                                                  |);
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_associated_function (|
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "halo2_proofs::plonk::circuit::Gate")
                                                                                                                        [
                                                                                                                          F
                                                                                                                        ],
                                                                                                                      "constraint_name",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.read (|
                                                                                                                        gate
                                                                                                                      |);
                                                                                                                      M.read (|
                                                                                                                        poly_index
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                ]
                                                                                                            ]
                                                                                                          |));
                                                                                                        ("location",
                                                                                                          M.call_closure (|
                                                                                                            M.get_associated_function (|
                                                                                                              Ty.path
                                                                                                                "halo2_proofs::dev::FailureLocation",
                                                                                                              "find_expressions",
                                                                                                              [
                                                                                                                F;
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "core::option::IntoIter")
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "&")
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                                                          [
                                                                                                                            F
                                                                                                                          ]
                                                                                                                      ]
                                                                                                                  ]
                                                                                                              ]
                                                                                                            |),
                                                                                                            [
                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                M.read (|
                                                                                                                  self
                                                                                                                |),
                                                                                                                "halo2_proofs::dev::MockVerifier",
                                                                                                                "cs"
                                                                                                              |);
                                                                                                              M.call_closure (|
                                                                                                                M.get_trait_method (|
                                                                                                                  "core::ops::deref::Deref",
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "alloc::vec::Vec")
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "halo2_proofs::dev::Region";
                                                                                                                      Ty.path
                                                                                                                        "alloc::alloc::Global"
                                                                                                                    ],
                                                                                                                  [],
                                                                                                                  "deref",
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                                    M.read (|
                                                                                                                      self
                                                                                                                    |),
                                                                                                                    "halo2_proofs::dev::MockVerifier",
                                                                                                                    "regions"
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |);
                                                                                                              M.rust_cast
                                                                                                                (M.read (|
                                                                                                                  row
                                                                                                                |));
                                                                                                              M.call_closure (|
                                                                                                                M.get_trait_method (|
                                                                                                                  "core::iter::traits::collect::IntoIterator",
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "core::option::Option")
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "&")
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                                                            [
                                                                                                                              F
                                                                                                                            ]
                                                                                                                        ]
                                                                                                                    ],
                                                                                                                  [],
                                                                                                                  "into_iter",
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  Value.StructTuple
                                                                                                                    "core::option::Option::Some"
                                                                                                                    [
                                                                                                                      M.read (|
                                                                                                                        poly
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                ]
                                                                                                              |)
                                                                                                            ]
                                                                                                          |));
                                                                                                        ("cell_values",
                                                                                                          M.call_closure (|
                                                                                                            M.get_function (|
                                                                                                              "halo2_proofs::dev::util::cell_values",
                                                                                                              [
                                                                                                                F;
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "&")
                                                                                                                  [
                                                                                                                    Ty.associated
                                                                                                                  ];
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "&")
                                                                                                                  [
                                                                                                                    Ty.associated
                                                                                                                  ];
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "&")
                                                                                                                  [
                                                                                                                    Ty.associated
                                                                                                                  ]
                                                                                                              ]
                                                                                                            |),
                                                                                                            [
                                                                                                              M.read (|
                                                                                                                gate
                                                                                                              |);
                                                                                                              M.read (|
                                                                                                                poly
                                                                                                              |);
                                                                                                              M.alloc (|
                                                                                                                M.call_closure (|
                                                                                                                  M.read (|
                                                                                                                    (* Unimplemented parent_kind *)
                                                                                                                    M.alloc (|
                                                                                                                      Value.Tuple
                                                                                                                        []
                                                                                                                    |)
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.read (|
                                                                                                                      n
                                                                                                                    |);
                                                                                                                    M.read (|
                                                                                                                      row
                                                                                                                    |);
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::ops::deref::Deref",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "alloc::vec::Vec")
                                                                                                                          [
                                                                                                                            Ty.tuple
                                                                                                                              [
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                                                                                  [
                                                                                                                                    Ty.path
                                                                                                                                      "halo2_proofs::plonk::circuit::Fixed"
                                                                                                                                  ];
                                                                                                                                Ty.path
                                                                                                                                  "halo2_proofs::poly::Rotation"
                                                                                                                              ];
                                                                                                                            Ty.path
                                                                                                                              "alloc::alloc::Global"
                                                                                                                          ],
                                                                                                                        [],
                                                                                                                        "deref",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                                            M.read (|
                                                                                                                              self
                                                                                                                            |),
                                                                                                                            "halo2_proofs::dev::MockVerifier",
                                                                                                                            "cs"
                                                                                                                          |),
                                                                                                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                                                                          "fixed_queries"
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |);
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::ops::deref::Deref",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "alloc::vec::Vec")
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "alloc::vec::Vec")
                                                                                                                              [
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "halo2_proofs::dev::CellValue")
                                                                                                                                  [
                                                                                                                                    F
                                                                                                                                  ];
                                                                                                                                Ty.path
                                                                                                                                  "alloc::alloc::Global"
                                                                                                                              ];
                                                                                                                            Ty.path
                                                                                                                              "alloc::alloc::Global"
                                                                                                                          ],
                                                                                                                        [],
                                                                                                                        "deref",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                                          M.read (|
                                                                                                                            self
                                                                                                                          |),
                                                                                                                          "halo2_proofs::dev::MockVerifier",
                                                                                                                          "fixed"
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)
                                                                                                              |);
                                                                                                              M.alloc (|
                                                                                                                M.call_closure (|
                                                                                                                  M.read (|
                                                                                                                    (* Unimplemented parent_kind *)
                                                                                                                    M.alloc (|
                                                                                                                      Value.Tuple
                                                                                                                        []
                                                                                                                    |)
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.read (|
                                                                                                                      n
                                                                                                                    |);
                                                                                                                    M.read (|
                                                                                                                      row
                                                                                                                    |);
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::ops::deref::Deref",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "alloc::vec::Vec")
                                                                                                                          [
                                                                                                                            Ty.tuple
                                                                                                                              [
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                                                                                  [
                                                                                                                                    Ty.path
                                                                                                                                      "halo2_proofs::plonk::circuit::Advice"
                                                                                                                                  ];
                                                                                                                                Ty.path
                                                                                                                                  "halo2_proofs::poly::Rotation"
                                                                                                                              ];
                                                                                                                            Ty.path
                                                                                                                              "alloc::alloc::Global"
                                                                                                                          ],
                                                                                                                        [],
                                                                                                                        "deref",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                                            M.read (|
                                                                                                                              self
                                                                                                                            |),
                                                                                                                            "halo2_proofs::dev::MockVerifier",
                                                                                                                            "cs"
                                                                                                                          |),
                                                                                                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                                                                          "advice_queries"
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |);
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::ops::deref::Deref",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "alloc::vec::Vec")
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "alloc::vec::Vec")
                                                                                                                              [
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "halo2_proofs::dev::CellValue")
                                                                                                                                  [
                                                                                                                                    F
                                                                                                                                  ];
                                                                                                                                Ty.path
                                                                                                                                  "alloc::alloc::Global"
                                                                                                                              ];
                                                                                                                            Ty.path
                                                                                                                              "alloc::alloc::Global"
                                                                                                                          ],
                                                                                                                        [],
                                                                                                                        "deref",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                                          M.read (|
                                                                                                                            self
                                                                                                                          |),
                                                                                                                          "halo2_proofs::dev::MockVerifier",
                                                                                                                          "advice"
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)
                                                                                                              |);
                                                                                                              M.alloc (|
                                                                                                                M.call_closure (|
                                                                                                                  M.read (|
                                                                                                                    (* Unimplemented parent_kind *)
                                                                                                                    M.alloc (|
                                                                                                                      Value.Tuple
                                                                                                                        []
                                                                                                                    |)
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.read (|
                                                                                                                      n
                                                                                                                    |);
                                                                                                                    M.read (|
                                                                                                                      row
                                                                                                                    |);
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::ops::deref::Deref",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "alloc::vec::Vec")
                                                                                                                          [
                                                                                                                            Ty.tuple
                                                                                                                              [
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                                                                                  [
                                                                                                                                    Ty.path
                                                                                                                                      "halo2_proofs::plonk::circuit::Instance"
                                                                                                                                  ];
                                                                                                                                Ty.path
                                                                                                                                  "halo2_proofs::poly::Rotation"
                                                                                                                              ];
                                                                                                                            Ty.path
                                                                                                                              "alloc::alloc::Global"
                                                                                                                          ],
                                                                                                                        [],
                                                                                                                        "deref",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                                            M.read (|
                                                                                                                              self
                                                                                                                            |),
                                                                                                                            "halo2_proofs::dev::MockVerifier",
                                                                                                                            "cs"
                                                                                                                          |),
                                                                                                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                                                                          "instance_queries"
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |);
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::ops::deref::Deref",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "alloc::vec::Vec")
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "alloc::vec::Vec")
                                                                                                                              [
                                                                                                                                F;
                                                                                                                                Ty.path
                                                                                                                                  "alloc::alloc::Global"
                                                                                                                              ];
                                                                                                                            Ty.path
                                                                                                                              "alloc::alloc::Global"
                                                                                                                          ],
                                                                                                                        [],
                                                                                                                        "deref",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                                          M.read (|
                                                                                                                            self
                                                                                                                          |),
                                                                                                                          "halo2_proofs::dev::MockVerifier",
                                                                                                                          "instance"
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)
                                                                                                              |)
                                                                                                            ]
                                                                                                          |))
                                                                                                      ]
                                                                                                  ]
                                                                                              |)));
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (M.alloc (|
                                                                                                Value.StructTuple
                                                                                                  "core::option::Option::Some"
                                                                                                  [
                                                                                                    Value.StructRecord
                                                                                                      "halo2_proofs::dev::VerifyFailure::ConstraintPoisoned"
                                                                                                      [
                                                                                                        ("constraint",
                                                                                                          M.call_closure (|
                                                                                                            M.get_trait_method (|
                                                                                                              "core::convert::Into",
                                                                                                              Ty.tuple
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "halo2_proofs::dev::metadata::Gate";
                                                                                                                  Ty.path
                                                                                                                    "usize";
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "&")
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "str"
                                                                                                                    ]
                                                                                                                ],
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "halo2_proofs::dev::metadata::Constraint"
                                                                                                              ],
                                                                                                              "into",
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              Value.Tuple
                                                                                                                [
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::convert::Into",
                                                                                                                      Ty.tuple
                                                                                                                        [
                                                                                                                          Ty.path
                                                                                                                            "usize";
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "&")
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "str"
                                                                                                                            ]
                                                                                                                        ],
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "halo2_proofs::dev::metadata::Gate"
                                                                                                                      ],
                                                                                                                      "into",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      Value.Tuple
                                                                                                                        [
                                                                                                                          M.read (|
                                                                                                                            gate_index
                                                                                                                          |);
                                                                                                                          M.call_closure (|
                                                                                                                            M.get_associated_function (|
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "halo2_proofs::plonk::circuit::Gate")
                                                                                                                                [
                                                                                                                                  F
                                                                                                                                ],
                                                                                                                              "name",
                                                                                                                              []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              M.read (|
                                                                                                                                gate
                                                                                                                              |)
                                                                                                                            ]
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                    ]
                                                                                                                  |);
                                                                                                                  M.read (|
                                                                                                                    poly_index
                                                                                                                  |);
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_associated_function (|
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "halo2_proofs::plonk::circuit::Gate")
                                                                                                                        [
                                                                                                                          F
                                                                                                                        ],
                                                                                                                      "constraint_name",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.read (|
                                                                                                                        gate
                                                                                                                      |);
                                                                                                                      M.read (|
                                                                                                                        poly_index
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                ]
                                                                                                            ]
                                                                                                          |))
                                                                                                      ]
                                                                                                  ]
                                                                                              |)))
                                                                                        ]
                                                                                      |)
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  ]
                                                                |)
                                                              |)
                                                            |)))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)
                          | _ => M.impossible (||)
                          end))
                  ]
                |)
              |) in
            let lookup_errors :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          [ Ty.apply (Ty.path "halo2_proofs::plonk::lookup::Argument") [ F ] ]
                      ],
                    [],
                    "flat_map",
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::filter_map::FilterMap")
                        [
                          I;
                          Ty.function
                            [ Ty.tuple [ Ty.path "usize" ] ]
                            (Ty.apply
                              (Ty.path "core::option::Option")
                              [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                        ];
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.tuple
                                [
                                  Ty.path "usize";
                                  Ty.apply
                                    (Ty.path "&")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                        [ F ]
                                    ]
                                ]
                            ]
                        ]
                        (Ty.apply
                          (Ty.path "core::iter::adapters::filter_map::FilterMap")
                          [
                            I;
                            Ty.function
                              [ Ty.tuple [ Ty.path "usize" ] ]
                              (Ty.apply
                                (Ty.path "core::option::Option")
                                [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                          ])
                    ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          [ Ty.apply (Ty.path "halo2_proofs::plonk::lookup::Argument") [ F ] ],
                        [],
                        "enumerate",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              [ Ty.apply (Ty.path "halo2_proofs::plonk::lookup::Argument") [ F ] ],
                            "iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "deref",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "halo2_proofs::dev::MockVerifier",
                                    "cs"
                                  |),
                                  "halo2_proofs::plonk::circuit::ConstraintSystem",
                                  "lookups"
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            M.match_operator (|
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let lookup_index := M.copy (| γ0_0 |) in
                                    let lookup := M.copy (| γ0_1 |) in
                                    M.read (|
                                      let load :=
                                        M.alloc (|
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0; α1 ] =>
                                                  M.match_operator (|
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let expression := M.copy (| γ |) in
                                                          M.match_operator (|
                                                            M.alloc (| α1 |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let row := M.copy (| γ |) in
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ F ],
                                                                      "evaluate_lazy",
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::dev::Value")
                                                                          [ F ];
                                                                        Ty.function
                                                                          [ Ty.tuple [ F ] ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::dev::Value")
                                                                            [ F ]);
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Selector"
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::dev::Value")
                                                                            [ F ]);
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.path "usize";
                                                                                Ty.path
                                                                                  "halo2_proofs::poly::Rotation"
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::dev::Value")
                                                                            [ F ]);
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.path "usize";
                                                                                Ty.path
                                                                                  "halo2_proofs::poly::Rotation"
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::dev::Value")
                                                                            [ F ]);
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.path "usize";
                                                                                Ty.path
                                                                                  "halo2_proofs::poly::Rotation"
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::dev::Value")
                                                                            [ F ]);
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::dev::Value")
                                                                                  [ F ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::dev::Value")
                                                                            [ F ]);
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::dev::Value")
                                                                                  [ F ];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::dev::Value")
                                                                                  [ F ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::dev::Value")
                                                                            [ F ]);
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::dev::Value")
                                                                                  [ F ];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::dev::Value")
                                                                                  [ F ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::dev::Value")
                                                                            [ F ]);
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::dev::Value")
                                                                                  [ F ];
                                                                                F
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::dev::Value")
                                                                            [ F ])
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| expression |);
                                                                      M.alloc (|
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0 ] =>
                                                                                M.match_operator (|
                                                                                  M.alloc (| α0 |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let
                                                                                              scalar :=
                                                                                          M.copy (|
                                                                                            γ
                                                                                          |) in
                                                                                        Value.StructTuple
                                                                                          "halo2_proofs::dev::Value::Real"
                                                                                          [
                                                                                            M.read (|
                                                                                              scalar
                                                                                            |)
                                                                                          ]))
                                                                                  ]
                                                                                |)
                                                                              | _ =>
                                                                                M.impossible (||)
                                                                              end))
                                                                      |);
                                                                      M.alloc (|
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0 ] =>
                                                                                M.match_operator (|
                                                                                  M.alloc (| α0 |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (M.never_to_any (|
                                                                                          M.call_closure (|
                                                                                            M.get_function (|
                                                                                              "std::panicking::begin_panic",
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "str"
                                                                                                  ]
                                                                                              ]
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                Value.String
                                                                                                  "virtual selectors are removed during optimization"
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)))
                                                                                  ]
                                                                                |)
                                                                              | _ =>
                                                                                M.impossible (||)
                                                                              end))
                                                                      |);
                                                                      M.alloc (|
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0; α1; α2 ] =>
                                                                                M.match_operator (|
                                                                                  M.alloc (| α0 |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let
                                                                                              index :=
                                                                                          M.copy (|
                                                                                            γ
                                                                                          |) in
                                                                                        M.match_operator (|
                                                                                          M.alloc (|
                                                                                            α1
                                                                                          |),
                                                                                          [
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (M.match_operator (|
                                                                                                  M.alloc (|
                                                                                                    α2
                                                                                                  |),
                                                                                                  [
                                                                                                    fun
                                                                                                        γ =>
                                                                                                      ltac:(M.monadic
                                                                                                        (M.read (|
                                                                                                          let
                                                                                                                query :=
                                                                                                            M.copy (|
                                                                                                              M.call_closure (|
                                                                                                                M.get_trait_method (|
                                                                                                                  "core::ops::index::Index",
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "alloc::vec::Vec")
                                                                                                                    [
                                                                                                                      Ty.tuple
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "halo2_proofs::plonk::circuit::Fixed"
                                                                                                                            ];
                                                                                                                          Ty.path
                                                                                                                            "halo2_proofs::poly::Rotation"
                                                                                                                        ];
                                                                                                                      Ty.path
                                                                                                                        "alloc::alloc::Global"
                                                                                                                    ],
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "usize"
                                                                                                                  ],
                                                                                                                  "index",
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                                                      M.read (|
                                                                                                                        self
                                                                                                                      |),
                                                                                                                      "halo2_proofs::dev::MockVerifier",
                                                                                                                      "cs"
                                                                                                                    |),
                                                                                                                    "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                                                                    "fixed_queries"
                                                                                                                  |);
                                                                                                                  M.read (|
                                                                                                                    index
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |)
                                                                                                            |) in
                                                                                                          let
                                                                                                                column_index :=
                                                                                                            M.alloc (|
                                                                                                              M.call_closure (|
                                                                                                                M.get_associated_function (|
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "halo2_proofs::plonk::circuit::Fixed"
                                                                                                                    ],
                                                                                                                  "index",
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                                    query,
                                                                                                                    0
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |)
                                                                                                            |) in
                                                                                                          let
                                                                                                                rotation :=
                                                                                                            M.copy (|
                                                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                                                M.SubPointer.get_tuple_field (|
                                                                                                                  query,
                                                                                                                  1
                                                                                                                |),
                                                                                                                "halo2_proofs::poly::Rotation",
                                                                                                                0
                                                                                                              |)
                                                                                                            |) in
                                                                                                          M.alloc (|
                                                                                                            M.call_closure (|
                                                                                                              M.get_trait_method (|
                                                                                                                "core::convert::Into",
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "halo2_proofs::dev::CellValue")
                                                                                                                  [
                                                                                                                    F
                                                                                                                  ],
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "halo2_proofs::dev::Value")
                                                                                                                    [
                                                                                                                      F
                                                                                                                    ]
                                                                                                                ],
                                                                                                                "into",
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                M.read (|
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::ops::index::Index",
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "alloc::vec::Vec")
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "halo2_proofs::dev::CellValue")
                                                                                                                            [
                                                                                                                              F
                                                                                                                            ];
                                                                                                                          Ty.path
                                                                                                                            "alloc::alloc::Global"
                                                                                                                        ],
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "usize"
                                                                                                                      ],
                                                                                                                      "index",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.call_closure (|
                                                                                                                        M.get_trait_method (|
                                                                                                                          "core::ops::index::Index",
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "alloc::vec::Vec")
                                                                                                                            [
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "alloc::vec::Vec")
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "halo2_proofs::dev::CellValue")
                                                                                                                                    [
                                                                                                                                      F
                                                                                                                                    ];
                                                                                                                                  Ty.path
                                                                                                                                    "alloc::alloc::Global"
                                                                                                                                ];
                                                                                                                              Ty.path
                                                                                                                                "alloc::alloc::Global"
                                                                                                                            ],
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "usize"
                                                                                                                          ],
                                                                                                                          "index",
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                                            M.read (|
                                                                                                                              self
                                                                                                                            |),
                                                                                                                            "halo2_proofs::dev::MockVerifier",
                                                                                                                            "fixed"
                                                                                                                          |);
                                                                                                                          M.read (|
                                                                                                                            column_index
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |);
                                                                                                                      BinOp.Panic.rem (|
                                                                                                                        Integer.Usize,
                                                                                                                        M.rust_cast
                                                                                                                          (BinOp.Panic.add (|
                                                                                                                            Integer.I32,
                                                                                                                            BinOp.Panic.add (|
                                                                                                                              Integer.I32,
                                                                                                                              M.rust_cast
                                                                                                                                (M.read (|
                                                                                                                                  row
                                                                                                                                |)),
                                                                                                                              M.read (|
                                                                                                                                n
                                                                                                                              |)
                                                                                                                            |),
                                                                                                                            M.read (|
                                                                                                                              rotation
                                                                                                                            |)
                                                                                                                          |)),
                                                                                                                        M.rust_cast
                                                                                                                          (M.read (|
                                                                                                                            n
                                                                                                                          |))
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)))
                                                                                                  ]
                                                                                                |)))
                                                                                          ]
                                                                                        |)))
                                                                                  ]
                                                                                |)
                                                                              | _ =>
                                                                                M.impossible (||)
                                                                              end))
                                                                      |);
                                                                      M.alloc (|
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0; α1; α2 ] =>
                                                                                M.match_operator (|
                                                                                  M.alloc (| α0 |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let
                                                                                              index :=
                                                                                          M.copy (|
                                                                                            γ
                                                                                          |) in
                                                                                        M.match_operator (|
                                                                                          M.alloc (|
                                                                                            α1
                                                                                          |),
                                                                                          [
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (M.match_operator (|
                                                                                                  M.alloc (|
                                                                                                    α2
                                                                                                  |),
                                                                                                  [
                                                                                                    fun
                                                                                                        γ =>
                                                                                                      ltac:(M.monadic
                                                                                                        (M.read (|
                                                                                                          let
                                                                                                                query :=
                                                                                                            M.copy (|
                                                                                                              M.call_closure (|
                                                                                                                M.get_trait_method (|
                                                                                                                  "core::ops::index::Index",
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "alloc::vec::Vec")
                                                                                                                    [
                                                                                                                      Ty.tuple
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "halo2_proofs::plonk::circuit::Advice"
                                                                                                                            ];
                                                                                                                          Ty.path
                                                                                                                            "halo2_proofs::poly::Rotation"
                                                                                                                        ];
                                                                                                                      Ty.path
                                                                                                                        "alloc::alloc::Global"
                                                                                                                    ],
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "usize"
                                                                                                                  ],
                                                                                                                  "index",
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                                                      M.read (|
                                                                                                                        self
                                                                                                                      |),
                                                                                                                      "halo2_proofs::dev::MockVerifier",
                                                                                                                      "cs"
                                                                                                                    |),
                                                                                                                    "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                                                                    "advice_queries"
                                                                                                                  |);
                                                                                                                  M.read (|
                                                                                                                    index
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |)
                                                                                                            |) in
                                                                                                          let
                                                                                                                column_index :=
                                                                                                            M.alloc (|
                                                                                                              M.call_closure (|
                                                                                                                M.get_associated_function (|
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "halo2_proofs::plonk::circuit::Advice"
                                                                                                                    ],
                                                                                                                  "index",
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                                    query,
                                                                                                                    0
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |)
                                                                                                            |) in
                                                                                                          let
                                                                                                                rotation :=
                                                                                                            M.copy (|
                                                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                                                M.SubPointer.get_tuple_field (|
                                                                                                                  query,
                                                                                                                  1
                                                                                                                |),
                                                                                                                "halo2_proofs::poly::Rotation",
                                                                                                                0
                                                                                                              |)
                                                                                                            |) in
                                                                                                          M.alloc (|
                                                                                                            M.call_closure (|
                                                                                                              M.get_trait_method (|
                                                                                                                "core::convert::Into",
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "halo2_proofs::dev::CellValue")
                                                                                                                  [
                                                                                                                    F
                                                                                                                  ],
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "halo2_proofs::dev::Value")
                                                                                                                    [
                                                                                                                      F
                                                                                                                    ]
                                                                                                                ],
                                                                                                                "into",
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                M.read (|
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::ops::index::Index",
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "alloc::vec::Vec")
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "halo2_proofs::dev::CellValue")
                                                                                                                            [
                                                                                                                              F
                                                                                                                            ];
                                                                                                                          Ty.path
                                                                                                                            "alloc::alloc::Global"
                                                                                                                        ],
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "usize"
                                                                                                                      ],
                                                                                                                      "index",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.call_closure (|
                                                                                                                        M.get_trait_method (|
                                                                                                                          "core::ops::index::Index",
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "alloc::vec::Vec")
                                                                                                                            [
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "alloc::vec::Vec")
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "halo2_proofs::dev::CellValue")
                                                                                                                                    [
                                                                                                                                      F
                                                                                                                                    ];
                                                                                                                                  Ty.path
                                                                                                                                    "alloc::alloc::Global"
                                                                                                                                ];
                                                                                                                              Ty.path
                                                                                                                                "alloc::alloc::Global"
                                                                                                                            ],
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "usize"
                                                                                                                          ],
                                                                                                                          "index",
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                                            M.read (|
                                                                                                                              self
                                                                                                                            |),
                                                                                                                            "halo2_proofs::dev::MockVerifier",
                                                                                                                            "advice"
                                                                                                                          |);
                                                                                                                          M.read (|
                                                                                                                            column_index
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |);
                                                                                                                      BinOp.Panic.rem (|
                                                                                                                        Integer.Usize,
                                                                                                                        M.rust_cast
                                                                                                                          (BinOp.Panic.add (|
                                                                                                                            Integer.I32,
                                                                                                                            BinOp.Panic.add (|
                                                                                                                              Integer.I32,
                                                                                                                              M.rust_cast
                                                                                                                                (M.read (|
                                                                                                                                  row
                                                                                                                                |)),
                                                                                                                              M.read (|
                                                                                                                                n
                                                                                                                              |)
                                                                                                                            |),
                                                                                                                            M.read (|
                                                                                                                              rotation
                                                                                                                            |)
                                                                                                                          |)),
                                                                                                                        M.rust_cast
                                                                                                                          (M.read (|
                                                                                                                            n
                                                                                                                          |))
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)))
                                                                                                  ]
                                                                                                |)))
                                                                                          ]
                                                                                        |)))
                                                                                  ]
                                                                                |)
                                                                              | _ =>
                                                                                M.impossible (||)
                                                                              end))
                                                                      |);
                                                                      M.alloc (|
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0; α1; α2 ] =>
                                                                                M.match_operator (|
                                                                                  M.alloc (| α0 |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let
                                                                                              index :=
                                                                                          M.copy (|
                                                                                            γ
                                                                                          |) in
                                                                                        M.match_operator (|
                                                                                          M.alloc (|
                                                                                            α1
                                                                                          |),
                                                                                          [
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (M.match_operator (|
                                                                                                  M.alloc (|
                                                                                                    α2
                                                                                                  |),
                                                                                                  [
                                                                                                    fun
                                                                                                        γ =>
                                                                                                      ltac:(M.monadic
                                                                                                        (M.read (|
                                                                                                          let
                                                                                                                query :=
                                                                                                            M.copy (|
                                                                                                              M.call_closure (|
                                                                                                                M.get_trait_method (|
                                                                                                                  "core::ops::index::Index",
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "alloc::vec::Vec")
                                                                                                                    [
                                                                                                                      Ty.tuple
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "halo2_proofs::plonk::circuit::Instance"
                                                                                                                            ];
                                                                                                                          Ty.path
                                                                                                                            "halo2_proofs::poly::Rotation"
                                                                                                                        ];
                                                                                                                      Ty.path
                                                                                                                        "alloc::alloc::Global"
                                                                                                                    ],
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "usize"
                                                                                                                  ],
                                                                                                                  "index",
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                                                      M.read (|
                                                                                                                        self
                                                                                                                      |),
                                                                                                                      "halo2_proofs::dev::MockVerifier",
                                                                                                                      "cs"
                                                                                                                    |),
                                                                                                                    "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                                                                    "instance_queries"
                                                                                                                  |);
                                                                                                                  M.read (|
                                                                                                                    index
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |)
                                                                                                            |) in
                                                                                                          let
                                                                                                                column_index :=
                                                                                                            M.alloc (|
                                                                                                              M.call_closure (|
                                                                                                                M.get_associated_function (|
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "halo2_proofs::plonk::circuit::Instance"
                                                                                                                    ],
                                                                                                                  "index",
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.SubPointer.get_tuple_field (|
                                                                                                                    query,
                                                                                                                    0
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |)
                                                                                                            |) in
                                                                                                          let
                                                                                                                rotation :=
                                                                                                            M.copy (|
                                                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                                                M.SubPointer.get_tuple_field (|
                                                                                                                  query,
                                                                                                                  1
                                                                                                                |),
                                                                                                                "halo2_proofs::poly::Rotation",
                                                                                                                0
                                                                                                              |)
                                                                                                            |) in
                                                                                                          M.alloc (|
                                                                                                            Value.StructTuple
                                                                                                              "halo2_proofs::dev::Value::Real"
                                                                                                              [
                                                                                                                M.read (|
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::ops::index::Index",
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "alloc::vec::Vec")
                                                                                                                        [
                                                                                                                          F;
                                                                                                                          Ty.path
                                                                                                                            "alloc::alloc::Global"
                                                                                                                        ],
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "usize"
                                                                                                                      ],
                                                                                                                      "index",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.call_closure (|
                                                                                                                        M.get_trait_method (|
                                                                                                                          "core::ops::index::Index",
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "alloc::vec::Vec")
                                                                                                                            [
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "alloc::vec::Vec")
                                                                                                                                [
                                                                                                                                  F;
                                                                                                                                  Ty.path
                                                                                                                                    "alloc::alloc::Global"
                                                                                                                                ];
                                                                                                                              Ty.path
                                                                                                                                "alloc::alloc::Global"
                                                                                                                            ],
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "usize"
                                                                                                                          ],
                                                                                                                          "index",
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                                            M.read (|
                                                                                                                              self
                                                                                                                            |),
                                                                                                                            "halo2_proofs::dev::MockVerifier",
                                                                                                                            "instance"
                                                                                                                          |);
                                                                                                                          M.read (|
                                                                                                                            column_index
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |);
                                                                                                                      BinOp.Panic.rem (|
                                                                                                                        Integer.Usize,
                                                                                                                        M.rust_cast
                                                                                                                          (BinOp.Panic.add (|
                                                                                                                            Integer.I32,
                                                                                                                            BinOp.Panic.add (|
                                                                                                                              Integer.I32,
                                                                                                                              M.rust_cast
                                                                                                                                (M.read (|
                                                                                                                                  row
                                                                                                                                |)),
                                                                                                                              M.read (|
                                                                                                                                n
                                                                                                                              |)
                                                                                                                            |),
                                                                                                                            M.read (|
                                                                                                                              rotation
                                                                                                                            |)
                                                                                                                          |)),
                                                                                                                        M.rust_cast
                                                                                                                          (M.read (|
                                                                                                                            n
                                                                                                                          |))
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                |)
                                                                                                              ]
                                                                                                          |)
                                                                                                        |)))
                                                                                                  ]
                                                                                                |)))
                                                                                          ]
                                                                                        |)))
                                                                                  ]
                                                                                |)
                                                                              | _ =>
                                                                                M.impossible (||)
                                                                              end))
                                                                      |);
                                                                      M.alloc (|
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0 ] =>
                                                                                M.match_operator (|
                                                                                  M.alloc (| α0 |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let a :=
                                                                                          M.copy (|
                                                                                            γ
                                                                                          |) in
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Neg",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::dev::Value")
                                                                                              [ F ],
                                                                                            [],
                                                                                            "neg",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              a
                                                                                            |)
                                                                                          ]
                                                                                        |)))
                                                                                  ]
                                                                                |)
                                                                              | _ =>
                                                                                M.impossible (||)
                                                                              end))
                                                                      |);
                                                                      M.alloc (|
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0; α1 ] =>
                                                                                M.match_operator (|
                                                                                  M.alloc (| α0 |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let a :=
                                                                                          M.copy (|
                                                                                            γ
                                                                                          |) in
                                                                                        M.match_operator (|
                                                                                          M.alloc (|
                                                                                            α1
                                                                                          |),
                                                                                          [
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (let
                                                                                                      b :=
                                                                                                  M.copy (|
                                                                                                    γ
                                                                                                  |) in
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Add",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::dev::Value")
                                                                                                      [
                                                                                                        F
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "halo2_proofs::dev::Value")
                                                                                                        [
                                                                                                          F
                                                                                                        ]
                                                                                                    ],
                                                                                                    "add",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      a
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      b
                                                                                                    |)
                                                                                                  ]
                                                                                                |)))
                                                                                          ]
                                                                                        |)))
                                                                                  ]
                                                                                |)
                                                                              | _ =>
                                                                                M.impossible (||)
                                                                              end))
                                                                      |);
                                                                      M.alloc (|
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0; α1 ] =>
                                                                                M.match_operator (|
                                                                                  M.alloc (| α0 |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let a :=
                                                                                          M.copy (|
                                                                                            γ
                                                                                          |) in
                                                                                        M.match_operator (|
                                                                                          M.alloc (|
                                                                                            α1
                                                                                          |),
                                                                                          [
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (let
                                                                                                      b :=
                                                                                                  M.copy (|
                                                                                                    γ
                                                                                                  |) in
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Mul",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::dev::Value")
                                                                                                      [
                                                                                                        F
                                                                                                      ],
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "halo2_proofs::dev::Value")
                                                                                                        [
                                                                                                          F
                                                                                                        ]
                                                                                                    ],
                                                                                                    "mul",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      a
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      b
                                                                                                    |)
                                                                                                  ]
                                                                                                |)))
                                                                                          ]
                                                                                        |)))
                                                                                  ]
                                                                                |)
                                                                              | _ =>
                                                                                M.impossible (||)
                                                                              end))
                                                                      |);
                                                                      M.alloc (|
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0; α1 ] =>
                                                                                M.match_operator (|
                                                                                  M.alloc (| α0 |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let a :=
                                                                                          M.copy (|
                                                                                            γ
                                                                                          |) in
                                                                                        M.match_operator (|
                                                                                          M.alloc (|
                                                                                            α1
                                                                                          |),
                                                                                          [
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (let
                                                                                                      scalar :=
                                                                                                  M.copy (|
                                                                                                    γ
                                                                                                  |) in
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::arith::Mul",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::dev::Value")
                                                                                                      [
                                                                                                        F
                                                                                                      ],
                                                                                                    [
                                                                                                      F
                                                                                                    ],
                                                                                                    "mul",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      a
                                                                                                    |);
                                                                                                    M.read (|
                                                                                                      scalar
                                                                                                    |)
                                                                                                  ]
                                                                                                |)))
                                                                                          ]
                                                                                        |)))
                                                                                  ]
                                                                                |)
                                                                              | _ =>
                                                                                M.impossible (||)
                                                                              end))
                                                                      |);
                                                                      M.alloc (|
                                                                        Value.StructTuple
                                                                          "halo2_proofs::dev::Value::Real"
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "ff::Field",
                                                                                F,
                                                                                [],
                                                                                "zero",
                                                                                []
                                                                              |),
                                                                              []
                                                                            |)
                                                                          ]
                                                                      |)
                                                                    ]
                                                                  |)))
                                                            ]
                                                          |)))
                                                    ]
                                                  |)
                                                | _ => M.impossible (||)
                                                end))
                                        |) in
                                      let table :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::map::Map")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    [ Ty.path "usize" ];
                                                  Ty.function
                                                    [ Ty.tuple [ Ty.path "usize" ] ]
                                                    (Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::dev::Value")
                                                          [ F ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ])
                                                ],
                                              [],
                                              "collect",
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "alloc::collections::btree::set::BTreeSet")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::dev::Value")
                                                          [ F ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    [ Ty.path "usize" ],
                                                  [],
                                                  "map",
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::dev::Value")
                                                          [ F ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.function
                                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                                      (Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "halo2_proofs::dev::Value")
                                                            [ F ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ])
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::clone::Clone",
                                                      Ty.apply
                                                        (Ty.path "core::ops::range::Range")
                                                        [ Ty.path "usize" ],
                                                      [],
                                                      "clone",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "halo2_proofs::dev::MockVerifier",
                                                        "usable_rows"
                                                      |)
                                                    ]
                                                  |);
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          M.match_operator (|
                                                            M.alloc (| α0 |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let table_row :=
                                                                    M.copy (| γ |) in
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::map::Map")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ];
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::dev::Value")
                                                                              [ F ])
                                                                        ],
                                                                      [],
                                                                      "collect",
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::dev::Value")
                                                                              [ F ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                          [],
                                                                          "map",
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::dev::Value")
                                                                              [ F ];
                                                                            Ty.function
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                          [ F ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                              (Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::dev::Value")
                                                                                [ F ])
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                              "iter",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::deref::Deref",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [],
                                                                                  "deref",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    M.read (|
                                                                                      lookup
                                                                                    |),
                                                                                    "halo2_proofs::plonk::lookup::Argument",
                                                                                    "table_expressions"
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          M.closure
                                                                            (fun γ =>
                                                                              ltac:(M.monadic
                                                                                match γ with
                                                                                | [ α0 ] =>
                                                                                  M.match_operator (|
                                                                                    M.alloc (|
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let c :=
                                                                                            M.copy (|
                                                                                              γ
                                                                                            |) in
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::function::Fn",
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                                            [
                                                                                                              F
                                                                                                            ]
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "usize"
                                                                                                    ]
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "halo2_proofs::dev::Value")
                                                                                                  [
                                                                                                    F
                                                                                                  ]),
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                                          [
                                                                                                            F
                                                                                                          ]
                                                                                                      ];
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ]
                                                                                              ],
                                                                                              "call",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              load;
                                                                                              Value.Tuple
                                                                                                [
                                                                                                  M.read (|
                                                                                                    c
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    table_row
                                                                                                  |)
                                                                                                ]
                                                                                            ]
                                                                                          |)))
                                                                                    ]
                                                                                  |)
                                                                                | _ =>
                                                                                  M.impossible (||)
                                                                                end))
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)))
                                                            ]
                                                          |)
                                                        | _ => M.impossible (||)
                                                        end))
                                                ]
                                              |)
                                            ]
                                          |)
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            I,
                                            [],
                                            "filter_map",
                                            [
                                              Ty.path "halo2_proofs::dev::VerifyFailure";
                                              Ty.function
                                                [ Ty.tuple [ Ty.path "usize" ] ]
                                                (Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::collect::IntoIterator",
                                                I,
                                                [],
                                                "into_iter",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::clone::Clone",
                                                    I,
                                                    [],
                                                    "clone",
                                                    []
                                                  |),
                                                  [ lookup_input_row_ids ]
                                                |)
                                              ]
                                            |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let input_row := M.copy (| γ |) in
                                                            M.read (|
                                                              let inputs :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::map::Map")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ];
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::dev::Value")
                                                                              [ F ])
                                                                        ],
                                                                      [],
                                                                      "collect",
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::dev::Value")
                                                                              [ F ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ F ]
                                                                            ],
                                                                          [],
                                                                          "map",
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::dev::Value")
                                                                              [ F ];
                                                                            Ty.function
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                          [ F ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                              (Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::dev::Value")
                                                                                [ F ])
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ]
                                                                                ],
                                                                              "iter",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::deref::Deref",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [ F ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [],
                                                                                  "deref",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    M.read (|
                                                                                      lookup
                                                                                    |),
                                                                                    "halo2_proofs::plonk::lookup::Argument",
                                                                                    "input_expressions"
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          M.closure
                                                                            (fun γ =>
                                                                              ltac:(M.monadic
                                                                                match γ with
                                                                                | [ α0 ] =>
                                                                                  M.match_operator (|
                                                                                    M.alloc (|
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let c :=
                                                                                            M.copy (|
                                                                                              γ
                                                                                            |) in
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::function::Fn",
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                                            [
                                                                                                              F
                                                                                                            ]
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "usize"
                                                                                                    ]
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "halo2_proofs::dev::Value")
                                                                                                  [
                                                                                                    F
                                                                                                  ]),
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                                          [
                                                                                                            F
                                                                                                          ]
                                                                                                      ];
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ]
                                                                                              ],
                                                                                              "call",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              load;
                                                                                              Value.Tuple
                                                                                                [
                                                                                                  M.read (|
                                                                                                    c
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    input_row
                                                                                                  |)
                                                                                                ]
                                                                                            ]
                                                                                          |)))
                                                                                    ]
                                                                                  |)
                                                                                | _ =>
                                                                                  M.impossible (||)
                                                                                end))
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              let lookup_passes :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::collections::btree::set::BTreeSet")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::dev::Value")
                                                                                [ F ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      "contains",
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::dev::Value")
                                                                              [ F ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                    |),
                                                                    [ table; inputs ]
                                                                  |)
                                                                |) in
                                                              M.match_operator (|
                                                                M.alloc (| Value.Tuple [] |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ :=
                                                                        M.use lookup_passes in
                                                                      let _ :=
                                                                        M.is_constant_or_break_match (|
                                                                          M.read (| γ |),
                                                                          Value.Bool true
                                                                        |) in
                                                                      M.alloc (|
                                                                        Value.StructTuple
                                                                          "core::option::Option::None"
                                                                          []
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.alloc (|
                                                                        Value.StructTuple
                                                                          "core::option::Option::Some"
                                                                          [
                                                                            Value.StructRecord
                                                                              "halo2_proofs::dev::VerifyFailure::Lookup"
                                                                              [
                                                                                ("name",
                                                                                  M.read (|
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.read (|
                                                                                        lookup
                                                                                      |),
                                                                                      "halo2_proofs::plonk::lookup::Argument",
                                                                                      "name"
                                                                                    |)
                                                                                  |));
                                                                                ("lookup_index",
                                                                                  M.read (|
                                                                                    lookup_index
                                                                                  |));
                                                                                ("location",
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.path
                                                                                        "halo2_proofs::dev::FailureLocation",
                                                                                      "find_expressions",
                                                                                      [
                                                                                        F;
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::slice::iter::Iter")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                              [ F ]
                                                                                          ]
                                                                                      ]
                                                                                    |),
                                                                                    [
                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                        M.read (|
                                                                                          self
                                                                                        |),
                                                                                        "halo2_proofs::dev::MockVerifier",
                                                                                        "cs"
                                                                                      |);
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::deref::Deref",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            [
                                                                                              Ty.path
                                                                                                "halo2_proofs::dev::Region";
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          [],
                                                                                          "deref",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            M.read (|
                                                                                              self
                                                                                            |),
                                                                                            "halo2_proofs::dev::MockVerifier",
                                                                                            "regions"
                                                                                          |)
                                                                                        ]
                                                                                      |);
                                                                                      M.read (|
                                                                                        input_row
                                                                                      |);
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "slice")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                [ F
                                                                                                ]
                                                                                            ],
                                                                                          "iter",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::deref::Deref",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                                    [
                                                                                                      F
                                                                                                    ];
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              [],
                                                                                              "deref",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.read (|
                                                                                                  lookup
                                                                                                |),
                                                                                                "halo2_proofs::plonk::lookup::Argument",
                                                                                                "input_expressions"
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |))
                                                                              ]
                                                                          ]
                                                                      |)))
                                                                ]
                                                              |)
                                                            |)))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      |)
                                    |)))
                              ]
                            |)
                          | _ => M.impossible (||)
                          end))
                  ]
                |)
              |) in
            let perm_errors :=
              M.copy (|
                let original :=
                  M.alloc (|
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0; α1 ] =>
                            M.match_operator (|
                              M.alloc (| α0 |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let column := M.copy (| γ |) in
                                    M.match_operator (|
                                      M.alloc (| α1 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let row := M.copy (| γ |) in
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::dev::CellValue")
                                                      [ F ]
                                                  ],
                                                "unwrap",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Column")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::Any"
                                                              ]
                                                          ]
                                                      ],
                                                    "map",
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::dev::CellValue")
                                                        [ F ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::Any"
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path "halo2_proofs::dev::CellValue")
                                                          [ F ])
                                                    ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Column")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::Any"
                                                              ]
                                                          ],
                                                        "get",
                                                        [ Ty.path "usize" ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::Any"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            "deref",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::permutation::Argument",
                                                                  "get_columns",
                                                                  []
                                                                |),
                                                                [
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| self |),
                                                                      "halo2_proofs::dev::MockVerifier",
                                                                      "cs"
                                                                    |),
                                                                    "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                    "permutation"
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.read (| column |)
                                                      ]
                                                    |);
                                                    M.closure
                                                      (fun γ =>
                                                        ltac:(M.monadic
                                                          match γ with
                                                          | [ α0 ] =>
                                                            M.match_operator (|
                                                              M.alloc (| α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let c := M.copy (| γ |) in
                                                                    M.read (|
                                                                      M.match_operator (|
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                                [
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Any"
                                                                                ],
                                                                              "column_type",
                                                                              []
                                                                            |),
                                                                            [ M.read (| c |) ]
                                                                          |)
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ :=
                                                                                M.read (| γ |) in
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::index::Index",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::dev::CellValue")
                                                                                        [ F ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [ Ty.path "usize"
                                                                                  ],
                                                                                  "index",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::index::Index",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::dev::CellValue")
                                                                                                [ F
                                                                                                ];
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ];
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ],
                                                                                      "index",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                        M.read (|
                                                                                          self
                                                                                        |),
                                                                                        "halo2_proofs::dev::MockVerifier",
                                                                                        "advice"
                                                                                      |);
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                                            [
                                                                                              Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Any"
                                                                                            ],
                                                                                          "index",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            c
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |);
                                                                                  M.read (| row |)
                                                                                ]
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ :=
                                                                                M.read (| γ |) in
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::index::Index",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::dev::CellValue")
                                                                                        [ F ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [ Ty.path "usize"
                                                                                  ],
                                                                                  "index",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::index::Index",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::dev::CellValue")
                                                                                                [ F
                                                                                                ];
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ];
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ],
                                                                                      "index",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                        M.read (|
                                                                                          self
                                                                                        |),
                                                                                        "halo2_proofs::dev::MockVerifier",
                                                                                        "fixed"
                                                                                      |);
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                                            [
                                                                                              Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Any"
                                                                                            ],
                                                                                          "index",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            c
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |);
                                                                                  M.read (| row |)
                                                                                ]
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ :=
                                                                                M.read (| γ |) in
                                                                              M.alloc (|
                                                                                Value.StructTuple
                                                                                  "halo2_proofs::dev::CellValue::Assigned"
                                                                                  [
                                                                                    M.read (|
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::index::Index",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            [
                                                                                              F;
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ],
                                                                                          "index",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::index::Index",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    [
                                                                                                      F;
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ];
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              [
                                                                                                Ty.path
                                                                                                  "usize"
                                                                                              ],
                                                                                              "index",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.read (|
                                                                                                  self
                                                                                                |),
                                                                                                "halo2_proofs::dev::MockVerifier",
                                                                                                "instance"
                                                                                              |);
                                                                                              M.call_closure (|
                                                                                                M.get_associated_function (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Any"
                                                                                                    ],
                                                                                                  "index",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.read (|
                                                                                                    c
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |);
                                                                                          M.read (|
                                                                                            row
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                              |)))
                                                                        ]
                                                                      |)
                                                                    |)))
                                                              ]
                                                            |)
                                                          | _ => M.impossible (||)
                                                          end))
                                                  ]
                                                |)
                                              ]
                                            |)))
                                      ]
                                    |)))
                              ]
                            |)
                          | _ => M.impossible (||)
                          end))
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                        ],
                      [],
                      "flat_map",
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::filter_map::FilterMap")
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.tuple
                                      [
                                        Ty.path "usize";
                                        Ty.apply
                                          (Ty.path "&")
                                          [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                                      ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "core::option::Option")
                                [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                          ];
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.tuple
                                  [
                                    Ty.path "usize";
                                    Ty.apply
                                      (Ty.path "&")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ]
                                  ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "core::iter::adapters::filter_map::FilterMap")
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                                ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "usize";
                                          Ty.apply
                                            (Ty.path "&")
                                            [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "core::option::Option")
                                  [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                            ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          [],
                          "enumerate",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              "iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "halo2_proofs::dev::MockVerifier",
                                      "permutation"
                                    |),
                                    "halo2_proofs::plonk::permutation::keygen::Assembly",
                                    "mapping"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let column := M.copy (| γ0_0 |) in
                                      let values := M.copy (| γ0_1 |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                                            ],
                                          [],
                                          "filter_map",
                                          [
                                            Ty.path "halo2_proofs::dev::VerifyFailure";
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.path "usize";
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.tuple
                                                              [ Ty.path "u32"; Ty.path "u32" ]
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "core::option::Option")
                                                [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ],
                                              [],
                                              "enumerate",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ],
                                                  "iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      "deref",
                                                      []
                                                    |),
                                                    [ M.read (| values |) ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |);
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0 ] =>
                                                  M.match_operator (|
                                                    M.alloc (| α0 |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              0
                                                            |) in
                                                          let γ0_1 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              1
                                                            |) in
                                                          let row := M.copy (| γ0_0 |) in
                                                          let cell := M.copy (| γ0_1 |) in
                                                          M.read (|
                                                            let original_cell :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::function::Fn",
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.path "usize";
                                                                            Ty.path "usize"
                                                                          ]
                                                                      ]
                                                                      (Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::dev::CellValue")
                                                                        [ F ]),
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.path "usize"
                                                                        ]
                                                                    ],
                                                                    "call",
                                                                    []
                                                                  |),
                                                                  [
                                                                    original;
                                                                    Value.Tuple
                                                                      [
                                                                        M.read (| column |);
                                                                        M.read (| row |)
                                                                      ]
                                                                  ]
                                                                |)
                                                              |) in
                                                            let permuted_cell :=
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::function::Fn",
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.path "usize";
                                                                            Ty.path "usize"
                                                                          ]
                                                                      ]
                                                                      (Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::dev::CellValue")
                                                                        [ F ]),
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.path "usize"
                                                                        ]
                                                                    ],
                                                                    "call",
                                                                    []
                                                                  |),
                                                                  [
                                                                    original;
                                                                    Value.Tuple
                                                                      [
                                                                        M.rust_cast
                                                                          (M.read (|
                                                                            M.SubPointer.get_tuple_field (|
                                                                              M.read (| cell |),
                                                                              0
                                                                            |)
                                                                          |));
                                                                        M.rust_cast
                                                                          (M.read (|
                                                                            M.SubPointer.get_tuple_field (|
                                                                              M.read (| cell |),
                                                                              1
                                                                            |)
                                                                          |))
                                                                      ]
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.match_operator (|
                                                              M.alloc (| Value.Tuple [] |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ :=
                                                                      M.use
                                                                        (M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::cmp::PartialEq",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::dev::CellValue")
                                                                                [ F ],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::dev::CellValue")
                                                                                  [ F ]
                                                                              ],
                                                                              "eq",
                                                                              []
                                                                            |),
                                                                            [
                                                                              original_cell;
                                                                              permuted_cell
                                                                            ]
                                                                          |)
                                                                        |)) in
                                                                    let _ :=
                                                                      M.is_constant_or_break_match (|
                                                                        M.read (| γ |),
                                                                        Value.Bool true
                                                                      |) in
                                                                    M.alloc (|
                                                                      Value.StructTuple
                                                                        "core::option::Option::None"
                                                                        []
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.alloc (|
                                                                      Value.StructTuple
                                                                        "core::option::Option::Some"
                                                                        [
                                                                          Value.StructRecord
                                                                            "halo2_proofs::dev::VerifyFailure::Permutation"
                                                                            [
                                                                              ("column",
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::Into",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                      [
                                                                                        Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Any"
                                                                                      ],
                                                                                    [
                                                                                      Ty.path
                                                                                        "halo2_proofs::dev::metadata::Column"
                                                                                    ],
                                                                                    "into",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::option::Option")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Any"
                                                                                                    ]
                                                                                                ]
                                                                                            ],
                                                                                          "unwrap",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "slice")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Any"
                                                                                                    ]
                                                                                                ],
                                                                                              "get",
                                                                                              [
                                                                                                Ty.path
                                                                                                  "usize"
                                                                                              ]
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::deref::Deref",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::circuit::Any"
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  [],
                                                                                                  "deref",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.alloc (|
                                                                                                    M.call_closure (|
                                                                                                      M.get_associated_function (|
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::permutation::Argument",
                                                                                                        "get_columns",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                            M.read (|
                                                                                                              self
                                                                                                            |),
                                                                                                            "halo2_proofs::dev::MockVerifier",
                                                                                                            "cs"
                                                                                                          |),
                                                                                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                                                          "permutation"
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |);
                                                                                              M.read (|
                                                                                                column
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |));
                                                                              ("row",
                                                                                M.read (| row |))
                                                                            ]
                                                                        ]
                                                                    |)))
                                                              ]
                                                            |)
                                                          |)))
                                                    ]
                                                  |)
                                                | _ => M.impossible (||)
                                                end))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |)
              |) in
            let errors :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::chain::Chain")
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::sources::empty::Empty")
                                      [ Ty.path "halo2_proofs::dev::VerifyFailure" ];
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::flatten::FlatMap")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [ Ty.path "halo2_proofs::dev::Region" ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::flatten::FlatMap")
                                          [
                                            Ty.apply
                                              (Ty.path "std::collections::hash::map::Iter")
                                              [
                                                Ty.path "halo2_proofs::plonk::circuit::Selector";
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::flatten::FlatMap")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::filter::Filter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::enumerate::Enumerate")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Gate")
                                                              [ F ]
                                                          ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Gate")
                                                                          [ F ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.path "bool")
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [ Ty.path "usize" ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::filter_map::FilterMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::dev::VerifyFailure"
                                                            ])
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [ Ty.path "usize" ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ])
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.path "usize";
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Gate")
                                                                  [ F ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::flatten::FlatMap")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [ Ty.path "usize" ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "usize" ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ])
                                                    ])
                                              ];
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::Selector"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path "usize";
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::filter::Filter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Gate")
                                                                [ F ]
                                                            ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Gate")
                                                                            [ F ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.path "bool")
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::flatten::FlatMap")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [ Ty.path "usize" ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "usize" ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ])
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path "usize";
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Gate")
                                                                    [ F ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ])
                                                      ])
                                                ])
                                          ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.path "usize";
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [ Ty.path "halo2_proofs::dev::Region" ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.apply
                                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                                            [
                                              Ty.apply
                                                (Ty.path "std::collections::hash::map::Iter")
                                                [
                                                  Ty.path "halo2_proofs::plonk::circuit::Selector";
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.path "usize";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::filter::Filter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Gate")
                                                                [ F ]
                                                            ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Gate")
                                                                            [ F ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.path "bool")
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::flatten::FlatMap")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [ Ty.path "usize" ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "usize" ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ])
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path "usize";
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Gate")
                                                                    [ F ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ])
                                                      ])
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::Selector"
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::filter::Filter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::enumerate::Enumerate")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Gate")
                                                                  [ F ]
                                                              ]
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Gate")
                                                                              [ F ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.path "bool")
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ])
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path "usize";
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Gate")
                                                                      [ F ]
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::flatten::FlatMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [ Ty.path "usize" ];
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [ Ty.path "usize" ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::filter_map::FilterMap")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                  ];
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  (Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::dev::VerifyFailure"
                                                                    ])
                                                              ])
                                                        ])
                                                  ])
                                            ])
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                              [ F ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::flatten::FlatMap")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::chain::Chain")
                                          [
                                            I;
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              [ Ty.path "usize" ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ]
                                                  ]
                                              ];
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.path "usize";
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ]
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "core::option::Option")
                                                [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                          ];
                                        Ty.function
                                          [ Ty.tuple [ Ty.path "usize" ] ]
                                          (Ty.apply
                                            (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::enumerate::Enumerate")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "usize";
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                            ])
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "usize";
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                                      [ F ]
                                                  ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "core::iter::adapters::flatten::FlatMap")
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::chain::Chain")
                                            [
                                              I;
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                [ Ty.path "usize" ]
                                            ];
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::enumerate::Enumerate")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "usize";
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                            ];
                                          Ty.function
                                            [ Ty.tuple [ Ty.path "usize" ] ]
                                            (Ty.apply
                                              (Ty.path
                                                "core::iter::adapters::filter_map::FilterMap")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "core::iter::adapters::enumerate::Enumerate")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ]
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.path "usize";
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                              ])
                                        ])
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "core::iter::adapters::flatten::FlatMap")
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                          [ F ]
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                  [
                                    I;
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "core::option::Option")
                                        [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "usize";
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                                  [ F ]
                                              ]
                                          ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                    [
                                      I;
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "usize" ] ]
                                        (Ty.apply
                                          (Ty.path "core::option::Option")
                                          [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                    ])
                              ]
                          ];
                        Ty.apply
                          (Ty.path "core::iter::adapters::flatten::FlatMap")
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "core::iter::adapters::filter_map::FilterMap")
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "usize";
                                            Ty.apply
                                              (Ty.path "&")
                                              [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                                          ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "core::option::Option")
                                    [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.tuple
                                      [
                                        Ty.path "usize";
                                        Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply
                                                (Ty.path "&")
                                                [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                                            ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "core::option::Option")
                                      [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                ])
                          ]
                      ],
                    [],
                    "collect",
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.path "halo2_proofs::dev::VerifyFailure"; Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::sources::empty::Empty")
                                      [ Ty.path "halo2_proofs::dev::VerifyFailure" ];
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::flatten::FlatMap")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [ Ty.path "halo2_proofs::dev::Region" ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::flatten::FlatMap")
                                          [
                                            Ty.apply
                                              (Ty.path "std::collections::hash::map::Iter")
                                              [
                                                Ty.path "halo2_proofs::plonk::circuit::Selector";
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::flatten::FlatMap")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::filter::Filter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::enumerate::Enumerate")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Gate")
                                                              [ F ]
                                                          ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Gate")
                                                                          [ F ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.path "bool")
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [ Ty.path "usize" ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::filter_map::FilterMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::dev::VerifyFailure"
                                                            ])
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [ Ty.path "usize" ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ])
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.path "usize";
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Gate")
                                                                  [ F ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::flatten::FlatMap")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [ Ty.path "usize" ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "usize" ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ])
                                                    ])
                                              ];
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::Selector"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path "usize";
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::filter::Filter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Gate")
                                                                [ F ]
                                                            ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Gate")
                                                                            [ F ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.path "bool")
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::flatten::FlatMap")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [ Ty.path "usize" ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "usize" ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ])
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path "usize";
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Gate")
                                                                    [ F ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ])
                                                      ])
                                                ])
                                          ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.path "usize";
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [ Ty.path "halo2_proofs::dev::Region" ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.apply
                                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                                            [
                                              Ty.apply
                                                (Ty.path "std::collections::hash::map::Iter")
                                                [
                                                  Ty.path "halo2_proofs::plonk::circuit::Selector";
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.path "usize";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::filter::Filter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Gate")
                                                                [ F ]
                                                            ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Gate")
                                                                            [ F ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.path "bool")
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::flatten::FlatMap")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [ Ty.path "usize" ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "usize" ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ])
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path "usize";
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Gate")
                                                                    [ F ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ])
                                                      ])
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::Selector"
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::filter::Filter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::enumerate::Enumerate")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Gate")
                                                                  [ F ]
                                                              ]
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Gate")
                                                                              [ F ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.path "bool")
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ])
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path "usize";
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Gate")
                                                                      [ F ]
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::flatten::FlatMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [ Ty.path "usize" ];
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [ Ty.path "usize" ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::filter_map::FilterMap")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                  ];
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  (Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::dev::VerifyFailure"
                                                                    ])
                                                              ])
                                                        ])
                                                  ])
                                            ])
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                              [ F ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::flatten::FlatMap")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::chain::Chain")
                                          [
                                            I;
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              [ Ty.path "usize" ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ]
                                                  ]
                                              ];
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.path "usize";
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ]
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "core::option::Option")
                                                [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                          ];
                                        Ty.function
                                          [ Ty.tuple [ Ty.path "usize" ] ]
                                          (Ty.apply
                                            (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::enumerate::Enumerate")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "usize";
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                            ])
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "usize";
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                                      [ F ]
                                                  ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "core::iter::adapters::flatten::FlatMap")
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::chain::Chain")
                                            [
                                              I;
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                [ Ty.path "usize" ]
                                            ];
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::enumerate::Enumerate")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "usize";
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                            ];
                                          Ty.function
                                            [ Ty.tuple [ Ty.path "usize" ] ]
                                            (Ty.apply
                                              (Ty.path
                                                "core::iter::adapters::filter_map::FilterMap")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "core::iter::adapters::enumerate::Enumerate")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ]
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.path "usize";
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                              ])
                                        ])
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "core::iter::adapters::flatten::FlatMap")
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                          [ F ]
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                  [
                                    I;
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "core::option::Option")
                                        [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "usize";
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                                  [ F ]
                                              ]
                                          ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                    [
                                      I;
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "usize" ] ]
                                        (Ty.apply
                                          (Ty.path "core::option::Option")
                                          [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                    ])
                              ]
                          ],
                        [],
                        "chain",
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply
                                                (Ty.path "&")
                                                [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                                            ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "core::option::Option")
                                      [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "usize";
                                          Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "usize";
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "core::option::Option")
                                        [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                  ])
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::sources::empty::Empty")
                                      [ Ty.path "halo2_proofs::dev::VerifyFailure" ];
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::flatten::FlatMap")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [ Ty.path "halo2_proofs::dev::Region" ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::flatten::FlatMap")
                                          [
                                            Ty.apply
                                              (Ty.path "std::collections::hash::map::Iter")
                                              [
                                                Ty.path "halo2_proofs::plonk::circuit::Selector";
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::flatten::FlatMap")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::filter::Filter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::enumerate::Enumerate")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Gate")
                                                              [ F ]
                                                          ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Gate")
                                                                          [ F ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.path "bool")
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [ Ty.path "usize" ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::filter_map::FilterMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::dev::VerifyFailure"
                                                            ])
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [ Ty.path "usize" ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ])
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.path "usize";
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Gate")
                                                                  [ F ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::flatten::FlatMap")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [ Ty.path "usize" ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "usize" ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ])
                                                    ])
                                              ];
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::Selector"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path "usize";
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::filter::Filter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Gate")
                                                                [ F ]
                                                            ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Gate")
                                                                            [ F ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.path "bool")
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::flatten::FlatMap")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [ Ty.path "usize" ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "usize" ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ])
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path "usize";
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Gate")
                                                                    [ F ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ])
                                                      ])
                                                ])
                                          ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.path "usize";
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [ Ty.path "halo2_proofs::dev::Region" ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.apply
                                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                                            [
                                              Ty.apply
                                                (Ty.path "std::collections::hash::map::Iter")
                                                [
                                                  Ty.path "halo2_proofs::plonk::circuit::Selector";
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.path "usize";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::filter::Filter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Gate")
                                                                [ F ]
                                                            ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Gate")
                                                                            [ F ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.path "bool")
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::flatten::FlatMap")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [ Ty.path "usize" ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "usize" ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ])
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path "usize";
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Gate")
                                                                    [ F ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ])
                                                      ])
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::Selector"
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::filter::Filter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::enumerate::Enumerate")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Gate")
                                                                  [ F ]
                                                              ]
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Gate")
                                                                              [ F ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.path "bool")
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ])
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path "usize";
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Gate")
                                                                      [ F ]
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::flatten::FlatMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [ Ty.path "usize" ];
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [ Ty.path "usize" ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::filter_map::FilterMap")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                  ];
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  (Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::dev::VerifyFailure"
                                                                    ])
                                                              ])
                                                        ])
                                                  ])
                                            ])
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                              [ F ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::flatten::FlatMap")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::chain::Chain")
                                          [
                                            I;
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              [ Ty.path "usize" ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ]
                                                  ]
                                              ];
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.path "usize";
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ]
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "core::option::Option")
                                                [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                          ];
                                        Ty.function
                                          [ Ty.tuple [ Ty.path "usize" ] ]
                                          (Ty.apply
                                            (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::enumerate::Enumerate")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "usize";
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                            ])
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "usize";
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                                      [ F ]
                                                  ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "core::iter::adapters::flatten::FlatMap")
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::chain::Chain")
                                            [
                                              I;
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                [ Ty.path "usize" ]
                                            ];
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::enumerate::Enumerate")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "usize";
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                            ];
                                          Ty.function
                                            [ Ty.tuple [ Ty.path "usize" ] ]
                                            (Ty.apply
                                              (Ty.path
                                                "core::iter::adapters::filter_map::FilterMap")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "core::iter::adapters::enumerate::Enumerate")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ]
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.path "usize";
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                              ])
                                        ])
                                  ]
                              ],
                            [],
                            "chain",
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::flatten::FlatMap")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                            [ F ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                    [
                                      I;
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "usize" ] ]
                                        (Ty.apply
                                          (Ty.path "core::option::Option")
                                          [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::lookup::Argument")
                                                    [ F ]
                                                ]
                                            ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                      [
                                        I;
                                        Ty.function
                                          [ Ty.tuple [ Ty.path "usize" ] ]
                                          (Ty.apply
                                            (Ty.path "core::option::Option")
                                            [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                      ])
                                ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::sources::empty::Empty")
                                      [ Ty.path "halo2_proofs::dev::VerifyFailure" ];
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::flatten::FlatMap")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [ Ty.path "halo2_proofs::dev::Region" ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::flatten::FlatMap")
                                          [
                                            Ty.apply
                                              (Ty.path "std::collections::hash::map::Iter")
                                              [
                                                Ty.path "halo2_proofs::plonk::circuit::Selector";
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::flatten::FlatMap")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::filter::Filter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::enumerate::Enumerate")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Gate")
                                                              [ F ]
                                                          ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Gate")
                                                                          [ F ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.path "bool")
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [ Ty.path "usize" ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::filter_map::FilterMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::dev::VerifyFailure"
                                                            ])
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [ Ty.path "usize" ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ])
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.path "usize";
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Gate")
                                                                  [ F ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::flatten::FlatMap")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [ Ty.path "usize" ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "usize" ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ])
                                                    ])
                                              ];
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::Selector"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path "usize";
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::filter::Filter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Gate")
                                                                [ F ]
                                                            ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Gate")
                                                                            [ F ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.path "bool")
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::flatten::FlatMap")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [ Ty.path "usize" ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "usize" ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ])
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path "usize";
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Gate")
                                                                    [ F ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ])
                                                      ])
                                                ])
                                          ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.path "usize";
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [ Ty.path "halo2_proofs::dev::Region" ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.apply
                                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                                            [
                                              Ty.apply
                                                (Ty.path "std::collections::hash::map::Iter")
                                                [
                                                  Ty.path "halo2_proofs::plonk::circuit::Selector";
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.path "usize";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::filter::Filter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Gate")
                                                                [ F ]
                                                            ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Gate")
                                                                            [ F ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.path "bool")
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::flatten::FlatMap")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [ Ty.path "usize" ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "usize" ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ])
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path "usize";
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Gate")
                                                                    [ F ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ])
                                                      ])
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::Selector"
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::filter::Filter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::enumerate::Enumerate")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Gate")
                                                                  [ F ]
                                                              ]
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Gate")
                                                                              [ F ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.path "bool")
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ])
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path "usize";
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Gate")
                                                                      [ F ]
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::flatten::FlatMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [ Ty.path "usize" ];
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [ Ty.path "usize" ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::filter_map::FilterMap")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                  ];
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  (Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::dev::VerifyFailure"
                                                                    ])
                                                              ])
                                                        ])
                                                  ])
                                            ])
                                      ]
                                  ],
                                [],
                                "chain",
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::flatten::FlatMap")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                                [ F ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::flatten::FlatMap")
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::chain::Chain")
                                            [
                                              I;
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                [ Ty.path "usize" ]
                                            ];
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::filter_map::FilterMap")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::enumerate::Enumerate")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ F ]
                                                    ]
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "usize";
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ F ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                            ];
                                          Ty.function
                                            [ Ty.tuple [ Ty.path "usize" ] ]
                                            (Ty.apply
                                              (Ty.path
                                                "core::iter::adapters::filter_map::FilterMap")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "core::iter::adapters::enumerate::Enumerate")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ]
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.path "usize";
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                              ])
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "usize";
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Gate")
                                                        [ F ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "core::iter::adapters::flatten::FlatMap")
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::chain::Chain")
                                              [
                                                I;
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  [ Ty.path "usize" ]
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "core::iter::adapters::filter_map::FilterMap")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "core::iter::adapters::enumerate::Enumerate")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ]
                                                      ]
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.path "usize";
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [ Ty.path "halo2_proofs::dev::VerifyFailure" ])
                                              ];
                                            Ty.function
                                              [ Ty.tuple [ Ty.path "usize" ] ]
                                              (Ty.apply
                                                (Ty.path
                                                  "core::iter::adapters::filter_map::FilterMap")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::enumerate::Enumerate")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ F ]
                                                        ]
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path "usize";
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ F ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      [ Ty.path "halo2_proofs::dev::VerifyFailure"
                                                      ])
                                                ])
                                          ])
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::sources::empty::Empty")
                                      [ Ty.path "halo2_proofs::dev::VerifyFailure" ],
                                    [],
                                    "chain",
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::flatten::FlatMap")
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [ Ty.path "halo2_proofs::dev::Region" ]
                                            ];
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                                            [
                                              Ty.apply
                                                (Ty.path "std::collections::hash::map::Iter")
                                                [
                                                  Ty.path "halo2_proofs::plonk::circuit::Selector";
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.path "usize";
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::filter::Filter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Gate")
                                                                [ F ]
                                                            ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Gate")
                                                                            [ F ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.path "bool")
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::flatten::FlatMap")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [ Ty.path "usize" ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter_map::FilterMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::dev::VerifyFailure"
                                                              ])
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "usize" ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ])
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path "usize";
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Gate")
                                                                    [ F ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ])
                                                      ])
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::Selector"
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::filter::Filter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::enumerate::Enumerate")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Gate")
                                                                  [ F ]
                                                              ]
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Gate")
                                                                              [ F ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.path "bool")
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ])
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path "usize";
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Gate")
                                                                      [ F ]
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::flatten::FlatMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [ Ty.path "usize" ];
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [ Ty.path "usize" ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::filter_map::FilterMap")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                  ];
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  (Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::dev::VerifyFailure"
                                                                    ])
                                                              ])
                                                        ])
                                                  ])
                                            ];
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.path "usize";
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [ Ty.path "halo2_proofs::dev::Region" ]
                                                    ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path "core::iter::adapters::flatten::FlatMap")
                                              [
                                                Ty.apply
                                                  (Ty.path "std::collections::hash::map::Iter")
                                                  [
                                                    Ty.path
                                                      "halo2_proofs::plonk::circuit::Selector";
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "usize";
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::filter::Filter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::enumerate::Enumerate")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Gate")
                                                                  [ F ]
                                                              ]
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Gate")
                                                                              [ F ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.path "bool")
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::flatten::FlatMap")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::filter_map::FilterMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::VirtualCell"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell"
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::dev::VerifyFailure"
                                                                ])
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [ Ty.path "usize" ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ])
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path "usize";
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Gate")
                                                                      [ F ]
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::flatten::FlatMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [ Ty.path "usize" ];
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [ Ty.path "usize" ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::filter_map::FilterMap")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                  ];
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  (Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::dev::VerifyFailure"
                                                                    ])
                                                              ])
                                                        ])
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::Selector"
                                                              ];
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "core::iter::adapters::flatten::FlatMap")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::filter::Filter")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::enumerate::Enumerate")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Gate")
                                                                    [ F ]
                                                                ]
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Gate")
                                                                                [ F ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.path "bool")
                                                        ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::flatten::FlatMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [ Ty.path "usize" ];
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::filter_map::FilterMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::VirtualCell"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::VirtualCell"
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::dev::VerifyFailure"
                                                                  ])
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [ Ty.path "usize" ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::filter_map::FilterMap")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                  ];
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  (Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::dev::VerifyFailure"
                                                                    ])
                                                              ])
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Gate")
                                                                        [ F ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::flatten::FlatMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [ Ty.path "usize" ];
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::filter_map::FilterMap")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                  ];
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  (Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::dev::VerifyFailure"
                                                                    ])
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [ Ty.path "usize" ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::filter_map::FilterMap")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell"
                                                                    ];
                                                                  Ty.function
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                                            ]
                                                                        ]
                                                                    ]
                                                                    (Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::dev::VerifyFailure"
                                                                      ])
                                                                ])
                                                          ])
                                                    ])
                                              ])
                                        ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_function (|
                                        "core::iter::sources::empty::empty",
                                        [ Ty.path "halo2_proofs::dev::VerifyFailure" ]
                                      |),
                                      []
                                    |);
                                    M.read (| selector_errors |)
                                  ]
                                |);
                                M.read (| gate_errors |)
                              ]
                            |);
                            M.read (| lookup_errors |)
                          ]
                        |);
                        M.read (| perm_errors |)
                      ]
                    |)
                  ]
                |)
              |) in
            M.match_operator (|
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.path "halo2_proofs::dev::VerifyFailure";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "is_empty",
                              []
                            |),
                            [ errors ]
                          |)
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)));
                fun γ =>
                  ltac:(M.monadic
                    (let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.path "halo2_proofs::dev::VerifyFailure";
                                Ty.path "alloc::alloc::Global"
                              ],
                            "dedup_by",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [ Ty.path "halo2_proofs::dev::VerifyFailure" ];
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [ Ty.path "halo2_proofs::dev::VerifyFailure" ]
                                    ]
                                ]
                                (Ty.path "bool")
                            ]
                          |),
                          [
                            errors;
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0; α1 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let a := M.copy (| γ |) in
                                            M.match_operator (|
                                              M.alloc (| α1 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let b := M.copy (| γ |) in
                                                    M.read (|
                                                      M.match_operator (|
                                                        M.alloc (|
                                                          Value.Tuple
                                                            [ M.read (| a |); M.read (| b |) ]
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ,
                                                                  0
                                                                |) in
                                                              let γ0_1 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ,
                                                                  1
                                                                |) in
                                                              let a := M.copy (| γ0_0 |) in
                                                              let γ0_0 := M.read (| γ0_0 |) in
                                                              let b := M.copy (| γ0_1 |) in
                                                              let γ0_1 := M.read (| γ0_1 |) in
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::cmp::PartialEq",
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::dev::VerifyFailure"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&mut")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::dev::VerifyFailure"
                                                                        ]
                                                                    ],
                                                                    "eq",
                                                                    []
                                                                  |),
                                                                  [ a; b ]
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.alloc (| Value.Bool false |)))
                                                        ]
                                                      |)
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    M.alloc (|
                      Value.StructTuple "core::result::Result::Err" [ M.read (| errors |) ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_verify_at_rows :
      forall (F : Ty.t),
      M.IsAssociatedFunction (Self F) "verify_at_rows" (verify_at_rows F).
  End Impl_halo2_proofs_dev_MockVerifier_F.
End dev.
