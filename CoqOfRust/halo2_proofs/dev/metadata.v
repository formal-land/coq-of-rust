(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module dev.
  Module metadata.
    (* StructRecord
      {
        name := "Column";
        ty_params := [];
        fields :=
          [ ("column_type", Ty.path "halo2_proofs::plonk::circuit::Any"); ("index", Ty.path "usize")
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_halo2_proofs_dev_metadata_Column.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Column".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "Column" |);
                M.read (| Value.String "column_type" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::dev::metadata::Column",
                    "column_type"
                  |));
                M.read (| Value.String "index" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::dev::metadata::Column",
                      "index"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_halo2_proofs_dev_metadata_Column.
    
    Module Impl_core_marker_StructuralPartialEq_for_halo2_proofs_dev_metadata_Column.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Column".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_halo2_proofs_dev_metadata_Column.
    
    Module Impl_core_cmp_PartialEq_for_halo2_proofs_dev_metadata_Column.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Column".
      
      (* PartialEq *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            LogicalOp.and (|
              M.call_closure (|
                M.get_trait_method (|
                  "core::cmp::PartialEq",
                  Ty.path "halo2_proofs::plonk::circuit::Any",
                  [ Ty.path "halo2_proofs::plonk::circuit::Any" ],
                  "eq",
                  []
                |),
                [
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::dev::metadata::Column",
                    "column_type"
                  |);
                  M.SubPointer.get_struct_record_field (|
                    M.read (| other |),
                    "halo2_proofs::dev::metadata::Column",
                    "column_type"
                  |)
                ]
              |),
              ltac:(M.monadic
                (BinOp.Pure.eq
                  (M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::dev::metadata::Column",
                      "index"
                    |)
                  |))
                  (M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| other |),
                      "halo2_proofs::dev::metadata::Column",
                      "index"
                    |)
                  |))))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_halo2_proofs_dev_metadata_Column.
    
    Module Impl_core_marker_StructuralEq_for_halo2_proofs_dev_metadata_Column.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Column".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralEq_for_halo2_proofs_dev_metadata_Column.
    
    Module Impl_core_cmp_Eq_for_halo2_proofs_dev_metadata_Column.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Column".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_halo2_proofs_dev_metadata_Column.
    
    Module Impl_core_cmp_PartialOrd_for_halo2_proofs_dev_metadata_Column.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Column".
      
      (* PartialOrd *)
      Definition partial_cmp (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::cmp::PartialOrd",
                      Ty.path "halo2_proofs::plonk::circuit::Any",
                      [ Ty.path "halo2_proofs::plonk::circuit::Any" ],
                      "partial_cmp",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::dev::metadata::Column",
                        "column_type"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| other |),
                        "halo2_proofs::dev::metadata::Column",
                        "column_type"
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::option::Option::Some",
                          0
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.path "usize",
                            [ Ty.path "usize" ],
                            "partial_cmp",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::dev::metadata::Column",
                              "index"
                            |);
                            M.SubPointer.get_struct_record_field (|
                              M.read (| other |),
                              "halo2_proofs::dev::metadata::Column",
                              "index"
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let cmp := M.copy (| γ |) in
                      cmp))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialOrd"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
    End Impl_core_cmp_PartialOrd_for_halo2_proofs_dev_metadata_Column.
    
    Module Impl_core_cmp_Ord_for_halo2_proofs_dev_metadata_Column.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Column".
      
      (* Ord *)
      Definition cmp (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::cmp::Ord",
                      Ty.path "halo2_proofs::plonk::circuit::Any",
                      [],
                      "cmp",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::dev::metadata::Column",
                        "column_type"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| other |),
                        "halo2_proofs::dev::metadata::Column",
                        "column_type"
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (| "core::cmp::Ord", Ty.path "usize", [], "cmp", [] |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::dev::metadata::Column",
                              "index"
                            |);
                            M.SubPointer.get_struct_record_field (|
                              M.read (| other |),
                              "halo2_proofs::dev::metadata::Column",
                              "index"
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let cmp := M.copy (| γ |) in
                      cmp))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Ord"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
    End Impl_core_cmp_Ord_for_halo2_proofs_dev_metadata_Column.
    
    Module Impl_core_fmt_Display_for_halo2_proofs_dev_metadata_Column.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Column".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              write!(f, "Column('{:?}', {})", self.column_type, self.index)
          }
      *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_fmt", [] |),
              [
                M.read (| f |);
                M.call_closure (|
                  M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                  [
                    (* Unsize *)
                    M.pointer_coercion
                      (M.alloc (|
                        Value.Array
                          [
                            M.read (| Value.String "Column('" |);
                            M.read (| Value.String "', " |);
                            M.read (| Value.String ")" |)
                          ]
                      |));
                    (* Unsize *)
                    M.pointer_coercion
                      (M.alloc (|
                        Value.Array
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::rt::Argument",
                                "new_debug",
                                [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::dev::metadata::Column",
                                  "column_type"
                                |)
                              ]
                            |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::rt::Argument",
                                "new_display",
                                [ Ty.path "usize" ]
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::dev::metadata::Column",
                                  "index"
                                |)
                              ]
                            |)
                          ]
                      |))
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_halo2_proofs_dev_metadata_Column.
    
    Module Impl_core_convert_From_Tuple_halo2_proofs_plonk_circuit_Any_usize__for_halo2_proofs_dev_metadata_Column.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Column".
      
      (*
          fn from((column_type, index): (Any, usize)) -> Self {
              Column { column_type, index }
          }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ β0 ] =>
          ltac:(M.monadic
            (let β0 := M.alloc (| β0 |) in
            M.match_operator (|
              β0,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let column_type := M.copy (| γ0_0 |) in
                    let index := M.copy (| γ0_1 |) in
                    Value.StructRecord
                      "halo2_proofs::dev::metadata::Column"
                      [ ("column_type", M.read (| column_type |)); ("index", M.read (| index |)) ]))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *)
          [ (* T *) Ty.tuple [ Ty.path "halo2_proofs::plonk::circuit::Any"; Ty.path "usize" ] ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_Tuple_halo2_proofs_plonk_circuit_Any_usize__for_halo2_proofs_dev_metadata_Column.
    
    Module Impl_core_convert_From_halo2_proofs_plonk_circuit_Column_halo2_proofs_plonk_circuit_Any_for_halo2_proofs_dev_metadata_Column.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Column".
      
      (*
          fn from(column: plonk::Column<Any>) -> Self {
              Column {
                  column_type: *column.column_type(),
                  index: column.index(),
              }
          }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ column ] =>
          ltac:(M.monadic
            (let column := M.alloc (| column |) in
            Value.StructRecord
              "halo2_proofs::dev::metadata::Column"
              [
                ("column_type",
                  M.read (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "halo2_proofs::plonk::circuit::Column")
                          [ Ty.path "halo2_proofs::plonk::circuit::Any" ],
                        "column_type",
                        []
                      |),
                      [ column ]
                    |)
                  |));
                ("index",
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                        [ Ty.path "halo2_proofs::plonk::circuit::Any" ],
                      "index",
                      []
                    |),
                    [ column ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *)
          [
            (* T *)
            Ty.apply
              (Ty.path "halo2_proofs::plonk::circuit::Column")
              [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
          ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_halo2_proofs_plonk_circuit_Column_halo2_proofs_plonk_circuit_Any_for_halo2_proofs_dev_metadata_Column.
    
    (* StructRecord
      {
        name := "VirtualCell";
        ty_params := [];
        fields :=
          [
            ("name", Ty.apply (Ty.path "&") [ Ty.path "str" ]);
            ("column", Ty.path "halo2_proofs::dev::metadata::Column");
            ("rotation", Ty.path "i32")
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_halo2_proofs_dev_metadata_VirtualCell.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::VirtualCell".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field3_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "VirtualCell" |);
                M.read (| Value.String "name" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::dev::metadata::VirtualCell",
                    "name"
                  |));
                M.read (| Value.String "column" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::dev::metadata::VirtualCell",
                    "column"
                  |));
                M.read (| Value.String "rotation" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::dev::metadata::VirtualCell",
                      "rotation"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_halo2_proofs_dev_metadata_VirtualCell.
    
    Module Impl_core_marker_StructuralPartialEq_for_halo2_proofs_dev_metadata_VirtualCell.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::VirtualCell".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_halo2_proofs_dev_metadata_VirtualCell.
    
    Module Impl_core_cmp_PartialEq_for_halo2_proofs_dev_metadata_VirtualCell.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::VirtualCell".
      
      (* PartialEq *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            LogicalOp.and (|
              LogicalOp.and (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.apply (Ty.path "&") [ Ty.path "str" ],
                    [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ],
                    "eq",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::dev::metadata::VirtualCell",
                      "name"
                    |);
                    M.SubPointer.get_struct_record_field (|
                      M.read (| other |),
                      "halo2_proofs::dev::metadata::VirtualCell",
                      "name"
                    |)
                  ]
                |),
                ltac:(M.monadic
                  (M.call_closure (|
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.path "halo2_proofs::dev::metadata::Column",
                      [ Ty.path "halo2_proofs::dev::metadata::Column" ],
                      "eq",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::dev::metadata::VirtualCell",
                        "column"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| other |),
                        "halo2_proofs::dev::metadata::VirtualCell",
                        "column"
                      |)
                    ]
                  |)))
              |),
              ltac:(M.monadic
                (BinOp.Pure.eq
                  (M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::dev::metadata::VirtualCell",
                      "rotation"
                    |)
                  |))
                  (M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| other |),
                      "halo2_proofs::dev::metadata::VirtualCell",
                      "rotation"
                    |)
                  |))))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_halo2_proofs_dev_metadata_VirtualCell.
    
    Module Impl_core_marker_StructuralEq_for_halo2_proofs_dev_metadata_VirtualCell.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::VirtualCell".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralEq_for_halo2_proofs_dev_metadata_VirtualCell.
    
    Module Impl_core_cmp_Eq_for_halo2_proofs_dev_metadata_VirtualCell.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::VirtualCell".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Value.DeclaredButUndefined,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Value.DeclaredButUndefined,
                                [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                              |)))
                        ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_halo2_proofs_dev_metadata_VirtualCell.
    
    Module Impl_core_cmp_PartialOrd_for_halo2_proofs_dev_metadata_VirtualCell.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::VirtualCell".
      
      (* PartialOrd *)
      Definition partial_cmp (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::cmp::PartialOrd",
                      Ty.apply (Ty.path "&") [ Ty.path "str" ],
                      [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ],
                      "partial_cmp",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::dev::metadata::VirtualCell",
                        "name"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| other |),
                        "halo2_proofs::dev::metadata::VirtualCell",
                        "name"
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::option::Option::Some",
                          0
                        |) in
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::cmp::PartialOrd",
                              Ty.path "halo2_proofs::dev::metadata::Column",
                              [ Ty.path "halo2_proofs::dev::metadata::Column" ],
                              "partial_cmp",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::dev::metadata::VirtualCell",
                                "column"
                              |);
                              M.SubPointer.get_struct_record_field (|
                                M.read (| other |),
                                "halo2_proofs::dev::metadata::VirtualCell",
                                "column"
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    Ty.path "i32",
                                    [ Ty.path "i32" ],
                                    "partial_cmp",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "halo2_proofs::dev::metadata::VirtualCell",
                                      "rotation"
                                    |);
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| other |),
                                      "halo2_proofs::dev::metadata::VirtualCell",
                                      "rotation"
                                    |)
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let cmp := M.copy (| γ |) in
                              cmp))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let cmp := M.copy (| γ |) in
                      cmp))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialOrd"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
    End Impl_core_cmp_PartialOrd_for_halo2_proofs_dev_metadata_VirtualCell.
    
    Module Impl_core_cmp_Ord_for_halo2_proofs_dev_metadata_VirtualCell.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::VirtualCell".
      
      (* Ord *)
      Definition cmp (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::cmp::Ord",
                      Ty.apply (Ty.path "&") [ Ty.path "str" ],
                      [],
                      "cmp",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::dev::metadata::VirtualCell",
                        "name"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| other |),
                        "halo2_proofs::dev::metadata::VirtualCell",
                        "name"
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::cmp::Ord",
                              Ty.path "halo2_proofs::dev::metadata::Column",
                              [],
                              "cmp",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::dev::metadata::VirtualCell",
                                "column"
                              |);
                              M.SubPointer.get_struct_record_field (|
                                M.read (| other |),
                                "halo2_proofs::dev::metadata::VirtualCell",
                                "column"
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::Ord",
                                    Ty.path "i32",
                                    [],
                                    "cmp",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "halo2_proofs::dev::metadata::VirtualCell",
                                      "rotation"
                                    |);
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| other |),
                                      "halo2_proofs::dev::metadata::VirtualCell",
                                      "rotation"
                                    |)
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let cmp := M.copy (| γ |) in
                              cmp))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let cmp := M.copy (| γ |) in
                      cmp))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Ord"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
    End Impl_core_cmp_Ord_for_halo2_proofs_dev_metadata_VirtualCell.
    
    Module Impl_core_convert_From_Tuple_halo2_proofs_dev_metadata_Column_i32__for_halo2_proofs_dev_metadata_VirtualCell.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::VirtualCell".
      
      (*
          fn from((column, rotation): (Column, i32)) -> Self {
              VirtualCell {
                  name: "",
                  column,
                  rotation,
              }
          }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ β0 ] =>
          ltac:(M.monadic
            (let β0 := M.alloc (| β0 |) in
            M.match_operator (|
              β0,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let column := M.copy (| γ0_0 |) in
                    let rotation := M.copy (| γ0_1 |) in
                    Value.StructRecord
                      "halo2_proofs::dev::metadata::VirtualCell"
                      [
                        ("name", M.read (| Value.String "" |));
                        ("column", M.read (| column |));
                        ("rotation", M.read (| rotation |))
                      ]))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *)
          [ (* T *) Ty.tuple [ Ty.path "halo2_proofs::dev::metadata::Column"; Ty.path "i32" ] ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_Tuple_halo2_proofs_dev_metadata_Column_i32__for_halo2_proofs_dev_metadata_VirtualCell.
    
    Module Impl_core_convert_From_Tuple_ref__str_halo2_proofs_dev_metadata_Column_i32__for_halo2_proofs_dev_metadata_VirtualCell.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::VirtualCell".
      
      (*
          fn from((name, column, rotation): (&'static str, Column, i32)) -> Self {
              VirtualCell {
                  name,
                  column,
                  rotation,
              }
          }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ β0 ] =>
          ltac:(M.monadic
            (let β0 := M.alloc (| β0 |) in
            M.match_operator (|
              β0,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                    let name := M.copy (| γ0_0 |) in
                    let column := M.copy (| γ0_1 |) in
                    let rotation := M.copy (| γ0_2 |) in
                    Value.StructRecord
                      "halo2_proofs::dev::metadata::VirtualCell"
                      [
                        ("name", M.read (| name |));
                        ("column", M.read (| column |));
                        ("rotation", M.read (| rotation |))
                      ]))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *)
          [
            (* T *)
            Ty.tuple
              [
                Ty.apply (Ty.path "&") [ Ty.path "str" ];
                Ty.path "halo2_proofs::dev::metadata::Column";
                Ty.path "i32"
              ]
          ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_Tuple_ref__str_halo2_proofs_dev_metadata_Column_i32__for_halo2_proofs_dev_metadata_VirtualCell.
    
    Module Impl_core_convert_From_halo2_proofs_plonk_circuit_VirtualCell_for_halo2_proofs_dev_metadata_VirtualCell.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::VirtualCell".
      
      (*
          fn from(c: plonk::VirtualCell) -> Self {
              VirtualCell {
                  name: "",
                  column: c.column.into(),
                  rotation: c.rotation.0,
              }
          }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ c ] =>
          ltac:(M.monadic
            (let c := M.alloc (| c |) in
            Value.StructRecord
              "halo2_proofs::dev::metadata::VirtualCell"
              [
                ("name", M.read (| Value.String "" |));
                ("column",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::convert::Into",
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                        [ Ty.path "halo2_proofs::plonk::circuit::Any" ],
                      [ Ty.path "halo2_proofs::dev::metadata::Column" ],
                      "into",
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          c,
                          "halo2_proofs::plonk::circuit::VirtualCell",
                          "column"
                        |)
                      |)
                    ]
                  |));
                ("rotation",
                  M.read (|
                    M.SubPointer.get_struct_tuple_field (|
                      M.SubPointer.get_struct_record_field (|
                        c,
                        "halo2_proofs::plonk::circuit::VirtualCell",
                        "rotation"
                      |),
                      "halo2_proofs::poly::Rotation",
                      0
                    |)
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *)
          [ (* T *) Ty.path "halo2_proofs::plonk::circuit::VirtualCell" ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_halo2_proofs_plonk_circuit_VirtualCell_for_halo2_proofs_dev_metadata_VirtualCell.
    
    Module Impl_core_fmt_Display_for_halo2_proofs_dev_metadata_VirtualCell.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::VirtualCell".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              write!(f, "{}@{}", self.column, self.rotation)?;
              if !self.name.is_empty() {
                  write!(f, "({})", self.name)?;
              }
              Ok(())
          }
      *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Formatter",
                                "write_fmt",
                                []
                              |),
                              [
                                M.read (| f |);
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_v1",
                                    []
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.alloc (|
                                        Value.Array
                                          [
                                            M.read (| Value.String "" |);
                                            M.read (| Value.String "@" |)
                                          ]
                                      |));
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.alloc (|
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_display",
                                                [ Ty.path "halo2_proofs::dev::metadata::Column" ]
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| self |),
                                                  "halo2_proofs::dev::metadata::VirtualCell",
                                                  "column"
                                                |)
                                              ]
                                            |);
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_display",
                                                [ Ty.path "i32" ]
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| self |),
                                                  "halo2_proofs::dev::metadata::VirtualCell",
                                                  "rotation"
                                                |)
                                              ]
                                            |)
                                          ]
                                      |))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "core::fmt::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.Pure.not
                                    (M.call_closure (|
                                      M.get_associated_function (| Ty.path "str", "is_empty", [] |),
                                      [
                                        M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "halo2_proofs::dev::metadata::VirtualCell",
                                            "name"
                                          |)
                                        |)
                                      ]
                                    |))
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::Formatter",
                                          "write_fmt",
                                          []
                                        |),
                                        [
                                          M.read (| f |);
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::Arguments",
                                              "new_v1",
                                              []
                                            |),
                                            [
                                              (* Unsize *)
                                              M.pointer_coercion
                                                (M.alloc (|
                                                  Value.Array
                                                    [
                                                      M.read (| Value.String "(" |);
                                                      M.read (| Value.String ")" |)
                                                    ]
                                                |));
                                              (* Unsize *)
                                              M.pointer_coercion
                                                (M.alloc (|
                                                  Value.Array
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::rt::Argument",
                                                          "new_display",
                                                          [ Ty.apply (Ty.path "&") [ Ty.path "str" ]
                                                          ]
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| self |),
                                                            "halo2_proofs::dev::metadata::VirtualCell",
                                                            "name"
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                |))
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "core::fmt::Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_halo2_proofs_dev_metadata_VirtualCell.
    
    (* StructRecord
      {
        name := "Gate";
        ty_params := [];
        fields :=
          [ ("index", Ty.path "usize"); ("name", Ty.apply (Ty.path "&") [ Ty.path "str" ]) ];
      } *)
    
    Module Impl_core_fmt_Debug_for_halo2_proofs_dev_metadata_Gate.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Gate".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "Gate" |);
                M.read (| Value.String "index" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::dev::metadata::Gate",
                    "index"
                  |));
                M.read (| Value.String "name" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::dev::metadata::Gate",
                      "name"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_halo2_proofs_dev_metadata_Gate.
    
    Module Impl_core_marker_StructuralPartialEq_for_halo2_proofs_dev_metadata_Gate.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Gate".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_halo2_proofs_dev_metadata_Gate.
    
    Module Impl_core_cmp_PartialEq_for_halo2_proofs_dev_metadata_Gate.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Gate".
      
      (* PartialEq *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            LogicalOp.and (|
              BinOp.Pure.eq
                (M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::dev::metadata::Gate",
                    "index"
                  |)
                |))
                (M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| other |),
                    "halo2_proofs::dev::metadata::Gate",
                    "index"
                  |)
                |)),
              ltac:(M.monadic
                (M.call_closure (|
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.apply (Ty.path "&") [ Ty.path "str" ],
                    [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ],
                    "eq",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::dev::metadata::Gate",
                      "name"
                    |);
                    M.SubPointer.get_struct_record_field (|
                      M.read (| other |),
                      "halo2_proofs::dev::metadata::Gate",
                      "name"
                    |)
                  ]
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_halo2_proofs_dev_metadata_Gate.
    
    Module Impl_core_fmt_Display_for_halo2_proofs_dev_metadata_Gate.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Gate".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              write!(f, "Gate {} ('{}')", self.index, self.name)
          }
      *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_fmt", [] |),
              [
                M.read (| f |);
                M.call_closure (|
                  M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                  [
                    (* Unsize *)
                    M.pointer_coercion
                      (M.alloc (|
                        Value.Array
                          [
                            M.read (| Value.String "Gate " |);
                            M.read (| Value.String " ('" |);
                            M.read (| Value.String "')" |)
                          ]
                      |));
                    (* Unsize *)
                    M.pointer_coercion
                      (M.alloc (|
                        Value.Array
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::rt::Argument",
                                "new_display",
                                [ Ty.path "usize" ]
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::dev::metadata::Gate",
                                  "index"
                                |)
                              ]
                            |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::rt::Argument",
                                "new_display",
                                [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ]
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::dev::metadata::Gate",
                                  "name"
                                |)
                              ]
                            |)
                          ]
                      |))
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_halo2_proofs_dev_metadata_Gate.
    
    Module Impl_core_convert_From_Tuple_usize_ref__str__for_halo2_proofs_dev_metadata_Gate.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Gate".
      
      (*
          fn from((index, name): (usize, &'static str)) -> Self {
              Gate { index, name }
          }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ β0 ] =>
          ltac:(M.monadic
            (let β0 := M.alloc (| β0 |) in
            M.match_operator (|
              β0,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let index := M.copy (| γ0_0 |) in
                    let name := M.copy (| γ0_1 |) in
                    Value.StructRecord
                      "halo2_proofs::dev::metadata::Gate"
                      [ ("index", M.read (| index |)); ("name", M.read (| name |)) ]))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *)
          [ (* T *) Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [ Ty.path "str" ] ] ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_Tuple_usize_ref__str__for_halo2_proofs_dev_metadata_Gate.
    
    (* StructRecord
      {
        name := "Constraint";
        ty_params := [];
        fields :=
          [
            ("gate", Ty.path "halo2_proofs::dev::metadata::Gate");
            ("index", Ty.path "usize");
            ("name", Ty.apply (Ty.path "&") [ Ty.path "str" ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_halo2_proofs_dev_metadata_Constraint.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Constraint".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field3_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "Constraint" |);
                M.read (| Value.String "gate" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::dev::metadata::Constraint",
                    "gate"
                  |));
                M.read (| Value.String "index" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::dev::metadata::Constraint",
                    "index"
                  |));
                M.read (| Value.String "name" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::dev::metadata::Constraint",
                      "name"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_halo2_proofs_dev_metadata_Constraint.
    
    Module Impl_core_marker_StructuralPartialEq_for_halo2_proofs_dev_metadata_Constraint.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Constraint".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_halo2_proofs_dev_metadata_Constraint.
    
    Module Impl_core_cmp_PartialEq_for_halo2_proofs_dev_metadata_Constraint.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Constraint".
      
      (* PartialEq *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            LogicalOp.and (|
              LogicalOp.and (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.path "halo2_proofs::dev::metadata::Gate",
                    [ Ty.path "halo2_proofs::dev::metadata::Gate" ],
                    "eq",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::dev::metadata::Constraint",
                      "gate"
                    |);
                    M.SubPointer.get_struct_record_field (|
                      M.read (| other |),
                      "halo2_proofs::dev::metadata::Constraint",
                      "gate"
                    |)
                  ]
                |),
                ltac:(M.monadic
                  (BinOp.Pure.eq
                    (M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::dev::metadata::Constraint",
                        "index"
                      |)
                    |))
                    (M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| other |),
                        "halo2_proofs::dev::metadata::Constraint",
                        "index"
                      |)
                    |))))
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.apply (Ty.path "&") [ Ty.path "str" ],
                    [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ],
                    "eq",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::dev::metadata::Constraint",
                      "name"
                    |);
                    M.SubPointer.get_struct_record_field (|
                      M.read (| other |),
                      "halo2_proofs::dev::metadata::Constraint",
                      "name"
                    |)
                  ]
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_halo2_proofs_dev_metadata_Constraint.
    
    Module Impl_core_fmt_Display_for_halo2_proofs_dev_metadata_Constraint.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Constraint".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              write!(
                  f,
                  "Constraint {}{} in gate {} ('{}')",
                  self.index,
                  if self.name.is_empty() {
                      String::new()
                  } else {
                      format!(" ('{}')", self.name)
                  },
                  self.gate.index,
                  self.gate.name,
              )
          }
      *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_fmt", [] |),
              [
                M.read (| f |);
                M.call_closure (|
                  M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                  [
                    (* Unsize *)
                    M.pointer_coercion
                      (M.alloc (|
                        Value.Array
                          [
                            M.read (| Value.String "Constraint " |);
                            M.read (| Value.String "" |);
                            M.read (| Value.String " in gate " |);
                            M.read (| Value.String " ('" |);
                            M.read (| Value.String "')" |)
                          ]
                      |));
                    (* Unsize *)
                    M.pointer_coercion
                      (M.alloc (|
                        Value.Array
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::rt::Argument",
                                "new_display",
                                [ Ty.path "usize" ]
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::dev::metadata::Constraint",
                                  "index"
                                |)
                              ]
                            |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::rt::Argument",
                                "new_display",
                                [ Ty.path "alloc::string::String" ]
                              |),
                              [
                                M.match_operator (|
                                  M.alloc (| Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "str",
                                                  "is_empty",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "halo2_proofs::dev::metadata::Constraint",
                                                      "name"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)) in
                                        let _ :=
                                          M.is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "alloc::string::String",
                                              "new",
                                              []
                                            |),
                                            []
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let res :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_function (| "alloc::fmt::format", [] |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_v1",
                                                    []
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.alloc (|
                                                        Value.Array
                                                          [
                                                            M.read (| Value.String " ('" |);
                                                            M.read (| Value.String "')" |)
                                                          ]
                                                      |));
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.alloc (|
                                                        Value.Array
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::rt::Argument",
                                                                "new_display",
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [ Ty.path "str" ]
                                                                ]
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| self |),
                                                                  "halo2_proofs::dev::metadata::Constraint",
                                                                  "name"
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                      |))
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        res))
                                  ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::rt::Argument",
                                "new_display",
                                [ Ty.path "usize" ]
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "halo2_proofs::dev::metadata::Constraint",
                                    "gate"
                                  |),
                                  "halo2_proofs::dev::metadata::Gate",
                                  "index"
                                |)
                              ]
                            |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::rt::Argument",
                                "new_display",
                                [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ]
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "halo2_proofs::dev::metadata::Constraint",
                                    "gate"
                                  |),
                                  "halo2_proofs::dev::metadata::Gate",
                                  "name"
                                |)
                              ]
                            |)
                          ]
                      |))
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_halo2_proofs_dev_metadata_Constraint.
    
    Module Impl_core_convert_From_Tuple_halo2_proofs_dev_metadata_Gate_usize_ref__str__for_halo2_proofs_dev_metadata_Constraint.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Constraint".
      
      (*
          fn from((gate, index, name): (Gate, usize, &'static str)) -> Self {
              Constraint { gate, index, name }
          }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ β0 ] =>
          ltac:(M.monadic
            (let β0 := M.alloc (| β0 |) in
            M.match_operator (|
              β0,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                    let gate := M.copy (| γ0_0 |) in
                    let index := M.copy (| γ0_1 |) in
                    let name := M.copy (| γ0_2 |) in
                    Value.StructRecord
                      "halo2_proofs::dev::metadata::Constraint"
                      [
                        ("gate", M.read (| gate |));
                        ("index", M.read (| index |));
                        ("name", M.read (| name |))
                      ]))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *)
          [
            (* T *)
            Ty.tuple
              [
                Ty.path "halo2_proofs::dev::metadata::Gate";
                Ty.path "usize";
                Ty.apply (Ty.path "&") [ Ty.path "str" ]
              ]
          ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_Tuple_halo2_proofs_dev_metadata_Gate_usize_ref__str__for_halo2_proofs_dev_metadata_Constraint.
    
    (* StructRecord
      {
        name := "Region";
        ty_params := [];
        fields := [ ("index", Ty.path "usize"); ("name", Ty.path "alloc::string::String") ];
      } *)
    
    Module Impl_core_fmt_Debug_for_halo2_proofs_dev_metadata_Region.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Region".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "Region" |);
                M.read (| Value.String "index" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::dev::metadata::Region",
                    "index"
                  |));
                M.read (| Value.String "name" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::dev::metadata::Region",
                      "name"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_halo2_proofs_dev_metadata_Region.
    
    Module Impl_core_marker_StructuralPartialEq_for_halo2_proofs_dev_metadata_Region.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Region".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_halo2_proofs_dev_metadata_Region.
    
    Module Impl_core_cmp_PartialEq_for_halo2_proofs_dev_metadata_Region.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Region".
      
      (* PartialEq *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            LogicalOp.and (|
              BinOp.Pure.eq
                (M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::dev::metadata::Region",
                    "index"
                  |)
                |))
                (M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| other |),
                    "halo2_proofs::dev::metadata::Region",
                    "index"
                  |)
                |)),
              ltac:(M.monadic
                (M.call_closure (|
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.path "alloc::string::String",
                    [ Ty.path "alloc::string::String" ],
                    "eq",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::dev::metadata::Region",
                      "name"
                    |);
                    M.SubPointer.get_struct_record_field (|
                      M.read (| other |),
                      "halo2_proofs::dev::metadata::Region",
                      "name"
                    |)
                  ]
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_halo2_proofs_dev_metadata_Region.
    
    Module Impl_core_fmt_Display_for_halo2_proofs_dev_metadata_Region.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Region".
      
      (*
          fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
              write!(f, "Region {} ('{}')", self.index, self.name)
          }
      *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_fmt", [] |),
              [
                M.read (| f |);
                M.call_closure (|
                  M.get_associated_function (| Ty.path "core::fmt::Arguments", "new_v1", [] |),
                  [
                    (* Unsize *)
                    M.pointer_coercion
                      (M.alloc (|
                        Value.Array
                          [
                            M.read (| Value.String "Region " |);
                            M.read (| Value.String " ('" |);
                            M.read (| Value.String "')" |)
                          ]
                      |));
                    (* Unsize *)
                    M.pointer_coercion
                      (M.alloc (|
                        Value.Array
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::rt::Argument",
                                "new_display",
                                [ Ty.path "usize" ]
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::dev::metadata::Region",
                                  "index"
                                |)
                              ]
                            |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::rt::Argument",
                                "new_display",
                                [ Ty.path "alloc::string::String" ]
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::dev::metadata::Region",
                                  "name"
                                |)
                              ]
                            |)
                          ]
                      |))
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_halo2_proofs_dev_metadata_Region.
    
    Module Impl_core_convert_From_Tuple_usize_alloc_string_String__for_halo2_proofs_dev_metadata_Region.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Region".
      
      (*
          fn from((index, name): (usize, String)) -> Self {
              Region { index, name }
          }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ β0 ] =>
          ltac:(M.monadic
            (let β0 := M.alloc (| β0 |) in
            M.match_operator (|
              β0,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let index := M.copy (| γ0_0 |) in
                    let name := M.copy (| γ0_1 |) in
                    Value.StructRecord
                      "halo2_proofs::dev::metadata::Region"
                      [ ("index", M.read (| index |)); ("name", M.read (| name |)) ]))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *)
          [ (* T *) Ty.tuple [ Ty.path "usize"; Ty.path "alloc::string::String" ] ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_Tuple_usize_alloc_string_String__for_halo2_proofs_dev_metadata_Region.
    
    Module Impl_core_convert_From_Tuple_usize_ref__str__for_halo2_proofs_dev_metadata_Region.
      Definition Self : Ty.t := Ty.path "halo2_proofs::dev::metadata::Region".
      
      (*
          fn from((index, name): (usize, &str)) -> Self {
              Region {
                  index,
                  name: name.to_owned(),
              }
          }
      *)
      Definition from (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ β0 ] =>
          ltac:(M.monadic
            (let β0 := M.alloc (| β0 |) in
            M.match_operator (|
              β0,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let index := M.copy (| γ0_0 |) in
                    let name := M.copy (| γ0_1 |) in
                    Value.StructRecord
                      "halo2_proofs::dev::metadata::Region"
                      [
                        ("index", M.read (| index |));
                        ("name",
                          M.call_closure (|
                            M.get_trait_method (|
                              "alloc::borrow::ToOwned",
                              Ty.path "str",
                              [],
                              "to_owned",
                              []
                            |),
                            [ M.read (| name |) ]
                          |))
                      ]))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          Self
          (* Trait polymorphic types *)
          [ (* T *) Ty.tuple [ Ty.path "usize"; Ty.apply (Ty.path "&") [ Ty.path "str" ] ] ]
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_Tuple_usize_ref__str__for_halo2_proofs_dev_metadata_Region.
  End metadata.
End dev.
