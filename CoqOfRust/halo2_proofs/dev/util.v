(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module dev.
  Module util.
    (*
    pub(super) fn format_value<F: Field>(v: F) -> String {
        if v.is_zero_vartime() {
            "0".into()
        } else if v == F::one() {
            "1".into()
        } else if v == -F::one() {
            "-1".into()
        } else {
            // Format value as hex.
            let s = format!("{:?}", v);
            // Remove leading zeroes.
            let s = s.strip_prefix("0x").unwrap();
            let s = s.trim_start_matches('0');
            format!("0x{}", s)
        }
    }
    *)
    Definition format_value (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ F ], [ v ] =>
        ltac:(M.monadic
          (let v := M.alloc (| v |) in
          M.read (|
            M.match_operator (|
              M.alloc (| Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (| "ff::Field", F, [], "is_zero_vartime", [] |),
                            [ v ]
                          |)
                        |)) in
                    let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::convert::Into",
                          Ty.apply (Ty.path "&") [ Ty.path "str" ],
                          [ Ty.path "alloc::string::String" ],
                          "into",
                          []
                        |),
                        [ M.read (| Value.String "0" |) ]
                      |)
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      F,
                                      [ F ],
                                      "eq",
                                      []
                                    |),
                                    [
                                      v;
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (| "ff::Field", F, [], "one", [] |),
                                          []
                                        |)
                                      |)
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::convert::Into",
                                  Ty.apply (Ty.path "&") [ Ty.path "str" ],
                                  [ Ty.path "alloc::string::String" ],
                                  "into",
                                  []
                                |),
                                [ M.read (| Value.String "1" |) ]
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::cmp::PartialEq",
                                              F,
                                              [ F ],
                                              "eq",
                                              []
                                            |),
                                            [
                                              v;
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::arith::Neg",
                                                    F,
                                                    [],
                                                    "neg",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "ff::Field",
                                                        F,
                                                        [],
                                                        "one",
                                                        []
                                                      |),
                                                      []
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.apply (Ty.path "&") [ Ty.path "str" ],
                                          [ Ty.path "alloc::string::String" ],
                                          "into",
                                          []
                                        |),
                                        [ M.read (| Value.String "-1" |) ]
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let s :=
                                      M.copy (|
                                        let res :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_function (| "alloc::fmt::format", [] |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_v1",
                                                    []
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.alloc (|
                                                        Value.Array [ M.read (| Value.String "" |) ]
                                                      |));
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.alloc (|
                                                        Value.Array
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::rt::Argument",
                                                                "new_debug",
                                                                [ F ]
                                                              |),
                                                              [ v ]
                                                            |)
                                                          ]
                                                      |))
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        res
                                      |) in
                                    let s :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ],
                                            "unwrap",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "str",
                                                "strip_prefix",
                                                [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.path "alloc::string::String",
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [ s ]
                                                |);
                                                M.read (| Value.String "0x" |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let s :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "str",
                                            "trim_start_matches",
                                            [ Ty.path "char" ]
                                          |),
                                          [ M.read (| s |); Value.UnicodeChar 48 ]
                                        |)
                                      |) in
                                    let res :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (| "alloc::fmt::format", [] |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::Arguments",
                                                "new_v1",
                                                []
                                              |),
                                              [
                                                (* Unsize *)
                                                M.pointer_coercion
                                                  (M.alloc (|
                                                    Value.Array [ M.read (| Value.String "0x" |) ]
                                                  |));
                                                (* Unsize *)
                                                M.pointer_coercion
                                                  (M.alloc (|
                                                    Value.Array
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            "new_display",
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.path "str" ]
                                                            ]
                                                          |),
                                                          [ s ]
                                                        |)
                                                      ]
                                                  |))
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    res))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    (*
    fn cell_value<'a, F: FieldExt>(
        virtual_cells: &'a [VirtualCell],
        column_type: Any,
        load: impl Fn(usize, usize, Rotation) -> Value<F> + 'a,
    ) -> impl Fn(usize, usize, Rotation) -> BTreeMap<metadata::VirtualCell, String> + 'a {
        move |query_index, column_index, rotation| {
            virtual_cells
                .iter()
                .find(|c| {
                    c.column.column_type() == &column_type
                        && c.column.index() == column_index
                        && c.rotation == rotation
                })
                // None indicates a selector, which we don't bother showing.
                .map(|cell| {
                    (
                        cell.clone().into(),
                        match load(query_index, column_index, rotation) {
                            Value::Real(v) => format_value(v),
                            Value::Poison => unreachable!(),
                        },
                    )
                })
                .into_iter()
                .collect()
        }
    }
    *)
    Definition cell_value (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ F; impl_Fn_usize__usize__Rotation__arrow_Value_F___plus__'a ],
          [ virtual_cells; column_type; load ] =>
        ltac:(M.monadic
          (let virtual_cells := M.alloc (| virtual_cells |) in
          let column_type := M.alloc (| column_type |) in
          let load := M.alloc (| load |) in
          M.closure
            (fun γ =>
              ltac:(M.monadic
                match γ with
                | [ α0; α1; α2 ] =>
                  M.match_operator (|
                    M.alloc (| α0 |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let query_index := M.copy (| γ |) in
                          M.match_operator (|
                            M.alloc (| α1 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let column_index := M.copy (| γ |) in
                                  M.match_operator (|
                                    M.alloc (| α2 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let rotation := M.copy (| γ |) in
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::option::IntoIter")
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.path
                                                        "halo2_proofs::dev::metadata::VirtualCell";
                                                      Ty.path "alloc::string::String"
                                                    ]
                                                ],
                                              [],
                                              "collect",
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "alloc::collections::btree::map::BTreeMap")
                                                  [
                                                    Ty.path
                                                      "halo2_proofs::dev::metadata::VirtualCell";
                                                    Ty.path "alloc::string::String";
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::dev::metadata::VirtualCell";
                                                          Ty.path "alloc::string::String"
                                                        ]
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ]
                                                        ],
                                                      "map",
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::dev::metadata::VirtualCell";
                                                            Ty.path "alloc::string::String"
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.tuple
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::dev::metadata::VirtualCell";
                                                              Ty.path "alloc::string::String"
                                                            ])
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                            ],
                                                          [],
                                                          "find",
                                                          [
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::circuit::VirtualCell"
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.path "bool")
                                                          ]
                                                        |),
                                                        [
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::VirtualCell"
                                                                  ],
                                                                "iter",
                                                                []
                                                              |),
                                                              [ M.read (| virtual_cells |) ]
                                                            |)
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  M.match_operator (|
                                                                    M.alloc (| α0 |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let c :=
                                                                            M.copy (| γ |) in
                                                                          LogicalOp.and (|
                                                                            LogicalOp.and (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::cmp::PartialEq",
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [
                                                                                      Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Any"
                                                                                    ],
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [
                                                                                        Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Any"
                                                                                      ]
                                                                                  ],
                                                                                  "eq",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Column")
                                                                                          [
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Any"
                                                                                          ],
                                                                                        "column_type",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          M.read (|
                                                                                            M.read (|
                                                                                              c
                                                                                            |)
                                                                                          |),
                                                                                          "halo2_proofs::plonk::circuit::VirtualCell",
                                                                                          "column"
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |);
                                                                                  M.alloc (|
                                                                                    column_type
                                                                                  |)
                                                                                ]
                                                                              |),
                                                                              ltac:(M.monadic
                                                                                (BinOp.Pure.eq
                                                                                  (M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                        [
                                                                                          Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Any"
                                                                                        ],
                                                                                      "index",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                        M.read (|
                                                                                          M.read (|
                                                                                            c
                                                                                          |)
                                                                                        |),
                                                                                        "halo2_proofs::plonk::circuit::VirtualCell",
                                                                                        "column"
                                                                                      |)
                                                                                    ]
                                                                                  |))
                                                                                  (M.read (|
                                                                                    column_index
                                                                                  |))))
                                                                            |),
                                                                            ltac:(M.monadic
                                                                              (M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::cmp::PartialEq",
                                                                                  Ty.path
                                                                                    "halo2_proofs::poly::Rotation",
                                                                                  [
                                                                                    Ty.path
                                                                                      "halo2_proofs::poly::Rotation"
                                                                                  ],
                                                                                  "eq",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    M.read (|
                                                                                      M.read (| c |)
                                                                                    |),
                                                                                    "halo2_proofs::plonk::circuit::VirtualCell",
                                                                                    "rotation"
                                                                                  |);
                                                                                  rotation
                                                                                ]
                                                                              |)))
                                                                          |)))
                                                                    ]
                                                                  |)
                                                                | _ => M.impossible (||)
                                                                end))
                                                        ]
                                                      |);
                                                      M.closure
                                                        (fun γ =>
                                                          ltac:(M.monadic
                                                            match γ with
                                                            | [ α0 ] =>
                                                              M.match_operator (|
                                                                M.alloc (| α0 |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let cell := M.copy (| γ |) in
                                                                      Value.Tuple
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::convert::Into",
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::circuit::VirtualCell",
                                                                              [
                                                                                Ty.path
                                                                                  "halo2_proofs::dev::metadata::VirtualCell"
                                                                              ],
                                                                              "into",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::clone::Clone",
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::circuit::VirtualCell",
                                                                                  [],
                                                                                  "clone",
                                                                                  []
                                                                                |),
                                                                                [ M.read (| cell |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          M.read (|
                                                                            M.match_operator (|
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::function::Fn",
                                                                                    impl_Fn_usize__usize__Rotation__arrow_Value_F___plus__'a,
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize";
                                                                                          Ty.path
                                                                                            "usize";
                                                                                          Ty.path
                                                                                            "halo2_proofs::poly::Rotation"
                                                                                        ]
                                                                                    ],
                                                                                    "call",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    load;
                                                                                    Value.Tuple
                                                                                      [
                                                                                        M.read (|
                                                                                          query_index
                                                                                        |);
                                                                                        M.read (|
                                                                                          column_index
                                                                                        |);
                                                                                        M.read (|
                                                                                          rotation
                                                                                        |)
                                                                                      ]
                                                                                  ]
                                                                                |)
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ0_0 :=
                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                        γ,
                                                                                        "halo2_proofs::dev::Value::Real",
                                                                                        0
                                                                                      |) in
                                                                                    let v :=
                                                                                      M.copy (|
                                                                                        γ0_0
                                                                                      |) in
                                                                                    M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_function (|
                                                                                          "halo2_proofs::dev::util::format_value",
                                                                                          [ F ]
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            v
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |)));
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (M.alloc (|
                                                                                      M.never_to_any (|
                                                                                        M.call_closure (|
                                                                                          M.get_function (|
                                                                                            "core::panicking::panic",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              Value.String
                                                                                                "internal error: entered unreachable code"
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        ]))
                                                                ]
                                                              |)
                                                            | _ => M.impossible (||)
                                                            end))
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)))
                                    ]
                                  |)))
                            ]
                          |)))
                    ]
                  |)
                | _ => M.impossible (||)
                end))))
      | _, _ => M.impossible
      end.
    
    Module cell_value.
      (* Error OpaqueTy *)
    End cell_value.
    
    (*
    pub(super) fn cell_values<'a, F: FieldExt>(
        gate: &Gate<F>,
        poly: &Expression<F>,
        load_fixed: impl Fn(usize, usize, Rotation) -> Value<F> + 'a,
        load_advice: impl Fn(usize, usize, Rotation) -> Value<F> + 'a,
        load_instance: impl Fn(usize, usize, Rotation) -> Value<F> + 'a,
    ) -> Vec<(metadata::VirtualCell, String)> {
        let virtual_cells = gate.queried_cells();
        let cell_values = poly.evaluate(
            &|_| BTreeMap::default(),
            &|_| panic!("virtual selectors are removed during optimization"),
            &cell_value(virtual_cells, Any::Fixed, load_fixed),
            &cell_value(virtual_cells, Any::Advice, load_advice),
            &cell_value(virtual_cells, Any::Instance, load_instance),
            &|a| a,
            &|mut a, mut b| {
                a.append(&mut b);
                a
            },
            &|a, b| {
                let mut a = a();
                let mut b = b();
                a.append(&mut b);
                a
            },
            &|a, _| a,
        );
        cell_values.into_iter().collect()
    }
    *)
    Definition cell_values (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [
            F;
            impl_Fn_usize__usize__Rotation__arrow_Value_F___plus__'a;
            impl_Fn_usize__usize__Rotation__arrow_Value_F___plus__'a'1;
            impl_Fn_usize__usize__Rotation__arrow_Value_F___plus__'a'2
          ],
          [ gate; poly; load_fixed; load_advice; load_instance ] =>
        ltac:(M.monadic
          (let gate := M.alloc (| gate |) in
          let poly := M.alloc (| poly |) in
          let load_fixed := M.alloc (| load_fixed |) in
          let load_advice := M.alloc (| load_advice |) in
          let load_instance := M.alloc (| load_instance |) in
          M.read (|
            let virtual_cells :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Gate") [ F ],
                    "queried_cells",
                    []
                  |),
                  [ M.read (| gate |) ]
                |)
              |) in
            let cell_values :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                    "evaluate",
                    [
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "halo2_proofs::dev::metadata::VirtualCell";
                          Ty.path "alloc::string::String";
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.function
                        [ Ty.tuple [ F ] ]
                        (Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          [
                            Ty.path "halo2_proofs::dev::metadata::VirtualCell";
                            Ty.path "alloc::string::String";
                            Ty.path "alloc::alloc::Global"
                          ]);
                      Ty.function
                        [ Ty.tuple [ Ty.path "halo2_proofs::plonk::circuit::Selector" ] ]
                        (Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          [
                            Ty.path "halo2_proofs::dev::metadata::VirtualCell";
                            Ty.path "alloc::string::String";
                            Ty.path "alloc::alloc::Global"
                          ]);
                      Ty.associated;
                      Ty.associated;
                      Ty.associated;
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                [
                                  Ty.path "halo2_proofs::dev::metadata::VirtualCell";
                                  Ty.path "alloc::string::String";
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                        ]
                        (Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          [
                            Ty.path "halo2_proofs::dev::metadata::VirtualCell";
                            Ty.path "alloc::string::String";
                            Ty.path "alloc::alloc::Global"
                          ]);
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                [
                                  Ty.path "halo2_proofs::dev::metadata::VirtualCell";
                                  Ty.path "alloc::string::String";
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.apply
                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                [
                                  Ty.path "halo2_proofs::dev::metadata::VirtualCell";
                                  Ty.path "alloc::string::String";
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                        ]
                        (Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          [
                            Ty.path "halo2_proofs::dev::metadata::VirtualCell";
                            Ty.path "alloc::string::String";
                            Ty.path "alloc::alloc::Global"
                          ]);
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&")
                                [ Ty.dyn [ ("core::ops::function::Fn::Trait", []) ] ];
                              Ty.apply
                                (Ty.path "&")
                                [ Ty.dyn [ ("core::ops::function::Fn::Trait", []) ] ]
                            ]
                        ]
                        (Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          [
                            Ty.path "halo2_proofs::dev::metadata::VirtualCell";
                            Ty.path "alloc::string::String";
                            Ty.path "alloc::alloc::Global"
                          ]);
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                [
                                  Ty.path "halo2_proofs::dev::metadata::VirtualCell";
                                  Ty.path "alloc::string::String";
                                  Ty.path "alloc::alloc::Global"
                                ];
                              F
                            ]
                        ]
                        (Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          [
                            Ty.path "halo2_proofs::dev::metadata::VirtualCell";
                            Ty.path "alloc::string::String";
                            Ty.path "alloc::alloc::Global"
                          ])
                    ]
                  |),
                  [
                    M.read (| poly |);
                    M.alloc (|
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        M.get_trait_method (|
                                          "core::default::Default",
                                          Ty.apply
                                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                                            [
                                              Ty.path "halo2_proofs::dev::metadata::VirtualCell";
                                              Ty.path "alloc::string::String";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "default",
                                          []
                                        |),
                                        []
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    |);
                    M.alloc (|
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (|
                                            "std::panicking::begin_panic",
                                            [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ]
                                          |),
                                          [
                                            M.read (|
                                              Value.String
                                                "virtual selectors are removed during optimization"
                                            |)
                                          ]
                                        |)
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    |);
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (|
                          "halo2_proofs::dev::util::cell_value",
                          [ F; impl_Fn_usize__usize__Rotation__arrow_Value_F___plus__'a ]
                        |),
                        [
                          M.read (| virtual_cells |);
                          Value.StructTuple "halo2_proofs::plonk::circuit::Any::Fixed" [];
                          M.read (| load_fixed |)
                        ]
                      |)
                    |);
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (|
                          "halo2_proofs::dev::util::cell_value",
                          [ F; impl_Fn_usize__usize__Rotation__arrow_Value_F___plus__'a'1 ]
                        |),
                        [
                          M.read (| virtual_cells |);
                          Value.StructTuple "halo2_proofs::plonk::circuit::Any::Advice" [];
                          M.read (| load_advice |)
                        ]
                      |)
                    |);
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (|
                          "halo2_proofs::dev::util::cell_value",
                          [ F; impl_Fn_usize__usize__Rotation__arrow_Value_F___plus__'a'2 ]
                        |),
                        [
                          M.read (| virtual_cells |);
                          Value.StructTuple "halo2_proofs::plonk::circuit::Any::Instance" [];
                          M.read (| load_instance |)
                        ]
                      |)
                    |);
                    M.alloc (|
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let a := M.copy (| γ |) in
                                      M.read (| a |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    |);
                    M.alloc (|
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0; α1 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let a := M.copy (| γ |) in
                                      M.match_operator (|
                                        M.alloc (| α1 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let b := M.copy (| γ |) in
                                              M.read (|
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::collections::btree::map::BTreeMap")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::dev::metadata::VirtualCell";
                                                            Ty.path "alloc::string::String";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "append",
                                                        []
                                                      |),
                                                      [ a; b ]
                                                    |)
                                                  |) in
                                                a
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    |);
                    M.alloc (|
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0; α1 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let a := M.copy (| γ |) in
                                      M.match_operator (|
                                        M.alloc (| α1 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let b := M.copy (| γ |) in
                                              M.read (|
                                                let a :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::function::Fn",
                                                        Ty.dyn
                                                          [ ("core::ops::function::Fn::Trait", [])
                                                          ],
                                                        [ Ty.tuple [] ],
                                                        "call",
                                                        []
                                                      |),
                                                      [ M.read (| a |); Value.Tuple [] ]
                                                    |)
                                                  |) in
                                                let b :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::function::Fn",
                                                        Ty.dyn
                                                          [ ("core::ops::function::Fn::Trait", [])
                                                          ],
                                                        [ Ty.tuple [] ],
                                                        "call",
                                                        []
                                                      |),
                                                      [ M.read (| b |); Value.Tuple [] ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::collections::btree::map::BTreeMap")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::dev::metadata::VirtualCell";
                                                            Ty.path "alloc::string::String";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "append",
                                                        []
                                                      |),
                                                      [ a; b ]
                                                    |)
                                                  |) in
                                                a
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    |);
                    M.alloc (|
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0; α1 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let a := M.copy (| γ |) in
                                      M.match_operator (|
                                        M.alloc (| α1 |),
                                        [ fun γ => ltac:(M.monadic (M.read (| a |))) ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    |)
                  ]
                |)
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::IntoIter")
                    [
                      Ty.path "halo2_proofs::dev::metadata::VirtualCell";
                      Ty.path "alloc::string::String";
                      Ty.path "alloc::alloc::Global"
                    ],
                  [],
                  "collect",
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.tuple
                          [
                            Ty.path "halo2_proofs::dev::metadata::VirtualCell";
                            Ty.path "alloc::string::String"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
                |),
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::collect::IntoIterator",
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [
                          Ty.path "halo2_proofs::dev::metadata::VirtualCell";
                          Ty.path "alloc::string::String";
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "into_iter",
                      []
                    |),
                    [ M.read (| cell_values |) ]
                  |)
                ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
  End util.
End dev.
