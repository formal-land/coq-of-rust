(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module helpers.
  (* Trait *)
  Module CurveRead.
    Definition read (Self : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ R ], [ reader ] =>
        ltac:(M.monadic
          (let reader := M.alloc (| reader |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let compressed :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.associated,
                        [],
                        "default",
                        []
                      |),
                      []
                    |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (| "std::io::Read", R, [], "read_exact", [] |),
                            [
                              M.read (| reader |);
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::convert::AsMut",
                                  Ty.associated,
                                  [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ],
                                  "as_mut",
                                  []
                                |),
                                [ compressed ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Self; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "core::option::Option") [ Self ],
                      "ok_or_else",
                      [
                        Ty.path "std::io::error::Error";
                        Ty.function [ Ty.tuple [] ] (Ty.path "std::io::error::Error")
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::convert::From",
                          Ty.apply (Ty.path "core::option::Option") [ Self ],
                          [ Ty.apply (Ty.path "subtle::CtOption") [ Self ] ],
                          "from",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "group::GroupEncoding",
                              Self,
                              [],
                              "from_bytes",
                              []
                            |),
                            [ compressed ]
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "std::io::error::Error",
                                          "new",
                                          [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ]
                                        |),
                                        [
                                          Value.StructTuple "std::io::error::ErrorKind::Other" [];
                                          M.read (|
                                            Value.String "invalid point encoding in proof"
                                          |)
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom ProvidedMethod_read : M.IsProvidedMethod "halo2_proofs::helpers::CurveRead" "read" read.
  End CurveRead.
  
  Module Impl_halo2_proofs_helpers_CurveRead_where_pairing_bn256_arithmetic_curves_CurveAffine_C_for_C.
    Definition Self (C : Ty.t) : Ty.t := C.
    
    Axiom Implements :
      forall (C : Ty.t),
      M.IsTraitInstance
        "halo2_proofs::helpers::CurveRead"
        (Self C)
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_halo2_proofs_helpers_CurveRead_where_pairing_bn256_arithmetic_curves_CurveAffine_C_for_C.
  
  (* Trait *)
  (* Empty module 'Serializable' *)
  
  (* Trait *)
  (* Empty module 'ParaSerializable' *)
  
  (*
  pub(crate) fn read_u32<R: io::Read>(reader: &mut R) -> io::Result<u32> {
      let mut r = [0u8; 4];
      reader.read(&mut r)?;
      Ok(u32::from_le_bytes(r))
  }
  *)
  Definition read_u32 (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ R ], [ reader ] =>
      ltac:(M.monadic
        (let reader := M.alloc (| reader |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let r := M.alloc (| repeat (Value.Integer 0) 4 |) in
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (| "std::io::Read", R, [], "read", [] |),
                          [ M.read (| reader |); (* Unsize *) M.pointer_coercion r ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              M.alloc (|
                Value.StructTuple
                  "core::result::Result::Ok"
                  [
                    M.call_closure (|
                      M.get_associated_function (| Ty.path "u32", "from_le_bytes", [] |),
                      [ M.read (| r |) ]
                    |)
                  ]
              |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  Module Impl_halo2_proofs_helpers_Serializable_for_u32.
    Definition Self : Ty.t := Ty.path "u32".
    
    (*
        fn fetch<R: io::Read>(reader: &mut R) -> io::Result<Self> {
            let u = read_u32(reader)?;
            Ok(u)
        }
    *)
    Definition fetch (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ R ], [ reader ] =>
        ltac:(M.monadic
          (let reader := M.alloc (| reader |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let u :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                              [ M.read (| reader |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| u |) ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn store<W: io::Write>(&self, writer: &mut W) -> io::Result<()> {
            writer.write(&mut ( *self).to_le_bytes())?;
            Ok(())
        }
    *)
    Definition store (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ W ], [ self; writer ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let writer := M.alloc (| writer |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                            [
                              M.read (| writer |);
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "u32",
                                      "to_le_bytes",
                                      []
                                    |),
                                    [ M.read (| M.read (| self |) |) ]
                                  |)
                                |))
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "halo2_proofs::helpers::Serializable"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("fetch", InstanceField.Method fetch); ("store", InstanceField.Method store) ].
  End Impl_halo2_proofs_helpers_Serializable_for_u32.
  
  Module Impl_halo2_proofs_helpers_Serializable_for_alloc_string_String.
    Definition Self : Ty.t := Ty.path "alloc::string::String".
    
    (*
        fn fetch<R: io::Read>(reader: &mut R) -> io::Result<Self> {
            let len = read_u32(reader)?;
            let mut s = vec![0; len as usize];
            reader.read_exact(&mut s)?;
            let u = String::from_utf8(s.to_vec()).unwrap();
            Ok(u)
        }
    *)
    Definition fetch (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ R ], [ reader ] =>
        ltac:(M.monadic
          (let reader := M.alloc (| reader |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let len :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                              [ M.read (| reader |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "alloc::string::String";
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let s :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "alloc::vec::from_elem", [ Ty.path "u8" ] |),
                      [ Value.Integer 0; M.rust_cast (M.read (| len |)) ]
                    |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (| "std::io::Read", R, [], "read_exact", [] |),
                            [
                              M.read (| reader |);
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::DerefMut",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  "deref_mut",
                                  []
                                |),
                                [ s ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "alloc::string::String";
                                          Ty.path "std::io::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let u :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "alloc::string::String"; Ty.path "alloc::string::FromUtf8Error"
                          ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "alloc::string::String",
                            "from_utf8",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [ Ty.path "u8" ],
                                "to_vec",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                    [],
                                    "deref",
                                    []
                                  |),
                                  [ s ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| u |) ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn store<W: io::Write>(&self, writer: &mut W) -> io::Result<()> {
            let bytes = self.as_bytes();
            writer.write(&mut (bytes.len() as u32).to_le_bytes())?;
            writer.write(bytes)?;
            Ok(())
        }
    *)
    Definition store (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ W ], [ self; writer ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let writer := M.alloc (| writer |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let bytes :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "alloc::string::String",
                        "as_bytes",
                        []
                      |),
                      [ M.read (| self |) ]
                    |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                            [
                              M.read (| writer |);
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "u32",
                                      "to_le_bytes",
                                      []
                                    |),
                                    [
                                      M.rust_cast
                                        (M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [ Ty.path "u8" ],
                                            "len",
                                            []
                                          |),
                                          [ M.read (| bytes |) ]
                                        |))
                                    ]
                                  |)
                                |))
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                            [ M.read (| writer |); M.read (| bytes |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "halo2_proofs::helpers::Serializable"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("fetch", InstanceField.Method fetch); ("store", InstanceField.Method store) ].
  End Impl_halo2_proofs_helpers_Serializable_for_alloc_string_String.
  
  Module Impl_halo2_proofs_helpers_Serializable_for_Tuple_alloc_string_String_u32_.
    Definition Self : Ty.t := Ty.tuple [ Ty.path "alloc::string::String"; Ty.path "u32" ].
    
    (*
        fn fetch<R: io::Read>(reader: &mut R) -> io::Result<Self> {
            Ok((String::fetch(reader)?, u32::fetch(reader)?))
        }
    *)
    Definition fetch (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ R ], [ reader ] =>
        ltac:(M.monadic
          (let reader := M.alloc (| reader |) in
          M.catch_return (|
            ltac:(M.monadic
              (Value.StructTuple
                "core::result::Result::Ok"
                [
                  Value.Tuple
                    [
                      M.read (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [ Ty.path "alloc::string::String"; Ty.path "std::io::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "halo2_proofs::helpers::Serializable",
                                    Ty.path "alloc::string::String",
                                    [],
                                    "fetch",
                                    [ R ]
                                  |),
                                  [ M.read (| reader |) ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.tuple
                                                  [ Ty.path "alloc::string::String"; Ty.path "u32"
                                                  ];
                                                Ty.path "std::io::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "std::io::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |);
                      M.read (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "halo2_proofs::helpers::Serializable",
                                    Ty.path "u32",
                                    [],
                                    "fetch",
                                    [ R ]
                                  |),
                                  [ M.read (| reader |) ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.tuple
                                                  [ Ty.path "alloc::string::String"; Ty.path "u32"
                                                  ];
                                                Ty.path "std::io::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "std::io::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |)
                    ]
                ]))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn store<W: io::Write>(&self, writer: &mut W) -> io::Result<()> {
            self.0.store(writer)?;
            self.1.store(writer)?;
            Ok(())
        }
    *)
    Definition store (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ W ], [ self; writer ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let writer := M.alloc (| writer |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "halo2_proofs::helpers::Serializable",
                              Ty.path "alloc::string::String",
                              [],
                              "store",
                              [ W ]
                            |),
                            [
                              M.SubPointer.get_tuple_field (| M.read (| self |), 0 |);
                              M.read (| writer |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "halo2_proofs::helpers::Serializable",
                              Ty.path "u32",
                              [],
                              "store",
                              [ W ]
                            |),
                            [
                              M.SubPointer.get_tuple_field (| M.read (| self |), 1 |);
                              M.read (| writer |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "halo2_proofs::helpers::Serializable"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("fetch", InstanceField.Method fetch); ("store", InstanceField.Method store) ].
  End Impl_halo2_proofs_helpers_Serializable_for_Tuple_alloc_string_String_u32_.
  
  Module Impl_halo2_proofs_helpers_ParaSerializable_for_alloc_vec_Vec_alloc_vec_Vec_Tuple_u32_u32__alloc_alloc_Global_alloc_alloc_Global.
    Definition Self : Ty.t :=
      Ty.apply
        (Ty.path "alloc::vec::Vec")
        [
          Ty.apply
            (Ty.path "alloc::vec::Vec")
            [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; Ty.path "alloc::alloc::Global" ];
          Ty.path "alloc::alloc::Global"
        ].
    
    (*
        fn vec_fetch(fd: &mut File) -> io::Result<Self> {
            let columns = read_u32(fd)?;
            let mut offset = 0;
            let mut offsets = vec![];
            for _ in 0..columns {
                let l = read_u32(fd)?;
                offsets.push((offset, l));
                offset = offset + l;
            }
            let position = fd.stream_position()?;
            let res: Vec<Vec<(u32, u32)>> = (0..columns)
                .into_par_iter()
                .map(|i| {
                    let mmap = unsafe {
                        MmapOptions::new()
                            .offset(position + (offsets[i as usize].0 as u64 * 8))
                            .len(offsets[i as usize].1 as usize * 8)
                            .map(&fd)
                            .unwrap()
                    };
                    let s: &[(u32, u32)] = unsafe {
                        std::slice::from_raw_parts(
                            mmap.as_ptr() as *const (u32, u32),
                            offsets[i as usize].1 as usize,
                        )
                    };
                    let mut s2 = vec![];
                    s2.extend_from_slice(s);
                    s2
                })
                .collect();
            Ok(res)
        }
    *)
    Definition vec_fetch (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ fd ] =>
        ltac:(M.monadic
          (let fd := M.alloc (| fd |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let columns :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (|
                                "halo2_proofs::helpers::read_u32",
                                [ Ty.path "std::fs::File" ]
                              |),
                              [ M.read (| fd |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let offset := M.alloc (| Value.Integer 0 |) in
                let offsets :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "new",
                        []
                      |),
                      []
                    |)
                  |) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [ ("start", Value.Integer 0); ("end_", M.read (| columns |)) ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            [ Ty.path "u32" ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let l :=
                                            M.copy (|
                                              M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "u32";
                                                          Ty.path "std::io::error::Error"
                                                        ],
                                                      [],
                                                      "branch",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "halo2_proofs::helpers::read_u32",
                                                          [ Ty.path "std::fs::File" ]
                                                        |),
                                                        [ M.read (| fd |) ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.path "u32";
                                                                                  Ty.path "u32"
                                                                                ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ];
                                                                      Ty.path
                                                                        "std::io::error::Error"
                                                                    ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "std::io::error::Error"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "push",
                                                  []
                                                |),
                                                [
                                                  offsets;
                                                  Value.Tuple
                                                    [ M.read (| offset |); M.read (| l |) ]
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.write (|
                                              offset,
                                              BinOp.Panic.add (|
                                                Integer.U32,
                                                M.read (| offset |),
                                                M.read (| l |)
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let position :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "u64"; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "std::io::Seek",
                                Ty.path "std::fs::File",
                                [],
                                "stream_position",
                                []
                              |),
                              [ M.read (| fd |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let res :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "rayon::iter::ParallelIterator",
                        Ty.apply
                          (Ty.path "rayon::iter::map::Map")
                          [
                            Ty.apply (Ty.path "rayon::range::Iter") [ Ty.path "u32" ];
                            Ty.function
                              [ Ty.tuple [ Ty.path "u32" ] ]
                              (Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                  Ty.path "alloc::alloc::Global"
                                ])
                          ],
                        [],
                        "collect",
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "rayon::iter::ParallelIterator",
                            Ty.apply (Ty.path "rayon::range::Iter") [ Ty.path "u32" ],
                            [],
                            "map",
                            [
                              Ty.function
                                [ Ty.tuple [ Ty.path "u32" ] ]
                                (Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                    Ty.path "alloc::alloc::Global"
                                  ]);
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "rayon::iter::IntoParallelIterator",
                                Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ],
                                [],
                                "into_par_iter",
                                []
                              |),
                              [
                                Value.StructRecord
                                  "core::ops::range::Range"
                                  [ ("start", Value.Integer 0); ("end_", M.read (| columns |)) ]
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let i := M.copy (| γ |) in
                                            M.read (|
                                              let mmap :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "memmap::Mmap";
                                                          Ty.path "std::io::error::Error"
                                                        ],
                                                      "unwrap",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "memmap::MmapOptions",
                                                          "map",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "memmap::MmapOptions",
                                                              "len",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path "memmap::MmapOptions",
                                                                  "offset",
                                                                  []
                                                                |),
                                                                [
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "memmap::MmapOptions",
                                                                        "new",
                                                                        []
                                                                      |),
                                                                      []
                                                                    |)
                                                                  |);
                                                                  BinOp.Panic.add (|
                                                                    Integer.U64,
                                                                    M.read (| position |),
                                                                    BinOp.Panic.mul (|
                                                                      Integer.U64,
                                                                      M.rust_cast
                                                                        (M.read (|
                                                                          M.SubPointer.get_tuple_field (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::index::Index",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.path
                                                                                          "u32";
                                                                                        Ty.path
                                                                                          "u32"
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                [ Ty.path "usize" ],
                                                                                "index",
                                                                                []
                                                                              |),
                                                                              [
                                                                                offsets;
                                                                                M.rust_cast
                                                                                  (M.read (| i |))
                                                                              ]
                                                                            |),
                                                                            0
                                                                          |)
                                                                        |)),
                                                                      Value.Integer 8
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              BinOp.Panic.mul (|
                                                                Integer.Usize,
                                                                M.rust_cast
                                                                  (M.read (|
                                                                    M.SubPointer.get_tuple_field (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::index::Index",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.path "u32";
                                                                                  Ty.path "u32"
                                                                                ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [ Ty.path "usize" ],
                                                                          "index",
                                                                          []
                                                                        |),
                                                                        [
                                                                          offsets;
                                                                          M.rust_cast
                                                                            (M.read (| i |))
                                                                        ]
                                                                      |),
                                                                      1
                                                                    |)
                                                                  |)),
                                                                Value.Integer 8
                                                              |)
                                                            ]
                                                          |);
                                                          M.read (| fd |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let s :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "core::slice::raw::from_raw_parts",
                                                      [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                                                    |),
                                                    [
                                                      M.rust_cast
                                                        (M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              [ Ty.path "u8" ],
                                                            "as_ptr",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::deref::Deref",
                                                                Ty.path "memmap::Mmap",
                                                                [],
                                                                "deref",
                                                                []
                                                              |),
                                                              [ mmap ]
                                                            |)
                                                          ]
                                                        |));
                                                      M.rust_cast
                                                        (M.read (|
                                                          M.SubPointer.get_tuple_field (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::index::Index",
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.tuple
                                                                      [ Ty.path "u32"; Ty.path "u32"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [ Ty.path "usize" ],
                                                                "index",
                                                                []
                                                              |),
                                                              [
                                                                offsets;
                                                                M.rust_cast (M.read (| i |))
                                                              ]
                                                            |),
                                                            1
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                |) in
                                              let s2 :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "new",
                                                      []
                                                    |),
                                                    []
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "extend_from_slice",
                                                      []
                                                    |),
                                                    [ s2; M.read (| s |) ]
                                                  |)
                                                |) in
                                              s2
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      ]
                    |)
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| res |) ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn vec_store(&self, fd: &mut File) -> io::Result<()> {
            let u = self.len() as u32;
            u.store(fd)?;
            let mut offset = 0;
            let mut offsets = vec![];
            for i in 0..u {
                let l = self[i as usize].len();
                offsets.push((offset, l));
                offset = offset + l;
                (l as u32).store(fd)?;
            }
            let position = fd.stream_position()?;
            fd.set_len(position + (offset as u64 * 8)).unwrap();
            self.into_par_iter().enumerate().for_each(|(i, s2)| {
                let mut mmap = unsafe {
                    MmapOptions::new()
                        .offset(position + (offsets[i as usize].0 as u64 * 8))
                        .len(offsets[i as usize].1 as usize * 8)
                        .map_mut(&fd)
                        .unwrap()
                };
                let s: &[u8] = unsafe {
                    std::slice::from_raw_parts(
                        s2.as_ptr() as *const u8,
                        offsets[i as usize].1 as usize * 8,
                    )
                };
                (&mut mmap).copy_from_slice(s);
            });
            Ok(())
        }
    *)
    Definition vec_store (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; fd ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let fd := M.alloc (| fd |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let u :=
                  M.alloc (|
                    M.rust_cast
                      (M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "len",
                          []
                        |),
                        [ M.read (| self |) ]
                      |))
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "halo2_proofs::helpers::Serializable",
                              Ty.path "u32",
                              [],
                              "store",
                              [ Ty.path "std::fs::File" ]
                            |),
                            [ u; M.read (| fd |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let offset := M.alloc (| Value.Integer 0 |) in
                let offsets :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.tuple [ Ty.path "usize"; Ty.path "usize" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "new",
                        []
                      |),
                      []
                    |)
                  |) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [ ("start", Value.Integer 0); ("end_", M.read (| u |)) ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            [ Ty.path "u32" ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let i := M.copy (| γ0_0 |) in
                                          let l :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "len",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::index::Index",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.tuple
                                                                [ Ty.path "u32"; Ty.path "u32" ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [ Ty.path "usize" ],
                                                      "index",
                                                      []
                                                    |),
                                                    [
                                                      M.read (| self |);
                                                      M.rust_cast (M.read (| i |))
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.tuple [ Ty.path "usize"; Ty.path "usize" ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "push",
                                                  []
                                                |),
                                                [
                                                  offsets;
                                                  Value.Tuple
                                                    [ M.read (| offset |); M.read (| l |) ]
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.write (|
                                              offset,
                                              BinOp.Panic.add (|
                                                Integer.Usize,
                                                M.read (| offset |),
                                                M.read (| l |)
                                              |)
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [ Ty.tuple []; Ty.path "std::io::error::Error"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "halo2_proofs::helpers::Serializable",
                                                        Ty.path "u32",
                                                        [],
                                                        "store",
                                                        [ Ty.path "std::fs::File" ]
                                                      |),
                                                      [
                                                        M.alloc (| M.rust_cast (M.read (| l |)) |);
                                                        M.read (| fd |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path "std::io::error::Error"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "std::io::error::Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let position :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "u64"; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "std::io::Seek",
                                Ty.path "std::fs::File",
                                [],
                                "stream_position",
                                []
                              |),
                              [ M.read (| fd |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (| Ty.path "std::fs::File", "set_len", [] |),
                          [
                            M.read (| fd |);
                            BinOp.Panic.add (|
                              Integer.U64,
                              M.read (| position |),
                              BinOp.Panic.mul (|
                                Integer.U64,
                                M.rust_cast (M.read (| offset |)),
                                Value.Integer 8
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "rayon::iter::ParallelIterator",
                        Ty.apply
                          (Ty.path "rayon::iter::enumerate::Enumerate")
                          [
                            Ty.apply
                              (Ty.path "rayon::slice::Iter")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ]
                          ],
                        [],
                        "for_each",
                        [
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.tuple
                                    [
                                      Ty.path "usize";
                                      Ty.apply
                                        (Ty.path "&")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                    ]
                                ]
                            ]
                            (Ty.tuple [])
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "rayon::iter::IndexedParallelIterator",
                            Ty.apply
                              (Ty.path "rayon::slice::Iter")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            [],
                            "enumerate",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "rayon::iter::IntoParallelIterator",
                                Ty.apply
                                  (Ty.path "&")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                [],
                                "into_par_iter",
                                []
                              |),
                              [ M.read (| self |) ]
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let i := M.copy (| γ0_0 |) in
                                        let s2 := M.copy (| γ0_1 |) in
                                        M.read (|
                                          let mmap :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "memmap::MmapMut";
                                                      Ty.path "std::io::error::Error"
                                                    ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.path "memmap::MmapOptions",
                                                      "map_mut",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "memmap::MmapOptions",
                                                          "len",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "memmap::MmapOptions",
                                                              "offset",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path "memmap::MmapOptions",
                                                                    "new",
                                                                    []
                                                                  |),
                                                                  []
                                                                |)
                                                              |);
                                                              BinOp.Panic.add (|
                                                                Integer.U64,
                                                                M.read (| position |),
                                                                BinOp.Panic.mul (|
                                                                  Integer.U64,
                                                                  M.rust_cast
                                                                    (M.read (|
                                                                      M.SubPointer.get_tuple_field (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::index::Index",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.path "usize"
                                                                                  ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [ Ty.path "usize" ],
                                                                            "index",
                                                                            []
                                                                          |),
                                                                          [
                                                                            offsets;
                                                                            M.read (| M.use i |)
                                                                          ]
                                                                        |),
                                                                        0
                                                                      |)
                                                                    |)),
                                                                  Value.Integer 8
                                                                |)
                                                              |)
                                                            ]
                                                          |);
                                                          BinOp.Panic.mul (|
                                                            Integer.Usize,
                                                            M.read (|
                                                              M.use
                                                                (M.SubPointer.get_tuple_field (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::index::Index",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.path "usize";
                                                                              Ty.path "usize"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [ Ty.path "usize" ],
                                                                      "index",
                                                                      []
                                                                    |),
                                                                    [ offsets; M.read (| M.use i |)
                                                                    ]
                                                                  |),
                                                                  1
                                                                |))
                                                            |),
                                                            Value.Integer 8
                                                          |)
                                                        ]
                                                      |);
                                                      M.read (| fd |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let s :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_function (|
                                                  "core::slice::raw::from_raw_parts",
                                                  [ Ty.path "u8" ]
                                                |),
                                                [
                                                  M.rust_cast
                                                    (M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.tuple
                                                              [ Ty.path "u32"; Ty.path "u32" ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "as_ptr",
                                                        []
                                                      |),
                                                      [ M.read (| s2 |) ]
                                                    |));
                                                  BinOp.Panic.mul (|
                                                    Integer.Usize,
                                                    M.read (|
                                                      M.use
                                                        (M.SubPointer.get_tuple_field (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::index::Index",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.path "usize"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [ Ty.path "usize" ],
                                                              "index",
                                                              []
                                                            |),
                                                            [ offsets; M.read (| M.use i |) ]
                                                          |),
                                                          1
                                                        |))
                                                    |),
                                                    Value.Integer 8
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [ Ty.path "u8" ],
                                                  "copy_from_slice",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::deref::DerefMut",
                                                      Ty.path "memmap::MmapMut",
                                                      [],
                                                      "deref_mut",
                                                      []
                                                    |),
                                                    [ mmap ]
                                                  |);
                                                  M.read (| s |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "halo2_proofs::helpers::ParaSerializable"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("vec_fetch", InstanceField.Method vec_fetch);
          ("vec_store", InstanceField.Method vec_store)
        ].
  End Impl_halo2_proofs_helpers_ParaSerializable_for_alloc_vec_Vec_alloc_vec_Vec_Tuple_u32_u32__alloc_alloc_Global_alloc_alloc_Global.
  
  Module Impl_halo2_proofs_helpers_Serializable_where_core_clone_Clone_B_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_halo2_proofs_poly_Polynomial_F_B.
    Definition Self (B F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "halo2_proofs::poly::Polynomial") [ F; B ].
    
    (*
        fn fetch<R: io::Read>(reader: &mut R) -> io::Result<Self> {
            let u = read_u32(reader)?;
            let mut buf = vec![0u8; u as usize * 32];
            reader.read_exact(&mut buf)?;
            let s: &[F] = unsafe { std::slice::from_raw_parts(buf.as_ptr() as *const F, u as usize) };
            Ok(Polynomial::new(s.to_vec()))
        }
    *)
    Definition fetch (B F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self B F in
      match τ, α with
      | [ R ], [ reader ] =>
        ltac:(M.monadic
          (let reader := M.alloc (| reader |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let u :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                              [ M.read (| reader |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [ F; B ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let buf :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "alloc::vec::from_elem", [ Ty.path "u8" ] |),
                      [
                        Value.Integer 0;
                        BinOp.Panic.mul (|
                          Integer.Usize,
                          M.rust_cast (M.read (| u |)),
                          Value.Integer 32
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (| "std::io::Read", R, [], "read_exact", [] |),
                            [
                              M.read (| reader |);
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::DerefMut",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  "deref_mut",
                                  []
                                |),
                                [ buf ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [ F; B ];
                                          Ty.path "std::io::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let s :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "core::slice::raw::from_raw_parts", [ F ] |),
                      [
                        M.rust_cast
                          (M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                              "as_ptr",
                              []
                            |),
                            [ buf ]
                          |));
                        M.rust_cast (M.read (| u |))
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "halo2_proofs::poly::Polynomial") [ F; B ],
                          "new",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [ F ],
                              "to_vec",
                              []
                            |),
                            [ M.read (| s |) ]
                          |)
                        ]
                      |)
                    ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn store<W: io::Write>(&self, writer: &mut W) -> io::Result<()> {
            let u = self.values.len() as u32;
            u.store(writer)?;
            let s: &[u8] = unsafe {
                std::slice::from_raw_parts(self.values.as_ptr() as *const u8, u as usize * 32)
            };
            writer.write(s)?;
            Ok(())
        }
    *)
    Definition store (B F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self B F in
      match τ, α with
      | [ W ], [ self; writer ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let writer := M.alloc (| writer |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let u :=
                  M.alloc (|
                    M.rust_cast
                      (M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ F; Ty.path "alloc::alloc::Global" ],
                          "len",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::poly::Polynomial",
                            "values"
                          |)
                        ]
                      |))
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "halo2_proofs::helpers::Serializable",
                              Ty.path "u32",
                              [],
                              "store",
                              [ W ]
                            |),
                            [ u; M.read (| writer |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let s :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (| "core::slice::raw::from_raw_parts", [ Ty.path "u8" ] |),
                      [
                        M.rust_cast
                          (M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ F; Ty.path "alloc::alloc::Global" ],
                              "as_ptr",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::poly::Polynomial",
                                "values"
                              |)
                            ]
                          |));
                        BinOp.Panic.mul (|
                          Integer.Usize,
                          M.rust_cast (M.read (| u |)),
                          Value.Integer 32
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                            [ M.read (| writer |); M.read (| s |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (B F : Ty.t),
      M.IsTraitInstance
        "halo2_proofs::helpers::Serializable"
        (Self B F)
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("fetch", InstanceField.Method (fetch B F)); ("store", InstanceField.Method (store B F))
        ].
  End Impl_halo2_proofs_helpers_Serializable_where_core_clone_Clone_B_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_halo2_proofs_poly_Polynomial_F_B.
  
  Module Impl_halo2_proofs_helpers_Serializable_where_pairing_bn256_arithmetic_curves_CurveAffine_C_for_halo2_proofs_plonk_VerifyingKey_C.
    Definition Self (C : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "halo2_proofs::plonk::VerifyingKey") [ C ].
    
    (*
        fn store<W: io::Write>(&self, writer: &mut W) -> io::Result<()> {
            let j = (self.domain.get_quotient_poly_degree() + 1) as u32; // quotient_poly_degree is j-1
            let k = self.domain.k() as u32;
            writer.write(&mut j.to_le_bytes())?;
            writer.write(&mut k.to_le_bytes())?;
            write_cs::<C, W>(&self.cs, writer)?;
    
            self.write(writer)?;
    
            Ok(())
        }
    *)
    Definition store (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [ W ], [ self; writer ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let writer := M.alloc (| writer |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let j :=
                  M.alloc (|
                    M.rust_cast
                      (BinOp.Panic.add (|
                        Integer.Usize,
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                              [ Ty.associated ],
                            "get_quotient_poly_degree",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::VerifyingKey",
                              "domain"
                            |)
                          ]
                        |),
                        Value.Integer 1
                      |))
                  |) in
                let k :=
                  M.copy (|
                    M.use
                      (M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                              [ Ty.associated ],
                            "k",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::VerifyingKey",
                              "domain"
                            |)
                          ]
                        |)
                      |))
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                            [
                              M.read (| writer |);
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "u32",
                                      "to_le_bytes",
                                      []
                                    |),
                                    [ M.read (| j |) ]
                                  |)
                                |))
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                            [
                              M.read (| writer |);
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "u32",
                                      "to_le_bytes",
                                      []
                                    |),
                                    [ M.read (| k |) ]
                                  |)
                                |))
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_function (| "halo2_proofs::helpers::write_cs", [ C; W ] |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::plonk::VerifyingKey",
                                "cs"
                              |);
                              M.read (| writer |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "halo2_proofs::plonk::VerifyingKey") [ C ],
                              "write",
                              [ W ]
                            |),
                            [ M.read (| self |); M.read (| writer |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn fetch<R: io::Read>(reader: &mut R) -> io::Result<VerifyingKey<C>> {
            let j = read_u32(reader)?;
            let k = read_u32(reader)?;
            let domain: EvaluationDomain<C::Scalar> = EvaluationDomain::new(j, k);
            let cs = read_cs::<C, R>(reader)?;
    
            let fixed_commitments: Vec<_> = (0..cs.num_fixed_columns)
                .map(|_| C::read(reader))
                .collect::<Result<_, _>>()?;
    
            let permutation = permutation::VerifyingKey::read(reader, &cs.permutation)?;
    
            Ok(VerifyingKey {
                domain,
                cs,
                fixed_commitments,
                permutation,
            })
        }
    *)
    Definition fetch (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [ R ], [ reader ] =>
        ltac:(M.monadic
          (let reader := M.alloc (| reader |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let j :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                              [ M.read (| reader |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::VerifyingKey")
                                              [ C ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let k :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                              [ M.read (| reader |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::VerifyingKey")
                                              [ C ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let domain :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                          [ Ty.associated ],
                        "new",
                        []
                      |),
                      [ M.read (| j |); M.read (| k |) ]
                    |)
                  |) in
                let cs :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                                  [ Ty.associated ];
                                Ty.path "std::io::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (| "halo2_proofs::helpers::read_cs", [ C; R ] |),
                              [ M.read (| reader |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::VerifyingKey")
                                              [ C ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let fixed_commitments :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ C; Ty.path "alloc::alloc::Global" ];
                                Ty.path "std::io::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [ Ty.path "usize" ];
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ C; Ty.path "std::io::error::Error" ])
                                  ],
                                [],
                                "collect",
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ C; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "std::io::error::Error"
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [ Ty.path "usize" ],
                                    [],
                                    "map",
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ C; Ty.path "std::io::error::Error" ];
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "usize" ] ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ C; Ty.path "std::io::error::Error" ])
                                    ]
                                  |),
                                  [
                                    Value.StructRecord
                                      "core::ops::range::Range"
                                      [
                                        ("start", Value.Integer 0);
                                        ("end_",
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              cs,
                                              "halo2_proofs::plonk::circuit::ConstraintSystem",
                                              "num_fixed_columns"
                                            |)
                                          |))
                                      ];
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.call_closure (|
                                                      M.get_trait_method (|
                                                        "halo2_proofs::helpers::CurveRead",
                                                        C,
                                                        [],
                                                        "read",
                                                        [ R ]
                                                      |),
                                                      [ M.read (| reader |) ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::VerifyingKey")
                                              [ C ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let permutation :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::permutation::VerifyingKey")
                                  [ C ];
                                Ty.path "std::io::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::permutation::VerifyingKey")
                                  [ C ],
                                "read",
                                [ R ]
                              |),
                              [
                                M.read (| reader |);
                                M.SubPointer.get_struct_record_field (|
                                  cs,
                                  "halo2_proofs::plonk::circuit::ConstraintSystem",
                                  "permutation"
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::VerifyingKey")
                                              [ C ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      Value.StructRecord
                        "halo2_proofs::plonk::VerifyingKey"
                        [
                          ("domain", M.read (| domain |));
                          ("cs", M.read (| cs |));
                          ("fixed_commitments", M.read (| fixed_commitments |));
                          ("permutation", M.read (| permutation |))
                        ]
                    ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (C : Ty.t),
      M.IsTraitInstance
        "halo2_proofs::helpers::Serializable"
        (Self C)
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("store", InstanceField.Method (store C)); ("fetch", InstanceField.Method (fetch C)) ].
  End Impl_halo2_proofs_helpers_Serializable_where_pairing_bn256_arithmetic_curves_CurveAffine_C_for_halo2_proofs_plonk_VerifyingKey_C.
  
  Module Impl_halo2_proofs_helpers_Serializable_where_halo2_proofs_helpers_Serializable_T_for_alloc_vec_Vec_T_alloc_alloc_Global.
    Definition Self (T : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "alloc::vec::Vec") [ T; Ty.path "alloc::alloc::Global" ].
    
    (*
        fn store<W: io::Write>(&self, writer: &mut W) -> io::Result<()> {
            writer.write(&mut (self.len() as u32).to_le_bytes())?;
            for c in self.iter() {
                c.store(writer)?;
            }
            Ok(())
        }
    *)
    Definition store (T : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match τ, α with
      | [ W ], [ self; writer ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let writer := M.alloc (| writer |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                            [
                              M.read (| writer |);
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "u32",
                                      "to_le_bytes",
                                      []
                                    |),
                                    [
                                      M.rust_cast
                                        (M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ T; Ty.path "alloc::alloc::Global" ],
                                            "len",
                                            []
                                          |),
                                          [ M.read (| self |) ]
                                        |))
                                    ]
                                  |)
                                |))
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::slice::iter::Iter") [ T ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [ T ],
                                "iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ T; Ty.path "alloc::alloc::Global" ],
                                    [],
                                    "deref",
                                    []
                                  |),
                                  [ M.read (| self |) ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply (Ty.path "core::slice::iter::Iter") [ T ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let c := M.copy (| γ0_0 |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [ Ty.tuple []; Ty.path "std::io::error::Error"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "halo2_proofs::helpers::Serializable",
                                                        T,
                                                        [],
                                                        "store",
                                                        [ W ]
                                                      |),
                                                      [ M.read (| c |); M.read (| writer |) ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path "std::io::error::Error"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "std::io::error::Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn fetch<R: io::Read>(reader: &mut R) -> io::Result<Vec<T>> {
            let len = read_u32(reader)?;
            let mut v = vec![];
            for _ in 0..len {
                v.push(T::fetch(reader)?);
            }
            Ok(v)
        }
    *)
    Definition fetch (T : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self T in
      match τ, α with
      | [ R ], [ reader ] =>
        ltac:(M.monadic
          (let reader := M.alloc (| reader |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let len :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                              [ M.read (| reader |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ T; Ty.path "alloc::alloc::Global" ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let v :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "alloc::vec::Vec") [ T; Ty.path "alloc::alloc::Global" ],
                        "new",
                        []
                      |),
                      []
                    |)
                  |) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [ ("start", Value.Integer 0); ("end_", M.read (| len |)) ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            [ Ty.path "u32" ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ T; Ty.path "alloc::alloc::Global" ],
                                                  "push",
                                                  []
                                                |),
                                                [
                                                  v;
                                                  M.read (|
                                                    M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::Try",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [ T; Ty.path "std::io::error::Error"
                                                              ],
                                                            [],
                                                            "branch",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "halo2_proofs::helpers::Serializable",
                                                                T,
                                                                [],
                                                                "fetch",
                                                                [ R ]
                                                              |),
                                                              [ M.read (| reader |) ]
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Break",
                                                                0
                                                              |) in
                                                            let residual := M.copy (| γ0_0 |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::try_trait::FromResidual",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              [
                                                                                T;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ];
                                                                            Ty.path
                                                                              "std::io::error::Error"
                                                                          ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            [
                                                                              Ty.path
                                                                                "core::convert::Infallible";
                                                                              Ty.path
                                                                                "std::io::error::Error"
                                                                            ]
                                                                        ],
                                                                        "from_residual",
                                                                        []
                                                                      |),
                                                                      [ M.read (| residual |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Continue",
                                                                0
                                                              |) in
                                                            let val := M.copy (| γ0_0 |) in
                                                            val))
                                                      ]
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| v |) ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (T : Ty.t),
      M.IsTraitInstance
        "halo2_proofs::helpers::Serializable"
        (Self T)
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("store", InstanceField.Method (store T)); ("fetch", InstanceField.Method (fetch T)) ].
  End Impl_halo2_proofs_helpers_Serializable_where_halo2_proofs_helpers_Serializable_T_for_alloc_vec_Vec_T_alloc_alloc_Global.
  
  Module Impl_halo2_proofs_helpers_Serializable_for_halo2_proofs_plonk_circuit_Column_halo2_proofs_plonk_circuit_Any.
    Definition Self : Ty.t :=
      Ty.apply
        (Ty.path "halo2_proofs::plonk::circuit::Column")
        [ Ty.path "halo2_proofs::plonk::circuit::Any" ].
    
    (*
        fn store<W: io::Write>(&self, writer: &mut W) -> std::io::Result<()> {
            writer.write(&mut (self.index as u32).to_le_bytes())?;
            writer.write(&mut ( *self.column_type() as u32).to_le_bytes())?;
            Ok(())
        }
    *)
    Definition store (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ W ], [ self; writer ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let writer := M.alloc (| writer |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                            [
                              M.read (| writer |);
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "u32",
                                      "to_le_bytes",
                                      []
                                    |),
                                    [
                                      M.rust_cast
                                        (M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "halo2_proofs::plonk::circuit::Column",
                                            "index"
                                          |)
                                        |))
                                    ]
                                  |)
                                |))
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                            [
                              M.read (| writer |);
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "u32",
                                      "to_le_bytes",
                                      []
                                    |),
                                    [
                                      M.rust_cast
                                        (M.read (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                [ Ty.path "halo2_proofs::plonk::circuit::Any" ],
                                              "column_type",
                                              []
                                            |),
                                            [ M.read (| self |) ]
                                          |)
                                        |))
                                    ]
                                  |)
                                |))
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn fetch<R: io::Read>(reader: &mut R) -> std::io::Result<Self> {
            let index = read_u32(reader)?;
            let typ = read_u32(reader)?;
            let typ = if typ == Any::Advice as u32 {
                Any::Advice
            } else if typ == Any::Instance as u32 {
                Any::Instance
            } else if typ == Any::Fixed as u32 {
                Any::Fixed
            } else {
                unreachable!()
            };
            Ok(Column {
                index: index as usize,
                column_type: typ,
            })
        }
    *)
    Definition fetch (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ R ], [ reader ] =>
        ltac:(M.monadic
          (let reader := M.alloc (| reader |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let index :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                              [ M.read (| reader |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                                              [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let typ :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                              [ M.read (| reader |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                                              [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let typ :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  BinOp.Pure.eq (M.read (| typ |)) (M.rust_cast (Value.Integer 0))
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              Value.StructTuple "halo2_proofs::plonk::circuit::Any::Advice" []
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          BinOp.Pure.eq
                                            (M.read (| typ |))
                                            (M.rust_cast (Value.Integer 2))
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (|
                                      Value.StructTuple
                                        "halo2_proofs::plonk::circuit::Any::Instance"
                                        []
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      M.alloc (| Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  BinOp.Pure.eq
                                                    (M.read (| typ |))
                                                    (M.rust_cast (Value.Integer 1))
                                                |)) in
                                            let _ :=
                                              M.is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.alloc (|
                                              Value.StructTuple
                                                "halo2_proofs::plonk::circuit::Any::Fixed"
                                                []
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.never_to_any (|
                                                M.call_closure (|
                                                  M.get_function (| "core::panicking::panic", [] |),
                                                  [
                                                    M.read (|
                                                      Value.String
                                                        "internal error: entered unreachable code"
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)))
                                      ]
                                    |)))
                              ]
                            |)))
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      Value.StructRecord
                        "halo2_proofs::plonk::circuit::Column"
                        [
                          ("index", M.rust_cast (M.read (| index |)));
                          ("column_type", M.read (| typ |))
                        ]
                    ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "halo2_proofs::helpers::Serializable"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("store", InstanceField.Method store); ("fetch", InstanceField.Method fetch) ].
  End Impl_halo2_proofs_helpers_Serializable_for_halo2_proofs_plonk_circuit_Column_halo2_proofs_plonk_circuit_Any.
  
  (*
  fn write_arguments<W: std::io::Write>(
      columns: &Vec<Column<Any>>,
      writer: &mut W,
  ) -> std::io::Result<()> {
      writer.write(&mut (columns.len() as u32).to_le_bytes())?;
      for c in columns.iter() {
          c.store(writer)?
      }
      Ok(())
  }
  *)
  Definition write_arguments (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ W ], [ columns; writer ] =>
      ltac:(M.monadic
        (let columns := M.alloc (| columns |) in
        let writer := M.alloc (| writer |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                          [
                            M.read (| writer |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (| Ty.path "u32", "to_le_bytes", [] |),
                                  [
                                    M.rust_cast
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "len",
                                          []
                                        |),
                                        [ M.read (| columns |) ]
                                      |))
                                  ]
                                |)
                              |))
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::circuit::Column")
                                [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                            ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                    [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                ],
                              "iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [ M.read (| columns |) ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                                              [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                          ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let c := M.copy (| γ0_0 |) in
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "halo2_proofs::helpers::Serializable",
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Column")
                                                      [ Ty.path "halo2_proofs::plonk::circuit::Any"
                                                      ],
                                                    [],
                                                    "store",
                                                    [ W ]
                                                  |),
                                                  [ M.read (| c |); M.read (| writer |) ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path "std::io::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path "std::io::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  fn read_arguments<R: std::io::Read>(
      reader: &mut R,
  ) -> std::io::Result<plonk::permutation::Argument> {
      let len = read_u32(reader)?;
      let mut cols = vec![];
      for _ in 0..len {
          cols.push(Column::<Any>::fetch(reader)?);
      }
      Ok(plonk::permutation::Argument { columns: cols })
  }
  *)
  Definition read_arguments (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ R ], [ reader ] =>
      ltac:(M.monadic
        (let reader := M.alloc (| reader |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let len :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                            [ M.read (| reader |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "halo2_proofs::plonk::permutation::Argument";
                                          Ty.path "std::io::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              let cols :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.apply
                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                            [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [ ("start", Value.Integer 0); ("end_", M.read (| len |)) ]
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          [ Ty.path "u32" ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Column")
                                                      [ Ty.path "halo2_proofs::plonk::circuit::Any"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "push",
                                                []
                                              |),
                                              [
                                                cols;
                                                M.read (|
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::Any"
                                                                ];
                                                              Ty.path "std::io::error::Error"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "halo2_proofs::helpers::Serializable",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::Any"
                                                                ],
                                                              [],
                                                              "fetch",
                                                              [ R ]
                                                            |),
                                                            [ M.read (| reader |) ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::permutation::Argument";
                                                                          Ty.path
                                                                            "std::io::error::Error"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "std::io::error::Error"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              M.alloc (|
                Value.StructTuple
                  "core::result::Result::Ok"
                  [
                    Value.StructRecord
                      "halo2_proofs::plonk::permutation::Argument"
                      [ ("columns", M.read (| cols |)) ]
                  ]
              |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  fn write_column<T: ColumnType, W: std::io::Write>(
      column: &Column<T>,
      writer: &mut W,
  ) -> std::io::Result<()> {
      writer.write(&mut (column.index as u32).to_le_bytes())?;
      Ok(())
  }
  *)
  Definition write_column (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ T; W ], [ column; writer ] =>
      ltac:(M.monadic
        (let column := M.alloc (| column |) in
        let writer := M.alloc (| writer |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                          [
                            M.read (| writer |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (| Ty.path "u32", "to_le_bytes", [] |),
                                  [
                                    M.rust_cast
                                      (M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| column |),
                                          "halo2_proofs::plonk::circuit::Column",
                                          "index"
                                        |)
                                      |))
                                  ]
                                |)
                              |))
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  fn read_column<T: ColumnType, R: std::io::Read>(
      reader: &mut R,
      t: T,
  ) -> std::io::Result<Column<T>> {
      let index = read_u32(reader)? as usize;
      Ok(Column {
          index,
          column_type: t,
      })
  }
  *)
  Definition read_column (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ T; R ], [ reader; t ] =>
      ltac:(M.monadic
        (let reader := M.alloc (| reader |) in
        let t := M.alloc (| t |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let index :=
                M.alloc (|
                  M.rust_cast
                    (M.read (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                                [ M.read (| reader |) ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                [ T ];
                                              Ty.path "std::io::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "std::io::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |))
                |) in
              M.alloc (|
                Value.StructTuple
                  "core::result::Result::Ok"
                  [
                    Value.StructRecord
                      "halo2_proofs::plonk::circuit::Column"
                      [ ("index", M.read (| index |)); ("column_type", M.read (| t |)) ]
                  ]
              |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  fn write_queries<T: ColumnType, W: std::io::Write>(
      columns: &Vec<(Column<T>, Rotation)>,
      writer: &mut W,
  ) -> std::io::Result<()> {
      writer.write(&mut (columns.len() as u32).to_le_bytes())?;
      for (c, rotation) in columns.iter() {
          write_column(c, writer)?;
          writer.write(&mut (rotation.0 as u32).to_le_bytes())?;
      }
      Ok(())
  }
  *)
  Definition write_queries (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ T; W ], [ columns; writer ] =>
      ltac:(M.monadic
        (let columns := M.alloc (| columns |) in
        let writer := M.alloc (| writer |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                          [
                            M.read (| writer |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (| Ty.path "u32", "to_le_bytes", [] |),
                                  [
                                    M.rust_cast
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                    [ T ];
                                                  Ty.path "halo2_proofs::poly::Rotation"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "len",
                                          []
                                        |),
                                        [ M.read (| columns |) ]
                                      |))
                                  ]
                                |)
                              |))
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            [
                              Ty.tuple
                                [
                                  Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Column") [ T ];
                                  Ty.path "halo2_proofs::poly::Rotation"
                                ]
                            ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ T ];
                                      Ty.path "halo2_proofs::poly::Rotation"
                                    ]
                                ],
                              "iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                                            [ T ];
                                          Ty.path "halo2_proofs::poly::Rotation"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [ M.read (| columns |) ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                  [ T ];
                                                Ty.path "halo2_proofs::poly::Rotation"
                                              ]
                                          ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let γ0_0 := M.read (| γ0_0 |) in
                                        let γ2_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                        let γ2_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                        let c := M.alloc (| γ2_0 |) in
                                        let rotation := M.alloc (| γ2_1 |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [ Ty.tuple []; Ty.path "std::io::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "halo2_proofs::helpers::write_column",
                                                      [ T; W ]
                                                    |),
                                                    [ M.read (| c |); M.read (| writer |) ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path "std::io::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path "std::io::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "usize";
                                                      Ty.path "std::io::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "std::io::Write",
                                                      W,
                                                      [],
                                                      "write",
                                                      []
                                                    |),
                                                    [
                                                      M.read (| writer |);
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "u32",
                                                              "to_le_bytes",
                                                              []
                                                            |),
                                                            [
                                                              M.rust_cast
                                                                (M.read (|
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    M.read (| rotation |),
                                                                    "halo2_proofs::poly::Rotation",
                                                                    0
                                                                  |)
                                                                |))
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path "std::io::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path "std::io::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  fn write_virtual_cells<W: std::io::Write>(
      columns: &Vec<VirtualCell>,
      writer: &mut W,
  ) -> std::io::Result<()> {
      writer.write(&mut (columns.len() as u32).to_le_bytes())?;
      for cell in columns.iter() {
          cell.column.store(writer)?;
          writer.write(&mut (cell.rotation.0 as u32).to_le_bytes())?;
      }
      Ok(())
  }
  *)
  Definition write_virtual_cells (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ W ], [ columns; writer ] =>
      ltac:(M.monadic
        (let columns := M.alloc (| columns |) in
        let writer := M.alloc (| writer |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                          [
                            M.read (| writer |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (| Ty.path "u32", "to_le_bytes", [] |),
                                  [
                                    M.rust_cast
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.path "halo2_proofs::plonk::circuit::VirtualCell";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "len",
                                          []
                                        |),
                                        [ M.read (| columns |) ]
                                      |))
                                  ]
                                |)
                              |))
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            [ Ty.path "halo2_proofs::plonk::circuit::VirtualCell" ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                [ Ty.path "halo2_proofs::plonk::circuit::VirtualCell" ],
                              "iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.path "halo2_proofs::plonk::circuit::VirtualCell";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [ M.read (| columns |) ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [ Ty.path "halo2_proofs::plonk::circuit::VirtualCell" ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let cell := M.copy (| γ0_0 |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [ Ty.tuple []; Ty.path "std::io::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "halo2_proofs::helpers::Serializable",
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Column")
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::plonk::circuit::Any"
                                                        ],
                                                      [],
                                                      "store",
                                                      [ W ]
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| cell |),
                                                        "halo2_proofs::plonk::circuit::VirtualCell",
                                                        "column"
                                                      |);
                                                      M.read (| writer |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path "std::io::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path "std::io::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "usize";
                                                      Ty.path "std::io::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "std::io::Write",
                                                      W,
                                                      [],
                                                      "write",
                                                      []
                                                    |),
                                                    [
                                                      M.read (| writer |);
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "u32",
                                                              "to_le_bytes",
                                                              []
                                                            |),
                                                            [
                                                              M.rust_cast
                                                                (M.read (|
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| cell |),
                                                                      "halo2_proofs::plonk::circuit::VirtualCell",
                                                                      "rotation"
                                                                    |),
                                                                    "halo2_proofs::poly::Rotation",
                                                                    0
                                                                  |)
                                                                |))
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path "std::io::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path "std::io::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  fn read_queries<T: ColumnType, R: std::io::Read>(
      reader: &mut R,
      t: T,
  ) -> std::io::Result<Vec<(Column<T>, Rotation)>> {
      let mut queries = vec![];
      let len = read_u32(reader)?;
      for _ in 0..len {
          let column = read_column(reader, t)?;
          let rotation = read_u32(reader)?;
          let rotation = Rotation(rotation as i32); //u32 to i32??
          queries.push((column, rotation))
      }
      Ok(queries)
  }
  *)
  Definition read_queries (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ T; R ], [ reader; t ] =>
      ltac:(M.monadic
        (let reader := M.alloc (| reader |) in
        let t := M.alloc (| t |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let queries :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Column") [ T ];
                              Ty.path "halo2_proofs::poly::Rotation"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let len :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                            [ M.read (| reader |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                    [ T ];
                                                  Ty.path "halo2_proofs::poly::Rotation"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "std::io::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [ ("start", Value.Integer 0); ("end_", M.read (| len |)) ]
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          [ Ty.path "u32" ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let column :=
                                          M.copy (|
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Column")
                                                          [ T ];
                                                        Ty.path "std::io::error::Error"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_function (|
                                                        "halo2_proofs::helpers::read_column",
                                                        [ T; R ]
                                                      |),
                                                      [ M.read (| reader |); M.read (| t |) ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                              [ T ];
                                                                            Ty.path
                                                                              "halo2_proofs::poly::Rotation"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "std::io::error::Error"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "std::io::error::Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |)
                                          |) in
                                        let rotation :=
                                          M.copy (|
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "u32";
                                                        Ty.path "std::io::error::Error"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_function (|
                                                        "halo2_proofs::helpers::read_u32",
                                                        [ R ]
                                                      |),
                                                      [ M.read (| reader |) ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                              [ T ];
                                                                            Ty.path
                                                                              "halo2_proofs::poly::Rotation"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "std::io::error::Error"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "std::io::error::Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |)
                                          |) in
                                        let rotation :=
                                          M.alloc (|
                                            Value.StructTuple
                                              "halo2_proofs::poly::Rotation"
                                              [ M.rust_cast (M.read (| rotation |)) ]
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Column")
                                                        [ T ];
                                                      Ty.path "halo2_proofs::poly::Rotation"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "push",
                                              []
                                            |),
                                            [
                                              queries;
                                              Value.Tuple
                                                [ M.read (| column |); M.read (| rotation |) ]
                                            ]
                                          |)
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| queries |) ] |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  fn read_virtual_cells<R: std::io::Read>(reader: &mut R) -> std::io::Result<Vec<VirtualCell>> {
      let mut vcells = vec![];
      let len = read_u32(reader)?;
      for _ in 0..len {
          let column = Column::<Any>::fetch(reader)?;
          let rotation = read_u32(reader)?;
          let rotation = Rotation(rotation as i32); //u32 to i32??
          vcells.push(VirtualCell { column, rotation })
      }
      Ok(vcells)
  }
  *)
  Definition read_virtual_cells (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ R ], [ reader ] =>
      ltac:(M.monadic
        (let reader := M.alloc (| reader |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let vcells :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.path "halo2_proofs::plonk::circuit::VirtualCell";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let len :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                            [ M.read (| reader |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.path "halo2_proofs::plonk::circuit::VirtualCell";
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "std::io::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [ ("start", Value.Integer 0); ("end_", M.read (| len |)) ]
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          [ Ty.path "u32" ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let column :=
                                          M.copy (|
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Column")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::Any"
                                                          ];
                                                        Ty.path "std::io::error::Error"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "halo2_proofs::helpers::Serializable",
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Column")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::Any"
                                                          ],
                                                        [],
                                                        "fetch",
                                                        [ R ]
                                                      |),
                                                      [ M.read (| reader |) ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "std::io::error::Error"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "std::io::error::Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |)
                                          |) in
                                        let rotation :=
                                          M.copy (|
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "u32";
                                                        Ty.path "std::io::error::Error"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_function (|
                                                        "halo2_proofs::helpers::read_u32",
                                                        [ R ]
                                                      |),
                                                      [ M.read (| reader |) ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::VirtualCell";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "std::io::error::Error"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "std::io::error::Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |)
                                          |) in
                                        let rotation :=
                                          M.alloc (|
                                            Value.StructTuple
                                              "halo2_proofs::poly::Rotation"
                                              [ M.rust_cast (M.read (| rotation |)) ]
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.path
                                                    "halo2_proofs::plonk::circuit::VirtualCell";
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "push",
                                              []
                                            |),
                                            [
                                              vcells;
                                              Value.StructRecord
                                                "halo2_proofs::plonk::circuit::VirtualCell"
                                                [
                                                  ("column", M.read (| column |));
                                                  ("rotation", M.read (| rotation |))
                                                ]
                                            ]
                                          |)
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| vcells |) ] |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  fn write_fixed_column<W: std::io::Write>(
      column: &Column<Fixed>,
      writer: &mut W,
  ) -> std::io::Result<()> {
      writer.write(&mut (column.index as u32).to_le_bytes())?;
      Ok(())
  }
  *)
  Definition write_fixed_column (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ W ], [ column; writer ] =>
      ltac:(M.monadic
        (let column := M.alloc (| column |) in
        let writer := M.alloc (| writer |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                          [
                            M.read (| writer |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (| Ty.path "u32", "to_le_bytes", [] |),
                                  [
                                    M.rust_cast
                                      (M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| column |),
                                          "halo2_proofs::plonk::circuit::Column",
                                          "index"
                                        |)
                                      |))
                                  ]
                                |)
                              |))
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  fn read_fixed_column<R: std::io::Read>(reader: &mut R) -> std::io::Result<Column<Fixed>> {
      let index = read_u32(reader)?;
      Ok(Column::<Fixed>::new(index as usize, Fixed))
  }
  *)
  Definition read_fixed_column (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ R ], [ reader ] =>
      ltac:(M.monadic
        (let reader := M.alloc (| reader |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let index :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                            [ M.read (| reader |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                                            [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ];
                                          Ty.path "std::io::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              M.alloc (|
                Value.StructTuple
                  "core::result::Result::Ok"
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "halo2_proofs::plonk::circuit::Column")
                          [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ],
                        "new",
                        []
                      |),
                      [
                        M.rust_cast (M.read (| index |));
                        Value.StructTuple "halo2_proofs::plonk::circuit::Fixed" []
                      ]
                    |)
                  ]
              |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  fn write_fixed_columns<W: std::io::Write>(
      columns: &Vec<Column<Fixed>>,
      writer: &mut W,
  ) -> std::io::Result<()> {
      writer.write(&mut (columns.len() as u32).to_le_bytes())?;
      for c in columns.iter() {
          write_fixed_column(c, writer)?;
      }
      Ok(())
  }
  *)
  Definition write_fixed_columns (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ W ], [ columns; writer ] =>
      ltac:(M.monadic
        (let columns := M.alloc (| columns |) in
        let writer := M.alloc (| writer |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                          [
                            M.read (| writer |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (| Ty.path "u32", "to_le_bytes", [] |),
                                  [
                                    M.rust_cast
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "len",
                                          []
                                        |),
                                        [ M.read (| columns |) ]
                                      |))
                                  ]
                                |)
                              |))
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::circuit::Column")
                                [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ]
                            ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                    [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ]
                                ],
                              "iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [ M.read (| columns |) ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                                              [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ]
                                          ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let c := M.copy (| γ0_0 |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [ Ty.tuple []; Ty.path "std::io::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "halo2_proofs::helpers::write_fixed_column",
                                                      [ W ]
                                                    |),
                                                    [ M.read (| c |); M.read (| writer |) ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path "std::io::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path "std::io::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  fn read_fixed_columns<R: std::io::Read>(reader: &mut R) -> std::io::Result<Vec<Column<Fixed>>> {
      let len = read_u32(reader)?;
      let mut columns = vec![];
      for _ in 0..len {
          columns.push(read_fixed_column(reader)?);
      }
      Ok(columns)
  }
  *)
  Definition read_fixed_columns (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ R ], [ reader ] =>
      ltac:(M.monadic
        (let reader := M.alloc (| reader |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let len :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                            [ M.read (| reader |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "std::io::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              let columns :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.apply
                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                            [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [ ("start", Value.Integer 0); ("end_", M.read (| len |)) ]
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          [ Ty.path "u32" ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Column")
                                                      [
                                                        Ty.path
                                                          "halo2_proofs::plonk::circuit::Fixed"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "push",
                                                []
                                              |),
                                              [
                                                columns;
                                                M.read (|
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::Fixed"
                                                                ];
                                                              Ty.path "std::io::error::Error"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_function (|
                                                              "halo2_proofs::helpers::read_fixed_column",
                                                              [ R ]
                                                            |),
                                                            [ M.read (| reader |) ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                                [
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Fixed"
                                                                                ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ];
                                                                          Ty.path
                                                                            "std::io::error::Error"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "std::io::error::Error"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| columns |) ] |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub(crate) fn write_cs<C: CurveAffine, W: io::Write>(
      cs: &ConstraintSystem<C::Scalar>,
      writer: &mut W,
  ) -> io::Result<()> {
      writer.write(&mut (cs.num_advice_columns as u32).to_le_bytes())?;
      writer.write(&mut (cs.num_instance_columns as u32).to_le_bytes())?;
      writer.write(&mut (cs.num_selectors as u32).to_le_bytes())?;
      writer.write(&mut (cs.num_fixed_columns as u32).to_le_bytes())?;
      writer.write(&mut (cs.num_advice_queries.len() as u32).to_le_bytes())?;
      for n in cs.num_advice_queries.iter() {
          writer.write(&mut ( *n as u32).to_le_bytes())?;
      }
      write_fixed_columns(&cs.selector_map, writer)?;
      write_fixed_columns(&cs.constants, writer)?;
      write_queries::<Advice, W>(&cs.advice_queries, writer)?;
      write_queries::<Instance, W>(&cs.instance_queries, writer)?;
      write_queries::<Fixed, W>(&cs.fixed_queries, writer)?;
      write_arguments(&cs.permutation.columns, writer)?;
      writer.write(&(cs.lookups.len() as u32).to_le_bytes())?;
      for p in cs.lookups.iter() {
          p.input_expressions.store(writer)?;
          p.table_expressions.store(writer)?;
      }
      cs.named_advices.store(writer)?;
      write_gates::<C, W>(&cs.gates, writer)?;
      Ok(())
  }
  *)
  Definition write_cs (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ C; W ], [ cs; writer ] =>
      ltac:(M.monadic
        (let cs := M.alloc (| cs |) in
        let writer := M.alloc (| writer |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                          [
                            M.read (| writer |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (| Ty.path "u32", "to_le_bytes", [] |),
                                  [
                                    M.rust_cast
                                      (M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| cs |),
                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                          "num_advice_columns"
                                        |)
                                      |))
                                  ]
                                |)
                              |))
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                          [
                            M.read (| writer |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (| Ty.path "u32", "to_le_bytes", [] |),
                                  [
                                    M.rust_cast
                                      (M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| cs |),
                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                          "num_instance_columns"
                                        |)
                                      |))
                                  ]
                                |)
                              |))
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                          [
                            M.read (| writer |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (| Ty.path "u32", "to_le_bytes", [] |),
                                  [
                                    M.rust_cast
                                      (M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| cs |),
                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                          "num_selectors"
                                        |)
                                      |))
                                  ]
                                |)
                              |))
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                          [
                            M.read (| writer |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (| Ty.path "u32", "to_le_bytes", [] |),
                                  [
                                    M.rust_cast
                                      (M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| cs |),
                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                          "num_fixed_columns"
                                        |)
                                      |))
                                  ]
                                |)
                              |))
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                          [
                            M.read (| writer |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (| Ty.path "u32", "to_le_bytes", [] |),
                                  [
                                    M.rust_cast
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                          "len",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| cs |),
                                            "halo2_proofs::plonk::circuit::ConstraintSystem",
                                            "num_advice_queries"
                                          |)
                                        ]
                                      |))
                                  ]
                                |)
                              |))
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "usize" ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [ Ty.path "usize" ],
                              "iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| cs |),
                                    "halo2_proofs::plonk::circuit::ConstraintSystem",
                                    "num_advice_queries"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [ Ty.path "usize" ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let n := M.copy (| γ0_0 |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "usize";
                                                      Ty.path "std::io::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "std::io::Write",
                                                      W,
                                                      [],
                                                      "write",
                                                      []
                                                    |),
                                                    [
                                                      M.read (| writer |);
                                                      (* Unsize *)
                                                      M.pointer_coercion
                                                        (M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "u32",
                                                              "to_le_bytes",
                                                              []
                                                            |),
                                                            [
                                                              M.rust_cast
                                                                (M.read (| M.read (| n |) |))
                                                            ]
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path "std::io::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path "std::io::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_function (| "halo2_proofs::helpers::write_fixed_columns", [ W ] |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| cs |),
                              "halo2_proofs::plonk::circuit::ConstraintSystem",
                              "selector_map"
                            |);
                            M.read (| writer |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_function (| "halo2_proofs::helpers::write_fixed_columns", [ W ] |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| cs |),
                              "halo2_proofs::plonk::circuit::ConstraintSystem",
                              "constants"
                            |);
                            M.read (| writer |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_function (|
                            "halo2_proofs::helpers::write_queries",
                            [ Ty.path "halo2_proofs::plonk::circuit::Advice"; W ]
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| cs |),
                              "halo2_proofs::plonk::circuit::ConstraintSystem",
                              "advice_queries"
                            |);
                            M.read (| writer |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_function (|
                            "halo2_proofs::helpers::write_queries",
                            [ Ty.path "halo2_proofs::plonk::circuit::Instance"; W ]
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| cs |),
                              "halo2_proofs::plonk::circuit::ConstraintSystem",
                              "instance_queries"
                            |);
                            M.read (| writer |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_function (|
                            "halo2_proofs::helpers::write_queries",
                            [ Ty.path "halo2_proofs::plonk::circuit::Fixed"; W ]
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| cs |),
                              "halo2_proofs::plonk::circuit::ConstraintSystem",
                              "fixed_queries"
                            |);
                            M.read (| writer |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_function (| "halo2_proofs::helpers::write_arguments", [ W ] |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| cs |),
                                "halo2_proofs::plonk::circuit::ConstraintSystem",
                                "permutation"
                              |),
                              "halo2_proofs::plonk::permutation::Argument",
                              "columns"
                            |);
                            M.read (| writer |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                          [
                            M.read (| writer |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (| Ty.path "u32", "to_le_bytes", [] |),
                                  [
                                    M.rust_cast
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                                [ Ty.associated ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "len",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| cs |),
                                            "halo2_proofs::plonk::circuit::ConstraintSystem",
                                            "lookups"
                                          |)
                                        ]
                                      |))
                                  ]
                                |)
                              |))
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                [ Ty.associated ]
                            ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                    [ Ty.associated ]
                                ],
                              "iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                        [ Ty.associated ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| cs |),
                                    "halo2_proofs::plonk::circuit::ConstraintSystem",
                                    "lookups"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                              [ Ty.associated ]
                                          ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let p := M.copy (| γ0_0 |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [ Ty.tuple []; Ty.path "std::io::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "halo2_proofs::helpers::Serializable",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ Ty.associated ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      "store",
                                                      [ W ]
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| p |),
                                                        "halo2_proofs::plonk::lookup::Argument",
                                                        "input_expressions"
                                                      |);
                                                      M.read (| writer |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path "std::io::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path "std::io::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [ Ty.tuple []; Ty.path "std::io::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "halo2_proofs::helpers::Serializable",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ Ty.associated ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      "store",
                                                      [ W ]
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| p |),
                                                        "halo2_proofs::plonk::lookup::Argument",
                                                        "table_expressions"
                                                      |);
                                                      M.read (| writer |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path "std::io::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path "std::io::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "halo2_proofs::helpers::Serializable",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.tuple [ Ty.path "alloc::string::String"; Ty.path "u32" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            "store",
                            [ W ]
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| cs |),
                              "halo2_proofs::plonk::circuit::ConstraintSystem",
                              "named_advices"
                            |);
                            M.read (| writer |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_function (| "halo2_proofs::helpers::write_gates", [ C; W ] |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| cs |),
                              "halo2_proofs::plonk::circuit::ConstraintSystem",
                              "gates"
                            |);
                            M.read (| writer |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub(crate) fn read_cs<C: CurveAffine, R: io::Read>(
      reader: &mut R,
  ) -> io::Result<ConstraintSystem<C::Scalar>> {
      let num_advice_columns = read_u32(reader)? as usize;
      let num_instance_columns = read_u32(reader)? as usize;
      let num_selectors = read_u32(reader)? as usize;
      let num_fixed_columns = read_u32(reader)? as usize;
  
      let num_advice_queries_len = read_u32(reader)?;
      let mut num_advice_queries = vec![];
      for _ in 0..num_advice_queries_len {
          num_advice_queries.push(read_u32(reader)? as usize);
      }
  
      let selector_map = read_fixed_columns(reader)?;
      let constants = read_fixed_columns(reader)?;
  
      let advice_queries = read_queries::<Advice, R>(reader, Advice)?;
      let instance_queries = read_queries::<Instance, R>(reader, Instance)?;
      let fixed_queries = read_queries::<Fixed, R>(reader, Fixed)?;
      let permutation = read_arguments(reader)?;
  
      let mut lookups = vec![];
      let nb_lookup = read_u32(reader)?;
      for _ in 0..nb_lookup {
          let input_expressions = Vec::<Expression<C::Scalar>>::fetch(reader)?;
          let table_expressions = Vec::<Expression<C::Scalar>>::fetch(reader)?;
          lookups.push(plonk::lookup::Argument {
              name: "",
              input_expressions,
              table_expressions,
          });
      }
      let named_advices = Vec::fetch(reader)?;
      let gates = read_gates::<C, R>(reader)?;
      Ok(ConstraintSystem {
          num_fixed_columns,
          num_advice_columns,
          num_instance_columns,
          num_selectors,
          selector_map,
          gates,
          advice_queries,
          num_advice_queries,
          instance_queries,
          fixed_queries,
          named_advices,
          permutation,
          lookups,
          constants,
          minimum_degree: None,
      })
  }
  *)
  Definition read_cs (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ C; R ], [ reader ] =>
      ltac:(M.monadic
        (let reader := M.alloc (| reader |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let num_advice_columns :=
                M.alloc (|
                  M.rust_cast
                    (M.read (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                                [ M.read (| reader |) ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                [ Ty.associated ];
                                              Ty.path "std::io::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "std::io::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |))
                |) in
              let num_instance_columns :=
                M.alloc (|
                  M.rust_cast
                    (M.read (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                                [ M.read (| reader |) ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                [ Ty.associated ];
                                              Ty.path "std::io::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "std::io::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |))
                |) in
              let num_selectors :=
                M.alloc (|
                  M.rust_cast
                    (M.read (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                                [ M.read (| reader |) ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                [ Ty.associated ];
                                              Ty.path "std::io::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "std::io::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |))
                |) in
              let num_fixed_columns :=
                M.alloc (|
                  M.rust_cast
                    (M.read (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                                [ M.read (| reader |) ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                [ Ty.associated ];
                                              Ty.path "std::io::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "std::io::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |))
                |) in
              let num_advice_queries_len :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                            [ M.read (| reader |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::circuit::ConstraintSystem")
                                            [ Ty.associated ];
                                          Ty.path "std::io::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              let num_advice_queries :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [
                              ("start", Value.Integer 0);
                              ("end_", M.read (| num_advice_queries_len |))
                            ]
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          [ Ty.path "u32" ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global"
                                                  ],
                                                "push",
                                                []
                                              |),
                                              [
                                                num_advice_queries;
                                                M.rust_cast
                                                  (M.read (|
                                                    M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::Try",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "u32";
                                                                Ty.path "std::io::error::Error"
                                                              ],
                                                            [],
                                                            "branch",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_function (|
                                                                "halo2_proofs::helpers::read_u32",
                                                                [ R ]
                                                              |),
                                                              [ M.read (| reader |) ]
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Break",
                                                                0
                                                              |) in
                                                            let residual := M.copy (| γ0_0 |) in
                                                            M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  M.return_ (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::try_trait::FromResidual",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                                              [ Ty.associated ];
                                                                            Ty.path
                                                                              "std::io::error::Error"
                                                                          ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            [
                                                                              Ty.path
                                                                                "core::convert::Infallible";
                                                                              Ty.path
                                                                                "std::io::error::Error"
                                                                            ]
                                                                        ],
                                                                        "from_residual",
                                                                        []
                                                                      |),
                                                                      [ M.read (| residual |) ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::ops::control_flow::ControlFlow::Continue",
                                                                0
                                                              |) in
                                                            let val := M.copy (| γ0_0 |) in
                                                            val))
                                                      ]
                                                    |)
                                                  |))
                                              ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              let selector_map :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                    [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "std::io::error::Error"
                            ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_function (| "halo2_proofs::helpers::read_fixed_columns", [ R ] |),
                            [ M.read (| reader |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::circuit::ConstraintSystem")
                                            [ Ty.associated ];
                                          Ty.path "std::io::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              let constants :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                    [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "std::io::error::Error"
                            ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_function (| "halo2_proofs::helpers::read_fixed_columns", [ R ] |),
                            [ M.read (| reader |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::circuit::ConstraintSystem")
                                            [ Ty.associated ];
                                          Ty.path "std::io::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              let advice_queries :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Advice" ];
                                      Ty.path "halo2_proofs::poly::Rotation"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "std::io::error::Error"
                            ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_function (|
                              "halo2_proofs::helpers::read_queries",
                              [ Ty.path "halo2_proofs::plonk::circuit::Advice"; R ]
                            |),
                            [
                              M.read (| reader |);
                              Value.StructTuple "halo2_proofs::plonk::circuit::Advice" []
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::circuit::ConstraintSystem")
                                            [ Ty.associated ];
                                          Ty.path "std::io::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              let instance_queries :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Instance" ];
                                      Ty.path "halo2_proofs::poly::Rotation"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "std::io::error::Error"
                            ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_function (|
                              "halo2_proofs::helpers::read_queries",
                              [ Ty.path "halo2_proofs::plonk::circuit::Instance"; R ]
                            |),
                            [
                              M.read (| reader |);
                              Value.StructTuple "halo2_proofs::plonk::circuit::Instance" []
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::circuit::ConstraintSystem")
                                            [ Ty.associated ];
                                          Ty.path "std::io::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              let fixed_queries :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ];
                                      Ty.path "halo2_proofs::poly::Rotation"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "std::io::error::Error"
                            ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_function (|
                              "halo2_proofs::helpers::read_queries",
                              [ Ty.path "halo2_proofs::plonk::circuit::Fixed"; R ]
                            |),
                            [
                              M.read (| reader |);
                              Value.StructTuple "halo2_proofs::plonk::circuit::Fixed" []
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::circuit::ConstraintSystem")
                                            [ Ty.associated ];
                                          Ty.path "std::io::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              let permutation :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.path "halo2_proofs::plonk::permutation::Argument";
                              Ty.path "std::io::error::Error"
                            ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_function (| "halo2_proofs::helpers::read_arguments", [ R ] |),
                            [ M.read (| reader |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::circuit::ConstraintSystem")
                                            [ Ty.associated ];
                                          Ty.path "std::io::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              let lookups :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.apply
                            (Ty.path "halo2_proofs::plonk::lookup::Argument")
                            [ Ty.associated ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let nb_lookup :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                            [ M.read (| reader |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::circuit::ConstraintSystem")
                                            [ Ty.associated ];
                                          Ty.path "std::io::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [ ("start", Value.Integer 0); ("end_", M.read (| nb_lookup |)) ]
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          [ Ty.path "u32" ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let input_expressions :=
                                          M.copy (|
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ Ty.associated ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.path "std::io::error::Error"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "halo2_proofs::helpers::Serializable",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ Ty.associated ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        "fetch",
                                                        [ R ]
                                                      |),
                                                      [ M.read (| reader |) ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                                      [ Ty.associated ];
                                                                    Ty.path "std::io::error::Error"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "std::io::error::Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |)
                                          |) in
                                        let table_expressions :=
                                          M.copy (|
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ Ty.associated ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.path "std::io::error::Error"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "halo2_proofs::helpers::Serializable",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ Ty.associated ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        "fetch",
                                                        [ R ]
                                                      |),
                                                      [ M.read (| reader |) ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                                      [ Ty.associated ];
                                                                    Ty.path "std::io::error::Error"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "std::io::error::Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |)
                                          |) in
                                        let _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::lookup::Argument")
                                                      [ Ty.associated ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "push",
                                                []
                                              |),
                                              [
                                                lookups;
                                                Value.StructRecord
                                                  "halo2_proofs::plonk::lookup::Argument"
                                                  [
                                                    ("name", M.read (| Value.String "" |));
                                                    ("input_expressions",
                                                      M.read (| input_expressions |));
                                                    ("table_expressions",
                                                      M.read (| table_expressions |))
                                                  ]
                                              ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              let named_advices :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.tuple [ Ty.path "alloc::string::String"; Ty.path "u32" ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "std::io::error::Error"
                            ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "halo2_proofs::helpers::Serializable",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.tuple [ Ty.path "alloc::string::String"; Ty.path "u32" ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              "fetch",
                              [ R ]
                            |),
                            [ M.read (| reader |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::circuit::ConstraintSystem")
                                            [ Ty.associated ];
                                          Ty.path "std::io::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              let gates :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                    [ Ty.associated ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "std::io::error::Error"
                            ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_function (| "halo2_proofs::helpers::read_gates", [ C; R ] |),
                            [ M.read (| reader |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::circuit::ConstraintSystem")
                                            [ Ty.associated ];
                                          Ty.path "std::io::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              M.alloc (|
                Value.StructTuple
                  "core::result::Result::Ok"
                  [
                    Value.StructRecord
                      "halo2_proofs::plonk::circuit::ConstraintSystem"
                      [
                        ("num_fixed_columns", M.read (| num_fixed_columns |));
                        ("num_advice_columns", M.read (| num_advice_columns |));
                        ("num_instance_columns", M.read (| num_instance_columns |));
                        ("num_selectors", M.read (| num_selectors |));
                        ("selector_map", M.read (| selector_map |));
                        ("gates", M.read (| gates |));
                        ("advice_queries", M.read (| advice_queries |));
                        ("num_advice_queries", M.read (| num_advice_queries |));
                        ("instance_queries", M.read (| instance_queries |));
                        ("fixed_queries", M.read (| fixed_queries |));
                        ("named_advices", M.read (| named_advices |));
                        ("permutation", M.read (| permutation |));
                        ("lookups", M.read (| lookups |));
                        ("constants", M.read (| constants |));
                        ("minimum_degree", Value.StructTuple "core::option::Option::None" [])
                      ]
                  ]
              |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  fn write_gates<C: CurveAffine, W: std::io::Write>(
      gates: &Vec<Gate<C::Scalar>>,
      writer: &mut W,
  ) -> std::io::Result<()> {
      writer.write(&mut (gates.len() as u32).to_le_bytes())?;
      for gate in gates.iter() {
          gate.polys.store(writer)?;
          write_virtual_cells(&gate.queried_cells, writer)?;
      }
      Ok(())
  }
  *)
  Definition write_gates (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ C; W ], [ gates; writer ] =>
      ltac:(M.monadic
        (let gates := M.alloc (| gates |) in
        let writer := M.alloc (| writer |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::try_trait::Try",
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                        [],
                        "branch",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                          [
                            M.read (| writer |);
                            (* Unsize *)
                            M.pointer_coercion
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (| Ty.path "u32", "to_le_bytes", [] |),
                                  [
                                    M.rust_cast
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                                [ Ty.associated ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "len",
                                          []
                                        |),
                                        [ M.read (| gates |) ]
                                      |))
                                  ]
                                |)
                              |))
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Break",
                            0
                          |) in
                        let residual := M.copy (| γ0_0 |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::FromResidual",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ],
                                    "from_residual",
                                    []
                                  |),
                                  [ M.read (| residual |) ]
                                |)
                              |)
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::ops::control_flow::ControlFlow::Continue",
                            0
                          |) in
                        let val := M.copy (| γ0_0 |) in
                        val))
                  ]
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                [ Ty.associated ]
                            ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                    [ Ty.associated ]
                                ],
                              "iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                        [ Ty.associated ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [ M.read (| gates |) ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                              [ Ty.associated ]
                                          ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let gate := M.copy (| γ0_0 |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [ Ty.tuple []; Ty.path "std::io::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "halo2_proofs::helpers::Serializable",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ Ty.associated ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      "store",
                                                      [ W ]
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| gate |),
                                                        "halo2_proofs::plonk::circuit::Gate",
                                                        "polys"
                                                      |);
                                                      M.read (| writer |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path "std::io::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path "std::io::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::Try",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [ Ty.tuple []; Ty.path "std::io::error::Error"
                                                    ],
                                                  [],
                                                  "branch",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "halo2_proofs::helpers::write_virtual_cells",
                                                      [ W ]
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| gate |),
                                                        "halo2_proofs::plonk::circuit::Gate",
                                                        "queried_cells"
                                                      |);
                                                      M.read (| writer |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Break",
                                                      0
                                                    |) in
                                                  let residual := M.copy (| γ0_0 |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::FromResidual",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path "std::io::error::Error"
                                                                ],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.path
                                                                      "core::convert::Infallible";
                                                                    Ty.path "std::io::error::Error"
                                                                  ]
                                                              ],
                                                              "from_residual",
                                                              []
                                                            |),
                                                            [ M.read (| residual |) ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::ops::control_flow::ControlFlow::Continue",
                                                      0
                                                    |) in
                                                  let val := M.copy (| γ0_0 |) in
                                                  val))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  fn read_gates<C: CurveAffine, R: std::io::Read>(
      reader: &mut R,
  ) -> std::io::Result<Vec<Gate<C::Scalar>>> {
      let nb_gates = read_u32(reader)?;
      let mut gates = vec![];
      for _ in 0..nb_gates {
          gates.push(Gate::new_with_polys_and_queries(
              Vec::<Expression<C::Scalar>>::fetch(reader)?,
              read_virtual_cells(reader)?,
          ));
      }
      Ok(gates)
  }
  *)
  Definition read_gates (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ C; R ], [ reader ] =>
      ltac:(M.monadic
        (let reader := M.alloc (| reader |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let nb_gates :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                            [ M.read (| reader |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                                [ Ty.associated ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "std::io::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              let gates :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Gate") [ Ty.associated ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [ ("start", Value.Integer 0); ("end_", M.read (| nb_gates |)) ]
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          [ Ty.path "u32" ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                                      [ Ty.associated ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "push",
                                                []
                                              |),
                                              [
                                                gates;
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                                      [ Ty.associated ],
                                                    "new_with_polys_and_queries",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.match_operator (|
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::Try",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ Ty.associated ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ];
                                                                  Ty.path "std::io::error::Error"
                                                                ],
                                                              [],
                                                              "branch",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "halo2_proofs::helpers::Serializable",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                        [ Ty.associated ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "fetch",
                                                                  [ R ]
                                                                |),
                                                                [ M.read (| reader |) ]
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Break",
                                                                  0
                                                                |) in
                                                              let residual := M.copy (| γ0_0 |) in
                                                              M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (|
                                                                    M.return_ (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::try_trait::FromResidual",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Gate")
                                                                                    [ Ty.associated
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ];
                                                                              Ty.path
                                                                                "std::io::error::Error"
                                                                            ],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              [
                                                                                Ty.path
                                                                                  "core::convert::Infallible";
                                                                                Ty.path
                                                                                  "std::io::error::Error"
                                                                              ]
                                                                          ],
                                                                          "from_residual",
                                                                          []
                                                                        |),
                                                                        [ M.read (| residual |) ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                                  0
                                                                |) in
                                                              let val := M.copy (| γ0_0 |) in
                                                              val))
                                                        ]
                                                      |)
                                                    |);
                                                    M.read (|
                                                      M.match_operator (|
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::Try",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::VirtualCell";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ];
                                                                  Ty.path "std::io::error::Error"
                                                                ],
                                                              [],
                                                              "branch",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_function (|
                                                                  "halo2_proofs::helpers::read_virtual_cells",
                                                                  [ R ]
                                                                |),
                                                                [ M.read (| reader |) ]
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Break",
                                                                  0
                                                                |) in
                                                              let residual := M.copy (| γ0_0 |) in
                                                              M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (|
                                                                    M.return_ (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::try_trait::FromResidual",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Gate")
                                                                                    [ Ty.associated
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ];
                                                                              Ty.path
                                                                                "std::io::error::Error"
                                                                            ],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              [
                                                                                Ty.path
                                                                                  "core::convert::Infallible";
                                                                                Ty.path
                                                                                  "std::io::error::Error"
                                                                              ]
                                                                          ],
                                                                          "from_residual",
                                                                          []
                                                                        |),
                                                                        [ M.read (| residual |) ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                                  0
                                                                |) in
                                                              let val := M.copy (| γ0_0 |) in
                                                              val))
                                                        ]
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| gates |) ] |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  Enum ExpressionCode
  {
    ty_params := [];
    variants :=
      [
        {
          name := "Constant";
          item := StructTuple [];
          discriminant := Some 0;
        };
        {
          name := "Fixed";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Advice";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Instance";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Negated";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Sum";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Product";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Scaled";
          item := StructTuple [];
          discriminant := None;
        }
      ];
  }
  *)
  
  Definition _IMPL_NUM_FromPrimitive_FOR_ExpressionCode : Value.t :=
    M.run ltac:(M.monadic (M.alloc (| Value.Tuple [] |))).
  
  Module _IMPL_NUM_FromPrimitive_FOR_ExpressionCode.
    Module Impl_num_traits_cast_FromPrimitive_for_halo2_proofs_helpers_ExpressionCode.
      Definition Self : Ty.t := Ty.path "halo2_proofs::helpers::ExpressionCode".
      
      (* FromPrimitive *)
      Definition from_i64 (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ n ] =>
          ltac:(M.monadic
            (let n := M.alloc (| n |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.eq
                              (M.read (| n |))
                              (M.rust_cast
                                (BinOp.Panic.add (|
                                  Integer.Isize,
                                  M.get_constant (|
                                    "halo2_proofs::helpers::ExpressionCode::Constant_discriminant"
                                  |),
                                  Value.Integer 0
                                |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::option::Option::Some"
                          [ Value.StructTuple "halo2_proofs::helpers::ExpressionCode::Constant" [] ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    BinOp.Pure.eq
                                      (M.read (| n |))
                                      (M.rust_cast
                                        (BinOp.Panic.add (|
                                          Integer.Isize,
                                          M.get_constant (|
                                            "halo2_proofs::helpers::ExpressionCode::Constant_discriminant"
                                          |),
                                          Value.Integer 1
                                        |)))
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (|
                                Value.StructTuple
                                  "core::option::Option::Some"
                                  [
                                    Value.StructTuple
                                      "halo2_proofs::helpers::ExpressionCode::Fixed"
                                      []
                                  ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            BinOp.Pure.eq
                                              (M.read (| n |))
                                              (M.rust_cast
                                                (BinOp.Panic.add (|
                                                  Integer.Isize,
                                                  M.get_constant (|
                                                    "halo2_proofs::helpers::ExpressionCode::Constant_discriminant"
                                                  |),
                                                  Value.Integer 2
                                                |)))
                                          |)) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        Value.StructTuple
                                          "core::option::Option::Some"
                                          [
                                            Value.StructTuple
                                              "halo2_proofs::helpers::ExpressionCode::Advice"
                                              []
                                          ]
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    BinOp.Pure.eq
                                                      (M.read (| n |))
                                                      (M.rust_cast
                                                        (BinOp.Panic.add (|
                                                          Integer.Isize,
                                                          M.get_constant (|
                                                            "halo2_proofs::helpers::ExpressionCode::Constant_discriminant"
                                                          |),
                                                          Value.Integer 3
                                                        |)))
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.alloc (|
                                                Value.StructTuple
                                                  "core::option::Option::Some"
                                                  [
                                                    Value.StructTuple
                                                      "halo2_proofs::helpers::ExpressionCode::Instance"
                                                      []
                                                  ]
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            BinOp.Pure.eq
                                                              (M.read (| n |))
                                                              (M.rust_cast
                                                                (BinOp.Panic.add (|
                                                                  Integer.Isize,
                                                                  M.get_constant (|
                                                                    "halo2_proofs::helpers::ExpressionCode::Constant_discriminant"
                                                                  |),
                                                                  Value.Integer 4
                                                                |)))
                                                          |)) in
                                                      let _ :=
                                                        M.is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.alloc (|
                                                        Value.StructTuple
                                                          "core::option::Option::Some"
                                                          [
                                                            Value.StructTuple
                                                              "halo2_proofs::helpers::ExpressionCode::Negated"
                                                              []
                                                          ]
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.match_operator (|
                                                        M.alloc (| Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    BinOp.Pure.eq
                                                                      (M.read (| n |))
                                                                      (M.rust_cast
                                                                        (BinOp.Panic.add (|
                                                                          Integer.Isize,
                                                                          M.get_constant (|
                                                                            "halo2_proofs::helpers::ExpressionCode::Constant_discriminant"
                                                                          |),
                                                                          Value.Integer 5
                                                                        |)))
                                                                  |)) in
                                                              let _ :=
                                                                M.is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              M.alloc (|
                                                                Value.StructTuple
                                                                  "core::option::Option::Some"
                                                                  [
                                                                    Value.StructTuple
                                                                      "halo2_proofs::helpers::ExpressionCode::Sum"
                                                                      []
                                                                  ]
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.match_operator (|
                                                                M.alloc (| Value.Tuple [] |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ :=
                                                                        M.use
                                                                          (M.alloc (|
                                                                            BinOp.Pure.eq
                                                                              (M.read (| n |))
                                                                              (M.rust_cast
                                                                                (BinOp.Panic.add (|
                                                                                  Integer.Isize,
                                                                                  M.get_constant (|
                                                                                    "halo2_proofs::helpers::ExpressionCode::Constant_discriminant"
                                                                                  |),
                                                                                  Value.Integer 6
                                                                                |)))
                                                                          |)) in
                                                                      let _ :=
                                                                        M.is_constant_or_break_match (|
                                                                          M.read (| γ |),
                                                                          Value.Bool true
                                                                        |) in
                                                                      M.alloc (|
                                                                        Value.StructTuple
                                                                          "core::option::Option::Some"
                                                                          [
                                                                            Value.StructTuple
                                                                              "halo2_proofs::helpers::ExpressionCode::Product"
                                                                              []
                                                                          ]
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.match_operator (|
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ :=
                                                                                M.use
                                                                                  (M.alloc (|
                                                                                    BinOp.Pure.eq
                                                                                      (M.read (|
                                                                                        n
                                                                                      |))
                                                                                      (M.rust_cast
                                                                                        (BinOp.Panic.add (|
                                                                                          Integer.Isize,
                                                                                          M.get_constant (|
                                                                                            "halo2_proofs::helpers::ExpressionCode::Constant_discriminant"
                                                                                          |),
                                                                                          Value.Integer
                                                                                            7
                                                                                        |)))
                                                                                  |)) in
                                                                              let _ :=
                                                                                M.is_constant_or_break_match (|
                                                                                  M.read (| γ |),
                                                                                  Value.Bool true
                                                                                |) in
                                                                              M.alloc (|
                                                                                Value.StructTuple
                                                                                  "core::option::Option::Some"
                                                                                  [
                                                                                    Value.StructTuple
                                                                                      "halo2_proofs::helpers::ExpressionCode::Scaled"
                                                                                      []
                                                                                  ]
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (M.alloc (|
                                                                                Value.StructTuple
                                                                                  "core::option::Option::None"
                                                                                  []
                                                                              |)))
                                                                        ]
                                                                      |)))
                                                                ]
                                                              |)))
                                                        ]
                                                      |)))
                                                ]
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)))
                        ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      (* FromPrimitive *)
      Definition from_u64 (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ n ] =>
          ltac:(M.monadic
            (let n := M.alloc (| n |) in
            M.call_closure (|
              M.get_trait_method (|
                "num_traits::cast::FromPrimitive",
                Ty.path "halo2_proofs::helpers::ExpressionCode",
                [],
                "from_i64",
                []
              |),
              [ M.rust_cast (M.read (| n |)) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "num_traits::cast::FromPrimitive"
          Self
          (* Trait polymorphic types *) []
          (* Instance *)
          [ ("from_i64", InstanceField.Method from_i64); ("from_u64", InstanceField.Method from_u64)
          ].
    End Impl_num_traits_cast_FromPrimitive_for_halo2_proofs_helpers_ExpressionCode.
  End _IMPL_NUM_FromPrimitive_FOR_ExpressionCode.
  
  (*
  fn expression_code<F: FieldExt>(e: &Expression<F>) -> ExpressionCode {
      match e {
          Expression::Constant(_) => ExpressionCode::Constant,
          Expression::Fixed {
              query_index: _,
              column_index: _,
              rotation: _,
          } => ExpressionCode::Fixed,
          Expression::Advice {
              query_index: _,
              column_index: _,
              rotation: _,
          } => ExpressionCode::Advice,
          Expression::Instance {
              query_index: _,
              column_index: _,
              rotation: _,
          } => ExpressionCode::Instance,
          Expression::Negated(_) => ExpressionCode::Negated,
          Expression::Sum(_, _) => ExpressionCode::Sum,
          Expression::Product(_, _) => ExpressionCode::Product,
          Expression::Scaled(_, _) => ExpressionCode::Scaled,
          Expression::Selector(_) => unreachable!(),
      }
  }
  *)
  Definition expression_code (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ F ], [ e ] =>
      ltac:(M.monadic
        (let e := M.alloc (| e |) in
        M.read (|
          M.match_operator (|
            e,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "halo2_proofs::plonk::circuit::Expression::Constant",
                      0
                    |) in
                  M.alloc (|
                    Value.StructTuple "halo2_proofs::helpers::ExpressionCode::Constant" []
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_record_field (|
                      γ,
                      "halo2_proofs::plonk::circuit::Expression::Fixed",
                      "query_index"
                    |) in
                  let γ1_1 :=
                    M.SubPointer.get_struct_record_field (|
                      γ,
                      "halo2_proofs::plonk::circuit::Expression::Fixed",
                      "column_index"
                    |) in
                  let γ1_2 :=
                    M.SubPointer.get_struct_record_field (|
                      γ,
                      "halo2_proofs::plonk::circuit::Expression::Fixed",
                      "rotation"
                    |) in
                  M.alloc (|
                    Value.StructTuple "halo2_proofs::helpers::ExpressionCode::Fixed" []
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_record_field (|
                      γ,
                      "halo2_proofs::plonk::circuit::Expression::Advice",
                      "query_index"
                    |) in
                  let γ1_1 :=
                    M.SubPointer.get_struct_record_field (|
                      γ,
                      "halo2_proofs::plonk::circuit::Expression::Advice",
                      "column_index"
                    |) in
                  let γ1_2 :=
                    M.SubPointer.get_struct_record_field (|
                      γ,
                      "halo2_proofs::plonk::circuit::Expression::Advice",
                      "rotation"
                    |) in
                  M.alloc (|
                    Value.StructTuple "halo2_proofs::helpers::ExpressionCode::Advice" []
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_record_field (|
                      γ,
                      "halo2_proofs::plonk::circuit::Expression::Instance",
                      "query_index"
                    |) in
                  let γ1_1 :=
                    M.SubPointer.get_struct_record_field (|
                      γ,
                      "halo2_proofs::plonk::circuit::Expression::Instance",
                      "column_index"
                    |) in
                  let γ1_2 :=
                    M.SubPointer.get_struct_record_field (|
                      γ,
                      "halo2_proofs::plonk::circuit::Expression::Instance",
                      "rotation"
                    |) in
                  M.alloc (|
                    Value.StructTuple "halo2_proofs::helpers::ExpressionCode::Instance" []
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "halo2_proofs::plonk::circuit::Expression::Negated",
                      0
                    |) in
                  M.alloc (|
                    Value.StructTuple "halo2_proofs::helpers::ExpressionCode::Negated" []
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "halo2_proofs::plonk::circuit::Expression::Sum",
                      0
                    |) in
                  let γ1_1 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "halo2_proofs::plonk::circuit::Expression::Sum",
                      1
                    |) in
                  M.alloc (| Value.StructTuple "halo2_proofs::helpers::ExpressionCode::Sum" [] |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "halo2_proofs::plonk::circuit::Expression::Product",
                      0
                    |) in
                  let γ1_1 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "halo2_proofs::plonk::circuit::Expression::Product",
                      1
                    |) in
                  M.alloc (|
                    Value.StructTuple "halo2_proofs::helpers::ExpressionCode::Product" []
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "halo2_proofs::plonk::circuit::Expression::Scaled",
                      0
                    |) in
                  let γ1_1 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "halo2_proofs::plonk::circuit::Expression::Scaled",
                      1
                    |) in
                  M.alloc (|
                    Value.StructTuple "halo2_proofs::helpers::ExpressionCode::Scaled" []
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "halo2_proofs::plonk::circuit::Expression::Selector",
                      0
                    |) in
                  M.alloc (|
                    M.never_to_any (|
                      M.call_closure (|
                        M.get_function (| "core::panicking::panic", [] |),
                        [ M.read (| Value.String "internal error: entered unreachable code" |) ]
                      |)
                    |)
                  |)))
            ]
          |)
        |)))
    | _, _ => M.impossible
    end.
  
  Module Impl_halo2_proofs_helpers_Serializable_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_halo2_proofs_plonk_circuit_Expression_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ].
    
    (*
        fn fetch<R: io::Read>(reader: &mut R) -> io::Result<Expression<F>> {
            let code = read_u32(reader)?;
            match num::FromPrimitive::from_u32(code).unwrap() {
                ExpressionCode::Constant => {
                    let scalar = F::read(reader)?;
                    Ok(Expression::Constant(scalar))
                }
                ExpressionCode::Fixed => {
                    let query_index = read_u32(reader)? as usize;
                    let column_index = read_u32(reader)? as usize;
                    let rotation = Rotation(read_u32(reader)? as i32);
                    Ok(Expression::Fixed {
                        query_index,
                        column_index,
                        rotation,
                    })
                }
                ExpressionCode::Advice => {
                    let query_index = read_u32(reader)? as usize;
                    let column_index = read_u32(reader)? as usize;
                    let rotation = Rotation(read_u32(reader)? as i32);
                    Ok(Expression::Advice {
                        query_index,
                        column_index,
                        rotation,
                    })
                }
                ExpressionCode::Instance => {
                    let query_index = read_u32(reader)? as usize;
                    let column_index = read_u32(reader)? as usize;
                    let rotation = Rotation(read_u32(reader)? as i32);
                    Ok(Expression::Instance {
                        query_index,
                        column_index,
                        rotation,
                    })
                }
                ExpressionCode::Negated => Ok(Expression::Negated(Box::new(Self::fetch(reader)?))),
    
                ExpressionCode::Sum => {
                    let a = Self::fetch(reader)?;
                    let b = Self::fetch(reader)?;
                    Ok(Expression::Sum(Box::new(a), Box::new(b)))
                }
    
                ExpressionCode::Product => {
                    let a = Self::fetch(reader)?;
                    let b = Self::fetch(reader)?;
                    Ok(Expression::Product(Box::new(a), Box::new(b)))
                }
    
                ExpressionCode::Scaled => {
                    let a = Self::fetch(reader)?;
                    let f = F::read(reader)?;
                    Ok(Expression::Scaled(Box::new(a), f))
                }
            }
        }
    *)
    Definition fetch (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [ R ], [ reader ] =>
        ltac:(M.monadic
          (let reader := M.alloc (| reader |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let code :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                              [ M.read (| reader |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                              [ F ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          [ Ty.path "halo2_proofs::helpers::ExpressionCode" ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "num_traits::cast::FromPrimitive",
                            Ty.path "halo2_proofs::helpers::ExpressionCode",
                            [],
                            "from_u32",
                            []
                          |),
                          [ M.read (| code |) ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let scalar :=
                          M.copy (|
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ F; Ty.path "std::io::error::Error" ],
                                    [],
                                    "branch",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "pairing_bn256::arithmetic::fields::BaseExt",
                                        F,
                                        [],
                                        "read",
                                        [ R ]
                                      |),
                                      [ M.read (| reader |) ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ];
                                                    Ty.path "std::io::error::Error"
                                                  ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path "std::io::error::Error"
                                                    ]
                                                ],
                                                "from_residual",
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [
                              Value.StructTuple
                                "halo2_proofs::plonk::circuit::Expression::Constant"
                                [ M.read (| scalar |) ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let query_index :=
                          M.alloc (|
                            M.rust_cast
                              (M.read (|
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_function (|
                                            "halo2_proofs::helpers::read_u32",
                                            [ R ]
                                          |),
                                          [ M.read (| reader |) ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ];
                                                        Ty.path "std::io::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path "std::io::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |)
                              |))
                          |) in
                        let column_index :=
                          M.alloc (|
                            M.rust_cast
                              (M.read (|
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_function (|
                                            "halo2_proofs::helpers::read_u32",
                                            [ R ]
                                          |),
                                          [ M.read (| reader |) ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ];
                                                        Ty.path "std::io::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path "std::io::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |)
                              |))
                          |) in
                        let rotation :=
                          M.alloc (|
                            Value.StructTuple
                              "halo2_proofs::poly::Rotation"
                              [
                                M.rust_cast
                                  (M.read (|
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::Try",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                                            [],
                                            "branch",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_function (|
                                                "halo2_proofs::helpers::read_u32",
                                                [ R ]
                                              |),
                                              [ M.read (| reader |) ]
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::ops::control_flow::ControlFlow::Break",
                                                0
                                              |) in
                                            let residual := M.copy (| γ0_0 |) in
                                            M.alloc (|
                                              M.never_to_any (|
                                                M.read (|
                                                  M.return_ (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::FromResidual",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ];
                                                            Ty.path "std::io::error::Error"
                                                          ],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.path "core::convert::Infallible";
                                                              Ty.path "std::io::error::Error"
                                                            ]
                                                        ],
                                                        "from_residual",
                                                        []
                                                      |),
                                                      [ M.read (| residual |) ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::ops::control_flow::ControlFlow::Continue",
                                                0
                                              |) in
                                            let val := M.copy (| γ0_0 |) in
                                            val))
                                      ]
                                    |)
                                  |))
                              ]
                          |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [
                              Value.StructRecord
                                "halo2_proofs::plonk::circuit::Expression::Fixed"
                                [
                                  ("query_index", M.read (| query_index |));
                                  ("column_index", M.read (| column_index |));
                                  ("rotation", M.read (| rotation |))
                                ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let query_index :=
                          M.alloc (|
                            M.rust_cast
                              (M.read (|
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_function (|
                                            "halo2_proofs::helpers::read_u32",
                                            [ R ]
                                          |),
                                          [ M.read (| reader |) ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ];
                                                        Ty.path "std::io::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path "std::io::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |)
                              |))
                          |) in
                        let column_index :=
                          M.alloc (|
                            M.rust_cast
                              (M.read (|
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_function (|
                                            "halo2_proofs::helpers::read_u32",
                                            [ R ]
                                          |),
                                          [ M.read (| reader |) ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ];
                                                        Ty.path "std::io::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path "std::io::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |)
                              |))
                          |) in
                        let rotation :=
                          M.alloc (|
                            Value.StructTuple
                              "halo2_proofs::poly::Rotation"
                              [
                                M.rust_cast
                                  (M.read (|
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::Try",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                                            [],
                                            "branch",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_function (|
                                                "halo2_proofs::helpers::read_u32",
                                                [ R ]
                                              |),
                                              [ M.read (| reader |) ]
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::ops::control_flow::ControlFlow::Break",
                                                0
                                              |) in
                                            let residual := M.copy (| γ0_0 |) in
                                            M.alloc (|
                                              M.never_to_any (|
                                                M.read (|
                                                  M.return_ (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::FromResidual",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ];
                                                            Ty.path "std::io::error::Error"
                                                          ],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.path "core::convert::Infallible";
                                                              Ty.path "std::io::error::Error"
                                                            ]
                                                        ],
                                                        "from_residual",
                                                        []
                                                      |),
                                                      [ M.read (| residual |) ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::ops::control_flow::ControlFlow::Continue",
                                                0
                                              |) in
                                            let val := M.copy (| γ0_0 |) in
                                            val))
                                      ]
                                    |)
                                  |))
                              ]
                          |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [
                              Value.StructRecord
                                "halo2_proofs::plonk::circuit::Expression::Advice"
                                [
                                  ("query_index", M.read (| query_index |));
                                  ("column_index", M.read (| column_index |));
                                  ("rotation", M.read (| rotation |))
                                ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let query_index :=
                          M.alloc (|
                            M.rust_cast
                              (M.read (|
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_function (|
                                            "halo2_proofs::helpers::read_u32",
                                            [ R ]
                                          |),
                                          [ M.read (| reader |) ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ];
                                                        Ty.path "std::io::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path "std::io::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |)
                              |))
                          |) in
                        let column_index :=
                          M.alloc (|
                            M.rust_cast
                              (M.read (|
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_function (|
                                            "halo2_proofs::helpers::read_u32",
                                            [ R ]
                                          |),
                                          [ M.read (| reader |) ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ F ];
                                                        Ty.path "std::io::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path "std::io::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |)
                              |))
                          |) in
                        let rotation :=
                          M.alloc (|
                            Value.StructTuple
                              "halo2_proofs::poly::Rotation"
                              [
                                M.rust_cast
                                  (M.read (|
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::Try",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                                            [],
                                            "branch",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_function (|
                                                "halo2_proofs::helpers::read_u32",
                                                [ R ]
                                              |),
                                              [ M.read (| reader |) ]
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::ops::control_flow::ControlFlow::Break",
                                                0
                                              |) in
                                            let residual := M.copy (| γ0_0 |) in
                                            M.alloc (|
                                              M.never_to_any (|
                                                M.read (|
                                                  M.return_ (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::FromResidual",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ F ];
                                                            Ty.path "std::io::error::Error"
                                                          ],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.path "core::convert::Infallible";
                                                              Ty.path "std::io::error::Error"
                                                            ]
                                                        ],
                                                        "from_residual",
                                                        []
                                                      |),
                                                      [ M.read (| residual |) ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::ops::control_flow::ControlFlow::Continue",
                                                0
                                              |) in
                                            let val := M.copy (| γ0_0 |) in
                                            val))
                                      ]
                                    |)
                                  |))
                              ]
                          |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [
                              Value.StructRecord
                                "halo2_proofs::plonk::circuit::Expression::Instance"
                                [
                                  ("query_index", M.read (| query_index |));
                                  ("column_index", M.read (| column_index |));
                                  ("rotation", M.read (| rotation |))
                                ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [
                              Value.StructTuple
                                "halo2_proofs::plonk::circuit::Expression::Negated"
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "new",
                                      []
                                    |),
                                    [
                                      M.read (|
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ];
                                                    Ty.path "std::io::error::Error"
                                                  ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "halo2_proofs::helpers::Serializable",
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ],
                                                    [],
                                                    "fetch",
                                                    [ R ]
                                                  |),
                                                  [ M.read (| reader |) ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ F ];
                                                                Ty.path "std::io::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path "std::io::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let a :=
                          M.copy (|
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                          [ F ];
                                        Ty.path "std::io::error::Error"
                                      ],
                                    [],
                                    "branch",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "halo2_proofs::helpers::Serializable",
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                          [ F ],
                                        [],
                                        "fetch",
                                        [ R ]
                                      |),
                                      [ M.read (| reader |) ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ];
                                                    Ty.path "std::io::error::Error"
                                                  ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path "std::io::error::Error"
                                                    ]
                                                ],
                                                "from_residual",
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |) in
                        let b :=
                          M.copy (|
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                          [ F ];
                                        Ty.path "std::io::error::Error"
                                      ],
                                    [],
                                    "branch",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "halo2_proofs::helpers::Serializable",
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                          [ F ],
                                        [],
                                        "fetch",
                                        [ R ]
                                      |),
                                      [ M.read (| reader |) ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ];
                                                    Ty.path "std::io::error::Error"
                                                  ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path "std::io::error::Error"
                                                    ]
                                                ],
                                                "from_residual",
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [
                              Value.StructTuple
                                "halo2_proofs::plonk::circuit::Expression::Sum"
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "new",
                                      []
                                    |),
                                    [ M.read (| a |) ]
                                  |);
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "new",
                                      []
                                    |),
                                    [ M.read (| b |) ]
                                  |)
                                ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let a :=
                          M.copy (|
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                          [ F ];
                                        Ty.path "std::io::error::Error"
                                      ],
                                    [],
                                    "branch",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "halo2_proofs::helpers::Serializable",
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                          [ F ],
                                        [],
                                        "fetch",
                                        [ R ]
                                      |),
                                      [ M.read (| reader |) ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ];
                                                    Ty.path "std::io::error::Error"
                                                  ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path "std::io::error::Error"
                                                    ]
                                                ],
                                                "from_residual",
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |) in
                        let b :=
                          M.copy (|
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                          [ F ];
                                        Ty.path "std::io::error::Error"
                                      ],
                                    [],
                                    "branch",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "halo2_proofs::helpers::Serializable",
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                          [ F ],
                                        [],
                                        "fetch",
                                        [ R ]
                                      |),
                                      [ M.read (| reader |) ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ];
                                                    Ty.path "std::io::error::Error"
                                                  ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path "std::io::error::Error"
                                                    ]
                                                ],
                                                "from_residual",
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [
                              Value.StructTuple
                                "halo2_proofs::plonk::circuit::Expression::Product"
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "new",
                                      []
                                    |),
                                    [ M.read (| a |) ]
                                  |);
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "new",
                                      []
                                    |),
                                    [ M.read (| b |) ]
                                  |)
                                ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let a :=
                          M.copy (|
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                          [ F ];
                                        Ty.path "std::io::error::Error"
                                      ],
                                    [],
                                    "branch",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "halo2_proofs::helpers::Serializable",
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                          [ F ],
                                        [],
                                        "fetch",
                                        [ R ]
                                      |),
                                      [ M.read (| reader |) ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ];
                                                    Ty.path "std::io::error::Error"
                                                  ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path "std::io::error::Error"
                                                    ]
                                                ],
                                                "from_residual",
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |) in
                        let f :=
                          M.copy (|
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ F; Ty.path "std::io::error::Error" ],
                                    [],
                                    "branch",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "pairing_bn256::arithmetic::fields::BaseExt",
                                        F,
                                        [],
                                        "read",
                                        [ R ]
                                      |),
                                      [ M.read (| reader |) ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Expression")
                                                      [ F ];
                                                    Ty.path "std::io::error::Error"
                                                  ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path "std::io::error::Error"
                                                    ]
                                                ],
                                                "from_residual",
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [
                              Value.StructTuple
                                "halo2_proofs::plonk::circuit::Expression::Scaled"
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "new",
                                      []
                                    |),
                                    [ M.read (| a |) ]
                                  |);
                                  M.read (| f |)
                                ]
                            ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn store<W: io::Write>(&self, writer: &mut W) -> io::Result<()> {
            writer.write(&mut (expression_code(self) as u32).to_le_bytes())?;
            match self {
                Expression::Constant(scalar) => {
                    writer.write(&mut scalar.to_repr().as_ref())?;
                    Ok(())
                }
                Expression::Fixed {
                    query_index,
                    column_index,
                    rotation,
                } => {
                    writer.write(&( *query_index as u32).to_le_bytes())?;
                    writer.write(&( *column_index as u32).to_le_bytes())?;
                    writer.write(&(rotation.0 as u32).to_le_bytes())?;
                    Ok(())
                }
                Expression::Advice {
                    query_index,
                    column_index,
                    rotation,
                } => {
                    writer.write(&( *query_index as u32).to_le_bytes())?;
                    writer.write(&( *column_index as u32).to_le_bytes())?;
                    writer.write(&(rotation.0 as u32).to_le_bytes())?;
                    Ok(())
                }
                Expression::Instance {
                    query_index,
                    column_index,
                    rotation,
                } => {
                    writer.write(&( *query_index as u32).to_le_bytes())?;
                    writer.write(&( *column_index as u32).to_le_bytes())?;
                    writer.write(&(rotation.0 as u32).to_le_bytes())?;
                    Ok(())
                }
                Expression::Negated(a) => a.store(writer),
                Expression::Sum(a, b) => {
                    a.store(writer)?;
                    b.store(writer)?;
                    Ok(())
                }
                Expression::Product(a, b) => {
                    a.store(writer)?;
                    b.store(writer)?;
                    Ok(())
                }
                Expression::Scaled(a, f) => {
                    a.store(writer)?;
                    writer.write(&mut f.to_repr().as_ref())?;
                    Ok(())
                }
                Expression::Selector(_) => unreachable!(),
            }
        }
    *)
    Definition store (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [ W ], [ self; writer ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let writer := M.alloc (| writer |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                            [
                              M.read (| writer |);
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "u32",
                                      "to_le_bytes",
                                      []
                                    |),
                                    [
                                      M.rust_cast
                                        (M.call_closure (|
                                          M.get_function (|
                                            "halo2_proofs::helpers::expression_code",
                                            [ F ]
                                          |),
                                          [ M.read (| self |) ]
                                        |))
                                    ]
                                  |)
                                |))
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.match_operator (|
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "halo2_proofs::plonk::circuit::Expression::Constant",
                            0
                          |) in
                        let scalar := M.alloc (| γ1_0 |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                                    [
                                      M.read (| writer |);
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::AsRef",
                                          Ty.associated,
                                          [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ],
                                          "as_ref",
                                          []
                                        |),
                                        [
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "ff::PrimeField",
                                                F,
                                                [],
                                                "to_repr",
                                                []
                                              |),
                                              [ M.read (| scalar |) ]
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        M.alloc (|
                          Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::plonk::circuit::Expression::Fixed",
                            "query_index"
                          |) in
                        let γ1_1 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::plonk::circuit::Expression::Fixed",
                            "column_index"
                          |) in
                        let γ1_2 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::plonk::circuit::Expression::Fixed",
                            "rotation"
                          |) in
                        let query_index := M.alloc (| γ1_0 |) in
                        let column_index := M.alloc (| γ1_1 |) in
                        let rotation := M.alloc (| γ1_2 |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                                    [
                                      M.read (| writer |);
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "u32",
                                              "to_le_bytes",
                                              []
                                            |),
                                            [ M.rust_cast (M.read (| M.read (| query_index |) |)) ]
                                          |)
                                        |))
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                                    [
                                      M.read (| writer |);
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "u32",
                                              "to_le_bytes",
                                              []
                                            |),
                                            [ M.rust_cast (M.read (| M.read (| column_index |) |)) ]
                                          |)
                                        |))
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                                    [
                                      M.read (| writer |);
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "u32",
                                              "to_le_bytes",
                                              []
                                            |),
                                            [
                                              M.rust_cast
                                                (M.read (|
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    M.read (| rotation |),
                                                    "halo2_proofs::poly::Rotation",
                                                    0
                                                  |)
                                                |))
                                            ]
                                          |)
                                        |))
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        M.alloc (|
                          Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::plonk::circuit::Expression::Advice",
                            "query_index"
                          |) in
                        let γ1_1 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::plonk::circuit::Expression::Advice",
                            "column_index"
                          |) in
                        let γ1_2 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::plonk::circuit::Expression::Advice",
                            "rotation"
                          |) in
                        let query_index := M.alloc (| γ1_0 |) in
                        let column_index := M.alloc (| γ1_1 |) in
                        let rotation := M.alloc (| γ1_2 |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                                    [
                                      M.read (| writer |);
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "u32",
                                              "to_le_bytes",
                                              []
                                            |),
                                            [ M.rust_cast (M.read (| M.read (| query_index |) |)) ]
                                          |)
                                        |))
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                                    [
                                      M.read (| writer |);
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "u32",
                                              "to_le_bytes",
                                              []
                                            |),
                                            [ M.rust_cast (M.read (| M.read (| column_index |) |)) ]
                                          |)
                                        |))
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                                    [
                                      M.read (| writer |);
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "u32",
                                              "to_le_bytes",
                                              []
                                            |),
                                            [
                                              M.rust_cast
                                                (M.read (|
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    M.read (| rotation |),
                                                    "halo2_proofs::poly::Rotation",
                                                    0
                                                  |)
                                                |))
                                            ]
                                          |)
                                        |))
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        M.alloc (|
                          Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::plonk::circuit::Expression::Instance",
                            "query_index"
                          |) in
                        let γ1_1 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::plonk::circuit::Expression::Instance",
                            "column_index"
                          |) in
                        let γ1_2 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "halo2_proofs::plonk::circuit::Expression::Instance",
                            "rotation"
                          |) in
                        let query_index := M.alloc (| γ1_0 |) in
                        let column_index := M.alloc (| γ1_1 |) in
                        let rotation := M.alloc (| γ1_2 |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                                    [
                                      M.read (| writer |);
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "u32",
                                              "to_le_bytes",
                                              []
                                            |),
                                            [ M.rust_cast (M.read (| M.read (| query_index |) |)) ]
                                          |)
                                        |))
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                                    [
                                      M.read (| writer |);
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "u32",
                                              "to_le_bytes",
                                              []
                                            |),
                                            [ M.rust_cast (M.read (| M.read (| column_index |) |)) ]
                                          |)
                                        |))
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                                    [
                                      M.read (| writer |);
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path "u32",
                                              "to_le_bytes",
                                              []
                                            |),
                                            [
                                              M.rust_cast
                                                (M.read (|
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    M.read (| rotation |),
                                                    "halo2_proofs::poly::Rotation",
                                                    0
                                                  |)
                                                |))
                                            ]
                                          |)
                                        |))
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        M.alloc (|
                          Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "halo2_proofs::plonk::circuit::Expression::Negated",
                            0
                          |) in
                        let a := M.alloc (| γ1_0 |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "halo2_proofs::helpers::Serializable",
                              Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                              [],
                              "store",
                              [ W ]
                            |),
                            [ M.read (| M.read (| a |) |); M.read (| writer |) ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "halo2_proofs::plonk::circuit::Expression::Sum",
                            0
                          |) in
                        let γ1_1 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "halo2_proofs::plonk::circuit::Expression::Sum",
                            1
                          |) in
                        let a := M.alloc (| γ1_0 |) in
                        let b := M.alloc (| γ1_1 |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "halo2_proofs::helpers::Serializable",
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                        [ F ],
                                      [],
                                      "store",
                                      [ W ]
                                    |),
                                    [ M.read (| M.read (| a |) |); M.read (| writer |) ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "halo2_proofs::helpers::Serializable",
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                        [ F ],
                                      [],
                                      "store",
                                      [ W ]
                                    |),
                                    [ M.read (| M.read (| b |) |); M.read (| writer |) ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        M.alloc (|
                          Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "halo2_proofs::plonk::circuit::Expression::Product",
                            0
                          |) in
                        let γ1_1 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "halo2_proofs::plonk::circuit::Expression::Product",
                            1
                          |) in
                        let a := M.alloc (| γ1_0 |) in
                        let b := M.alloc (| γ1_1 |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "halo2_proofs::helpers::Serializable",
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                        [ F ],
                                      [],
                                      "store",
                                      [ W ]
                                    |),
                                    [ M.read (| M.read (| a |) |); M.read (| writer |) ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "halo2_proofs::helpers::Serializable",
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                        [ F ],
                                      [],
                                      "store",
                                      [ W ]
                                    |),
                                    [ M.read (| M.read (| b |) |); M.read (| writer |) ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        M.alloc (|
                          Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "halo2_proofs::plonk::circuit::Expression::Scaled",
                            0
                          |) in
                        let γ1_1 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "halo2_proofs::plonk::circuit::Expression::Scaled",
                            1
                          |) in
                        let a := M.alloc (| γ1_0 |) in
                        let f := M.alloc (| γ1_1 |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "halo2_proofs::helpers::Serializable",
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                        [ F ],
                                      [],
                                      "store",
                                      [ W ]
                                    |),
                                    [ M.read (| M.read (| a |) |); M.read (| writer |) ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                                    [
                                      M.read (| writer |);
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::AsRef",
                                          Ty.associated,
                                          [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ],
                                          "as_ref",
                                          []
                                        |),
                                        [
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "ff::PrimeField",
                                                F,
                                                [],
                                                "to_repr",
                                                []
                                              |),
                                              [ M.read (| f |) ]
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        M.alloc (|
                          Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "halo2_proofs::plonk::circuit::Expression::Selector",
                            0
                          |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              M.get_function (| "core::panicking::panic", [] |),
                              [ M.read (| Value.String "internal error: entered unreachable code" |)
                              ]
                            |)
                          |)
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "halo2_proofs::helpers::Serializable"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("fetch", InstanceField.Method (fetch F)); ("store", InstanceField.Method (store F)) ].
  End Impl_halo2_proofs_helpers_Serializable_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_halo2_proofs_plonk_circuit_Expression_F.
  
  (* StructRecord
    {
      name := "AssignWitnessCollection";
      ty_params := [ "C" ];
      fields :=
        [
          ("k", Ty.path "u32");
          ("advice",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply
                  (Ty.path "halo2_proofs::poly::Polynomial")
                  [
                    Ty.apply (Ty.path "halo2_proofs::plonk::assigned::Assigned") [ Ty.associated ];
                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                  ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("instances",
            Ty.apply
              (Ty.path "&")
              [
                Ty.apply
                  (Ty.path "slice")
                  [ Ty.apply (Ty.path "&") [ Ty.apply (Ty.path "slice") [ Ty.associated ] ] ]
              ]);
          ("usable_rows", Ty.apply (Ty.path "core::ops::range::RangeTo") [ Ty.path "usize" ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_helpers_AssignWitnessCollection_C.
    Definition Self (C : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "halo2_proofs::helpers::AssignWitnessCollection") [ C ].
    
    (* Debug *)
    Definition fmt (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field4_finish",
              []
            |),
            [
              M.read (| f |);
              M.read (| Value.String "AssignWitnessCollection" |);
              M.read (| Value.String "k" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::helpers::AssignWitnessCollection",
                  "k"
                |));
              M.read (| Value.String "advice" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::helpers::AssignWitnessCollection",
                  "advice"
                |));
              M.read (| Value.String "instances" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::helpers::AssignWitnessCollection",
                  "instances"
                |));
              M.read (| Value.String "usable_rows" |);
              (* Unsize *)
              M.pointer_coercion
                (M.alloc (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::helpers::AssignWitnessCollection",
                    "usable_rows"
                  |)
                |))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (C : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (Self C)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method (fmt C)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_helpers_AssignWitnessCollection_C.
  
  (* StructRecord
    {
      name := "AssignWitnessCollectionAssigner";
      ty_params := [ "C" ];
      fields :=
        [
          ("k", Ty.path "u32");
          ("advice",
            Ty.apply
              (Ty.path "alloc::sync::Arc")
              [
                Ty.apply
                  (Ty.path "std::sync::mutex::Mutex")
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.apply
                          (Ty.path "halo2_proofs::poly::Polynomial")
                          [
                            Ty.apply
                              (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                              [ Ty.associated ];
                            Ty.path "halo2_proofs::poly::LagrangeCoeff"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("instances",
            Ty.apply
              (Ty.path "&")
              [
                Ty.apply
                  (Ty.path "slice")
                  [ Ty.apply (Ty.path "&") [ Ty.apply (Ty.path "slice") [ Ty.associated ] ] ]
              ]);
          ("usable_rows", Ty.apply (Ty.path "core::ops::range::RangeTo") [ Ty.path "usize" ])
        ];
    } *)
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_for_halo2_proofs_helpers_AssignWitnessCollectionAssigner_C.
    Definition Self (C : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "halo2_proofs::helpers::AssignWitnessCollectionAssigner") [ C ].
    
    (* Clone *)
    Definition clone (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "halo2_proofs::helpers::AssignWitnessCollectionAssigner"
            [
              ("k",
                M.call_closure (|
                  M.get_trait_method (| "core::clone::Clone", Ty.path "u32", [], "clone", [] |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::helpers::AssignWitnessCollectionAssigner",
                      "k"
                    |)
                  ]
                |));
              ("advice",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      [
                        Ty.apply
                          (Ty.path "std::sync::mutex::Mutex")
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                      [ Ty.associated ];
                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::helpers::AssignWitnessCollectionAssigner",
                      "advice"
                    |)
                  ]
                |));
              ("instances",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "&")
                      [
                        Ty.apply
                          (Ty.path "slice")
                          [ Ty.apply (Ty.path "&") [ Ty.apply (Ty.path "slice") [ Ty.associated ] ]
                          ]
                      ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::helpers::AssignWitnessCollectionAssigner",
                      "instances"
                    |)
                  ]
                |));
              ("usable_rows",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "core::ops::range::RangeTo") [ Ty.path "usize" ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::helpers::AssignWitnessCollectionAssigner",
                      "usable_rows"
                    |)
                  ]
                |))
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (C : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (Self C)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method (clone C)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_for_halo2_proofs_helpers_AssignWitnessCollectionAssigner_C.
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_helpers_AssignWitnessCollectionAssigner_C.
    Definition Self (C : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "halo2_proofs::helpers::AssignWitnessCollectionAssigner") [ C ].
    
    (* Debug *)
    Definition fmt (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field4_finish",
              []
            |),
            [
              M.read (| f |);
              M.read (| Value.String "AssignWitnessCollectionAssigner" |);
              M.read (| Value.String "k" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::helpers::AssignWitnessCollectionAssigner",
                  "k"
                |));
              M.read (| Value.String "advice" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::helpers::AssignWitnessCollectionAssigner",
                  "advice"
                |));
              M.read (| Value.String "instances" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::helpers::AssignWitnessCollectionAssigner",
                  "instances"
                |));
              M.read (| Value.String "usable_rows" |);
              (* Unsize *)
              M.pointer_coercion
                (M.alloc (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::helpers::AssignWitnessCollectionAssigner",
                    "usable_rows"
                  |)
                |))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (C : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (Self C)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method (fmt C)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_helpers_AssignWitnessCollectionAssigner_C.
  
  Module Impl_core_convert_Into_where_pairing_bn256_arithmetic_curves_CurveAffine_C_halo2_proofs_helpers_AssignWitnessCollection_C_for_halo2_proofs_helpers_AssignWitnessCollectionAssigner_C.
    Definition Self (C : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "halo2_proofs::helpers::AssignWitnessCollectionAssigner") [ C ].
    
    (*
        fn into(self) -> AssignWitnessCollection<'a, C> {
            AssignWitnessCollection {
                k: self.k,
                advice: Arc::try_unwrap(self.advice).unwrap().into_inner().unwrap(),
                instances: self.instances,
                usable_rows: self.usable_rows,
            }
        }
    *)
    Definition into (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "halo2_proofs::helpers::AssignWitnessCollection"
            [
              ("k",
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "halo2_proofs::helpers::AssignWitnessCollectionAssigner",
                    "k"
                  |)
                |));
              ("advice",
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "halo2_proofs::poly::Polynomial")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                  [ Ty.associated ];
                                Ty.path "halo2_proofs::poly::LagrangeCoeff"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.apply
                          (Ty.path "std::sync::poison::PoisonError")
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                      [ Ty.associated ];
                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                      ],
                    "unwrap",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::sync::mutex::Mutex")
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                      [ Ty.associated ];
                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        "into_inner",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "std::sync::mutex::Mutex")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                              [ Ty.associated ];
                                            Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::Mutex")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::assigned::Assigned")
                                                  [ Ty.associated ];
                                                Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            "unwrap",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  [
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::Mutex")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::assigned::Assigned")
                                                  [ Ty.associated ];
                                                Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "try_unwrap",
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    self,
                                    "halo2_proofs::helpers::AssignWitnessCollectionAssigner",
                                    "advice"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |));
              ("instances",
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "halo2_proofs::helpers::AssignWitnessCollectionAssigner",
                    "instances"
                  |)
                |));
              ("usable_rows",
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "halo2_proofs::helpers::AssignWitnessCollectionAssigner",
                    "usable_rows"
                  |)
                |))
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (C : Ty.t),
      M.IsTraitInstance
        "core::convert::Into"
        (Self C)
        (* Trait polymorphic types *)
        [ (* T *) Ty.apply (Ty.path "halo2_proofs::helpers::AssignWitnessCollection") [ C ] ]
        (* Instance *) [ ("into", InstanceField.Method (into C)) ].
  End Impl_core_convert_Into_where_pairing_bn256_arithmetic_curves_CurveAffine_C_halo2_proofs_helpers_AssignWitnessCollection_C_for_halo2_proofs_helpers_AssignWitnessCollectionAssigner_C.
  
  Module Impl_halo2_proofs_plonk_circuit_Assignment_where_pairing_bn256_arithmetic_curves_CurveAffine_C_associated_type_for_halo2_proofs_helpers_AssignWitnessCollectionAssigner_C.
    Definition Self (C : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "halo2_proofs::helpers::AssignWitnessCollectionAssigner") [ C ].
    
    (*
        fn is_in_prove_mode(&self) -> bool {
            true
        }
    *)
    Definition is_in_prove_mode (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.Bool true))
      | _, _ => M.impossible
      end.
    
    (*
        fn enter_region<NR, N>(&self, _: N)
        where
            NR: Into<String>,
            N: FnOnce() -> NR,
        {
            // Do nothing; we don't care about regions in this context.
        }
    *)
    Definition enter_region (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [ NR; N ], [ self; β1 ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let β1 := M.alloc (| β1 |) in
          M.match_operator (| β1, [ fun γ => ltac:(M.monadic (Value.Tuple [])) ] |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn exit_region(&self) {
            // Do nothing; we don't care about regions in this context.
        }
    *)
    Definition exit_region (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.Tuple []))
      | _, _ => M.impossible
      end.
    
    (*
        fn enable_selector<A, AR>(&self, _: A, _: &Selector, _: usize) -> Result<(), Error>
        where
            A: FnOnce() -> AR,
            AR: Into<String>,
        {
            // We only care about advice columns here
    
            Ok(())
        }
    *)
    Definition enable_selector (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [ A; AR ], [ self; β1; β2; β3 ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let β1 := M.alloc (| β1 |) in
          let β2 := M.alloc (| β2 |) in
          let β3 := M.alloc (| β3 |) in
          M.match_operator (|
            β1,
            [
              fun γ =>
                ltac:(M.monadic
                  (M.match_operator (|
                    β2,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            β3,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]))
                            ]
                          |)))
                    ]
                  |)))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn query_instance(
            &self,
            column: Column<Instance>,
            row: usize,
        ) -> Result<Option<C::Scalar>, Error> {
            if !self.usable_rows.contains(&row) {
                return Err(Error::not_enough_rows_available(self.k));
            }
    
            self.instances
                .get(column.index())
                .and_then(|column| column.get(row))
                .map(|v| Some( *v))
                .ok_or(Error::BoundsFailure)
        }
    *)
    Definition query_instance (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self; column; row ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let column := M.alloc (| column |) in
          let row := M.alloc (| row |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.Pure.not
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::ops::range::RangeTo")
                                        [ Ty.path "usize" ],
                                      "contains",
                                      [ Ty.path "usize" ]
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "halo2_proofs::helpers::AssignWitnessCollectionAssigner",
                                        "usable_rows"
                                      |);
                                      row
                                    ]
                                  |))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "halo2_proofs::plonk::error::Error",
                                          "not_enough_rows_available",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "halo2_proofs::helpers::AssignWitnessCollectionAssigner",
                                              "k"
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [ Ty.apply (Ty.path "core::option::Option") [ Ty.associated ] ],
                      "ok_or",
                      [ Ty.path "halo2_proofs::plonk::error::Error" ]
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                          "map",
                          [
                            Ty.apply (Ty.path "core::option::Option") [ Ty.associated ];
                            Ty.function
                              [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.associated ] ] ]
                              (Ty.apply (Ty.path "core::option::Option") [ Ty.associated ])
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [ Ty.apply (Ty.path "slice") [ Ty.associated ] ]
                                    ]
                                ],
                              "and_then",
                              [
                                Ty.apply (Ty.path "&") [ Ty.associated ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [ Ty.apply (Ty.path "slice") [ Ty.associated ] ]
                                          ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "core::option::Option")
                                    [ Ty.apply (Ty.path "&") [ Ty.associated ] ])
                              ]
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [ Ty.apply (Ty.path "slice") [ Ty.associated ] ]
                                    ],
                                  "get",
                                  [ Ty.path "usize" ]
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "halo2_proofs::helpers::AssignWitnessCollectionAssigner",
                                      "instances"
                                    |)
                                  |);
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Instance" ],
                                      "index",
                                      []
                                    |),
                                    [ column ]
                                  |)
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      M.match_operator (|
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let column := M.copy (| γ |) in
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [ Ty.associated ],
                                                  "get",
                                                  [ Ty.path "usize" ]
                                                |),
                                                [ M.read (| M.read (| column |) |); M.read (| row |)
                                                ]
                                              |)))
                                        ]
                                      |)
                                    | _ => M.impossible (||)
                                    end))
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let v := M.copy (| γ |) in
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            [ M.read (| M.read (| v |) |) ]))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |);
                      Value.StructTuple "halo2_proofs::plonk::error::Error::BoundsFailure" []
                    ]
                  |)
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn assign_advice<V, VR, A, AR>(
            &self,
            _: A,
            column: Column<Advice>,
            row: usize,
            to: V,
        ) -> Result<(), Error>
        where
            V: FnOnce() -> Result<VR, Error>,
            VR: Into<Assigned<C::Scalar>>,
            A: FnOnce() -> AR,
            AR: Into<String>,
        {
            if !self.usable_rows.contains(&row) {
                return Err(Error::not_enough_rows_available(self.k));
            }
    
            let mut advice = self.advice.lock().unwrap();
    
            *advice
                .get_mut(column.index())
                .and_then(|v| v.get_mut(row))
                .ok_or(Error::BoundsFailure)? = to()?.into();
    
            Ok(())
        }
    *)
    Definition assign_advice (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [ V; VR; A; AR ], [ self; β1; column; row; to ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let β1 := M.alloc (| β1 |) in
          let column := M.alloc (| column |) in
          let row := M.alloc (| row |) in
          let to := M.alloc (| to |) in
          M.match_operator (|
            β1,
            [
              fun γ =>
                ltac:(M.monadic
                  (M.catch_return (|
                    ltac:(M.monadic
                      (M.read (|
                        let _ :=
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.Pure.not
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::ops::range::RangeTo")
                                                [ Ty.path "usize" ],
                                              "contains",
                                              [ Ty.path "usize" ]
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "halo2_proofs::helpers::AssignWitnessCollectionAssigner",
                                                "usable_rows"
                                              |);
                                              row
                                            ]
                                          |))
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          Value.StructTuple
                                            "core::result::Result::Err"
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::plonk::error::Error",
                                                  "not_enough_rows_available",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| self |),
                                                      "halo2_proofs::helpers::AssignWitnessCollectionAssigner",
                                                      "k"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let advice :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::MutexGuard")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::assigned::Assigned")
                                                  [ Ty.associated ];
                                                Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "std::sync::poison::PoisonError")
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::MutexGuard")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::assigned::Assigned")
                                                      [ Ty.associated ];
                                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ]
                                  ],
                                "unwrap",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::Mutex")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::assigned::Assigned")
                                                  [ Ty.associated ];
                                                Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    "lock",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          [
                                            Ty.apply
                                              (Ty.path "std::sync::mutex::Mutex")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::assigned::Assigned")
                                                          [ Ty.associated ];
                                                        Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "halo2_proofs::helpers::AssignWitnessCollectionAssigner",
                                          "advice"
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |) in
                        let _ :=
                          M.write (|
                            M.read (|
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "&mut")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                                [ Ty.associated ]
                                            ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            [
                                              Ty.apply
                                                (Ty.path "&mut")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::assigned::Assigned")
                                                    [ Ty.associated ]
                                                ]
                                            ],
                                          "ok_or",
                                          [ Ty.path "halo2_proofs::plonk::error::Error" ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                [
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::assigned::Assigned")
                                                            [ Ty.associated ];
                                                          Ty.path
                                                            "halo2_proofs::poly::LagrangeCoeff"
                                                        ]
                                                    ]
                                                ],
                                              "and_then",
                                              [
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::assigned::Assigned")
                                                      [ Ty.associated ]
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::Polynomial")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::assigned::Assigned")
                                                                  [ Ty.associated ];
                                                                Ty.path
                                                                  "halo2_proofs::poly::LagrangeCoeff"
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::assigned::Assigned")
                                                            [ Ty.associated ]
                                                        ]
                                                    ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::assigned::Assigned")
                                                            [ Ty.associated ];
                                                          Ty.path
                                                            "halo2_proofs::poly::LagrangeCoeff"
                                                        ]
                                                    ],
                                                  "get_mut",
                                                  [ Ty.path "usize" ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::deref::DerefMut",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::Polynomial")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::assigned::Assigned")
                                                                [ Ty.associated ];
                                                              Ty.path
                                                                "halo2_proofs::poly::LagrangeCoeff"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      "deref_mut",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::deref::DerefMut",
                                                          Ty.apply
                                                            (Ty.path "std::sync::mutex::MutexGuard")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::poly::Polynomial")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::assigned::Assigned")
                                                                        [ Ty.associated ];
                                                                      Ty.path
                                                                        "halo2_proofs::poly::LagrangeCoeff"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ],
                                                          [],
                                                          "deref_mut",
                                                          []
                                                        |),
                                                        [ advice ]
                                                      |)
                                                    ]
                                                  |);
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Column")
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::plonk::circuit::Advice"
                                                        ],
                                                      "index",
                                                      []
                                                    |),
                                                    [ column ]
                                                  |)
                                                ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let v := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::assigned::Assigned")
                                                                        [ Ty.associated ]
                                                                    ],
                                                                  "get_mut",
                                                                  [ Ty.path "usize" ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::DerefMut",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::poly::Polynomial")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::assigned::Assigned")
                                                                            [ Ty.associated ];
                                                                          Ty.path
                                                                            "halo2_proofs::poly::LagrangeCoeff"
                                                                        ],
                                                                      [],
                                                                      "deref_mut",
                                                                      []
                                                                    |),
                                                                    [ M.read (| v |) ]
                                                                  |);
                                                                  M.read (| row |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |);
                                          Value.StructTuple
                                            "halo2_proofs::plonk::error::Error::BoundsFailure"
                                            []
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.tuple [];
                                                      Ty.path "halo2_proofs::plonk::error::Error"
                                                    ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |)
                            |),
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::convert::Into",
                                VR,
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                    [ Ty.associated ]
                                ],
                                "into",
                                []
                              |),
                              [
                                M.read (|
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::Try",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ VR; Ty.path "halo2_proofs::plonk::error::Error" ],
                                          [],
                                          "branch",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::function::FnOnce",
                                              V,
                                              [ Ty.tuple [] ],
                                              "call_once",
                                              []
                                            |),
                                            [ M.read (| to |); Value.Tuple [] ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Break",
                                              0
                                            |) in
                                          let residual := M.copy (| γ0_0 |) in
                                          M.alloc (|
                                            M.never_to_any (|
                                              M.read (|
                                                M.return_ (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::FromResidual",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ],
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.path "core::convert::Infallible";
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ]
                                                      ],
                                                      "from_residual",
                                                      []
                                                    |),
                                                    [ M.read (| residual |) ]
                                                  |)
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::ops::control_flow::ControlFlow::Continue",
                                              0
                                            |) in
                                          let val := M.copy (| γ0_0 |) in
                                          val))
                                    ]
                                  |)
                                |)
                              ]
                            |)
                          |) in
                        M.alloc (|
                          Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                        |)
                      |)))
                  |)))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn assign_fixed<V, VR, A, AR>(
            &self,
            _: A,
            _: Column<Fixed>,
            _: usize,
            _: V,
        ) -> Result<(), Error>
        where
            V: FnOnce() -> Result<VR, Error>,
            VR: Into<Assigned<C::Scalar>>,
            A: FnOnce() -> AR,
            AR: Into<String>,
        {
            // We only care about advice columns here
    
            Ok(())
        }
    *)
    Definition assign_fixed (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [ V; VR; A; AR ], [ self; β1; β2; β3; β4 ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let β1 := M.alloc (| β1 |) in
          let β2 := M.alloc (| β2 |) in
          let β3 := M.alloc (| β3 |) in
          let β4 := M.alloc (| β4 |) in
          M.match_operator (|
            β1,
            [
              fun γ =>
                ltac:(M.monadic
                  (M.match_operator (|
                    β2,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            β3,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    β4,
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (Value.StructTuple
                                            "core::result::Result::Ok"
                                            [ Value.Tuple [] ]))
                                    ]
                                  |)))
                            ]
                          |)))
                    ]
                  |)))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn copy(&self, _: Column<Any>, _: usize, _: Column<Any>, _: usize) -> Result<(), Error> {
            // We only care about advice columns here
    
            Ok(())
        }
    *)
    Definition copy (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self; β1; β2; β3; β4 ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let β1 := M.alloc (| β1 |) in
          let β2 := M.alloc (| β2 |) in
          let β3 := M.alloc (| β3 |) in
          let β4 := M.alloc (| β4 |) in
          M.match_operator (|
            β1,
            [
              fun γ =>
                ltac:(M.monadic
                  (M.match_operator (|
                    β2,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            β3,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    β4,
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (Value.StructTuple
                                            "core::result::Result::Ok"
                                            [ Value.Tuple [] ]))
                                    ]
                                  |)))
                            ]
                          |)))
                    ]
                  |)))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn fill_from_row(
            &self,
            _: Column<Fixed>,
            _: usize,
            _: Option<Assigned<C::Scalar>>,
        ) -> Result<(), Error> {
            Ok(())
        }
    *)
    Definition fill_from_row (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self; β1; β2; β3 ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let β1 := M.alloc (| β1 |) in
          let β2 := M.alloc (| β2 |) in
          let β3 := M.alloc (| β3 |) in
          M.match_operator (|
            β1,
            [
              fun γ =>
                ltac:(M.monadic
                  (M.match_operator (|
                    β2,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            β3,
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]))
                            ]
                          |)))
                    ]
                  |)))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn push_namespace<NR, N>(&self, _: N)
        where
            NR: Into<String>,
            N: FnOnce() -> NR,
        {
            // Do nothing; we don't care about namespaces in this context.
        }
    *)
    Definition push_namespace (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [ NR; N ], [ self; β1 ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let β1 := M.alloc (| β1 |) in
          M.match_operator (| β1, [ fun γ => ltac:(M.monadic (Value.Tuple [])) ] |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn pop_namespace(&self, _: Option<String>) {
            // Do nothing; we don't care about namespaces in this context.
        }
    *)
    Definition pop_namespace (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self; β1 ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let β1 := M.alloc (| β1 |) in
          M.match_operator (| β1, [ fun γ => ltac:(M.monadic (Value.Tuple [])) ] |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (C : Ty.t),
      M.IsTraitInstance
        "halo2_proofs::plonk::circuit::Assignment"
        (Self C)
        (* Trait polymorphic types *) [ (* F *) Ty.associated ]
        (* Instance *)
        [
          ("is_in_prove_mode", InstanceField.Method (is_in_prove_mode C));
          ("enter_region", InstanceField.Method (enter_region C));
          ("exit_region", InstanceField.Method (exit_region C));
          ("enable_selector", InstanceField.Method (enable_selector C));
          ("query_instance", InstanceField.Method (query_instance C));
          ("assign_advice", InstanceField.Method (assign_advice C));
          ("assign_fixed", InstanceField.Method (assign_fixed C));
          ("copy", InstanceField.Method (copy C));
          ("fill_from_row", InstanceField.Method (fill_from_row C));
          ("push_namespace", InstanceField.Method (push_namespace C));
          ("pop_namespace", InstanceField.Method (pop_namespace C))
        ].
  End Impl_halo2_proofs_plonk_circuit_Assignment_where_pairing_bn256_arithmetic_curves_CurveAffine_C_associated_type_for_halo2_proofs_helpers_AssignWitnessCollectionAssigner_C.
  
  Module Impl_halo2_proofs_helpers_Serializable_where_core_clone_Clone_B_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_halo2_proofs_poly_Polynomial_halo2_proofs_plonk_assigned_Assigned_F_B.
    Definition Self (B F : Ty.t) : Ty.t :=
      Ty.apply
        (Ty.path "halo2_proofs::poly::Polynomial")
        [ Ty.apply (Ty.path "halo2_proofs::plonk::assigned::Assigned") [ F ]; B ].
    
    (*
        fn fetch<R: io::Read>(reader: &mut R) -> io::Result<Self> {
            Ok(Polynomial::new(Vec::<Assigned<F>>::fetch(reader)?))
        }
    *)
    Definition fetch (B F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self B F in
      match τ, α with
      | [ R ], [ reader ] =>
        ltac:(M.monadic
          (let reader := M.alloc (| reader |) in
          M.catch_return (|
            ltac:(M.monadic
              (Value.StructTuple
                "core::result::Result::Ok"
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "halo2_proofs::poly::Polynomial")
                        [ Ty.apply (Ty.path "halo2_proofs::plonk::assigned::Assigned") [ F ]; B ],
                      "new",
                      []
                    |),
                    [
                      M.read (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "std::io::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "halo2_proofs::helpers::Serializable",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "fetch",
                                    [ R ]
                                  |),
                                  [ M.read (| reader |) ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::assigned::Assigned")
                                                      [ F ];
                                                    B
                                                  ];
                                                Ty.path "std::io::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "std::io::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |)
                    ]
                  |)
                ]))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn store<W: io::Write>(&self, writer: &mut W) -> io::Result<()> {
            self.values.store(writer)?;
            Ok(())
        }
    *)
    Definition store (B F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self B F in
      match τ, α with
      | [ W ], [ self; writer ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let writer := M.alloc (| writer |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "halo2_proofs::helpers::Serializable",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              "store",
                              [ W ]
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::poly::Polynomial",
                                "values"
                              |);
                              M.read (| writer |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (B F : Ty.t),
      M.IsTraitInstance
        "halo2_proofs::helpers::Serializable"
        (Self B F)
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("fetch", InstanceField.Method (fetch B F)); ("store", InstanceField.Method (store B F))
        ].
  End Impl_halo2_proofs_helpers_Serializable_where_core_clone_Clone_B_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_halo2_proofs_poly_Polynomial_halo2_proofs_plonk_assigned_Assigned_F_B.
  
  Module Impl_halo2_proofs_helpers_ParaSerializable_for_halo2_proofs_plonk_permutation_keygen_Assembly.
    Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::permutation::keygen::Assembly".
    
    (*
        fn vec_fetch(fd: &mut File) -> io::Result<Self> {
            let assembly = Assembly {
                mapping: Vec::<Vec<(u32, u32)>>::vec_fetch(fd)?,
            };
            Ok(assembly)
        }
    *)
    Definition vec_fetch (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ fd ] =>
        ltac:(M.monadic
          (let fd := M.alloc (| fd |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let assembly :=
                  M.alloc (|
                    Value.StructRecord
                      "halo2_proofs::plonk::permutation::keygen::Assembly"
                      [
                        ("mapping",
                          M.read (|
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "std::io::error::Error"
                                      ],
                                    [],
                                    "branch",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "halo2_proofs::helpers::ParaSerializable",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "vec_fetch",
                                        []
                                      |),
                                      [ M.read (| fd |) ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path
                                                      "halo2_proofs::plonk::permutation::keygen::Assembly";
                                                    Ty.path "std::io::error::Error"
                                                  ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path "std::io::error::Error"
                                                    ]
                                                ],
                                                "from_residual",
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |))
                      ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| assembly |) ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn vec_store(&self, fd: &mut File) -> io::Result<()> {
            //self.columns.store(writer)?;
            self.mapping.vec_store(fd)?;
    
            Ok(())
        }
    *)
    Definition vec_store (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; fd ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let fd := M.alloc (| fd |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "halo2_proofs::helpers::ParaSerializable",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              "vec_store",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::plonk::permutation::keygen::Assembly",
                                "mapping"
                              |);
                              M.read (| fd |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "halo2_proofs::helpers::ParaSerializable"
        Self
        (* Trait polymorphic types *) []
        (* Instance *)
        [
          ("vec_fetch", InstanceField.Method vec_fetch);
          ("vec_store", InstanceField.Method vec_store)
        ].
  End Impl_halo2_proofs_helpers_ParaSerializable_for_halo2_proofs_plonk_permutation_keygen_Assembly.
  
  Module Impl_halo2_proofs_helpers_AssignWitnessCollection_C.
    Definition Self (C : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "halo2_proofs::helpers::AssignWitnessCollection") [ C ].
    
    (*
        pub fn store_witness<ConcreteCircuit: Circuit<C::Scalar>>(
            params: &Params<C>,
            pk: &ProvingKey<C>,
            instances: &[&[C::Scalar]],
            unusable_rows_start: usize,
            circuit: &ConcreteCircuit,
            fd: &mut File,
        ) -> Result<(), Error> {
            use std::io::prelude::*;
            let mut meta = ConstraintSystem::default();
            let config = ConcreteCircuit::configure(&mut meta);
    
            let domain = &pk.get_vk().domain;
            let meta = &pk.get_vk().cs;
            let mut witness = AssignWitnessCollectionAssigner::<C> {
                k: params.k,
                advice: Arc::new(Mutex::new(vec![
                    domain.empty_lagrange_assigned();
                    meta.num_advice_columns
                ])),
                instances,
                // The prover will not be allowed to assign values to advice
                // cells that exist within inactive rows, which include some
                // number of blinding factors and an extra row for use in the
                // permutation argument.
                usable_rows: ..unusable_rows_start,
            };
    
            // Synthesize the circuit to obtain the witness and other information.
            ConcreteCircuit::FloorPlanner::synthesize(
                &mut witness,
                circuit,
                config.clone(),
                meta.constants.clone(),
            )?;
    
            let witness: AssignWitnessCollection<_> = witness.into();
    
            let bundlesize = params.k + 5;
            let advice = batch_invert_assigned(witness.advice);
            fd.set_len(4 + (1u64 << bundlesize)).unwrap();
            fd.write(&(advice.len() as u32).to_le_bytes())?;
            fd.set_len(4 + ((advice.len() as u64) << bundlesize))
                .unwrap();
            {
                advice.into_par_iter().enumerate().for_each(|(i, s2)| {
                    let mut mmap = unsafe {
                        MmapOptions::new()
                            .offset(4 + ((i as u64) << bundlesize))
                            .len(1 << bundlesize)
                            .map_mut(&fd)
                            .unwrap()
                    };
                    let s: &[u8] = unsafe {
                        std::slice::from_raw_parts(
                            s2.as_ptr() as *const C::Scalar as *const u8,
                            1 << bundlesize,
                        )
                    };
                    (&mut mmap).copy_from_slice(s);
                });
            }
            println!("witness stored!");
    
            //witness.advice.store(writer)?;
            Ok(())
        }
    *)
    Definition store_witness (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [ ConcreteCircuit ], [ params; pk; instances; unusable_rows_start; circuit; fd ] =>
        ltac:(M.monadic
          (let params := M.alloc (| params |) in
          let pk := M.alloc (| pk |) in
          let instances := M.alloc (| instances |) in
          let unusable_rows_start := M.alloc (| unusable_rows_start |) in
          let circuit := M.alloc (| circuit |) in
          let fd := M.alloc (| fd |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let meta :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.apply
                          (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                          [ Ty.associated ],
                        [],
                        "default",
                        []
                      |),
                      []
                    |)
                  |) in
                let config :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "halo2_proofs::plonk::circuit::Circuit",
                        ConcreteCircuit,
                        [ Ty.associated ],
                        "configure",
                        []
                      |),
                      [ meta ]
                    |)
                  |) in
                let domain :=
                  M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "halo2_proofs::plonk::ProvingKey") [ C ],
                          "get_vk",
                          []
                        |),
                        [ M.read (| pk |) ]
                      |),
                      "halo2_proofs::plonk::VerifyingKey",
                      "domain"
                    |)
                  |) in
                let meta :=
                  M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "halo2_proofs::plonk::ProvingKey") [ C ],
                          "get_vk",
                          []
                        |),
                        [ M.read (| pk |) ]
                      |),
                      "halo2_proofs::plonk::VerifyingKey",
                      "cs"
                    |)
                  |) in
                let witness :=
                  M.alloc (|
                    Value.StructRecord
                      "halo2_proofs::helpers::AssignWitnessCollectionAssigner"
                      [
                        ("k",
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| params |),
                              "halo2_proofs::poly::commitment::Params",
                              "k"
                            |)
                          |));
                        ("advice",
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                [
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::Mutex")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                                [ Ty.associated ];
                                              Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::Mutex")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                                [ Ty.associated ];
                                              Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_function (|
                                      "alloc::vec::from_elem",
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                              [ Ty.associated ];
                                            Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                          ]
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                                            [ Ty.associated ],
                                          "empty_lagrange_assigned",
                                          []
                                        |),
                                        [ M.read (| domain |) ]
                                      |);
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| meta |),
                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                          "num_advice_columns"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |));
                        ("instances", M.read (| instances |));
                        ("usable_rows",
                          Value.StructRecord
                            "core::ops::range::RangeTo"
                            [ ("end_", M.read (| unusable_rows_start |)) ])
                      ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "halo2_proofs::plonk::circuit::FloorPlanner",
                              Ty.associated,
                              [],
                              "synthesize",
                              [
                                Ty.associated;
                                Ty.apply
                                  (Ty.path "halo2_proofs::helpers::AssignWitnessCollectionAssigner")
                                  [ C ];
                                ConcreteCircuit
                              ]
                            |),
                            [
                              witness;
                              M.read (| circuit |);
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.associated,
                                  [],
                                  "clone",
                                  []
                                |),
                                [ config ]
                              |);
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "clone",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| meta |),
                                    "halo2_proofs::plonk::circuit::ConstraintSystem",
                                    "constants"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let witness :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::convert::Into",
                        Ty.apply
                          (Ty.path "halo2_proofs::helpers::AssignWitnessCollectionAssigner")
                          [ C ],
                        [ Ty.apply (Ty.path "halo2_proofs::helpers::AssignWitnessCollection") [ C ]
                        ],
                        "into",
                        []
                      |),
                      [ M.read (| witness |) ]
                    |)
                  |) in
                let bundlesize :=
                  M.alloc (|
                    BinOp.Panic.add (|
                      Integer.U32,
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| params |),
                          "halo2_proofs::poly::commitment::Params",
                          "k"
                        |)
                      |),
                      Value.Integer 5
                    |)
                  |) in
                let advice :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "halo2_proofs::poly::batch_invert_assigned",
                        [ Ty.associated ]
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            witness,
                            "halo2_proofs::helpers::AssignWitnessCollection",
                            "advice"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (| Ty.path "std::fs::File", "set_len", [] |),
                          [
                            M.read (| fd |);
                            BinOp.Panic.add (|
                              Integer.U64,
                              Value.Integer 4,
                              BinOp.Panic.shl (| Value.Integer 1, M.read (| bundlesize |) |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "std::io::Write",
                              Ty.path "std::fs::File",
                              [],
                              "write",
                              []
                            |),
                            [
                              M.read (| fd |);
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "u32",
                                      "to_le_bytes",
                                      []
                                    |),
                                    [
                                      M.rust_cast
                                        (M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "len",
                                            []
                                          |),
                                          [ advice ]
                                        |))
                                    ]
                                  |)
                                |))
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (| Ty.path "std::fs::File", "set_len", [] |),
                          [
                            M.read (| fd |);
                            BinOp.Panic.add (|
                              Integer.U64,
                              Value.Integer 4,
                              BinOp.Panic.shl (|
                                M.rust_cast
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [
                                              Ty.associated;
                                              Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "len",
                                      []
                                    |),
                                    [ advice ]
                                  |)),
                                M.read (| bundlesize |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "rayon::iter::ParallelIterator",
                          Ty.apply
                            (Ty.path "rayon::iter::enumerate::Enumerate")
                            [
                              Ty.apply
                                (Ty.path "rayon::vec::IntoIter")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                    [ Ty.associated; Ty.path "halo2_proofs::poly::LagrangeCoeff" ]
                                ]
                            ],
                          [],
                          "for_each",
                          [
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.tuple
                                      [
                                        Ty.path "usize";
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                          [
                                            Ty.associated;
                                            Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                          ]
                                      ]
                                  ]
                              ]
                              (Ty.tuple [])
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "rayon::iter::IndexedParallelIterator",
                              Ty.apply
                                (Ty.path "rayon::vec::IntoIter")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                    [ Ty.associated; Ty.path "halo2_proofs::poly::LagrangeCoeff" ]
                                ],
                              [],
                              "enumerate",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "rayon::iter::IntoParallelIterator",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                        [ Ty.associated; Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "into_par_iter",
                                  []
                                |),
                                [ M.read (| advice |) ]
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let i := M.copy (| γ0_0 |) in
                                          let s2 := M.copy (| γ0_1 |) in
                                          M.read (|
                                            let mmap :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "memmap::MmapMut";
                                                        Ty.path "std::io::error::Error"
                                                      ],
                                                    "unwrap",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path "memmap::MmapOptions",
                                                        "map_mut",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.path "memmap::MmapOptions",
                                                            "len",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path "memmap::MmapOptions",
                                                                "offset",
                                                                []
                                                              |),
                                                              [
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.path "memmap::MmapOptions",
                                                                      "new",
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                |);
                                                                BinOp.Panic.add (|
                                                                  Integer.U64,
                                                                  Value.Integer 4,
                                                                  BinOp.Panic.shl (|
                                                                    M.rust_cast (M.read (| i |)),
                                                                    M.read (| bundlesize |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |);
                                                            BinOp.Panic.shl (|
                                                              Value.Integer 1,
                                                              M.read (| bundlesize |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.read (| fd |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let s :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_function (|
                                                    "core::slice::raw::from_raw_parts",
                                                    [ Ty.path "u8" ]
                                                  |),
                                                  [
                                                    M.rust_cast
                                                      (M.rust_cast
                                                        (M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              [ Ty.associated ],
                                                            "as_ptr",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::deref::Deref",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::Polynomial")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path
                                                                      "halo2_proofs::poly::LagrangeCoeff"
                                                                  ],
                                                                [],
                                                                "deref",
                                                                []
                                                              |),
                                                              [ s2 ]
                                                            |)
                                                          ]
                                                        |)));
                                                    BinOp.Panic.shl (|
                                                      Value.Integer 1,
                                                      M.read (| bundlesize |)
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [ Ty.path "u8" ],
                                                    "copy_from_slice",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::deref::DerefMut",
                                                        Ty.path "memmap::MmapMut",
                                                        [],
                                                        "deref_mut",
                                                        []
                                                      |),
                                                      [ mmap ]
                                                    |);
                                                    M.read (| s |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |) in
                let _ :=
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (| "std::io::stdio::_print", [] |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_const",
                              []
                            |),
                            [
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  Value.Array [ M.read (| Value.String "witness stored!
" |) ]
                                |))
                            ]
                          |)
                        ]
                      |)
                    |) in
                  M.alloc (| Value.Tuple [] |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_store_witness :
      forall (C : Ty.t),
      M.IsAssociatedFunction (Self C) "store_witness" (store_witness C).
    
    (*
        pub fn fetch_witness(
            params: &Params<C>,
            fd: &mut File,
        ) -> Result<Vec<Polynomial<C::Scalar, LagrangeCoeff>>, Error> {
            let len = read_u32(fd)?;
            let bundlesize = params.k + 5;
            let advice: Vec<Polynomial<_, LagrangeCoeff>> = (0..len)
                .into_par_iter()
                .map(|i| {
                    let mmap = unsafe {
                        MmapOptions::new()
                            .offset(4 + ((i as u64) << bundlesize))
                            .len(1 << bundlesize)
                            .map(&fd)
                            .unwrap()
                    };
                    let s: &[C::Scalar] = unsafe {
                        std::slice::from_raw_parts(mmap.as_ptr() as *const C::Scalar, 1 << params.k)
                    };
                    let mut s2 = vec![];
                    s2.extend_from_slice(s);
                    Polynomial::new(s2)
                })
                .collect();
    
            Ok(advice)
        }
    *)
    Definition fetch_witness (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ params; fd ] =>
        ltac:(M.monadic
          (let params := M.alloc (| params |) in
          let fd := M.alloc (| fd |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let len :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (|
                                "halo2_proofs::helpers::read_u32",
                                [ Ty.path "std::fs::File" ]
                              |),
                              [ M.read (| fd |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let bundlesize :=
                  M.alloc (|
                    BinOp.Panic.add (|
                      Integer.U32,
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| params |),
                          "halo2_proofs::poly::commitment::Params",
                          "k"
                        |)
                      |),
                      Value.Integer 5
                    |)
                  |) in
                let advice :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "rayon::iter::ParallelIterator",
                        Ty.apply
                          (Ty.path "rayon::iter::map::Map")
                          [
                            Ty.apply (Ty.path "rayon::range::Iter") [ Ty.path "u32" ];
                            Ty.function
                              [ Ty.tuple [ Ty.path "u32" ] ]
                              (Ty.apply
                                (Ty.path "halo2_proofs::poly::Polynomial")
                                [ Ty.associated; Ty.path "halo2_proofs::poly::LagrangeCoeff" ])
                          ],
                        [],
                        "collect",
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::poly::Polynomial")
                                [ Ty.associated; Ty.path "halo2_proofs::poly::LagrangeCoeff" ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "rayon::iter::ParallelIterator",
                            Ty.apply (Ty.path "rayon::range::Iter") [ Ty.path "u32" ],
                            [],
                            "map",
                            [
                              Ty.function
                                [ Ty.tuple [ Ty.path "u32" ] ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                  [ Ty.associated; Ty.path "halo2_proofs::poly::LagrangeCoeff" ]);
                              Ty.apply
                                (Ty.path "halo2_proofs::poly::Polynomial")
                                [ Ty.associated; Ty.path "halo2_proofs::poly::LagrangeCoeff" ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "rayon::iter::IntoParallelIterator",
                                Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ],
                                [],
                                "into_par_iter",
                                []
                              |),
                              [
                                Value.StructRecord
                                  "core::ops::range::Range"
                                  [ ("start", Value.Integer 0); ("end_", M.read (| len |)) ]
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let i := M.copy (| γ |) in
                                            M.read (|
                                              let mmap :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "memmap::Mmap";
                                                          Ty.path "std::io::error::Error"
                                                        ],
                                                      "unwrap",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.path "memmap::MmapOptions",
                                                          "map",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "memmap::MmapOptions",
                                                              "len",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path "memmap::MmapOptions",
                                                                  "offset",
                                                                  []
                                                                |),
                                                                [
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "memmap::MmapOptions",
                                                                        "new",
                                                                        []
                                                                      |),
                                                                      []
                                                                    |)
                                                                  |);
                                                                  BinOp.Panic.add (|
                                                                    Integer.U64,
                                                                    Value.Integer 4,
                                                                    BinOp.Panic.shl (|
                                                                      M.rust_cast (M.read (| i |)),
                                                                      M.read (| bundlesize |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |);
                                                              BinOp.Panic.shl (|
                                                                Value.Integer 1,
                                                                M.read (| bundlesize |)
                                                              |)
                                                            ]
                                                          |);
                                                          M.read (| fd |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let s :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "core::slice::raw::from_raw_parts",
                                                      [ Ty.associated ]
                                                    |),
                                                    [
                                                      M.rust_cast
                                                        (M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              [ Ty.path "u8" ],
                                                            "as_ptr",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::deref::Deref",
                                                                Ty.path "memmap::Mmap",
                                                                [],
                                                                "deref",
                                                                []
                                                              |),
                                                              [ mmap ]
                                                            |)
                                                          ]
                                                        |));
                                                      BinOp.Panic.shl (|
                                                        Value.Integer 1,
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| params |),
                                                            "halo2_proofs::poly::commitment::Params",
                                                            "k"
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let s2 :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.associated;
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "new",
                                                      []
                                                    |),
                                                    []
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.associated;
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "extend_from_slice",
                                                      []
                                                    |),
                                                    [ s2; M.read (| s |) ]
                                                  |)
                                                |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  [ M.read (| s2 |) ]
                                                |)
                                              |)
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      ]
                    |)
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| advice |) ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_fetch_witness :
      forall (C : Ty.t),
      M.IsAssociatedFunction (Self C) "fetch_witness" (fetch_witness C).
  End Impl_halo2_proofs_helpers_AssignWitnessCollection_C.
  
  (*
  Enum AssignedCode
  {
    ty_params := [];
    variants :=
      [
        {
          name := "Zero";
          item := StructTuple [];
          discriminant := Some 0;
        };
        {
          name := "Trivial";
          item := StructTuple [];
          discriminant := None;
        };
        {
          name := "Rational";
          item := StructTuple [];
          discriminant := None;
        }
      ];
  }
  *)
  
  Definition _IMPL_NUM_FromPrimitive_FOR_AssignedCode : Value.t :=
    M.run ltac:(M.monadic (M.alloc (| Value.Tuple [] |))).
  
  Module _IMPL_NUM_FromPrimitive_FOR_AssignedCode.
    Module Impl_num_traits_cast_FromPrimitive_for_halo2_proofs_helpers_AssignedCode.
      Definition Self : Ty.t := Ty.path "halo2_proofs::helpers::AssignedCode".
      
      (* FromPrimitive *)
      Definition from_i64 (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ n ] =>
          ltac:(M.monadic
            (let n := M.alloc (| n |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            BinOp.Pure.eq
                              (M.read (| n |))
                              (M.rust_cast
                                (BinOp.Panic.add (|
                                  Integer.Isize,
                                  M.get_constant (|
                                    "halo2_proofs::helpers::AssignedCode::Zero_discriminant"
                                  |),
                                  Value.Integer 0
                                |)))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "core::option::Option::Some"
                          [ Value.StructTuple "halo2_proofs::helpers::AssignedCode::Zero" [] ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    BinOp.Pure.eq
                                      (M.read (| n |))
                                      (M.rust_cast
                                        (BinOp.Panic.add (|
                                          Integer.Isize,
                                          M.get_constant (|
                                            "halo2_proofs::helpers::AssignedCode::Zero_discriminant"
                                          |),
                                          Value.Integer 1
                                        |)))
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (|
                                Value.StructTuple
                                  "core::option::Option::Some"
                                  [
                                    Value.StructTuple
                                      "halo2_proofs::helpers::AssignedCode::Trivial"
                                      []
                                  ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            BinOp.Pure.eq
                                              (M.read (| n |))
                                              (M.rust_cast
                                                (BinOp.Panic.add (|
                                                  Integer.Isize,
                                                  M.get_constant (|
                                                    "halo2_proofs::helpers::AssignedCode::Zero_discriminant"
                                                  |),
                                                  Value.Integer 2
                                                |)))
                                          |)) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        Value.StructTuple
                                          "core::option::Option::Some"
                                          [
                                            Value.StructTuple
                                              "halo2_proofs::helpers::AssignedCode::Rational"
                                              []
                                          ]
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.alloc (|
                                        Value.StructTuple "core::option::Option::None" []
                                      |)))
                                ]
                              |)))
                        ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      (* FromPrimitive *)
      Definition from_u64 (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ n ] =>
          ltac:(M.monadic
            (let n := M.alloc (| n |) in
            M.call_closure (|
              M.get_trait_method (|
                "num_traits::cast::FromPrimitive",
                Ty.path "halo2_proofs::helpers::AssignedCode",
                [],
                "from_i64",
                []
              |),
              [ M.rust_cast (M.read (| n |)) ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "num_traits::cast::FromPrimitive"
          Self
          (* Trait polymorphic types *) []
          (* Instance *)
          [ ("from_i64", InstanceField.Method from_i64); ("from_u64", InstanceField.Method from_u64)
          ].
    End Impl_num_traits_cast_FromPrimitive_for_halo2_proofs_helpers_AssignedCode.
  End _IMPL_NUM_FromPrimitive_FOR_AssignedCode.
  
  (*
  fn assigned_code<F: FieldExt>(e: &Assigned<F>) -> AssignedCode {
      match e {
          Assigned::Zero => AssignedCode::Zero,
          Assigned::Trivial(_) => AssignedCode::Trivial,
          Assigned::Rational(_, _) => AssignedCode::Rational,
      }
  }
  *)
  Definition assigned_code (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ F ], [ e ] =>
      ltac:(M.monadic
        (let e := M.alloc (| e |) in
        M.read (|
          M.match_operator (|
            e,
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  M.alloc (| Value.StructTuple "halo2_proofs::helpers::AssignedCode::Zero" [] |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "halo2_proofs::plonk::assigned::Assigned::Trivial",
                      0
                    |) in
                  M.alloc (|
                    Value.StructTuple "halo2_proofs::helpers::AssignedCode::Trivial" []
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (let γ := M.read (| γ |) in
                  let γ1_0 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "halo2_proofs::plonk::assigned::Assigned::Rational",
                      0
                    |) in
                  let γ1_1 :=
                    M.SubPointer.get_struct_tuple_field (|
                      γ,
                      "halo2_proofs::plonk::assigned::Assigned::Rational",
                      1
                    |) in
                  M.alloc (|
                    Value.StructTuple "halo2_proofs::helpers::AssignedCode::Rational" []
                  |)))
            ]
          |)
        |)))
    | _, _ => M.impossible
    end.
  
  Module Impl_halo2_proofs_helpers_Serializable_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_halo2_proofs_plonk_assigned_Assigned_F.
    Definition Self (F : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "halo2_proofs::plonk::assigned::Assigned") [ F ].
    
    (*
        fn fetch<R: io::Read>(reader: &mut R) -> io::Result<Assigned<F>> {
            let code = read_u32(reader)?;
            match num::FromPrimitive::from_u32(code).unwrap() {
                AssignedCode::Zero => Ok(Assigned::Zero),
                AssignedCode::Trivial => {
                    let scalar = F::read(reader)?;
                    Ok(Assigned::Trivial(scalar))
                }
                AssignedCode::Rational => {
                    let p = F::read(reader)?;
                    let q = F::read(reader)?;
                    Ok(Assigned::Rational(p, q))
                }
            }
        }
    *)
    Definition fetch (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [ R ], [ reader ] =>
        ltac:(M.monadic
          (let reader := M.alloc (| reader |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let code :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (| "halo2_proofs::helpers::read_u32", [ R ] |),
                              [ M.read (| reader |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                              [ F ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          [ Ty.path "halo2_proofs::helpers::AssignedCode" ],
                        "unwrap",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "num_traits::cast::FromPrimitive",
                            Ty.path "halo2_proofs::helpers::AssignedCode",
                            [],
                            "from_u32",
                            []
                          |),
                          [ M.read (| code |) ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [ Value.StructTuple "halo2_proofs::plonk::assigned::Assigned::Zero" [] ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let scalar :=
                          M.copy (|
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ F; Ty.path "std::io::error::Error" ],
                                    [],
                                    "branch",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "pairing_bn256::arithmetic::fields::BaseExt",
                                        F,
                                        [],
                                        "read",
                                        [ R ]
                                      |),
                                      [ M.read (| reader |) ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::assigned::Assigned")
                                                      [ F ];
                                                    Ty.path "std::io::error::Error"
                                                  ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path "std::io::error::Error"
                                                    ]
                                                ],
                                                "from_residual",
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [
                              Value.StructTuple
                                "halo2_proofs::plonk::assigned::Assigned::Trivial"
                                [ M.read (| scalar |) ]
                            ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let p :=
                          M.copy (|
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ F; Ty.path "std::io::error::Error" ],
                                    [],
                                    "branch",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "pairing_bn256::arithmetic::fields::BaseExt",
                                        F,
                                        [],
                                        "read",
                                        [ R ]
                                      |),
                                      [ M.read (| reader |) ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::assigned::Assigned")
                                                      [ F ];
                                                    Ty.path "std::io::error::Error"
                                                  ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path "std::io::error::Error"
                                                    ]
                                                ],
                                                "from_residual",
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |) in
                        let q :=
                          M.copy (|
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [ F; Ty.path "std::io::error::Error" ],
                                    [],
                                    "branch",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "pairing_bn256::arithmetic::fields::BaseExt",
                                        F,
                                        [],
                                        "read",
                                        [ R ]
                                      |),
                                      [ M.read (| reader |) ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::assigned::Assigned")
                                                      [ F ];
                                                    Ty.path "std::io::error::Error"
                                                  ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path "std::io::error::Error"
                                                    ]
                                                ],
                                                "from_residual",
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [
                              Value.StructTuple
                                "halo2_proofs::plonk::assigned::Assigned::Rational"
                                [ M.read (| p |); M.read (| q |) ]
                            ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
        fn store<W: io::Write>(&self, writer: &mut W) -> io::Result<()> {
            writer.write(&mut (assigned_code(self) as u32).to_le_bytes())?;
            match self {
                Assigned::Zero => Ok(()),
                Assigned::Trivial(f) => {
                    writer.write(&mut f.to_repr().as_ref())?;
                    Ok(())
                }
                Assigned::Rational(p, q) => {
                    writer.write(&mut p.to_repr().as_ref())?;
                    writer.write(&mut q.to_repr().as_ref())?;
                    Ok(())
                }
            }
        }
    *)
    Definition store (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self F in
      match τ, α with
      | [ W ], [ self; writer ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let writer := M.alloc (| writer |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                            [
                              M.read (| writer |);
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "u32",
                                      "to_le_bytes",
                                      []
                                    |),
                                    [
                                      M.rust_cast
                                        (M.call_closure (|
                                          M.get_function (|
                                            "halo2_proofs::helpers::assigned_code",
                                            [ F ]
                                          |),
                                          [ M.read (| self |) ]
                                        |))
                                    ]
                                  |)
                                |))
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.match_operator (|
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        M.alloc (|
                          Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "halo2_proofs::plonk::assigned::Assigned::Trivial",
                            0
                          |) in
                        let f := M.alloc (| γ1_0 |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                                    [
                                      M.read (| writer |);
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::AsRef",
                                          Ty.associated,
                                          [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ],
                                          "as_ref",
                                          []
                                        |),
                                        [
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "ff::PrimeField",
                                                F,
                                                [],
                                                "to_repr",
                                                []
                                              |),
                                              [ M.read (| f |) ]
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        M.alloc (|
                          Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "halo2_proofs::plonk::assigned::Assigned::Rational",
                            0
                          |) in
                        let γ1_1 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "halo2_proofs::plonk::assigned::Assigned::Rational",
                            1
                          |) in
                        let p := M.alloc (| γ1_0 |) in
                        let q := M.alloc (| γ1_1 |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                                    [
                                      M.read (| writer |);
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::AsRef",
                                          Ty.associated,
                                          [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ],
                                          "as_ref",
                                          []
                                        |),
                                        [
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "ff::PrimeField",
                                                F,
                                                [],
                                                "to_repr",
                                                []
                                              |),
                                              [ M.read (| p |) ]
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (| "std::io::Write", W, [], "write", [] |),
                                    [
                                      M.read (| writer |);
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::convert::AsRef",
                                          Ty.associated,
                                          [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ],
                                          "as_ref",
                                          []
                                        |),
                                        [
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "ff::PrimeField",
                                                F,
                                                [],
                                                "to_repr",
                                                []
                                              |),
                                              [ M.read (| q |) ]
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        M.alloc (|
                          Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (F : Ty.t),
      M.IsTraitInstance
        "halo2_proofs::helpers::Serializable"
        (Self F)
        (* Trait polymorphic types *) []
        (* Instance *)
        [ ("fetch", InstanceField.Method (fetch F)); ("store", InstanceField.Method (store F)) ].
  End Impl_halo2_proofs_helpers_Serializable_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_halo2_proofs_plonk_assigned_Assigned_F.
  
  (*
  pub fn store_pk_info<C: CurveAffine, ConcreteCircuit>(
      params: &Params<C>,
      vk: &VerifyingKey<C>,
      circuit: &ConcreteCircuit,
      //writer: &mut W,
      fd: &mut File,
  ) -> io::Result<()>
  where
      ConcreteCircuit: Circuit<C::Scalar>,
  {
      use ark_std::{end_timer, start_timer};
      let timer = start_timer!(|| "test generate_pk_info ...");
      let (fixed, permutation) = generate_pk_info(params, vk, circuit).unwrap();
      end_timer!(timer);
      let timer = start_timer!(|| "test store fixed ...");
      fixed.store(fd)?;
      end_timer!(timer);
      let timer = start_timer!(|| "test store permutation ...");
      permutation.vec_store(fd)?;
      end_timer!(timer);
      Ok(())
  }
  *)
  Definition store_pk_info (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ C; ConcreteCircuit ], [ params; vk; circuit; fd ] =>
      ltac:(M.monadic
        (let params := M.alloc (| params |) in
        let vk := M.alloc (| vk |) in
        let circuit := M.alloc (| circuit |) in
        let fd := M.alloc (| fd |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let timer :=
                M.alloc (| Value.StructTuple "ark_std::perf_trace::inner::TimerInfo" [] |) in
              M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                    [ Ty.associated; Ty.path "halo2_proofs::poly::LagrangeCoeff" ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "halo2_proofs::plonk::permutation::keygen::Assembly"
                            ];
                          Ty.path "halo2_proofs::plonk::error::Error"
                        ],
                      "unwrap",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_function (|
                          "halo2_proofs::plonk::keygen::generate_pk_info",
                          [ C; ConcreteCircuit ]
                        |),
                        [ M.read (| params |); M.read (| vk |); M.read (| circuit |) ]
                      |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let fixed := M.copy (| γ0_0 |) in
                      let permutation := M.copy (| γ0_1 |) in
                      M.match_operator (|
                        timer,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let timer :=
                                M.alloc (|
                                  Value.StructTuple "ark_std::perf_trace::inner::TimerInfo" []
                                |) in
                              let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "halo2_proofs::helpers::Serializable",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            "store",
                                            [ Ty.path "std::fs::File" ]
                                          |),
                                          [ fixed; M.read (| fd |) ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [ Ty.tuple []; Ty.path "std::io::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path "std::io::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |) in
                              M.match_operator (|
                                timer,
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let timer :=
                                        M.alloc (|
                                          Value.StructTuple
                                            "ark_std::perf_trace::inner::TimerInfo"
                                            []
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::Try",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                                [],
                                                "branch",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "halo2_proofs::helpers::ParaSerializable",
                                                    Ty.path
                                                      "halo2_proofs::plonk::permutation::keygen::Assembly",
                                                    [],
                                                    "vec_store",
                                                    []
                                                  |),
                                                  [ permutation; M.read (| fd |) ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Break",
                                                    0
                                                  |) in
                                                let residual := M.copy (| γ0_0 |) in
                                                M.alloc (|
                                                  M.never_to_any (|
                                                    M.read (|
                                                      M.return_ (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::try_trait::FromResidual",
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.tuple [];
                                                                Ty.path "std::io::error::Error"
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.path
                                                                    "core::convert::Infallible";
                                                                  Ty.path "std::io::error::Error"
                                                                ]
                                                            ],
                                                            "from_residual",
                                                            []
                                                          |),
                                                          [ M.read (| residual |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::ops::control_flow::ControlFlow::Continue",
                                                    0
                                                  |) in
                                                let val := M.copy (| γ0_0 |) in
                                                val))
                                          ]
                                        |) in
                                      M.match_operator (|
                                        timer,
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                Value.StructTuple
                                                  "core::result::Result::Ok"
                                                  [ Value.Tuple [] ]
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)))
                        ]
                      |)))
                ]
              |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
  
  (*
  pub fn fetch_pk_info<C: CurveAffine>(
      params: &Params<C>,
      vk: &VerifyingKey<C>,
      reader: &mut File,
  ) -> io::Result<ProvingKey<C>> {
      use ark_std::{end_timer, start_timer};
      let timer = start_timer!(|| "test fetch fixed...");
      let fixed = Vec::fetch(reader)?;
      end_timer!(timer);
      let timer = start_timer!(|| "test fetch permutation ...");
      let permutation = Assembly::vec_fetch(reader)?;
      end_timer!(timer);
      let pkey = keygen_pk_from_info(params, vk, fixed, permutation).unwrap();
      Ok(pkey)
  }
  *)
  Definition fetch_pk_info (τ : list Ty.t) (α : list Value.t) : M :=
    match τ, α with
    | [ C ], [ params; vk; reader ] =>
      ltac:(M.monadic
        (let params := M.alloc (| params |) in
        let vk := M.alloc (| vk |) in
        let reader := M.alloc (| reader |) in
        M.catch_return (|
          ltac:(M.monadic
            (M.read (|
              let timer :=
                M.alloc (| Value.StructTuple "ark_std::perf_trace::inner::TimerInfo" [] |) in
              let fixed :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                    [ Ty.associated; Ty.path "halo2_proofs::poly::LagrangeCoeff" ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "std::io::error::Error"
                            ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "halo2_proofs::helpers::Serializable",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                    [ Ty.associated; Ty.path "halo2_proofs::poly::LagrangeCoeff" ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              "fetch",
                              [ Ty.path "std::fs::File" ]
                            |),
                            [ M.read (| reader |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::ProvingKey")
                                            [ C ];
                                          Ty.path "std::io::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |)
                |) in
              M.match_operator (|
                timer,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let timer :=
                        M.alloc (|
                          Value.StructTuple "ark_std::perf_trace::inner::TimerInfo" []
                        |) in
                      let permutation :=
                        M.copy (|
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.path "halo2_proofs::plonk::permutation::keygen::Assembly";
                                      Ty.path "std::io::error::Error"
                                    ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "halo2_proofs::helpers::ParaSerializable",
                                      Ty.path "halo2_proofs::plonk::permutation::keygen::Assembly",
                                      [],
                                      "vec_fetch",
                                      []
                                    |),
                                    [ M.read (| reader |) ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::plonk::ProvingKey")
                                                    [ C ];
                                                  Ty.path "std::io::error::Error"
                                                ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "std::io::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |)
                        |) in
                      M.match_operator (|
                        timer,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let pkey :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::ProvingKey")
                                            [ C ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ],
                                      "unwrap",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_function (|
                                          "halo2_proofs::plonk::keygen::keygen_pk_from_info",
                                          [ C ]
                                        |),
                                        [
                                          M.read (| params |);
                                          M.read (| vk |);
                                          M.read (| fixed |);
                                          M.read (| permutation |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |) in
                              M.alloc (|
                                Value.StructTuple "core::result::Result::Ok" [ M.read (| pkey |) ]
                              |)))
                        ]
                      |)))
                ]
              |)
            |)))
        |)))
    | _, _ => M.impossible
    end.
End helpers.
