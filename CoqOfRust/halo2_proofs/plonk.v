(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module plonk.
  (* StructRecord
    {
      name := "VerifyingKey";
      ty_params := [ "C" ];
      fields :=
        [
          ("domain",
            Ty.apply (Ty.path "halo2_proofs::poly::domain::EvaluationDomain") [ Ty.associated ]);
          ("fixed_commitments",
            Ty.apply (Ty.path "alloc::vec::Vec") [ C; Ty.path "alloc::alloc::Global" ]);
          ("permutation",
            Ty.apply (Ty.path "halo2_proofs::plonk::permutation::VerifyingKey") [ C ]);
          ("cs",
            Ty.apply (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem") [ Ty.associated ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_plonk_VerifyingKey_C.
    Definition Self (C : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "halo2_proofs::plonk::VerifyingKey") [ C ].
    
    (* Debug *)
    Definition fmt (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field4_finish",
              []
            |),
            [
              M.read (| f |);
              M.read (| Value.String "VerifyingKey" |);
              M.read (| Value.String "domain" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::plonk::VerifyingKey",
                  "domain"
                |));
              M.read (| Value.String "fixed_commitments" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::plonk::VerifyingKey",
                  "fixed_commitments"
                |));
              M.read (| Value.String "permutation" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::plonk::VerifyingKey",
                  "permutation"
                |));
              M.read (| Value.String "cs" |);
              (* Unsize *)
              M.pointer_coercion
                (M.alloc (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::plonk::VerifyingKey",
                    "cs"
                  |)
                |))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (C : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (Self C)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method (fmt C)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_plonk_VerifyingKey_C.
  
  Module Impl_core_clone_Clone_where_core_clone_Clone_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_for_halo2_proofs_plonk_VerifyingKey_C.
    Definition Self (C : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "halo2_proofs::plonk::VerifyingKey") [ C ].
    
    (* Clone *)
    Definition clone (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "halo2_proofs::plonk::VerifyingKey"
            [
              ("domain",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                      [ Ty.associated ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::VerifyingKey",
                      "domain"
                    |)
                  ]
                |));
              ("fixed_commitments",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "alloc::vec::Vec") [ C; Ty.path "alloc::alloc::Global" ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::VerifyingKey",
                      "fixed_commitments"
                    |)
                  ]
                |));
              ("permutation",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "halo2_proofs::plonk::permutation::VerifyingKey") [ C ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::VerifyingKey",
                      "permutation"
                    |)
                  ]
                |));
              ("cs",
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                      [ Ty.associated ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::VerifyingKey",
                      "cs"
                    |)
                  ]
                |))
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (C : Ty.t),
      M.IsTraitInstance
        "core::clone::Clone"
        (Self C)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method (clone C)) ].
  End Impl_core_clone_Clone_where_core_clone_Clone_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_for_halo2_proofs_plonk_VerifyingKey_C.
  
  Module Impl_halo2_proofs_plonk_VerifyingKey_C.
    Definition Self (C : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "halo2_proofs::plonk::VerifyingKey") [ C ].
    
    (*
        pub fn write<W: io::Write>(&self, writer: &mut W) -> io::Result<()> {
            for commitment in &self.fixed_commitments {
                writer.write_all(commitment.to_bytes().as_ref())?;
            }
            self.permutation.write(writer)?;
    
            Ok(())
        }
    *)
    Definition write (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [ W ], [ self; writer ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let writer := M.alloc (| writer |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "&")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ C; Ty.path "alloc::alloc::Global" ]
                              ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::VerifyingKey",
                              "fixed_commitments"
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply (Ty.path "core::slice::iter::Iter") [ C ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let commitment := M.copy (| γ0_0 |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [ Ty.tuple []; Ty.path "std::io::error::Error"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "std::io::Write",
                                                        W,
                                                        [],
                                                        "write_all",
                                                        []
                                                      |),
                                                      [
                                                        M.read (| writer |);
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::convert::AsRef",
                                                            Ty.associated,
                                                            [
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                [ Ty.path "u8" ]
                                                            ],
                                                            "as_ref",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "group::GroupEncoding",
                                                                  C,
                                                                  [],
                                                                  "to_bytes",
                                                                  []
                                                                |),
                                                                [ M.read (| commitment |) ]
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.tuple [];
                                                                    Ty.path "std::io::error::Error"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "std::io::error::Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::permutation::VerifyingKey")
                                [ C ],
                              "write",
                              [ W ]
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::plonk::VerifyingKey",
                                "permutation"
                              |);
                              M.read (| writer |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_write :
      forall (C : Ty.t),
      M.IsAssociatedFunction (Self C) "write" (write C).
    
    (*
        pub fn read<R: io::Read, ConcreteCircuit: Circuit<C::Scalar>>(
            reader: &mut R,
            params: &Params<C>,
        ) -> io::Result<Self> {
            let (domain, cs, _) = keygen::create_domain::<C, ConcreteCircuit>(params);
    
            let fixed_commitments: Vec<_> = (0..cs.num_fixed_columns)
                .map(|_| C::read(reader))
                .collect::<Result<_, _>>()?;
    
            let permutation = permutation::VerifyingKey::read(reader, &cs.permutation)?;
    
            Ok(VerifyingKey {
                domain,
                fixed_commitments,
                permutation,
                cs,
            })
        }
    *)
    Definition read (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [ R; ConcreteCircuit ], [ reader; params ] =>
        ltac:(M.monadic
          (let reader := M.alloc (| reader |) in
          let params := M.alloc (| params |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "halo2_proofs::plonk::keygen::create_domain",
                        [ C; ConcreteCircuit ]
                      |),
                      [ M.read (| params |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                        let domain := M.copy (| γ0_0 |) in
                        let cs := M.copy (| γ0_1 |) in
                        let fixed_commitments :=
                          M.copy (|
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ C; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "std::io::error::Error"
                                      ],
                                    [],
                                    "branch",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::map::Map")
                                          [
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              [ Ty.path "usize" ];
                                            Ty.function
                                              [ Ty.tuple [ Ty.path "usize" ] ]
                                              (Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ C; Ty.path "std::io::error::Error" ])
                                          ],
                                        [],
                                        "collect",
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [ C; Ty.path "alloc::alloc::Global" ];
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              [ Ty.path "usize" ],
                                            [],
                                            "map",
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ C; Ty.path "std::io::error::Error" ];
                                              Ty.function
                                                [ Ty.tuple [ Ty.path "usize" ] ]
                                                (Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [ C; Ty.path "std::io::error::Error" ])
                                            ]
                                          |),
                                          [
                                            Value.StructRecord
                                              "core::ops::range::Range"
                                              [
                                                ("start", Value.Integer 0);
                                                ("end_",
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      cs,
                                                      "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                      "num_fixed_columns"
                                                    |)
                                                  |))
                                              ];
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.call_closure (|
                                                              M.get_trait_method (|
                                                                "halo2_proofs::helpers::CurveRead",
                                                                C,
                                                                [],
                                                                "read",
                                                                [ R ]
                                                              |),
                                                              [ M.read (| reader |) ]
                                                            |)))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::plonk::VerifyingKey")
                                                      [ C ];
                                                    Ty.path "std::io::error::Error"
                                                  ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path "std::io::error::Error"
                                                    ]
                                                ],
                                                "from_residual",
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |) in
                        let permutation :=
                          M.copy (|
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::permutation::VerifyingKey")
                                          [ C ];
                                        Ty.path "std::io::error::Error"
                                      ],
                                    [],
                                    "branch",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::permutation::VerifyingKey")
                                          [ C ],
                                        "read",
                                        [ R ]
                                      |),
                                      [
                                        M.read (| reader |);
                                        M.SubPointer.get_struct_record_field (|
                                          cs,
                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                          "permutation"
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual := M.copy (| γ0_0 |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::try_trait::FromResidual",
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::plonk::VerifyingKey")
                                                      [ C ];
                                                    Ty.path "std::io::error::Error"
                                                  ],
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.path "core::convert::Infallible";
                                                      Ty.path "std::io::error::Error"
                                                    ]
                                                ],
                                                "from_residual",
                                                []
                                              |),
                                              [ M.read (| residual |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val := M.copy (| γ0_0 |) in
                                    val))
                              ]
                            |)
                          |) in
                        M.alloc (|
                          Value.StructTuple
                            "core::result::Result::Ok"
                            [
                              Value.StructRecord
                                "halo2_proofs::plonk::VerifyingKey"
                                [
                                  ("domain", M.read (| domain |));
                                  ("fixed_commitments", M.read (| fixed_commitments |));
                                  ("permutation", M.read (| permutation |));
                                  ("cs", M.read (| cs |))
                                ]
                            ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_read :
      forall (C : Ty.t),
      M.IsAssociatedFunction (Self C) "read" (read C).
    
    (*
        pub fn hash_into<E: EncodedChallenge<C>, T: Transcript<C, E>>(
            &self,
            transcript: &mut T,
        ) -> io::Result<()> {
            let mut hasher = Blake2bParams::new()
                .hash_length(64)
                .personal(b"Halo2-Verify-Key")
                .to_state();
    
            let s = format!("{:?}", self.pinned());
    
            hasher.update(&(s.len() as u64).to_le_bytes());
            hasher.update(s.as_bytes());
    
            // Hash in final Blake2bState
            transcript.common_scalar(C::Scalar::from_bytes_wide(hasher.finalize().as_array()))?;
    
            Ok(())
        }
    *)
    Definition hash_into (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [ E; T ], [ self; transcript ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let transcript := M.alloc (| transcript |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let hasher :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "blake2b_simd::Params",
                        "to_state",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "blake2b_simd::Params",
                            "personal",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "blake2b_simd::Params",
                                "hash_length",
                                []
                              |),
                              [
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "blake2b_simd::Params",
                                      "new",
                                      []
                                    |),
                                    []
                                  |)
                                |);
                                Value.Integer 64
                              ]
                            |);
                            (* Unsize *) M.pointer_coercion (M.read (| UnsupportedLiteral |))
                          ]
                        |)
                      ]
                    |)
                  |) in
                let s :=
                  M.copy (|
                    let res :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (| "alloc::fmt::format", [] |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                []
                              |),
                              [
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (| Value.Array [ M.read (| Value.String "" |) ] |));
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::PinnedVerificationKey")
                                                [ C ]
                                            ]
                                          |),
                                          [
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::plonk::VerifyingKey")
                                                    [ C ],
                                                  "pinned",
                                                  []
                                                |),
                                                [ M.read (| self |) ]
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |) in
                    res
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (| Ty.path "blake2b_simd::State", "update", [] |),
                      [
                        hasher;
                        (* Unsize *)
                        M.pointer_coercion
                          (M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (| Ty.path "u64", "to_le_bytes", [] |),
                              [
                                M.rust_cast
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "alloc::string::String",
                                      "len",
                                      []
                                    |),
                                    [ s ]
                                  |))
                              ]
                            |)
                          |))
                      ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (| Ty.path "blake2b_simd::State", "update", [] |),
                      [
                        hasher;
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "alloc::string::String",
                            "as_bytes",
                            []
                          |),
                          [ s ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "halo2_proofs::transcript::Transcript",
                              T,
                              [ C; E ],
                              "common_scalar",
                              []
                            |),
                            [
                              M.read (| transcript |);
                              M.call_closure (|
                                M.get_trait_method (|
                                  "pairing_bn256::arithmetic::fields::BaseExt",
                                  Ty.associated,
                                  [],
                                  "from_bytes_wide",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "blake2b_simd::Hash",
                                      "as_array",
                                      []
                                    |),
                                    [
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "blake2b_simd::State",
                                            "finalize",
                                            []
                                          |),
                                          [ hasher ]
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_hash_into :
      forall (C : Ty.t),
      M.IsAssociatedFunction (Self C) "hash_into" (hash_into C).
    
    (*
        pub fn pinned(&self) -> PinnedVerificationKey<'_, C> {
            PinnedVerificationKey {
                base_modulus: C::Base::MODULUS,
                scalar_modulus: C::Scalar::MODULUS,
                domain: self.domain.pinned(),
                fixed_commitments: &self.fixed_commitments,
                permutation: &self.permutation,
                cs: self.cs.pinned(),
            }
        }
    *)
    Definition pinned (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          Value.StructRecord
            "halo2_proofs::plonk::PinnedVerificationKey"
            [
              ("base_modulus",
                M.read (|
                  M.get_constant (| "pairing_bn256::arithmetic::fields::BaseExt::MODULUS" |)
                |));
              ("scalar_modulus",
                M.read (|
                  M.get_constant (| "pairing_bn256::arithmetic::fields::BaseExt::MODULUS" |)
                |));
              ("domain",
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                      [ Ty.associated ],
                    "pinned",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::VerifyingKey",
                      "domain"
                    |)
                  ]
                |));
              ("fixed_commitments",
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::plonk::VerifyingKey",
                  "fixed_commitments"
                |));
              ("permutation",
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::plonk::VerifyingKey",
                  "permutation"
                |));
              ("cs",
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                      [ Ty.associated ],
                    "pinned",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::VerifyingKey",
                      "cs"
                    |)
                  ]
                |))
            ]))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_pinned :
      forall (C : Ty.t),
      M.IsAssociatedFunction (Self C) "pinned" (pinned C).
    (*
        pub fn get_domain(&self) -> &EvaluationDomain<C::Scalar> {
            &self.domain
        }
    *)
    Definition get_domain (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.SubPointer.get_struct_record_field (|
            M.read (| self |),
            "halo2_proofs::plonk::VerifyingKey",
            "domain"
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_get_domain :
      forall (C : Ty.t),
      M.IsAssociatedFunction (Self C) "get_domain" (get_domain C).
  End Impl_halo2_proofs_plonk_VerifyingKey_C.
  
  (* StructRecord
    {
      name := "CircuitData";
      ty_params := [ "C" ];
      fields :=
        [
          ("vkey", Ty.apply (Ty.path "halo2_proofs::plonk::VerifyingKey") [ C ]);
          ("fixed",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply
                  (Ty.path "halo2_proofs::poly::Polynomial")
                  [ Ty.associated; Ty.path "halo2_proofs::poly::LagrangeCoeff" ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("permutation", Ty.path "halo2_proofs::plonk::permutation::keygen::Assembly")
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_for_halo2_proofs_plonk_CircuitData_C.
    Definition Self (C : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "halo2_proofs::plonk::CircuitData") [ C ].
    
    (* Debug *)
    Definition fmt (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.path "core::fmt::Formatter",
              "debug_struct_field3_finish",
              []
            |),
            [
              M.read (| f |);
              M.read (| Value.String "CircuitData" |);
              M.read (| Value.String "vkey" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::plonk::CircuitData",
                  "vkey"
                |));
              M.read (| Value.String "fixed" |);
              (* Unsize *)
              M.pointer_coercion
                (M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::plonk::CircuitData",
                  "fixed"
                |));
              M.read (| Value.String "permutation" |);
              (* Unsize *)
              M.pointer_coercion
                (M.alloc (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::plonk::CircuitData",
                    "permutation"
                  |)
                |))
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (C : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (Self C)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method (fmt C)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_for_halo2_proofs_plonk_CircuitData_C.
  
  Module Impl_halo2_proofs_plonk_CircuitData_C.
    Definition Self (C : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "halo2_proofs::plonk::CircuitData") [ C ].
    
    (*
        pub fn new<ConcreteCircuit: Circuit<C::Scalar>>(
            params: &Params<C>,
            vkey: VerifyingKey<C>,
            circuit: &ConcreteCircuit,
        ) -> io::Result<Self> {
            let (fixed, permutation) = generate_pk_info(params, &vkey, circuit).unwrap();
    
            Ok(CircuitData {
                vkey,
                fixed,
                permutation,
            })
        }
    *)
    Definition new (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [ ConcreteCircuit ], [ params; vkey; circuit ] =>
        ltac:(M.monadic
          (let params := M.alloc (| params |) in
          let vkey := M.alloc (| vkey |) in
          let circuit := M.alloc (| circuit |) in
          M.read (|
            M.match_operator (|
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                  [ Ty.associated; Ty.path "halo2_proofs::poly::LagrangeCoeff" ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "halo2_proofs::plonk::permutation::keygen::Assembly"
                          ];
                        Ty.path "halo2_proofs::plonk::error::Error"
                      ],
                    "unwrap",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_function (|
                        "halo2_proofs::plonk::keygen::generate_pk_info",
                        [ C; ConcreteCircuit ]
                      |),
                      [ M.read (| params |); vkey; M.read (| circuit |) ]
                    |)
                  ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let fixed := M.copy (| γ0_0 |) in
                    let permutation := M.copy (| γ0_1 |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructRecord
                            "halo2_proofs::plonk::CircuitData"
                            [
                              ("vkey", M.read (| vkey |));
                              ("fixed", M.read (| fixed |));
                              ("permutation", M.read (| permutation |))
                            ]
                        ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_new : forall (C : Ty.t), M.IsAssociatedFunction (Self C) "new" (new C).
    
    (*
        pub fn read_vkey(reader: &mut File) -> io::Result<VerifyingKey<C>> {
            let j = read_u32(reader)?;
            let k = read_u32(reader)?;
            let domain: EvaluationDomain<C::Scalar> = EvaluationDomain::new(j, k);
            let cs = read_cs::<C, _>(reader)?;
    
            let fixed_commitments: Vec<_> = (0..cs.num_fixed_columns)
                .map(|_| C::read(reader))
                .collect::<Result<_, _>>()?;
    
            let permutation = permutation::VerifyingKey::read(reader, &cs.permutation)?;
    
            Ok(VerifyingKey {
                domain,
                cs,
                fixed_commitments,
                permutation,
            })
        }
    *)
    Definition read_vkey (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ reader ] =>
        ltac:(M.monadic
          (let reader := M.alloc (| reader |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let j :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (|
                                "halo2_proofs::helpers::read_u32",
                                [ Ty.path "std::fs::File" ]
                              |),
                              [ M.read (| reader |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::VerifyingKey")
                                              [ C ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let k :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.path "u32"; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (|
                                "halo2_proofs::helpers::read_u32",
                                [ Ty.path "std::fs::File" ]
                              |),
                              [ M.read (| reader |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::VerifyingKey")
                                              [ C ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let domain :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                          [ Ty.associated ],
                        "new",
                        []
                      |),
                      [ M.read (| j |); M.read (| k |) ]
                    |)
                  |) in
                let cs :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                                  [ Ty.associated ];
                                Ty.path "std::io::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (|
                                "halo2_proofs::helpers::read_cs",
                                [ C; Ty.path "std::fs::File" ]
                              |),
                              [ M.read (| reader |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::VerifyingKey")
                                              [ C ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let fixed_commitments :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ C; Ty.path "alloc::alloc::Global" ];
                                Ty.path "std::io::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [ Ty.path "usize" ];
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ C; Ty.path "std::io::error::Error" ])
                                  ],
                                [],
                                "collect",
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ C; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "std::io::error::Error"
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [ Ty.path "usize" ],
                                    [],
                                    "map",
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ C; Ty.path "std::io::error::Error" ];
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "usize" ] ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ C; Ty.path "std::io::error::Error" ])
                                    ]
                                  |),
                                  [
                                    Value.StructRecord
                                      "core::ops::range::Range"
                                      [
                                        ("start", Value.Integer 0);
                                        ("end_",
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              cs,
                                              "halo2_proofs::plonk::circuit::ConstraintSystem",
                                              "num_fixed_columns"
                                            |)
                                          |))
                                      ];
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.call_closure (|
                                                      M.get_trait_method (|
                                                        "halo2_proofs::helpers::CurveRead",
                                                        C,
                                                        [],
                                                        "read",
                                                        [ Ty.path "std::fs::File" ]
                                                      |),
                                                      [ M.read (| reader |) ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::VerifyingKey")
                                              [ C ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let permutation :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::permutation::VerifyingKey")
                                  [ C ];
                                Ty.path "std::io::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::permutation::VerifyingKey")
                                  [ C ],
                                "read",
                                [ Ty.path "std::fs::File" ]
                              |),
                              [
                                M.read (| reader |);
                                M.SubPointer.get_struct_record_field (|
                                  cs,
                                  "halo2_proofs::plonk::circuit::ConstraintSystem",
                                  "permutation"
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::VerifyingKey")
                                              [ C ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      Value.StructRecord
                        "halo2_proofs::plonk::VerifyingKey"
                        [
                          ("domain", M.read (| domain |));
                          ("cs", M.read (| cs |));
                          ("fixed_commitments", M.read (| fixed_commitments |));
                          ("permutation", M.read (| permutation |))
                        ]
                    ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_read_vkey :
      forall (C : Ty.t),
      M.IsAssociatedFunction (Self C) "read_vkey" (read_vkey C).
    
    (*
        pub fn read(reader: &mut File) -> io::Result<Self> {
            let vkey = Self::read_vkey(reader)?;
    
            let fixed = Vec::fetch(reader)?;
            let permutation = Assembly::vec_fetch(reader)?;
    
            Ok(CircuitData {
                vkey,
                fixed,
                permutation,
            })
        }
    *)
    Definition read (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ reader ] =>
        ltac:(M.monadic
          (let reader := M.alloc (| reader |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let vkey :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply (Ty.path "halo2_proofs::plonk::VerifyingKey") [ C ];
                                Ty.path "std::io::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply (Ty.path "halo2_proofs::plonk::CircuitData") [ C ],
                                "read_vkey",
                                []
                              |),
                              [ M.read (| reader |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::CircuitData")
                                              [ C ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let fixed :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                      [ Ty.associated; Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "std::io::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "halo2_proofs::helpers::Serializable",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                      [ Ty.associated; Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "fetch",
                                [ Ty.path "std::fs::File" ]
                              |),
                              [ M.read (| reader |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::CircuitData")
                                              [ C ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let permutation :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.path "halo2_proofs::plonk::permutation::keygen::Assembly";
                                Ty.path "std::io::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "halo2_proofs::helpers::ParaSerializable",
                                Ty.path "halo2_proofs::plonk::permutation::keygen::Assembly",
                                [],
                                "vec_fetch",
                                []
                              |),
                              [ M.read (| reader |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::CircuitData")
                                              [ C ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      Value.StructRecord
                        "halo2_proofs::plonk::CircuitData"
                        [
                          ("vkey", M.read (| vkey |));
                          ("fixed", M.read (| fixed |));
                          ("permutation", M.read (| permutation |))
                        ]
                    ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_read :
      forall (C : Ty.t),
      M.IsAssociatedFunction (Self C) "read" (read C).
    
    (*
        pub fn write(&self, fd: &mut File) -> io::Result<()> {
            use std::io::Write;
    
            let j = (self.vkey.domain.get_quotient_poly_degree() + 1) as u32; // quotient_poly_degree is j-1
            let k = self.vkey.domain.k() as u32;
            fd.write(&mut j.to_le_bytes())?;
            fd.write(&mut k.to_le_bytes())?;
            write_cs::<C, _>(&self.vkey.cs, fd)?;
    
            self.vkey.write(fd)?;
    
            self.fixed.store(fd)?;
            self.permutation.vec_store(fd)?;
    
            Ok(())
        }
    *)
    Definition write (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self; fd ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let fd := M.alloc (| fd |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let j :=
                  M.alloc (|
                    M.rust_cast
                      (BinOp.Panic.add (|
                        Integer.Usize,
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                              [ Ty.associated ],
                            "get_quotient_poly_degree",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::plonk::CircuitData",
                                "vkey"
                              |),
                              "halo2_proofs::plonk::VerifyingKey",
                              "domain"
                            |)
                          ]
                        |),
                        Value.Integer 1
                      |))
                  |) in
                let k :=
                  M.copy (|
                    M.use
                      (M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                              [ Ty.associated ],
                            "k",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::plonk::CircuitData",
                                "vkey"
                              |),
                              "halo2_proofs::plonk::VerifyingKey",
                              "domain"
                            |)
                          ]
                        |)
                      |))
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "std::io::Write",
                              Ty.path "std::fs::File",
                              [],
                              "write",
                              []
                            |),
                            [
                              M.read (| fd |);
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "u32",
                                      "to_le_bytes",
                                      []
                                    |),
                                    [ M.read (| j |) ]
                                  |)
                                |))
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.path "usize"; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "std::io::Write",
                              Ty.path "std::fs::File",
                              [],
                              "write",
                              []
                            |),
                            [
                              M.read (| fd |);
                              (* Unsize *)
                              M.pointer_coercion
                                (M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "u32",
                                      "to_le_bytes",
                                      []
                                    |),
                                    [ M.read (| k |) ]
                                  |)
                                |))
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_function (|
                              "halo2_proofs::helpers::write_cs",
                              [ C; Ty.path "std::fs::File" ]
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::plonk::CircuitData",
                                  "vkey"
                                |),
                                "halo2_proofs::plonk::VerifyingKey",
                                "cs"
                              |);
                              M.read (| fd |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "halo2_proofs::plonk::VerifyingKey") [ C ],
                              "write",
                              [ Ty.path "std::fs::File" ]
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::plonk::CircuitData",
                                "vkey"
                              |);
                              M.read (| fd |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "halo2_proofs::helpers::Serializable",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                    [ Ty.associated; Ty.path "halo2_proofs::poly::LagrangeCoeff" ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              "store",
                              [ Ty.path "std::fs::File" ]
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::plonk::CircuitData",
                                "fixed"
                              |);
                              M.read (| fd |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "halo2_proofs::helpers::ParaSerializable",
                              Ty.path "halo2_proofs::plonk::permutation::keygen::Assembly",
                              [],
                              "vec_store",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::plonk::CircuitData",
                                "permutation"
                              |);
                              M.read (| fd |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_write :
      forall (C : Ty.t),
      M.IsAssociatedFunction (Self C) "write" (write C).
    
    (*
        pub fn into_proving_key(self, params: &Params<C>) -> ProvingKey<C> {
            keygen_pk_from_info(params, &self.vkey, self.fixed, self.permutation).unwrap()
        }
    *)
    Definition into_proving_key (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self; params ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let params := M.alloc (| params |) in
          M.call_closure (|
            M.get_associated_function (|
              Ty.apply
                (Ty.path "core::result::Result")
                [
                  Ty.apply (Ty.path "halo2_proofs::plonk::ProvingKey") [ C ];
                  Ty.path "halo2_proofs::plonk::error::Error"
                ],
              "unwrap",
              []
            |),
            [
              M.call_closure (|
                M.get_function (| "halo2_proofs::plonk::keygen::keygen_pk_from_info", [ C ] |),
                [
                  M.read (| params |);
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "halo2_proofs::plonk::CircuitData",
                    "vkey"
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "halo2_proofs::plonk::CircuitData",
                      "fixed"
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "halo2_proofs::plonk::CircuitData",
                      "permutation"
                    |)
                  |)
                ]
              |)
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_into_proving_key :
      forall (C : Ty.t),
      M.IsAssociatedFunction (Self C) "into_proving_key" (into_proving_key C).
    
    (*
        pub fn get_vkey(&self) -> &VerifyingKey<C> {
            &self.vkey
        }
    *)
    Definition get_vkey (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.SubPointer.get_struct_record_field (|
            M.read (| self |),
            "halo2_proofs::plonk::CircuitData",
            "vkey"
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_get_vkey :
      forall (C : Ty.t),
      M.IsAssociatedFunction (Self C) "get_vkey" (get_vkey C).
  End Impl_halo2_proofs_plonk_CircuitData_C.
  
  (* StructRecord
    {
      name := "PinnedVerificationKey";
      ty_params := [ "C" ];
      fields :=
        [
          ("base_modulus", Ty.apply (Ty.path "&") [ Ty.path "str" ]);
          ("scalar_modulus", Ty.apply (Ty.path "&") [ Ty.path "str" ]);
          ("domain",
            Ty.apply
              (Ty.path "halo2_proofs::poly::domain::PinnedEvaluationDomain")
              [ Ty.associated ]);
          ("cs",
            Ty.apply
              (Ty.path "halo2_proofs::plonk::circuit::PinnedConstraintSystem")
              [ Ty.associated ]);
          ("fixed_commitments",
            Ty.apply
              (Ty.path "&")
              [ Ty.apply (Ty.path "alloc::vec::Vec") [ C; Ty.path "alloc::alloc::Global" ] ]);
          ("permutation",
            Ty.apply
              (Ty.path "&")
              [ Ty.apply (Ty.path "halo2_proofs::plonk::permutation::VerifyingKey") [ C ] ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_plonk_PinnedVerificationKey_C.
    Definition Self (C : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "halo2_proofs::plonk::PinnedVerificationKey") [ C ].
    
    (* Debug *)
    Definition fmt (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            let names :=
              M.alloc (|
                M.alloc (|
                  Value.Array
                    [
                      M.read (| Value.String "base_modulus" |);
                      M.read (| Value.String "scalar_modulus" |);
                      M.read (| Value.String "domain" |);
                      M.read (| Value.String "cs" |);
                      M.read (| Value.String "fixed_commitments" |);
                      M.read (| Value.String "permutation" |)
                    ]
                |)
              |) in
            let values :=
              M.alloc (|
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    Value.Array
                      [
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::plonk::PinnedVerificationKey",
                            "base_modulus"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::plonk::PinnedVerificationKey",
                            "scalar_modulus"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::plonk::PinnedVerificationKey",
                            "domain"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::plonk::PinnedVerificationKey",
                            "cs"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::plonk::PinnedVerificationKey",
                            "fixed_commitments"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.alloc (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::PinnedVerificationKey",
                              "permutation"
                            |)
                          |))
                      ]
                  |))
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_fields_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "PinnedVerificationKey" |);
                  (* Unsize *) M.pointer_coercion (M.read (| names |));
                  M.read (| values |)
                ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (C : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (Self C)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method (fmt C)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_plonk_PinnedVerificationKey_C.
  
  (* StructRecord
    {
      name := "ProvingKey";
      ty_params := [ "C" ];
      fields :=
        [
          ("vk", Ty.apply (Ty.path "halo2_proofs::plonk::VerifyingKey") [ C ]);
          ("l_active_row",
            Ty.apply
              (Ty.path "halo2_proofs::poly::Polynomial")
              [ Ty.associated; Ty.path "halo2_proofs::poly::ExtendedLagrangeCoeff" ]);
          ("l0",
            Ty.apply
              (Ty.path "halo2_proofs::poly::Polynomial")
              [ Ty.associated; Ty.path "halo2_proofs::poly::ExtendedLagrangeCoeff" ]);
          ("l_last",
            Ty.apply
              (Ty.path "halo2_proofs::poly::Polynomial")
              [ Ty.associated; Ty.path "halo2_proofs::poly::ExtendedLagrangeCoeff" ]);
          ("fixed_values",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply
                  (Ty.path "halo2_proofs::poly::Polynomial")
                  [ Ty.associated; Ty.path "halo2_proofs::poly::LagrangeCoeff" ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("fixed_polys",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply
                  (Ty.path "halo2_proofs::poly::Polynomial")
                  [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("fixed_cosets",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              [
                Ty.apply
                  (Ty.path "halo2_proofs::poly::Polynomial")
                  [ Ty.associated; Ty.path "halo2_proofs::poly::ExtendedLagrangeCoeff" ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("permutation", Ty.apply (Ty.path "halo2_proofs::plonk::permutation::ProvingKey") [ C ]);
          ("ev", Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::Evaluator") [ C ])
        ];
    } *)
  
  Module Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_plonk_ProvingKey_C.
    Definition Self (C : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::plonk::ProvingKey") [ C ].
    
    (* Debug *)
    Definition fmt (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.read (|
            let names :=
              M.alloc (|
                M.alloc (|
                  Value.Array
                    [
                      M.read (| Value.String "vk" |);
                      M.read (| Value.String "l_active_row" |);
                      M.read (| Value.String "l0" |);
                      M.read (| Value.String "l_last" |);
                      M.read (| Value.String "fixed_values" |);
                      M.read (| Value.String "fixed_polys" |);
                      M.read (| Value.String "fixed_cosets" |);
                      M.read (| Value.String "permutation" |);
                      M.read (| Value.String "ev" |)
                    ]
                |)
              |) in
            let values :=
              M.alloc (|
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    Value.Array
                      [
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::plonk::ProvingKey",
                            "vk"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::plonk::ProvingKey",
                            "l_active_row"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::plonk::ProvingKey",
                            "l0"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::plonk::ProvingKey",
                            "l_last"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::plonk::ProvingKey",
                            "fixed_values"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::plonk::ProvingKey",
                            "fixed_polys"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::plonk::ProvingKey",
                            "fixed_cosets"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::plonk::ProvingKey",
                            "permutation"
                          |));
                        (* Unsize *)
                        M.pointer_coercion
                          (M.alloc (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::ProvingKey",
                              "ev"
                            |)
                          |))
                      ]
                  |))
              |) in
            M.alloc (|
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_fields_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "ProvingKey" |);
                  (* Unsize *) M.pointer_coercion (M.read (| names |));
                  M.read (| values |)
                ]
              |)
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      forall (C : Ty.t),
      M.IsTraitInstance
        "core::fmt::Debug"
        (Self C)
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method (fmt C)) ].
  End Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_plonk_ProvingKey_C.
  
  Module Impl_halo2_proofs_plonk_ProvingKey_C.
    Definition Self (C : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::plonk::ProvingKey") [ C ].
    
    (*
        pub fn get_vk(&self) -> &VerifyingKey<C> {
            &self.vk
        }
    *)
    Definition get_vk (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
      let Self : Ty.t := Self C in
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.SubPointer.get_struct_record_field (|
            M.read (| self |),
            "halo2_proofs::plonk::ProvingKey",
            "vk"
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom AssociatedFunction_get_vk :
      forall (C : Ty.t),
      M.IsAssociatedFunction (Self C) "get_vk" (get_vk C).
  End Impl_halo2_proofs_plonk_ProvingKey_C.
  
  
  (* StructTuple
    {
      name := "Theta";
      ty_params := [];
      fields := [];
    } *)
  
  Module Impl_core_clone_Clone_for_halo2_proofs_plonk_Theta.
    Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::Theta".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| M.read (| self |) |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_halo2_proofs_plonk_Theta.
  
  Module Impl_core_marker_Copy_for_halo2_proofs_plonk_Theta.
    Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::Theta".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_for_halo2_proofs_plonk_Theta.
  
  Module Impl_core_fmt_Debug_for_halo2_proofs_plonk_Theta.
    Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::Theta".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
            [ M.read (| f |); M.read (| Value.String "Theta" |) ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_halo2_proofs_plonk_Theta.
  
  Axiom ChallengeTheta :
    forall (F : Ty.t),
    (Ty.apply (Ty.path "halo2_proofs::plonk::ChallengeTheta") [ F ]) =
      (Ty.apply
        (Ty.path "halo2_proofs::transcript::ChallengeScalar")
        [ F; Ty.path "halo2_proofs::plonk::Theta" ]).
  
  (* StructTuple
    {
      name := "Beta";
      ty_params := [];
      fields := [];
    } *)
  
  Module Impl_core_clone_Clone_for_halo2_proofs_plonk_Beta.
    Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::Beta".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| M.read (| self |) |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_halo2_proofs_plonk_Beta.
  
  Module Impl_core_marker_Copy_for_halo2_proofs_plonk_Beta.
    Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::Beta".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_for_halo2_proofs_plonk_Beta.
  
  Module Impl_core_fmt_Debug_for_halo2_proofs_plonk_Beta.
    Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::Beta".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
            [ M.read (| f |); M.read (| Value.String "Beta" |) ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_halo2_proofs_plonk_Beta.
  
  Axiom ChallengeBeta :
    forall (F : Ty.t),
    (Ty.apply (Ty.path "halo2_proofs::plonk::ChallengeBeta") [ F ]) =
      (Ty.apply
        (Ty.path "halo2_proofs::transcript::ChallengeScalar")
        [ F; Ty.path "halo2_proofs::plonk::Beta" ]).
  
  (* StructTuple
    {
      name := "Gamma";
      ty_params := [];
      fields := [];
    } *)
  
  Module Impl_core_clone_Clone_for_halo2_proofs_plonk_Gamma.
    Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::Gamma".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| M.read (| self |) |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_halo2_proofs_plonk_Gamma.
  
  Module Impl_core_marker_Copy_for_halo2_proofs_plonk_Gamma.
    Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::Gamma".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_for_halo2_proofs_plonk_Gamma.
  
  Module Impl_core_fmt_Debug_for_halo2_proofs_plonk_Gamma.
    Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::Gamma".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
            [ M.read (| f |); M.read (| Value.String "Gamma" |) ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_halo2_proofs_plonk_Gamma.
  
  Axiom ChallengeGamma :
    forall (F : Ty.t),
    (Ty.apply (Ty.path "halo2_proofs::plonk::ChallengeGamma") [ F ]) =
      (Ty.apply
        (Ty.path "halo2_proofs::transcript::ChallengeScalar")
        [ F; Ty.path "halo2_proofs::plonk::Gamma" ]).
  
  (* StructTuple
    {
      name := "Y";
      ty_params := [];
      fields := [];
    } *)
  
  Module Impl_core_clone_Clone_for_halo2_proofs_plonk_Y.
    Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::Y".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| M.read (| self |) |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_halo2_proofs_plonk_Y.
  
  Module Impl_core_marker_Copy_for_halo2_proofs_plonk_Y.
    Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::Y".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_for_halo2_proofs_plonk_Y.
  
  Module Impl_core_fmt_Debug_for_halo2_proofs_plonk_Y.
    Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::Y".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
            [ M.read (| f |); M.read (| Value.String "Y" |) ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_halo2_proofs_plonk_Y.
  
  Axiom ChallengeY :
    forall (F : Ty.t),
    (Ty.apply (Ty.path "halo2_proofs::plonk::ChallengeY") [ F ]) =
      (Ty.apply
        (Ty.path "halo2_proofs::transcript::ChallengeScalar")
        [ F; Ty.path "halo2_proofs::plonk::Y" ]).
  
  (* StructTuple
    {
      name := "X";
      ty_params := [];
      fields := [];
    } *)
  
  Module Impl_core_clone_Clone_for_halo2_proofs_plonk_X.
    Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::X".
    
    (* Clone *)
    Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          M.read (| M.read (| self |) |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_halo2_proofs_plonk_X.
  
  Module Impl_core_marker_Copy_for_halo2_proofs_plonk_X.
    Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::X".
    
    Axiom Implements :
      M.IsTraitInstance
        "core::marker::Copy"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [].
  End Impl_core_marker_Copy_for_halo2_proofs_plonk_X.
  
  Module Impl_core_fmt_Debug_for_halo2_proofs_plonk_X.
    Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::X".
    
    (* Debug *)
    Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ self; f ] =>
        ltac:(M.monadic
          (let self := M.alloc (| self |) in
          let f := M.alloc (| f |) in
          M.call_closure (|
            M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
            [ M.read (| f |); M.read (| Value.String "X" |) ]
          |)))
      | _, _ => M.impossible
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        Self
        (* Trait polymorphic types *) []
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_halo2_proofs_plonk_X.
  
  Axiom ChallengeX :
    forall (F : Ty.t),
    (Ty.apply (Ty.path "halo2_proofs::plonk::ChallengeX") [ F ]) =
      (Ty.apply
        (Ty.path "halo2_proofs::transcript::ChallengeScalar")
        [ F; Ty.path "halo2_proofs::plonk::X" ]).
End plonk.
