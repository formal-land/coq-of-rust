(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module plonk.
  Module circuit.
    Module compress_selectors.
      (* StructRecord
        {
          name := "SelectorDescription";
          ty_params := [];
          fields :=
            [
              ("selector", Ty.path "usize");
              ("activations",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ]);
              ("max_degree", Ty.path "usize")
            ];
        } *)
      
      Module Impl_core_fmt_Debug_for_halo2_proofs_plonk_circuit_compress_selectors_SelectorDescription.
        Definition Self : Ty.t :=
          Ty.path "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription".
        
        (* Debug *)
        Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field3_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "SelectorDescription" |);
                  M.read (| Value.String "selector" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription",
                      "selector"
                    |));
                  M.read (| Value.String "activations" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription",
                      "activations"
                    |));
                  M.read (| Value.String "max_degree" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription",
                        "max_degree"
                      |)
                    |))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_halo2_proofs_plonk_circuit_compress_selectors_SelectorDescription.
      
      Module Impl_core_clone_Clone_for_halo2_proofs_plonk_circuit_compress_selectors_SelectorDescription.
        Definition Self : Ty.t :=
          Ty.path "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription".
        
        (* Clone *)
        Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                [
                  ("selector",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "usize",
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription",
                          "selector"
                        |)
                      ]
                    |));
                  ("activations",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription",
                          "activations"
                        |)
                      ]
                    |));
                  ("max_degree",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "usize",
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription",
                          "max_degree"
                        |)
                      ]
                    |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_halo2_proofs_plonk_circuit_compress_selectors_SelectorDescription.
      
      (* StructRecord
        {
          name := "SelectorAssignment";
          ty_params := [ "F" ];
          fields :=
            [
              ("selector", Ty.path "usize");
              ("combination_index", Ty.path "usize");
              ("expression", Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ])
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_halo2_proofs_plonk_circuit_compress_selectors_SelectorAssignment_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "halo2_proofs::plonk::circuit::compress_selectors::SelectorAssignment")
            [ F ].
        
        (* Debug *)
        Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field3_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "SelectorAssignment" |);
                  M.read (| Value.String "selector" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::circuit::compress_selectors::SelectorAssignment",
                      "selector"
                    |));
                  M.read (| Value.String "combination_index" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::circuit::compress_selectors::SelectorAssignment",
                      "combination_index"
                    |));
                  M.read (| Value.String "expression" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::plonk::circuit::compress_selectors::SelectorAssignment",
                        "expression"
                      |)
                    |))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (Self F)
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_halo2_proofs_plonk_circuit_compress_selectors_SelectorAssignment_F.
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_F_for_halo2_proofs_plonk_circuit_compress_selectors_SelectorAssignment_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "halo2_proofs::plonk::circuit::compress_selectors::SelectorAssignment")
            [ F ].
        
        (* Clone *)
        Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "halo2_proofs::plonk::circuit::compress_selectors::SelectorAssignment"
                [
                  ("selector",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "usize",
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::plonk::circuit::compress_selectors::SelectorAssignment",
                          "selector"
                        |)
                      ]
                    |));
                  ("combination_index",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "usize",
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::plonk::circuit::compress_selectors::SelectorAssignment",
                          "combination_index"
                        |)
                      ]
                    |));
                  ("expression",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply (Ty.path "halo2_proofs::plonk::circuit::Expression") [ F ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::plonk::circuit::compress_selectors::SelectorAssignment",
                          "expression"
                        |)
                      ]
                    |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (Self F)
            (* Trait polymorphic types *) []
            (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_F_for_halo2_proofs_plonk_circuit_compress_selectors_SelectorAssignment_F.
      
      (*
      pub fn process<F: Field, E>(
          mut selectors: Vec<SelectorDescription>,
          max_degree: usize,
          mut allocate_fixed_column: E,
      ) -> (Vec<Vec<F>>, Vec<SelectorAssignment<F>>)
      where
          E: FnMut() -> Expression<F>,
      {
          if selectors.is_empty() {
              // There is nothing to optimize.
              return (vec![], vec![]);
          }
      
          // The length of all provided selectors must be the same.
          let n = selectors[0].activations.len();
          assert!(selectors.iter().all(|a| a.activations.len() == n));
      
          let mut combination_assignments = vec![];
          let mut selector_assignments = vec![];
      
          // All provided selectors of degree 0 are assumed to be either concrete
          // selectors or do not appear in a gate. Let's address these first.
          selectors = selectors
              .into_iter()
              .filter(|selector| {
                  if selector.max_degree == 0 {
                      // This is a complex selector, or a selector that does not appear in any
                      // gate constraint.
                      let expression = allocate_fixed_column();
      
                      let combination_assignment = selector
                          .activations
                          .iter()
                          .map(|b| if *b { F::one() } else { F::zero() })
                          .collect::<Vec<_>>();
                      let combination_index = combination_assignments.len();
                      combination_assignments.push(combination_assignment);
                      selector_assignments.push(SelectorAssignment {
                          selector: selector.selector,
                          combination_index,
                          expression,
                      });
      
                      false
                  } else {
                      true
                  }
              })
              .collect();
      
          // All of the remaining `selectors` are simple. Let's try to combine them.
          // First, we compute the exclusion matrix that has (j, k) = true if selector
          // j and selector k conflict -- that is, they are both enabled on the same
          // row. This matrix is symmetric and the diagonal entries are false, so we
          // only need to store the lower triangular entries.
          let mut exclusion_matrix = (0..selectors.len())
              .map(|i| vec![false; i])
              .collect::<Vec<_>>();
      
          for (i, rows) in selectors
              .iter()
              .map(|selector| &selector.activations)
              .enumerate()
          {
              // Loop over the selectors previous to this one
              for (j, other_selector) in selectors.iter().enumerate().take(i) {
                  // Look at what selectors are active at the same row
                  if rows
                      .iter()
                      .zip(other_selector.activations.iter())
                      .any(|(l, r)| l & r)
                  {
                      // Mark them as incompatible
                      exclusion_matrix[i][j] = true;
                  }
              }
          }
      
          // Simple selectors that we've added to combinations already.
          let mut added = vec![false; selectors.len()];
      
          for (i, selector) in selectors.iter().enumerate() {
              if added[i] {
                  continue;
              }
              added[i] = true;
              assert!(selector.max_degree <= max_degree);
              // This is used to keep track of the largest degree gate involved in the
              // combination so far. We subtract by one to omit the virtual selector
              // which will be substituted by the caller with the expression we give
              // them.
              let mut d = selector.max_degree - 1;
              let mut combination = vec![selector];
              let mut combination_added = vec![i];
      
              // Try to find other selectors that can join this one.
              'try_selectors: for (j, selector) in selectors.iter().enumerate().skip(i + 1) {
                  if d + combination.len() == max_degree {
                      // Short circuit; nothing can be added to this
                      // combination.
                      break 'try_selectors;
                  }
      
                  // Skip selectors that have been added to previous combinations
                  if added[j] {
                      continue 'try_selectors;
                  }
      
                  // Is this selector excluded from co-existing in the same
                  // combination with any of the other selectors so far?
                  for &i in combination_added.iter() {
                      if exclusion_matrix[j][i] {
                          continue 'try_selectors;
                      }
                  }
      
                  // Can the new selector join the combination? Reminder: we use
                  // selector.max_degree - 1 to omit the influence of the virtual
                  // selector on the degree, as it will be substituted.
                  let new_d = std::cmp::max(d, selector.max_degree - 1);
                  if new_d + combination.len() + 1 > max_degree {
                      // Guess not.
                      continue 'try_selectors;
                  }
      
                  d = new_d;
                  combination.push(selector);
                  combination_added.push(j);
                  added[j] = true;
              }
      
              // Now, compute the selector and combination assignments.
              let mut combination_assignment = vec![F::zero(); n];
              let combination_len = combination.len();
              let combination_index = combination_assignments.len();
              let query = allocate_fixed_column();
      
              let mut assigned_root = F::one();
              selector_assignments.extend(combination.into_iter().map(|selector| {
                  // Compute the expression for substitution. This produces an expression of the
                  // form
                  //     q * Prod[i = 1..=combination_len, i != assigned_root](i - q)
                  //
                  // which is non-zero only on rows where `combination_assignment` is set to
                  // `assigned_root`. In particular, rows set to 0 correspond to all selectors
                  // being disabled.
                  let mut expression = query.clone();
                  let mut root = F::one();
                  for _ in 0..combination_len {
                      if root != assigned_root {
                          expression = expression * (Expression::Constant(root) - query.clone());
                      }
                      root += F::one();
                  }
      
                  // Update the combination assignment
                  for (combination, selector) in combination_assignment
                      .iter_mut()
                      .zip(selector.activations.iter())
                  {
                      // This will not overwrite another selector's activations because
                      // we have ensured that selectors are disjoint.
                      if *selector {
                          *combination = assigned_root;
                      }
                  }
      
                  assigned_root += F::one();
      
                  SelectorAssignment {
                      selector: selector.selector,
                      combination_index,
                      expression,
                  }
              }));
              combination_assignments.push(combination_assignment);
          }
      
          (combination_assignments, selector_assignments)
      }
      *)
      Definition process (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ F; E ], [ selectors; max_degree; allocate_fixed_column ] =>
          ltac:(M.monadic
            (let selectors := M.alloc (| selectors |) in
            let max_degree := M.alloc (| max_degree |) in
            let allocate_fixed_column := M.alloc (| allocate_fixed_column |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.path
                                            "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "is_empty",
                                      []
                                    |),
                                    [ selectors ]
                                  |)
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    Value.Tuple
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [ F; Ty.path "alloc::alloc::Global" ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "new",
                                            []
                                          |),
                                          []
                                        |);
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::compress_selectors::SelectorAssignment")
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "new",
                                            []
                                          |),
                                          []
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let n :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ],
                          "len",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::index::Index",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path
                                      "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [ Ty.path "usize" ],
                                "index",
                                []
                              |),
                              [ selectors; Value.Integer 0 ]
                            |),
                            "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription",
                            "activations"
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.Pure.not
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.path
                                              "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                          ],
                                        [],
                                        "all",
                                        [
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.path
                                                        "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                    ]
                                                ]
                                            ]
                                            (Ty.path "bool")
                                        ]
                                      |),
                                      [
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "slice")
                                                [
                                                  Ty.path
                                                    "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                ],
                                              "iter",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.path
                                                        "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription";
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [ selectors ]
                                              |)
                                            ]
                                          |)
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                M.match_operator (|
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let a := M.copy (| γ |) in
                                                        BinOp.Pure.eq
                                                          (M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path "bool";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "len",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| a |),
                                                                "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription",
                                                                "activations"
                                                              |)
                                                            ]
                                                          |))
                                                          (M.read (| n |))))
                                                  ]
                                                |)
                                              | _ => M.impossible (||)
                                              end))
                                      ]
                                    |))
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [
                                    M.read (|
                                      Value.String
                                        "assertion failed: selectors.iter().all(|a| a.activations.len() == n)"
                                    |)
                                  ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let combination_assignments :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ F; Ty.path "alloc::alloc::Global" ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          []
                        |),
                        []
                      |)
                    |) in
                  let selector_assignments :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply
                                (Ty.path
                                  "halo2_proofs::plonk::circuit::compress_selectors::SelectorAssignment")
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          []
                        |),
                        []
                      |)
                    |) in
                  let _ :=
                    M.write (|
                      selectors,
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::filter::Filter")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                [
                                  Ty.path
                                    "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription";
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [
                                          Ty.path
                                            "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                        ]
                                    ]
                                ]
                                (Ty.path "bool")
                            ],
                          [],
                          "collect",
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.path
                                  "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription";
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                [
                                  Ty.path
                                    "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              "filter",
                              [
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.path
                                              "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                          ]
                                      ]
                                  ]
                                  (Ty.path "bool")
                              ]
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.path
                                        "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [ M.read (| selectors |) ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      M.match_operator (|
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let selector := M.copy (| γ |) in
                                              M.read (|
                                                M.match_operator (|
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              BinOp.Pure.eq
                                                                (M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| selector |),
                                                                    "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription",
                                                                    "max_degree"
                                                                  |)
                                                                |))
                                                                (Value.Integer 0)
                                                            |)) in
                                                        let _ :=
                                                          M.is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        let expression :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::function::FnMut",
                                                                E,
                                                                [ Ty.tuple [] ],
                                                                "call_mut",
                                                                []
                                                              |),
                                                              [
                                                                allocate_fixed_column;
                                                                Value.Tuple []
                                                              ]
                                                            |)
                                                          |) in
                                                        let combination_assignment :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::map::Map")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      [ Ty.path "bool" ];
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              [ Ty.path "bool" ]
                                                                          ]
                                                                      ]
                                                                      F
                                                                  ],
                                                                [],
                                                                "collect",
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      F;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      [ Ty.path "bool" ],
                                                                    [],
                                                                    "map",
                                                                    [
                                                                      F;
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [ Ty.path "bool" ]
                                                                            ]
                                                                        ]
                                                                        F
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [ Ty.path "bool" ],
                                                                        "iter",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::deref::Deref",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              [
                                                                                Ty.path "bool";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            "deref",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.SubPointer.get_struct_record_field (|
                                                                              M.read (| selector |),
                                                                              "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription",
                                                                              "activations"
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let b :=
                                                                                      M.copy (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.read (|
                                                                                      M.match_operator (|
                                                                                        M.alloc (|
                                                                                          Value.Tuple
                                                                                            []
                                                                                        |),
                                                                                        [
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (let
                                                                                                    γ :=
                                                                                                M.use
                                                                                                  (M.read (|
                                                                                                    b
                                                                                                  |)) in
                                                                                              let
                                                                                                    _ :=
                                                                                                M.is_constant_or_break_match (|
                                                                                                  M.read (|
                                                                                                    γ
                                                                                                  |),
                                                                                                  Value.Bool
                                                                                                    true
                                                                                                |) in
                                                                                              M.alloc (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "ff::Field",
                                                                                                    F,
                                                                                                    [],
                                                                                                    "one",
                                                                                                    []
                                                                                                  |),
                                                                                                  []
                                                                                                |)
                                                                                              |)));
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (M.alloc (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "ff::Field",
                                                                                                    F,
                                                                                                    [],
                                                                                                    "zero",
                                                                                                    []
                                                                                                  |),
                                                                                                  []
                                                                                                |)
                                                                                              |)))
                                                                                        ]
                                                                                      |)
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  ]
                                                                |)
                                                              ]
                                                            |)
                                                          |) in
                                                        let combination_index :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        F;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                "len",
                                                                []
                                                              |),
                                                              [ combination_assignments ]
                                                            |)
                                                          |) in
                                                        let _ :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        F;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                "push",
                                                                []
                                                              |),
                                                              [
                                                                combination_assignments;
                                                                M.read (| combination_assignment |)
                                                              ]
                                                            |)
                                                          |) in
                                                        let _ :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::compress_selectors::SelectorAssignment")
                                                                      [ F ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                "push",
                                                                []
                                                              |),
                                                              [
                                                                selector_assignments;
                                                                Value.StructRecord
                                                                  "halo2_proofs::plonk::circuit::compress_selectors::SelectorAssignment"
                                                                  [
                                                                    ("selector",
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.read (| selector |),
                                                                          "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription",
                                                                          "selector"
                                                                        |)
                                                                      |));
                                                                    ("combination_index",
                                                                      M.read (|
                                                                        combination_index
                                                                      |));
                                                                    ("expression",
                                                                      M.read (| expression |))
                                                                  ]
                                                              ]
                                                            |)
                                                          |) in
                                                        M.alloc (| Value.Bool false |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (| Value.Bool true |)))
                                                  ]
                                                |)
                                              |)))
                                        ]
                                      |)
                                    | _ => M.impossible (||)
                                    end))
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let exclusion_matrix :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            [
                              Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ];
                              Ty.function
                                [ Ty.tuple [ Ty.path "usize" ] ]
                                (Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ])
                            ],
                          [],
                          "collect",
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                              [],
                              "map",
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                                Ty.function
                                  [ Ty.tuple [ Ty.path "usize" ] ]
                                  (Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ])
                              ]
                            |),
                            [
                              Value.StructRecord
                                "core::ops::range::Range"
                                [
                                  ("start", Value.Integer 0);
                                  ("end_",
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.path
                                              "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        "len",
                                        []
                                      |),
                                      [ selectors ]
                                    |))
                                ];
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      M.match_operator (|
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let i := M.copy (| γ |) in
                                              M.call_closure (|
                                                M.get_function (|
                                                  "alloc::vec::from_elem",
                                                  [ Ty.path "bool" ]
                                                |),
                                                [ Value.Bool false; M.read (| i |) ]
                                              |)))
                                        ]
                                      |)
                                    | _ => M.impossible (||)
                                    end))
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.use
                      (M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::map::Map")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.path
                                            "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.path
                                                    "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ]
                                          ])
                                    ]
                                ],
                              [],
                              "into_iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::map::Map")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.path
                                            "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.path
                                                    "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ]
                                          ])
                                    ],
                                  [],
                                  "enumerate",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.path
                                            "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                        ],
                                      [],
                                      "map",
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ]
                                          ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.path
                                                      "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                  ]
                                              ]
                                          ]
                                          (Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ]
                                            ])
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.path
                                                "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                            ],
                                          "iter",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.path
                                                    "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription";
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [ selectors ]
                                          |)
                                        ]
                                      |);
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              M.match_operator (|
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let selector := M.copy (| γ |) in
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| selector |),
                                                        "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription",
                                                        "activations"
                                                      |)))
                                                ]
                                              |)
                                            | _ => M.impossible (||)
                                            end))
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                ltac:(M.monadic
                                  (let _ :=
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::map::Map")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.path
                                                          "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.path "bool";
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ])
                                                  ]
                                              ],
                                            [],
                                            "next",
                                            []
                                          |),
                                          [ iter ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                            let i := M.copy (| γ1_0 |) in
                                            let rows := M.copy (| γ1_1 |) in
                                            M.use
                                              (M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::collect::IntoIterator",
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::take::Take")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::enumerate::Enumerate")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                                ]
                                                            ]
                                                        ],
                                                      [],
                                                      "into_iter",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::enumerate::Enumerate")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                                ]
                                                            ],
                                                          [],
                                                          "take",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                                ],
                                                              [],
                                                              "enumerate",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                                    ],
                                                                  "iter",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::Deref",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription";
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      "deref",
                                                                      []
                                                                    |),
                                                                    [ selectors ]
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |);
                                                          M.read (| i |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let iter := M.copy (| γ |) in
                                                      M.loop (|
                                                        ltac:(M.monadic
                                                          (let _ :=
                                                            M.match_operator (|
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::take::Take")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              [
                                                                                Ty.path
                                                                                  "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                                              ]
                                                                          ]
                                                                      ],
                                                                    [],
                                                                    "next",
                                                                    []
                                                                  |),
                                                                  [ iter ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (| M.break (||) |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::option::Option::Some",
                                                                        0
                                                                      |) in
                                                                    let γ1_0 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ0_0,
                                                                        0
                                                                      |) in
                                                                    let γ1_1 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ0_0,
                                                                        1
                                                                      |) in
                                                                    let j := M.copy (| γ1_0 |) in
                                                                    let other_selector :=
                                                                      M.copy (| γ1_1 |) in
                                                                    M.match_operator (|
                                                                      M.alloc (| Value.Tuple [] |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ :=
                                                                              M.use
                                                                                (M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::iter::adapters::zip::Zip")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::slice::iter::Iter")
                                                                                            [
                                                                                              Ty.path
                                                                                                "bool"
                                                                                            ];
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::slice::iter::Iter")
                                                                                            [
                                                                                              Ty.path
                                                                                                "bool"
                                                                                            ]
                                                                                        ],
                                                                                      [],
                                                                                      "any",
                                                                                      [
                                                                                        Ty.function
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "bool"
                                                                                                      ];
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "bool"
                                                                                                      ]
                                                                                                  ]
                                                                                              ]
                                                                                          ]
                                                                                          (Ty.path
                                                                                            "bool")
                                                                                      ]
                                                                                    |),
                                                                                    [
                                                                                      M.alloc (|
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::Iter")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "bool"
                                                                                              ],
                                                                                            [],
                                                                                            "zip",
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::slice::iter::Iter")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "bool"
                                                                                                ]
                                                                                            ]
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "slice")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "bool"
                                                                                                  ],
                                                                                                "iter",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::deref::Deref",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::vec::Vec")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "bool";
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ],
                                                                                                    [],
                                                                                                    "deref",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      rows
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "slice")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "bool"
                                                                                                  ],
                                                                                                "iter",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::deref::Deref",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::vec::Vec")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "bool";
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ],
                                                                                                    [],
                                                                                                    "deref",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                                      M.read (|
                                                                                                        other_selector
                                                                                                      |),
                                                                                                      "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription",
                                                                                                      "activations"
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |);
                                                                                      M.closure
                                                                                        (fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            match γ
                                                                                            with
                                                                                            | [ α0
                                                                                                ] =>
                                                                                              M.match_operator (|
                                                                                                M.alloc (|
                                                                                                  α0
                                                                                                |),
                                                                                                [
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (let
                                                                                                            γ0_0 :=
                                                                                                        M.SubPointer.get_tuple_field (|
                                                                                                          γ,
                                                                                                          0
                                                                                                        |) in
                                                                                                      let
                                                                                                            γ0_1 :=
                                                                                                        M.SubPointer.get_tuple_field (|
                                                                                                          γ,
                                                                                                          1
                                                                                                        |) in
                                                                                                      let
                                                                                                            l :=
                                                                                                        M.copy (|
                                                                                                          γ0_0
                                                                                                        |) in
                                                                                                      let
                                                                                                            r :=
                                                                                                        M.copy (|
                                                                                                          γ0_1
                                                                                                        |) in
                                                                                                      M.call_closure (|
                                                                                                        M.get_trait_method (|
                                                                                                          "core::ops::bit::BitAnd",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "bool"
                                                                                                            ],
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "bool"
                                                                                                              ]
                                                                                                          ],
                                                                                                          "bitand",
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.read (|
                                                                                                            l
                                                                                                          |);
                                                                                                          M.read (|
                                                                                                            r
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)))
                                                                                                ]
                                                                                              |)
                                                                                            | _ =>
                                                                                              M.impossible (||)
                                                                                            end))
                                                                                    ]
                                                                                  |)
                                                                                |)) in
                                                                            let _ :=
                                                                              M.is_constant_or_break_match (|
                                                                                M.read (| γ |),
                                                                                Value.Bool true
                                                                              |) in
                                                                            let _ :=
                                                                              M.write (|
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::index::IndexMut",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      [
                                                                                        Ty.path
                                                                                          "bool";
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    ],
                                                                                    "index_mut",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::index::IndexMut",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "bool";
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ];
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ],
                                                                                        "index_mut",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        exclusion_matrix;
                                                                                        M.read (|
                                                                                          i
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.read (| j |)
                                                                                  ]
                                                                                |),
                                                                                Value.Bool true
                                                                              |) in
                                                                            M.alloc (|
                                                                              Value.Tuple []
                                                                            |)));
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (M.alloc (|
                                                                              Value.Tuple []
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                              ]
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)))
                                                      |)))
                                                ]
                                              |))))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  let added :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (| "alloc::vec::from_elem", [ Ty.path "bool" ] |),
                        [
                          Value.Bool false;
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.path
                                    "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "len",
                              []
                            |),
                            [ selectors ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.use
                      (M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [
                                      Ty.path
                                        "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                    ]
                                ],
                              [],
                              "into_iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [
                                      Ty.path
                                        "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                    ],
                                  [],
                                  "enumerate",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        [
                                          Ty.path
                                            "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                        ],
                                      "iter",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.path
                                                "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [ selectors ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                ltac:(M.monadic
                                  (let _ :=
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  [
                                                    Ty.path
                                                      "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                  ]
                                              ],
                                            [],
                                            "next",
                                            []
                                          |),
                                          [ iter ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                            let i := M.copy (| γ1_0 |) in
                                            let selector := M.copy (| γ1_1 |) in
                                            let _ :=
                                              M.match_operator (|
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::index::Index",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path "bool";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [ Ty.path "usize" ],
                                                              "index",
                                                              []
                                                            |),
                                                            [ added; M.read (| i |) ]
                                                          |)) in
                                                      let _ :=
                                                        M.is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (| M.continue (||) |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            let _ :=
                                              M.write (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::index::IndexMut",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path "bool";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [ Ty.path "usize" ],
                                                    "index_mut",
                                                    []
                                                  |),
                                                  [ added; M.read (| i |) ]
                                                |),
                                                Value.Bool true
                                              |) in
                                            let _ :=
                                              M.match_operator (|
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            UnOp.Pure.not
                                                              (BinOp.Pure.le
                                                                (M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| selector |),
                                                                    "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription",
                                                                    "max_degree"
                                                                  |)
                                                                |))
                                                                (M.read (| max_degree |)))
                                                          |)) in
                                                      let _ :=
                                                        M.is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.call_closure (|
                                                            M.get_function (|
                                                              "core::panicking::panic",
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                Value.String
                                                                  "assertion failed: selector.max_degree <= max_degree"
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            let d :=
                                              M.alloc (|
                                                BinOp.Panic.sub (|
                                                  Integer.Usize,
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| selector |),
                                                      "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription",
                                                      "max_degree"
                                                    |)
                                                  |),
                                                  Value.Integer 1
                                                |)
                                              |) in
                                            let combination :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                          ]
                                                      ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                                      ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array [ M.read (| selector |) ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |)
                                              |) in
                                            let combination_added :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [ Ty.path "usize" ],
                                                    "into_vec",
                                                    [ Ty.path "alloc::alloc::Global" ]
                                                  |),
                                                  [
                                                    (* Unsize *)
                                                    M.pointer_coercion
                                                      (M.read (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::boxed::Box")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [ Ty.path "usize" ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              Value.Array [ M.read (| i |) ]
                                                            |)
                                                          ]
                                                        |)
                                                      |))
                                                  ]
                                                |)
                                              |) in
                                            let _ :=
                                              M.use
                                                (M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::collect::IntoIterator",
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::skip::Skip")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::enumerate::Enumerate")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                                  ]
                                                              ]
                                                          ],
                                                        [],
                                                        "into_iter",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::enumerate::Enumerate")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                                  ]
                                                              ],
                                                            [],
                                                            "skip",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                                  ],
                                                                [],
                                                                "enumerate",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                                      ],
                                                                    "iter",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::deref::Deref",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [],
                                                                        "deref",
                                                                        []
                                                                      |),
                                                                      [ selectors ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |);
                                                            BinOp.Panic.add (|
                                                              Integer.Usize,
                                                              M.read (| i |),
                                                              Value.Integer 1
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let iter := M.copy (| γ |) in
                                                        M.loop (|
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.match_operator (|
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::skip::Skip")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::iter::adapters::enumerate::Enumerate")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::Iter")
                                                                                [
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                                                ]
                                                                            ]
                                                                        ],
                                                                      [],
                                                                      "next",
                                                                      []
                                                                    |),
                                                                    [ iter ]
                                                                  |)
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.alloc (|
                                                                        M.never_to_any (|
                                                                          M.read (| M.break (||) |)
                                                                        |)
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                          γ,
                                                                          "core::option::Option::Some",
                                                                          0
                                                                        |) in
                                                                      let γ1_0 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ0_0,
                                                                          0
                                                                        |) in
                                                                      let γ1_1 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ0_0,
                                                                          1
                                                                        |) in
                                                                      let j := M.copy (| γ1_0 |) in
                                                                      let selector :=
                                                                        M.copy (| γ1_1 |) in
                                                                      let _ :=
                                                                        M.match_operator (|
                                                                          M.alloc (|
                                                                            Value.Tuple []
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ :=
                                                                                  M.use
                                                                                    (M.alloc (|
                                                                                      BinOp.Pure.eq
                                                                                        (BinOp.Panic.add (|
                                                                                          Integer.Usize,
                                                                                          M.read (|
                                                                                            d
                                                                                          |),
                                                                                          M.call_closure (|
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                                                                    ];
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              "len",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              combination
                                                                                            ]
                                                                                          |)
                                                                                        |))
                                                                                        (M.read (|
                                                                                          max_degree
                                                                                        |))
                                                                                    |)) in
                                                                                let _ :=
                                                                                  M.is_constant_or_break_match (|
                                                                                    M.read (| γ |),
                                                                                    Value.Bool true
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  M.never_to_any (|
                                                                                    M.read (|
                                                                                      M.break (||)
                                                                                    |)
                                                                                  |)
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)))
                                                                          ]
                                                                        |) in
                                                                      let _ :=
                                                                        M.match_operator (|
                                                                          M.alloc (|
                                                                            Value.Tuple []
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ :=
                                                                                  M.use
                                                                                    (M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::index::Index",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          [
                                                                                            Ty.path
                                                                                              "bool";
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ],
                                                                                        "index",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        added;
                                                                                        M.read (|
                                                                                          j
                                                                                        |)
                                                                                      ]
                                                                                    |)) in
                                                                                let _ :=
                                                                                  M.is_constant_or_break_match (|
                                                                                    M.read (| γ |),
                                                                                    Value.Bool true
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  M.never_to_any (|
                                                                                    M.read (|
                                                                                      M.continue (||)
                                                                                    |)
                                                                                  |)
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)))
                                                                          ]
                                                                        |) in
                                                                      let _ :=
                                                                        M.use
                                                                          (M.match_operator (|
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::iter::traits::collect::IntoIterator",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::Iter")
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    ],
                                                                                  [],
                                                                                  "into_iter",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "slice")
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ],
                                                                                      "iter",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::deref::Deref",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize";
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          [],
                                                                                          "deref",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          combination_added
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let iter :=
                                                                                    M.copy (|
                                                                                      γ
                                                                                    |) in
                                                                                  M.loop (|
                                                                                    ltac:(M.monadic
                                                                                      (let _ :=
                                                                                        M.match_operator (|
                                                                                          M.alloc (|
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "core::iter::traits::iterator::Iterator",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::slice::iter::Iter")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ],
                                                                                                [],
                                                                                                "next",
                                                                                                []
                                                                                              |),
                                                                                              [ iter
                                                                                              ]
                                                                                            |)
                                                                                          |),
                                                                                          [
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (M.alloc (|
                                                                                                  M.never_to_any (|
                                                                                                    M.read (|
                                                                                                      M.break (||)
                                                                                                    |)
                                                                                                  |)
                                                                                                |)));
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (let
                                                                                                      γ0_0 :=
                                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                                    γ,
                                                                                                    "core::option::Option::Some",
                                                                                                    0
                                                                                                  |) in
                                                                                                let
                                                                                                      γ0_0 :=
                                                                                                  M.read (|
                                                                                                    γ0_0
                                                                                                  |) in
                                                                                                let
                                                                                                      i :=
                                                                                                  M.copy (|
                                                                                                    γ0_0
                                                                                                  |) in
                                                                                                M.match_operator (|
                                                                                                  M.alloc (|
                                                                                                    Value.Tuple
                                                                                                      []
                                                                                                  |),
                                                                                                  [
                                                                                                    fun
                                                                                                        γ =>
                                                                                                      ltac:(M.monadic
                                                                                                        (let
                                                                                                              γ :=
                                                                                                          M.use
                                                                                                            (M.call_closure (|
                                                                                                              M.get_trait_method (|
                                                                                                                "core::ops::index::Index",
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "alloc::vec::Vec")
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "bool";
                                                                                                                    Ty.path
                                                                                                                      "alloc::alloc::Global"
                                                                                                                  ],
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "usize"
                                                                                                                ],
                                                                                                                "index",
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::ops::index::Index",
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "alloc::vec::Vec")
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "alloc::vec::Vec")
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "bool";
                                                                                                                            Ty.path
                                                                                                                              "alloc::alloc::Global"
                                                                                                                          ];
                                                                                                                        Ty.path
                                                                                                                          "alloc::alloc::Global"
                                                                                                                      ],
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "usize"
                                                                                                                    ],
                                                                                                                    "index",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    exclusion_matrix;
                                                                                                                    M.read (|
                                                                                                                      j
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |);
                                                                                                                M.read (|
                                                                                                                  i
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)) in
                                                                                                        let
                                                                                                              _ :=
                                                                                                          M.is_constant_or_break_match (|
                                                                                                            M.read (|
                                                                                                              γ
                                                                                                            |),
                                                                                                            Value.Bool
                                                                                                              true
                                                                                                          |) in
                                                                                                        M.alloc (|
                                                                                                          M.never_to_any (|
                                                                                                            M.read (|
                                                                                                              M.continue (||)
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)));
                                                                                                    fun
                                                                                                        γ =>
                                                                                                      ltac:(M.monadic
                                                                                                        (M.alloc (|
                                                                                                          Value.Tuple
                                                                                                            []
                                                                                                        |)))
                                                                                                  ]
                                                                                                |)))
                                                                                          ]
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |)))
                                                                                  |)))
                                                                            ]
                                                                          |)) in
                                                                      let new_d :=
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_function (|
                                                                              "core::cmp::max",
                                                                              [ Ty.path "usize" ]
                                                                            |),
                                                                            [
                                                                              M.read (| d |);
                                                                              BinOp.Panic.sub (|
                                                                                Integer.Usize,
                                                                                M.read (|
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    M.read (|
                                                                                      selector
                                                                                    |),
                                                                                    "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription",
                                                                                    "max_degree"
                                                                                  |)
                                                                                |),
                                                                                Value.Integer 1
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |) in
                                                                      let _ :=
                                                                        M.match_operator (|
                                                                          M.alloc (|
                                                                            Value.Tuple []
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ :=
                                                                                  M.use
                                                                                    (M.alloc (|
                                                                                      BinOp.Pure.gt
                                                                                        (BinOp.Panic.add (|
                                                                                          Integer.Usize,
                                                                                          BinOp.Panic.add (|
                                                                                            Integer.Usize,
                                                                                            M.read (|
                                                                                              new_d
                                                                                            |),
                                                                                            M.call_closure (|
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                                                                      ];
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ],
                                                                                                "len",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                combination
                                                                                              ]
                                                                                            |)
                                                                                          |),
                                                                                          Value.Integer
                                                                                            1
                                                                                        |))
                                                                                        (M.read (|
                                                                                          max_degree
                                                                                        |))
                                                                                    |)) in
                                                                                let _ :=
                                                                                  M.is_constant_or_break_match (|
                                                                                    M.read (| γ |),
                                                                                    Value.Bool true
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  M.never_to_any (|
                                                                                    M.read (|
                                                                                      M.continue (||)
                                                                                    |)
                                                                                  |)
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)))
                                                                          ]
                                                                        |) in
                                                                      let _ :=
                                                                        M.write (|
                                                                          d,
                                                                          M.read (| new_d |)
                                                                        |) in
                                                                      let _ :=
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [
                                                                                      Ty.path
                                                                                        "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              "push",
                                                                              []
                                                                            |),
                                                                            [
                                                                              combination;
                                                                              M.read (| selector |)
                                                                            ]
                                                                          |)
                                                                        |) in
                                                                      let _ :=
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.path "usize";
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              "push",
                                                                              []
                                                                            |),
                                                                            [
                                                                              combination_added;
                                                                              M.read (| j |)
                                                                            ]
                                                                          |)
                                                                        |) in
                                                                      let _ :=
                                                                        M.write (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::index::IndexMut",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.path "bool";
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [ Ty.path "usize" ],
                                                                              "index_mut",
                                                                              []
                                                                            |),
                                                                            [ added; M.read (| j |)
                                                                            ]
                                                                          |),
                                                                          Value.Bool true
                                                                        |) in
                                                                      M.alloc (| Value.Tuple [] |)))
                                                                ]
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                        |)))
                                                  ]
                                                |)) in
                                            let combination_assignment :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_function (|
                                                    "alloc::vec::from_elem",
                                                    [ F ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "ff::Field",
                                                        F,
                                                        [],
                                                        "zero",
                                                        []
                                                      |),
                                                      []
                                                    |);
                                                    M.read (| n |)
                                                  ]
                                                |)
                                              |) in
                                            let combination_len :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "len",
                                                    []
                                                  |),
                                                  [ combination ]
                                                |)
                                              |) in
                                            let combination_index :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [ F; Ty.path "alloc::alloc::Global" ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "len",
                                                    []
                                                  |),
                                                  [ combination_assignments ]
                                                |)
                                              |) in
                                            let query :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::function::FnMut",
                                                    E,
                                                    [ Ty.tuple [] ],
                                                    "call_mut",
                                                    []
                                                  |),
                                                  [ allocate_fixed_column; Value.Tuple [] ]
                                                |)
                                              |) in
                                            let assigned_root :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "ff::Field",
                                                    F,
                                                    [],
                                                    "one",
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |) in
                                            let _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::Extend",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::compress_selectors::SelectorAssignment")
                                                          [ F ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::compress_selectors::SelectorAssignment")
                                                        [ F ]
                                                    ],
                                                    "extend",
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::map::Map")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloc::vec::into_iter::IntoIter")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::compress_selectors::SelectorAssignment")
                                                              [ F ])
                                                        ]
                                                    ]
                                                  |),
                                                  [
                                                    selector_assignments;
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::vec::into_iter::IntoIter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        "map",
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::compress_selectors::SelectorAssignment")
                                                            [ F ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::compress_selectors::SelectorAssignment")
                                                              [ F ])
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::collect::IntoIterator",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            "into_iter",
                                                            []
                                                          |),
                                                          [ M.read (| combination |) ]
                                                        |);
                                                        M.closure
                                                          (fun γ =>
                                                            ltac:(M.monadic
                                                              match γ with
                                                              | [ α0 ] =>
                                                                M.match_operator (|
                                                                  M.alloc (| α0 |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let selector :=
                                                                          M.copy (| γ |) in
                                                                        M.read (|
                                                                          let expression :=
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::clone::Clone",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ F ],
                                                                                  [],
                                                                                  "clone",
                                                                                  []
                                                                                |),
                                                                                [ query ]
                                                                              |)
                                                                            |) in
                                                                          let root :=
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "ff::Field",
                                                                                  F,
                                                                                  [],
                                                                                  "one",
                                                                                  []
                                                                                |),
                                                                                []
                                                                              |)
                                                                            |) in
                                                                          let _ :=
                                                                            M.use
                                                                              (M.match_operator (|
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::collect::IntoIterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::ops::range::Range")
                                                                                        [
                                                                                          Ty.path
                                                                                            "usize"
                                                                                        ],
                                                                                      [],
                                                                                      "into_iter",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      Value.StructRecord
                                                                                        "core::ops::range::Range"
                                                                                        [
                                                                                          ("start",
                                                                                            Value.Integer
                                                                                              0);
                                                                                          ("end_",
                                                                                            M.read (|
                                                                                              combination_len
                                                                                            |))
                                                                                        ]
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let iter :=
                                                                                        M.copy (|
                                                                                          γ
                                                                                        |) in
                                                                                      M.loop (|
                                                                                        ltac:(M.monadic
                                                                                          (let _ :=
                                                                                            M.match_operator (|
                                                                                              M.alloc (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::ops::range::Range")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "usize"
                                                                                                      ],
                                                                                                    [],
                                                                                                    "next",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    iter
                                                                                                  ]
                                                                                                |)
                                                                                              |),
                                                                                              [
                                                                                                fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    (M.alloc (|
                                                                                                      M.never_to_any (|
                                                                                                        M.read (|
                                                                                                          M.break (||)
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)));
                                                                                                fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    (let
                                                                                                          γ0_0 :=
                                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                                        γ,
                                                                                                        "core::option::Option::Some",
                                                                                                        0
                                                                                                      |) in
                                                                                                    let
                                                                                                          _ :=
                                                                                                      M.match_operator (|
                                                                                                        M.alloc (|
                                                                                                          Value.Tuple
                                                                                                            []
                                                                                                        |),
                                                                                                        [
                                                                                                          fun
                                                                                                              γ =>
                                                                                                            ltac:(M.monadic
                                                                                                              (let
                                                                                                                    γ :=
                                                                                                                M.use
                                                                                                                  (M.alloc (|
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::cmp::PartialEq",
                                                                                                                        F,
                                                                                                                        [
                                                                                                                          F
                                                                                                                        ],
                                                                                                                        "ne",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        root;
                                                                                                                        assigned_root
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  |)) in
                                                                                                              let
                                                                                                                    _ :=
                                                                                                                M.is_constant_or_break_match (|
                                                                                                                  M.read (|
                                                                                                                    γ
                                                                                                                  |),
                                                                                                                  Value.Bool
                                                                                                                    true
                                                                                                                |) in
                                                                                                              let
                                                                                                                    _ :=
                                                                                                                M.write (|
                                                                                                                  expression,
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::ops::arith::Mul",
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                                                        [
                                                                                                                          F
                                                                                                                        ],
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                                                          [
                                                                                                                            F
                                                                                                                          ]
                                                                                                                      ],
                                                                                                                      "mul",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.read (|
                                                                                                                        expression
                                                                                                                      |);
                                                                                                                      M.call_closure (|
                                                                                                                        M.get_trait_method (|
                                                                                                                          "core::ops::arith::Sub",
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                                                            [
                                                                                                                              F
                                                                                                                            ],
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                                                              [
                                                                                                                                F
                                                                                                                              ]
                                                                                                                          ],
                                                                                                                          "sub",
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          Value.StructTuple
                                                                                                                            "halo2_proofs::plonk::circuit::Expression::Constant"
                                                                                                                            [
                                                                                                                              M.read (|
                                                                                                                                root
                                                                                                                              |)
                                                                                                                            ];
                                                                                                                          M.call_closure (|
                                                                                                                            M.get_trait_method (|
                                                                                                                              "core::clone::Clone",
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                                                [
                                                                                                                                  F
                                                                                                                                ],
                                                                                                                              [],
                                                                                                                              "clone",
                                                                                                                              []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              query
                                                                                                                            ]
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                |) in
                                                                                                              M.alloc (|
                                                                                                                Value.Tuple
                                                                                                                  []
                                                                                                              |)));
                                                                                                          fun
                                                                                                              γ =>
                                                                                                            ltac:(M.monadic
                                                                                                              (M.alloc (|
                                                                                                                Value.Tuple
                                                                                                                  []
                                                                                                              |)))
                                                                                                        ]
                                                                                                      |) in
                                                                                                    let
                                                                                                          _ :=
                                                                                                      M.alloc (|
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "core::ops::arith::AddAssign",
                                                                                                            F,
                                                                                                            [
                                                                                                              F
                                                                                                            ],
                                                                                                            "add_assign",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            root;
                                                                                                            M.call_closure (|
                                                                                                              M.get_trait_method (|
                                                                                                                "ff::Field",
                                                                                                                F,
                                                                                                                [],
                                                                                                                "one",
                                                                                                                []
                                                                                                              |),
                                                                                                              []
                                                                                                            |)
                                                                                                          ]
                                                                                                        |)
                                                                                                      |) in
                                                                                                    M.alloc (|
                                                                                                      Value.Tuple
                                                                                                        []
                                                                                                    |)))
                                                                                              ]
                                                                                            |) in
                                                                                          M.alloc (|
                                                                                            Value.Tuple
                                                                                              []
                                                                                          |)))
                                                                                      |)))
                                                                                ]
                                                                              |)) in
                                                                          let _ :=
                                                                            M.use
                                                                              (M.match_operator (|
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::collect::IntoIterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::iter::adapters::zip::Zip")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::slice::iter::IterMut")
                                                                                            [ F ];
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::slice::iter::Iter")
                                                                                            [
                                                                                              Ty.path
                                                                                                "bool"
                                                                                            ]
                                                                                        ],
                                                                                      [],
                                                                                      "into_iter",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::iter::traits::iterator::Iterator",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::slice::iter::IterMut")
                                                                                            [ F ],
                                                                                          [],
                                                                                          "zip",
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::Iter")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "bool"
                                                                                              ]
                                                                                          ]
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "slice")
                                                                                                [ F
                                                                                                ],
                                                                                              "iter_mut",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::deref::DerefMut",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    [
                                                                                                      F;
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  [],
                                                                                                  "deref_mut",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  combination_assignment
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |);
                                                                                          M.call_closure (|
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "slice")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "bool"
                                                                                                ],
                                                                                              "iter",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::deref::Deref",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "bool";
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  [],
                                                                                                  "deref",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.read (|
                                                                                                      selector
                                                                                                    |),
                                                                                                    "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription",
                                                                                                    "activations"
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let iter :=
                                                                                        M.copy (|
                                                                                          γ
                                                                                        |) in
                                                                                      M.loop (|
                                                                                        ltac:(M.monadic
                                                                                          (let _ :=
                                                                                            M.match_operator (|
                                                                                              M.alloc (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::iter::adapters::zip::Zip")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::slice::iter::IterMut")
                                                                                                          [
                                                                                                            F
                                                                                                          ];
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "core::slice::iter::Iter")
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "bool"
                                                                                                          ]
                                                                                                      ],
                                                                                                    [],
                                                                                                    "next",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    iter
                                                                                                  ]
                                                                                                |)
                                                                                              |),
                                                                                              [
                                                                                                fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    (M.alloc (|
                                                                                                      M.never_to_any (|
                                                                                                        M.read (|
                                                                                                          M.break (||)
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)));
                                                                                                fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    (let
                                                                                                          γ0_0 :=
                                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                                        γ,
                                                                                                        "core::option::Option::Some",
                                                                                                        0
                                                                                                      |) in
                                                                                                    let
                                                                                                          γ1_0 :=
                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                        γ0_0,
                                                                                                        0
                                                                                                      |) in
                                                                                                    let
                                                                                                          γ1_1 :=
                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                        γ0_0,
                                                                                                        1
                                                                                                      |) in
                                                                                                    let
                                                                                                          combination :=
                                                                                                      M.copy (|
                                                                                                        γ1_0
                                                                                                      |) in
                                                                                                    let
                                                                                                          selector :=
                                                                                                      M.copy (|
                                                                                                        γ1_1
                                                                                                      |) in
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        Value.Tuple
                                                                                                          []
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (let
                                                                                                                  γ :=
                                                                                                              M.use
                                                                                                                (M.read (|
                                                                                                                  selector
                                                                                                                |)) in
                                                                                                            let
                                                                                                                  _ :=
                                                                                                              M.is_constant_or_break_match (|
                                                                                                                M.read (|
                                                                                                                  γ
                                                                                                                |),
                                                                                                                Value.Bool
                                                                                                                  true
                                                                                                              |) in
                                                                                                            let
                                                                                                                  _ :=
                                                                                                              M.write (|
                                                                                                                M.read (|
                                                                                                                  combination
                                                                                                                |),
                                                                                                                M.read (|
                                                                                                                  assigned_root
                                                                                                                |)
                                                                                                              |) in
                                                                                                            M.alloc (|
                                                                                                              Value.Tuple
                                                                                                                []
                                                                                                            |)));
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (M.alloc (|
                                                                                                              Value.Tuple
                                                                                                                []
                                                                                                            |)))
                                                                                                      ]
                                                                                                    |)))
                                                                                              ]
                                                                                            |) in
                                                                                          M.alloc (|
                                                                                            Value.Tuple
                                                                                              []
                                                                                          |)))
                                                                                      |)))
                                                                                ]
                                                                              |)) in
                                                                          let _ :=
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::arith::AddAssign",
                                                                                  F,
                                                                                  [ F ],
                                                                                  "add_assign",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  assigned_root;
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "ff::Field",
                                                                                      F,
                                                                                      [],
                                                                                      "one",
                                                                                      []
                                                                                    |),
                                                                                    []
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |) in
                                                                          M.alloc (|
                                                                            Value.StructRecord
                                                                              "halo2_proofs::plonk::circuit::compress_selectors::SelectorAssignment"
                                                                              [
                                                                                ("selector",
                                                                                  M.read (|
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.read (|
                                                                                        selector
                                                                                      |),
                                                                                      "halo2_proofs::plonk::circuit::compress_selectors::SelectorDescription",
                                                                                      "selector"
                                                                                    |)
                                                                                  |));
                                                                                ("combination_index",
                                                                                  M.read (|
                                                                                    combination_index
                                                                                  |));
                                                                                ("expression",
                                                                                  M.read (|
                                                                                    expression
                                                                                  |))
                                                                              ]
                                                                          |)
                                                                        |)))
                                                                  ]
                                                                |)
                                                              | _ => M.impossible (||)
                                                              end))
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [ F; Ty.path "alloc::alloc::Global" ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "push",
                                                    []
                                                  |),
                                                  [
                                                    combination_assignments;
                                                    M.read (| combination_assignment |)
                                                  ]
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  M.alloc (|
                    Value.Tuple
                      [ M.read (| combination_assignments |); M.read (| selector_assignments |) ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
    End compress_selectors.
  End circuit.
End plonk.
