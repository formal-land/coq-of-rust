(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module plonk.
  Module evaluation.
    (*
    fn get_rotation_idx(idx: usize, rot: i32, rot_scale: i32, isize: i32) -> usize {
        (((idx as i32) + (rot * rot_scale)).rem_euclid(isize)) as usize
    }
    *)
    Definition get_rotation_idx (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [], [ idx; rot; rot_scale; isize ] =>
        ltac:(M.monadic
          (let idx := M.alloc (| idx |) in
          let rot := M.alloc (| rot |) in
          let rot_scale := M.alloc (| rot_scale |) in
          let isize := M.alloc (| isize |) in
          M.rust_cast
            (M.call_closure (|
              M.get_associated_function (| Ty.path "i32", "rem_euclid", [] |),
              [
                BinOp.Panic.add (|
                  Integer.I32,
                  M.rust_cast (M.read (| idx |)),
                  BinOp.Panic.mul (| Integer.I32, M.read (| rot |), M.read (| rot_scale |) |)
                |);
                M.read (| isize |)
              ]
            |))))
      | _, _ => M.impossible
      end.
    
    (*
    Enum ValueSource
    {
      ty_params := [];
      variants :=
        [
          {
            name := "Constant";
            item := StructTuple [ Ty.path "usize" ];
            discriminant := None;
          };
          {
            name := "Intermediate";
            item := StructTuple [ Ty.path "usize" ];
            discriminant := None;
          };
          {
            name := "Fixed";
            item := StructTuple [ Ty.path "usize"; Ty.path "usize" ];
            discriminant := None;
          };
          {
            name := "Advice";
            item := StructTuple [ Ty.path "usize"; Ty.path "usize" ];
            discriminant := None;
          };
          {
            name := "Instance";
            item := StructTuple [ Ty.path "usize"; Ty.path "usize" ];
            discriminant := None;
          }
        ];
    }
    *)
    
    Module Impl_core_clone_Clone_for_halo2_proofs_plonk_evaluation_ValueSource.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation::ValueSource".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Value.DeclaredButUndefined,
                [ fun γ => ltac:(M.monadic (M.read (| self |))) ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_halo2_proofs_plonk_evaluation_ValueSource.
    
    Module Impl_core_marker_Copy_for_halo2_proofs_plonk_evaluation_ValueSource.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation::ValueSource".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Copy_for_halo2_proofs_plonk_evaluation_ValueSource.
    
    Module Impl_core_fmt_Debug_for_halo2_proofs_plonk_evaluation_ValueSource.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation::ValueSource".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::ValueSource::Constant",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Constant" |);
                            (* Unsize *) M.pointer_coercion __self_0
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::ValueSource::Intermediate",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Intermediate" |);
                            (* Unsize *) M.pointer_coercion __self_0
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::ValueSource::Fixed",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::ValueSource::Fixed",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field2_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Fixed" |);
                            (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                            (* Unsize *) M.pointer_coercion __self_1
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::ValueSource::Advice",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::ValueSource::Advice",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field2_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Advice" |);
                            (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                            (* Unsize *) M.pointer_coercion __self_1
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::ValueSource::Instance",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::ValueSource::Instance",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field2_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Instance" |);
                            (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                            (* Unsize *) M.pointer_coercion __self_1
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_halo2_proofs_plonk_evaluation_ValueSource.
    
    Module Impl_core_marker_StructuralPartialEq_for_halo2_proofs_plonk_evaluation_ValueSource.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation::ValueSource".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_halo2_proofs_plonk_evaluation_ValueSource.
    
    Module Impl_core_cmp_PartialEq_for_halo2_proofs_plonk_evaluation_ValueSource.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation::ValueSource".
      
      (* PartialEq *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let __self_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ]
                    |),
                    [ M.read (| self |) ]
                  |)
                |) in
              let __arg1_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ]
                    |),
                    [ M.read (| other |) ]
                  |)
                |) in
              M.alloc (|
                LogicalOp.and (|
                  BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)),
                  ltac:(M.monadic
                    (M.read (|
                      M.match_operator (|
                        M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::ValueSource::Constant",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::ValueSource::Constant",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                BinOp.Pure.eq
                                  (M.read (| M.read (| __self_0 |) |))
                                  (M.read (| M.read (| __arg1_0 |) |))
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::ValueSource::Intermediate",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::ValueSource::Intermediate",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                BinOp.Pure.eq
                                  (M.read (| M.read (| __self_0 |) |))
                                  (M.read (| M.read (| __arg1_0 |) |))
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::ValueSource::Fixed",
                                  0
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::ValueSource::Fixed",
                                  1
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let __self_1 := M.alloc (| γ2_1 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::ValueSource::Fixed",
                                  0
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::ValueSource::Fixed",
                                  1
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              let __arg1_1 := M.alloc (| γ2_1 |) in
                              M.alloc (|
                                LogicalOp.and (|
                                  BinOp.Pure.eq
                                    (M.read (| M.read (| __self_0 |) |))
                                    (M.read (| M.read (| __arg1_0 |) |)),
                                  ltac:(M.monadic
                                    (BinOp.Pure.eq
                                      (M.read (| M.read (| __self_1 |) |))
                                      (M.read (| M.read (| __arg1_1 |) |))))
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::ValueSource::Advice",
                                  0
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::ValueSource::Advice",
                                  1
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let __self_1 := M.alloc (| γ2_1 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::ValueSource::Advice",
                                  0
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::ValueSource::Advice",
                                  1
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              let __arg1_1 := M.alloc (| γ2_1 |) in
                              M.alloc (|
                                LogicalOp.and (|
                                  BinOp.Pure.eq
                                    (M.read (| M.read (| __self_0 |) |))
                                    (M.read (| M.read (| __arg1_0 |) |)),
                                  ltac:(M.monadic
                                    (BinOp.Pure.eq
                                      (M.read (| M.read (| __self_1 |) |))
                                      (M.read (| M.read (| __arg1_1 |) |))))
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::ValueSource::Instance",
                                  0
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::ValueSource::Instance",
                                  1
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let __self_1 := M.alloc (| γ2_1 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::ValueSource::Instance",
                                  0
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::ValueSource::Instance",
                                  1
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              let __arg1_1 := M.alloc (| γ2_1 |) in
                              M.alloc (|
                                LogicalOp.and (|
                                  BinOp.Pure.eq
                                    (M.read (| M.read (| __self_0 |) |))
                                    (M.read (| M.read (| __arg1_0 |) |)),
                                  ltac:(M.monadic
                                    (BinOp.Pure.eq
                                      (M.read (| M.read (| __self_1 |) |))
                                      (M.read (| M.read (| __arg1_1 |) |))))
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.call_closure (|
                                    M.get_function (| "core::intrinsics::unreachable", [] |),
                                    []
                                  |)
                                |)
                              |)))
                        ]
                      |)
                    |)))
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_halo2_proofs_plonk_evaluation_ValueSource.
    
    Module Impl_core_cmp_PartialOrd_for_halo2_proofs_plonk_evaluation_ValueSource.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation::ValueSource".
      
      (* PartialOrd *)
      Definition partial_cmp (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let __self_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ]
                    |),
                    [ M.read (| self |) ]
                  |)
                |) in
              let __arg1_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ]
                    |),
                    [ M.read (| other |) ]
                  |)
                |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "halo2_proofs::plonk::evaluation::ValueSource::Constant",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ2_0 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "halo2_proofs::plonk::evaluation::ValueSource::Constant",
                          0
                        |) in
                      let __arg1_0 := M.alloc (| γ2_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.path "usize",
                            [ Ty.path "usize" ],
                            "partial_cmp",
                            []
                          |),
                          [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "halo2_proofs::plonk::evaluation::ValueSource::Intermediate",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ2_0 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "halo2_proofs::plonk::evaluation::ValueSource::Intermediate",
                          0
                        |) in
                      let __arg1_0 := M.alloc (| γ2_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.path "usize",
                            [ Ty.path "usize" ],
                            "partial_cmp",
                            []
                          |),
                          [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "halo2_proofs::plonk::evaluation::ValueSource::Fixed",
                          0
                        |) in
                      let γ2_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "halo2_proofs::plonk::evaluation::ValueSource::Fixed",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ2_0 |) in
                      let __self_1 := M.alloc (| γ2_1 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "halo2_proofs::plonk::evaluation::ValueSource::Fixed",
                          0
                        |) in
                      let γ2_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "halo2_proofs::plonk::evaluation::ValueSource::Fixed",
                          1
                        |) in
                      let __arg1_0 := M.alloc (| γ2_0 |) in
                      let __arg1_1 := M.alloc (| γ2_1 |) in
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::cmp::PartialOrd",
                              Ty.path "usize",
                              [ Ty.path "usize" ],
                              "partial_cmp",
                              []
                            |),
                            [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    Ty.path "usize",
                                    [ Ty.path "usize" ],
                                    "partial_cmp",
                                    []
                                  |),
                                  [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let cmp := M.copy (| γ |) in
                              cmp))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "halo2_proofs::plonk::evaluation::ValueSource::Advice",
                          0
                        |) in
                      let γ2_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "halo2_proofs::plonk::evaluation::ValueSource::Advice",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ2_0 |) in
                      let __self_1 := M.alloc (| γ2_1 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "halo2_proofs::plonk::evaluation::ValueSource::Advice",
                          0
                        |) in
                      let γ2_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "halo2_proofs::plonk::evaluation::ValueSource::Advice",
                          1
                        |) in
                      let __arg1_0 := M.alloc (| γ2_0 |) in
                      let __arg1_1 := M.alloc (| γ2_1 |) in
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::cmp::PartialOrd",
                              Ty.path "usize",
                              [ Ty.path "usize" ],
                              "partial_cmp",
                              []
                            |),
                            [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    Ty.path "usize",
                                    [ Ty.path "usize" ],
                                    "partial_cmp",
                                    []
                                  |),
                                  [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let cmp := M.copy (| γ |) in
                              cmp))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "halo2_proofs::plonk::evaluation::ValueSource::Instance",
                          0
                        |) in
                      let γ2_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_0,
                          "halo2_proofs::plonk::evaluation::ValueSource::Instance",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ2_0 |) in
                      let __self_1 := M.alloc (| γ2_1 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "halo2_proofs::plonk::evaluation::ValueSource::Instance",
                          0
                        |) in
                      let γ2_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ0_1,
                          "halo2_proofs::plonk::evaluation::ValueSource::Instance",
                          1
                        |) in
                      let __arg1_0 := M.alloc (| γ2_0 |) in
                      let __arg1_1 := M.alloc (| γ2_1 |) in
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::cmp::PartialOrd",
                              Ty.path "usize",
                              [ Ty.path "usize" ],
                              "partial_cmp",
                              []
                            |),
                            [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    Ty.path "usize",
                                    [ Ty.path "usize" ],
                                    "partial_cmp",
                                    []
                                  |),
                                  [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let cmp := M.copy (| γ |) in
                              cmp))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.path "isize",
                            [ Ty.path "isize" ],
                            "partial_cmp",
                            []
                          |),
                          [ __self_tag; __arg1_tag ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialOrd"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
    End Impl_core_cmp_PartialOrd_for_halo2_proofs_plonk_evaluation_ValueSource.
    
    Module Impl_halo2_proofs_plonk_evaluation_ValueSource.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation::ValueSource".
      
      (*
          pub fn get<F: Field, B: Basis>(
              &self,
              rotations: &[usize],
              constants: &[F],
              intermediates: &[F],
              fixed_values: &[Polynomial<F, B>],
              advice_values: &[Polynomial<F, B>],
              instance_values: &[Polynomial<F, B>],
          ) -> F {
              match self {
                  ValueSource::Constant(idx) => constants[*idx],
                  ValueSource::Intermediate(idx) => intermediates[*idx],
                  ValueSource::Fixed(column_index, rotation) => {
                      fixed_values[*column_index][rotations[*rotation]]
                  }
                  ValueSource::Advice(column_index, rotation) => {
                      advice_values[*column_index][rotations[*rotation]]
                  }
                  ValueSource::Instance(column_index, rotation) => {
                      instance_values[*column_index][rotations[*rotation]]
                  }
              }
          }
      *)
      Definition get (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ F; B ],
            [
              self;
              rotations;
              constants;
              intermediates;
              fixed_values;
              advice_values;
              instance_values
            ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let rotations := M.alloc (| rotations |) in
            let constants := M.alloc (| constants |) in
            let intermediates := M.alloc (| intermediates |) in
            let fixed_values := M.alloc (| fixed_values |) in
            let advice_values := M.alloc (| advice_values |) in
            let instance_values := M.alloc (| instance_values |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::ValueSource::Constant",
                          0
                        |) in
                      let idx := M.alloc (| γ1_0 |) in
                      M.SubPointer.get_array_field (| M.read (| constants |), M.read (| idx |) |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::ValueSource::Intermediate",
                          0
                        |) in
                      let idx := M.alloc (| γ1_0 |) in
                      M.SubPointer.get_array_field (|
                        M.read (| intermediates |),
                        M.read (| idx |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::ValueSource::Fixed",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::ValueSource::Fixed",
                          1
                        |) in
                      let column_index := M.alloc (| γ1_0 |) in
                      let rotation := M.alloc (| γ1_1 |) in
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::index::Index",
                          Ty.apply (Ty.path "halo2_proofs::poly::Polynomial") [ F; B ],
                          [ Ty.path "usize" ],
                          "index",
                          []
                        |),
                        [
                          M.SubPointer.get_array_field (|
                            M.read (| fixed_values |),
                            M.read (| column_index |)
                          |);
                          M.read (|
                            M.SubPointer.get_array_field (|
                              M.read (| rotations |),
                              M.read (| rotation |)
                            |)
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::ValueSource::Advice",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::ValueSource::Advice",
                          1
                        |) in
                      let column_index := M.alloc (| γ1_0 |) in
                      let rotation := M.alloc (| γ1_1 |) in
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::index::Index",
                          Ty.apply (Ty.path "halo2_proofs::poly::Polynomial") [ F; B ],
                          [ Ty.path "usize" ],
                          "index",
                          []
                        |),
                        [
                          M.SubPointer.get_array_field (|
                            M.read (| advice_values |),
                            M.read (| column_index |)
                          |);
                          M.read (|
                            M.SubPointer.get_array_field (|
                              M.read (| rotations |),
                              M.read (| rotation |)
                            |)
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::ValueSource::Instance",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::ValueSource::Instance",
                          1
                        |) in
                      let column_index := M.alloc (| γ1_0 |) in
                      let rotation := M.alloc (| γ1_1 |) in
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::index::Index",
                          Ty.apply (Ty.path "halo2_proofs::poly::Polynomial") [ F; B ],
                          [ Ty.path "usize" ],
                          "index",
                          []
                        |),
                        [
                          M.SubPointer.get_array_field (|
                            M.read (| instance_values |),
                            M.read (| column_index |)
                          |);
                          M.read (|
                            M.SubPointer.get_array_field (|
                              M.read (| rotations |),
                              M.read (| rotation |)
                            |)
                          |)
                        ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_get : M.IsAssociatedFunction Self "get" get.
    End Impl_halo2_proofs_plonk_evaluation_ValueSource.
    
    (*
    Enum Calculation
    {
      ty_params := [];
      variants :=
        [
          {
            name := "Add";
            item :=
              StructTuple
                [
                  Ty.path "halo2_proofs::plonk::evaluation::ValueSource";
                  Ty.path "halo2_proofs::plonk::evaluation::ValueSource"
                ];
            discriminant := None;
          };
          {
            name := "Sub";
            item :=
              StructTuple
                [
                  Ty.path "halo2_proofs::plonk::evaluation::ValueSource";
                  Ty.path "halo2_proofs::plonk::evaluation::ValueSource"
                ];
            discriminant := None;
          };
          {
            name := "Mul";
            item :=
              StructTuple
                [
                  Ty.path "halo2_proofs::plonk::evaluation::ValueSource";
                  Ty.path "halo2_proofs::plonk::evaluation::ValueSource"
                ];
            discriminant := None;
          };
          {
            name := "Negate";
            item := StructTuple [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ];
            discriminant := None;
          };
          {
            name := "LcBeta";
            item :=
              StructTuple
                [
                  Ty.path "halo2_proofs::plonk::evaluation::ValueSource";
                  Ty.path "halo2_proofs::plonk::evaluation::ValueSource"
                ];
            discriminant := None;
          };
          {
            name := "LcTheta";
            item :=
              StructTuple
                [
                  Ty.path "halo2_proofs::plonk::evaluation::ValueSource";
                  Ty.path "halo2_proofs::plonk::evaluation::ValueSource"
                ];
            discriminant := None;
          };
          {
            name := "AddGamma";
            item := StructTuple [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ];
            discriminant := None;
          };
          {
            name := "Store";
            item := StructTuple [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ];
            discriminant := None;
          }
        ];
    }
    *)
    
    Module Impl_core_clone_Clone_for_halo2_proofs_plonk_evaluation_Calculation.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation::Calculation".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Add",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Add",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation::Calculation::Add"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |);
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_1 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Sub",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Sub",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation::Calculation::Sub"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |);
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_1 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Mul",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Mul",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation::Calculation::Mul"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |);
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_1 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Negate",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation::Calculation::Negate"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::LcBeta",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::LcBeta",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation::Calculation::LcBeta"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |);
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_1 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::LcTheta",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::LcTheta",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation::Calculation::LcTheta"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |);
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_1 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::AddGamma",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation::Calculation::AddGamma"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Store",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation::Calculation::Store"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_halo2_proofs_plonk_evaluation_Calculation.
    
    Module Impl_core_fmt_Debug_for_halo2_proofs_plonk_evaluation_Calculation.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation::Calculation".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Add",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Add",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field2_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Add" |);
                            (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                            (* Unsize *) M.pointer_coercion __self_1
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Sub",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Sub",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field2_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Sub" |);
                            (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                            (* Unsize *) M.pointer_coercion __self_1
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Mul",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Mul",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field2_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Mul" |);
                            (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                            (* Unsize *) M.pointer_coercion __self_1
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Negate",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Negate" |);
                            (* Unsize *) M.pointer_coercion __self_0
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::LcBeta",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::LcBeta",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field2_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "LcBeta" |);
                            (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                            (* Unsize *) M.pointer_coercion __self_1
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::LcTheta",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::LcTheta",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field2_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "LcTheta" |);
                            (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                            (* Unsize *) M.pointer_coercion __self_1
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::AddGamma",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "AddGamma" |);
                            (* Unsize *) M.pointer_coercion __self_0
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Store",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Store" |);
                            (* Unsize *) M.pointer_coercion __self_0
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_halo2_proofs_plonk_evaluation_Calculation.
    
    Module Impl_core_marker_StructuralPartialEq_for_halo2_proofs_plonk_evaluation_Calculation.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation::Calculation".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_halo2_proofs_plonk_evaluation_Calculation.
    
    Module Impl_core_cmp_PartialEq_for_halo2_proofs_plonk_evaluation_Calculation.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation::Calculation".
      
      (* PartialEq *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let __self_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "halo2_proofs::plonk::evaluation::Calculation" ]
                    |),
                    [ M.read (| self |) ]
                  |)
                |) in
              let __arg1_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "halo2_proofs::plonk::evaluation::Calculation" ]
                    |),
                    [ M.read (| other |) ]
                  |)
                |) in
              M.alloc (|
                LogicalOp.and (|
                  BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)),
                  ltac:(M.monadic
                    (M.read (|
                      M.match_operator (|
                        M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::Calculation::Add",
                                  0
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::Calculation::Add",
                                  1
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let __self_1 := M.alloc (| γ2_1 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::Calculation::Add",
                                  0
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::Calculation::Add",
                                  1
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              let __arg1_1 := M.alloc (| γ2_1 |) in
                              M.alloc (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                      [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ],
                                      "eq",
                                      []
                                    |),
                                    [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                        [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ],
                                        "eq",
                                        []
                                      |),
                                      [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                    |)))
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::Calculation::Sub",
                                  0
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::Calculation::Sub",
                                  1
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let __self_1 := M.alloc (| γ2_1 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::Calculation::Sub",
                                  0
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::Calculation::Sub",
                                  1
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              let __arg1_1 := M.alloc (| γ2_1 |) in
                              M.alloc (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                      [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ],
                                      "eq",
                                      []
                                    |),
                                    [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                        [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ],
                                        "eq",
                                        []
                                      |),
                                      [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                    |)))
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::Calculation::Mul",
                                  0
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::Calculation::Mul",
                                  1
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let __self_1 := M.alloc (| γ2_1 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::Calculation::Mul",
                                  0
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::Calculation::Mul",
                                  1
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              let __arg1_1 := M.alloc (| γ2_1 |) in
                              M.alloc (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                      [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ],
                                      "eq",
                                      []
                                    |),
                                    [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                        [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ],
                                        "eq",
                                        []
                                      |),
                                      [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                    |)))
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::Calculation::Negate",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::Calculation::Negate",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                    [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ],
                                    "eq",
                                    []
                                  |),
                                  [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::Calculation::LcBeta",
                                  0
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::Calculation::LcBeta",
                                  1
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let __self_1 := M.alloc (| γ2_1 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::Calculation::LcBeta",
                                  0
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::Calculation::LcBeta",
                                  1
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              let __arg1_1 := M.alloc (| γ2_1 |) in
                              M.alloc (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                      [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ],
                                      "eq",
                                      []
                                    |),
                                    [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                        [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ],
                                        "eq",
                                        []
                                      |),
                                      [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                    |)))
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::Calculation::LcTheta",
                                  0
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::Calculation::LcTheta",
                                  1
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let __self_1 := M.alloc (| γ2_1 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::Calculation::LcTheta",
                                  0
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::Calculation::LcTheta",
                                  1
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              let __arg1_1 := M.alloc (| γ2_1 |) in
                              M.alloc (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                      [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ],
                                      "eq",
                                      []
                                    |),
                                    [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                        [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ],
                                        "eq",
                                        []
                                      |),
                                      [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                    |)))
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::Calculation::AddGamma",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::Calculation::AddGamma",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                    [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ],
                                    "eq",
                                    []
                                  |),
                                  [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation::Calculation::Store",
                                  0
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation::Calculation::Store",
                                  0
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                    [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource" ],
                                    "eq",
                                    []
                                  |),
                                  [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.call_closure (|
                                    M.get_function (| "core::intrinsics::unreachable", [] |),
                                    []
                                  |)
                                |)
                              |)))
                        ]
                      |)
                    |)))
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_halo2_proofs_plonk_evaluation_Calculation.
    
    Module Impl_halo2_proofs_plonk_evaluation_Calculation.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation::Calculation".
      
      (*
          pub fn evaluate<F: Field, B: Basis>(
              &self,
              rotations: &[usize],
              constants: &[F],
              intermediates: &[F],
              fixed_values: &[Polynomial<F, B>],
              advice_values: &[Polynomial<F, B>],
              instance_values: &[Polynomial<F, B>],
              beta: &F,
              gamma: &F,
              theta: &F,
          ) -> F {
              match self {
                  Calculation::Add(a, b) => {
                      let a = a.get(
                          rotations,
                          constants,
                          intermediates,
                          fixed_values,
                          advice_values,
                          instance_values,
                      );
                      let b = b.get(
                          rotations,
                          constants,
                          intermediates,
                          fixed_values,
                          advice_values,
                          instance_values,
                      );
                      a + b
                  }
                  Calculation::Sub(a, b) => {
                      let a = a.get(
                          rotations,
                          constants,
                          intermediates,
                          fixed_values,
                          advice_values,
                          instance_values,
                      );
                      let b = b.get(
                          rotations,
                          constants,
                          intermediates,
                          fixed_values,
                          advice_values,
                          instance_values,
                      );
                      a - b
                  }
                  Calculation::Mul(a, b) => {
                      let a = a.get(
                          rotations,
                          constants,
                          intermediates,
                          fixed_values,
                          advice_values,
                          instance_values,
                      );
                      let b = b.get(
                          rotations,
                          constants,
                          intermediates,
                          fixed_values,
                          advice_values,
                          instance_values,
                      );
                      a * b
                  }
                  Calculation::Negate(v) => -v.get(
                      rotations,
                      constants,
                      intermediates,
                      fixed_values,
                      advice_values,
                      instance_values,
                  ),
                  Calculation::LcBeta(a, b) => {
                      let a = a.get(
                          rotations,
                          constants,
                          intermediates,
                          fixed_values,
                          advice_values,
                          instance_values,
                      );
                      let b = b.get(
                          rotations,
                          constants,
                          intermediates,
                          fixed_values,
                          advice_values,
                          instance_values,
                      );
                      (a + beta) * b
                  }
                  Calculation::LcTheta(a, b) => {
                      let a = a.get(
                          rotations,
                          constants,
                          intermediates,
                          fixed_values,
                          advice_values,
                          instance_values,
                      );
                      let b = b.get(
                          rotations,
                          constants,
                          intermediates,
                          fixed_values,
                          advice_values,
                          instance_values,
                      );
                      a * theta + b
                  }
                  Calculation::AddGamma(v) => {
                      v.get(
                          rotations,
                          constants,
                          intermediates,
                          fixed_values,
                          advice_values,
                          instance_values,
                      ) + gamma
                  }
                  Calculation::Store(v) => v.get(
                      rotations,
                      constants,
                      intermediates,
                      fixed_values,
                      advice_values,
                      instance_values,
                  ),
              }
          }
      *)
      Definition evaluate (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [ F; B ],
            [
              self;
              rotations;
              constants;
              intermediates;
              fixed_values;
              advice_values;
              instance_values;
              beta;
              gamma;
              theta
            ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let rotations := M.alloc (| rotations |) in
            let constants := M.alloc (| constants |) in
            let intermediates := M.alloc (| intermediates |) in
            let fixed_values := M.alloc (| fixed_values |) in
            let advice_values := M.alloc (| advice_values |) in
            let instance_values := M.alloc (| instance_values |) in
            let beta := M.alloc (| beta |) in
            let gamma := M.alloc (| gamma |) in
            let theta := M.alloc (| theta |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Add",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Add",
                          1
                        |) in
                      let a := M.alloc (| γ1_0 |) in
                      let b := M.alloc (| γ1_1 |) in
                      let a :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                              "get",
                              [ F; B ]
                            |),
                            [
                              M.read (| a |);
                              M.read (| rotations |);
                              M.read (| constants |);
                              M.read (| intermediates |);
                              M.read (| fixed_values |);
                              M.read (| advice_values |);
                              M.read (| instance_values |)
                            ]
                          |)
                        |) in
                      let b :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                              "get",
                              [ F; B ]
                            |),
                            [
                              M.read (| b |);
                              M.read (| rotations |);
                              M.read (| constants |);
                              M.read (| intermediates |);
                              M.read (| fixed_values |);
                              M.read (| advice_values |);
                              M.read (| instance_values |)
                            ]
                          |)
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (| "core::ops::arith::Add", F, [ F ], "add", [] |),
                          [ M.read (| a |); M.read (| b |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Sub",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Sub",
                          1
                        |) in
                      let a := M.alloc (| γ1_0 |) in
                      let b := M.alloc (| γ1_1 |) in
                      let a :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                              "get",
                              [ F; B ]
                            |),
                            [
                              M.read (| a |);
                              M.read (| rotations |);
                              M.read (| constants |);
                              M.read (| intermediates |);
                              M.read (| fixed_values |);
                              M.read (| advice_values |);
                              M.read (| instance_values |)
                            ]
                          |)
                        |) in
                      let b :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                              "get",
                              [ F; B ]
                            |),
                            [
                              M.read (| b |);
                              M.read (| rotations |);
                              M.read (| constants |);
                              M.read (| intermediates |);
                              M.read (| fixed_values |);
                              M.read (| advice_values |);
                              M.read (| instance_values |)
                            ]
                          |)
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (| "core::ops::arith::Sub", F, [ F ], "sub", [] |),
                          [ M.read (| a |); M.read (| b |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Mul",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Mul",
                          1
                        |) in
                      let a := M.alloc (| γ1_0 |) in
                      let b := M.alloc (| γ1_1 |) in
                      let a :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                              "get",
                              [ F; B ]
                            |),
                            [
                              M.read (| a |);
                              M.read (| rotations |);
                              M.read (| constants |);
                              M.read (| intermediates |);
                              M.read (| fixed_values |);
                              M.read (| advice_values |);
                              M.read (| instance_values |)
                            ]
                          |)
                        |) in
                      let b :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                              "get",
                              [ F; B ]
                            |),
                            [
                              M.read (| b |);
                              M.read (| rotations |);
                              M.read (| constants |);
                              M.read (| intermediates |);
                              M.read (| fixed_values |);
                              M.read (| advice_values |);
                              M.read (| instance_values |)
                            ]
                          |)
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (| "core::ops::arith::Mul", F, [ F ], "mul", [] |),
                          [ M.read (| a |); M.read (| b |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Negate",
                          0
                        |) in
                      let v := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (| "core::ops::arith::Neg", F, [], "neg", [] |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                "get",
                                [ F; B ]
                              |),
                              [
                                M.read (| v |);
                                M.read (| rotations |);
                                M.read (| constants |);
                                M.read (| intermediates |);
                                M.read (| fixed_values |);
                                M.read (| advice_values |);
                                M.read (| instance_values |)
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::LcBeta",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::LcBeta",
                          1
                        |) in
                      let a := M.alloc (| γ1_0 |) in
                      let b := M.alloc (| γ1_1 |) in
                      let a :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                              "get",
                              [ F; B ]
                            |),
                            [
                              M.read (| a |);
                              M.read (| rotations |);
                              M.read (| constants |);
                              M.read (| intermediates |);
                              M.read (| fixed_values |);
                              M.read (| advice_values |);
                              M.read (| instance_values |)
                            ]
                          |)
                        |) in
                      let b :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                              "get",
                              [ F; B ]
                            |),
                            [
                              M.read (| b |);
                              M.read (| rotations |);
                              M.read (| constants |);
                              M.read (| intermediates |);
                              M.read (| fixed_values |);
                              M.read (| advice_values |);
                              M.read (| instance_values |)
                            ]
                          |)
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (| "core::ops::arith::Mul", F, [ F ], "mul", [] |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::arith::Add",
                                F,
                                [ Ty.apply (Ty.path "&") [ F ] ],
                                "add",
                                []
                              |),
                              [ M.read (| a |); M.read (| beta |) ]
                            |);
                            M.read (| b |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::LcTheta",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::LcTheta",
                          1
                        |) in
                      let a := M.alloc (| γ1_0 |) in
                      let b := M.alloc (| γ1_1 |) in
                      let a :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                              "get",
                              [ F; B ]
                            |),
                            [
                              M.read (| a |);
                              M.read (| rotations |);
                              M.read (| constants |);
                              M.read (| intermediates |);
                              M.read (| fixed_values |);
                              M.read (| advice_values |);
                              M.read (| instance_values |)
                            ]
                          |)
                        |) in
                      let b :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                              "get",
                              [ F; B ]
                            |),
                            [
                              M.read (| b |);
                              M.read (| rotations |);
                              M.read (| constants |);
                              M.read (| intermediates |);
                              M.read (| fixed_values |);
                              M.read (| advice_values |);
                              M.read (| instance_values |)
                            ]
                          |)
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (| "core::ops::arith::Add", F, [ F ], "add", [] |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::arith::Mul",
                                F,
                                [ Ty.apply (Ty.path "&") [ F ] ],
                                "mul",
                                []
                              |),
                              [ M.read (| a |); M.read (| theta |) ]
                            |);
                            M.read (| b |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::AddGamma",
                          0
                        |) in
                      let v := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::arith::Add",
                            F,
                            [ Ty.apply (Ty.path "&") [ F ] ],
                            "add",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                "get",
                                [ F; B ]
                              |),
                              [
                                M.read (| v |);
                                M.read (| rotations |);
                                M.read (| constants |);
                                M.read (| intermediates |);
                                M.read (| fixed_values |);
                                M.read (| advice_values |);
                                M.read (| instance_values |)
                              ]
                            |);
                            M.read (| gamma |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation::Calculation::Store",
                          0
                        |) in
                      let v := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                            "get",
                            [ F; B ]
                          |),
                          [
                            M.read (| v |);
                            M.read (| rotations |);
                            M.read (| constants |);
                            M.read (| intermediates |);
                            M.read (| fixed_values |);
                            M.read (| advice_values |);
                            M.read (| instance_values |)
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_evaluate : M.IsAssociatedFunction Self "evaluate" evaluate.
    End Impl_halo2_proofs_plonk_evaluation_Calculation.
    
    (* StructRecord
      {
        name := "Evaluator";
        ty_params := [ "C" ];
        fields :=
          [
            ("constants",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.associated; Ty.path "alloc::alloc::Global" ]);
            ("rotations",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ]);
            ("calculations",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.path "halo2_proofs::plonk::evaluation::CalculationInfo";
                  Ty.path "alloc::alloc::Global"
                ]);
            ("value_parts",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.path "halo2_proofs::plonk::evaluation::ValueSource";
                  Ty.path "alloc::alloc::Global"
                ]);
            ("lookup_results",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.path "halo2_proofs::plonk::evaluation::Calculation";
                  Ty.path "alloc::alloc::Global"
                ]);
            ("gpu_gates_expr",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.apply
                    (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                    [ Ty.associated ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("gpu_lookup_expr",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.apply
                    (Ty.path "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                    [ Ty.associated ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("unit_ref_count",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.tuple [ Ty.path "usize"; Ty.path "u32" ]; Ty.path "alloc::alloc::Global" ])
          ];
      } *)
    
    Module Impl_core_default_Default_where_core_default_Default_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_default_Default_associated_type_where_core_default_Default_associated_type_where_core_default_Default_associated_type_for_halo2_proofs_plonk_evaluation_Evaluator_C.
      Definition Self (C : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::Evaluator") [ C ].
      
      (* Default *)
      Definition default (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (Value.StructRecord
              "halo2_proofs::plonk::evaluation::Evaluator"
              [
                ("constants",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                      [],
                      "default",
                      []
                    |),
                    []
                  |));
                ("rotations",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ],
                      [],
                      "default",
                      []
                    |),
                    []
                  |));
                ("calculations",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.path "halo2_proofs::plonk::evaluation::CalculationInfo";
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "default",
                      []
                    |),
                    []
                  |));
                ("value_parts",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.path "halo2_proofs::plonk::evaluation::ValueSource";
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "default",
                      []
                    |),
                    []
                  |));
                ("lookup_results",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.path "halo2_proofs::plonk::evaluation::Calculation";
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "default",
                      []
                    |),
                    []
                  |));
                ("gpu_gates_expr",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.apply
                            (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                            [ Ty.associated ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "default",
                      []
                    |),
                    []
                  |));
                ("gpu_lookup_expr",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.apply
                            (Ty.path "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                            [ Ty.associated ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "default",
                      []
                    |),
                    []
                  |));
                ("unit_ref_count",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.tuple [ Ty.path "usize"; Ty.path "u32" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "default",
                      []
                    |),
                    []
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (C : Ty.t),
        M.IsTraitInstance
          "core::default::Default"
          (Self C)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("default", InstanceField.Method (default C)) ].
    End Impl_core_default_Default_where_core_default_Default_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_default_Default_associated_type_where_core_default_Default_associated_type_where_core_default_Default_associated_type_for_halo2_proofs_plonk_evaluation_Evaluator_C.
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_plonk_evaluation_Evaluator_C.
      Definition Self (C : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::Evaluator") [ C ].
      
      (* Debug *)
      Definition fmt (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              let names :=
                M.alloc (|
                  M.alloc (|
                    Value.Array
                      [
                        M.read (| Value.String "constants" |);
                        M.read (| Value.String "rotations" |);
                        M.read (| Value.String "calculations" |);
                        M.read (| Value.String "value_parts" |);
                        M.read (| Value.String "lookup_results" |);
                        M.read (| Value.String "gpu_gates_expr" |);
                        M.read (| Value.String "gpu_lookup_expr" |);
                        M.read (| Value.String "unit_ref_count" |)
                      ]
                  |)
                |) in
              let values :=
                M.alloc (|
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      Value.Array
                        [
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::evaluation::Evaluator",
                              "constants"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::evaluation::Evaluator",
                              "rotations"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::evaluation::Evaluator",
                              "calculations"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::evaluation::Evaluator",
                              "value_parts"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::evaluation::Evaluator",
                              "lookup_results"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::evaluation::Evaluator",
                              "gpu_gates_expr"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::evaluation::Evaluator",
                              "gpu_lookup_expr"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.alloc (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::plonk::evaluation::Evaluator",
                                "unit_ref_count"
                              |)
                            |))
                        ]
                    |))
                |) in
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_fields_finish",
                    []
                  |),
                  [
                    M.read (| f |);
                    M.read (| Value.String "Evaluator" |);
                    (* Unsize *) M.pointer_coercion (M.read (| names |));
                    M.read (| values |)
                  ]
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (C : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self C)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt C)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_plonk_evaluation_Evaluator_C.
    
    (* StructRecord
      {
        name := "CalculationInfo";
        ty_params := [];
        fields :=
          [
            ("calculation", Ty.path "halo2_proofs::plonk::evaluation::Calculation");
            ("counter", Ty.path "usize")
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_halo2_proofs_plonk_evaluation_CalculationInfo.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation::CalculationInfo".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "CalculationInfo" |);
                M.read (| Value.String "calculation" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::plonk::evaluation::CalculationInfo",
                    "calculation"
                  |));
                M.read (| Value.String "counter" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::evaluation::CalculationInfo",
                      "counter"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_halo2_proofs_plonk_evaluation_CalculationInfo.
    
    Module Impl_halo2_proofs_plonk_evaluation_Evaluator_C.
      Definition Self (C : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::Evaluator") [ C ].
      
      (*
          pub fn new(cs: &ConstraintSystem<C::ScalarExt>) -> Self {
              let mut e = ProveExpression::new();
      
              let mut ev = Evaluator::default();
              ev.add_constant(&C::ScalarExt::zero());
              ev.add_constant(&C::ScalarExt::one());
      
              // Custom gates
      
              for gate in cs.gates.iter() {
                  for poly in gate.polynomials().iter() {
                      let vs = ev.add_expression(poly);
                      ev.value_parts.push(vs);
                      e = e.add_gate(poly);
                  }
              }
      
              let e_exprs = e.flatten().into_iter().collect::<Vec<_>>();
      
              let n_gpu = *crate::plonk::N_GPU;
              log::debug!("gpus number is {}", n_gpu);
              let es = e_exprs
                  .chunks((e_exprs.len() + n_gpu - 1) / n_gpu)
                  .map(|e| ProveExpression::reconstruct(e))
                  .collect::<Vec<_>>();
      
              for (i, e) in es.iter().enumerate() {
                  let complexity = e.get_complexity();
                  ev.unit_ref_count = complexity.ref_cnt.into_iter().collect();
                  ev.unit_ref_count.sort_by(|(_, l), (_, r)| u32::cmp(l, r));
                  ev.unit_ref_count.reverse();
      
                  debug!("--------- expr part {} ---------", i);
                  debug!("complexity is {:?}", e.get_complexity());
                  debug!("sorted ref cnt is {:?}", ev.unit_ref_count);
                  debug!("r deep is {}", e.get_r_deep());
              }
      
              // Lookups
              for lookup in cs.lookups.iter() {
                  let evaluate_lc = |ev: &mut Evaluator<_>, expressions: &Vec<Expression<_>>| {
                      let parts = expressions
                          .iter()
                          .map(|expr| ev.add_expression(expr))
                          .collect::<Vec<_>>();
                      let mut lc = parts[0];
                      for part in parts.iter().skip(1) {
                          lc = ev.add_calculation(Calculation::LcTheta(lc, *part));
                      }
                      lc
                  };
                  // Input coset
                  let compressed_input_coset = evaluate_lc(&mut ev, &lookup.input_expressions);
                  // table coset
                  let compressed_table_coset = evaluate_lc(&mut ev, &lookup.table_expressions);
                  // z(\omega X) (a'(X) + \beta) (s'(X) + \gamma)
                  let right_gamma = ev.add_calculation(Calculation::AddGamma(compressed_table_coset));
                  ev.lookup_results
                      .push(Calculation::LcBeta(compressed_input_coset, right_gamma));
              }
      
              // Lookups in GPU
              for lookup in cs.lookups.iter() {
                  let evaluate_lc = |expressions: &Vec<Expression<_>>| {
                      let parts = expressions
                          .iter()
                          .map(|expr| LookupProveExpression::Expression(ProveExpression::from_expr(expr)))
                          .collect::<Vec<_>>();
                      let mut lc = parts[0].clone();
                      for part in parts.into_iter().skip(1) {
                          lc = LookupProveExpression::LcTheta(Box::new(lc), Box::new(part));
                      }
                      lc
                  };
                  // Input coset
                  let compressed_input_coset = evaluate_lc(&lookup.input_expressions);
                  // table coset
                  let compressed_table_coset = evaluate_lc(&lookup.table_expressions);
                  // z(\omega X) (a'(X) + \beta) (s'(X) + \gamma)
                  let right_gamma = LookupProveExpression::AddGamma(Box::new(compressed_table_coset));
                  ev.gpu_lookup_expr.push(LookupProveExpression::LcBeta(
                      Box::new(compressed_input_coset),
                      Box::new(right_gamma),
                  ));
              }
      
              ev.gpu_gates_expr = es;
              ev
          }
      *)
      Definition new (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ cs ] =>
          ltac:(M.monadic
            (let cs := M.alloc (| cs |) in
            M.read (|
              let e :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                        [ Ty.associated ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let ev :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::Evaluator") [ C ],
                      [],
                      "default",
                      []
                    |),
                    []
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::Evaluator") [ C ],
                      "add_constant",
                      []
                    |),
                    [
                      ev;
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (| "ff::Field", Ty.associated, [], "zero", [] |),
                          []
                        |)
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::Evaluator") [ C ],
                      "add_constant",
                      []
                    |),
                    [
                      ev;
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (| "ff::Field", Ty.associated, [], "one", [] |),
                          []
                        |)
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                [ Ty.associated ]
                            ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                    [ Ty.associated ]
                                ],
                              "iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                        [ Ty.associated ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| cs |),
                                    "halo2_proofs::plonk::circuit::ConstraintSystem",
                                    "gates"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                              [ Ty.associated ]
                                          ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let gate := M.copy (| γ0_0 |) in
                                        M.use
                                          (M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ Ty.associated ]
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ Ty.associated ]
                                                        ],
                                                      "iter",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Gate")
                                                            [ Ty.associated ],
                                                          "polynomials",
                                                          []
                                                        |),
                                                        [ M.read (| gate |) ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let iter := M.copy (| γ |) in
                                                  M.loop (|
                                                    ltac:(M.monadic
                                                      (let _ :=
                                                        M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ Ty.associated ]
                                                                  ],
                                                                [],
                                                                "next",
                                                                []
                                                              |),
                                                              [ iter ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (| M.break (||) |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::option::Option::Some",
                                                                    0
                                                                  |) in
                                                                let poly := M.copy (| γ0_0 |) in
                                                                let vs :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::evaluation::Evaluator")
                                                                          [ C ],
                                                                        "add_expression",
                                                                        []
                                                                      |),
                                                                      [ ev; M.read (| poly |) ]
                                                                    |)
                                                                  |) in
                                                                let _ :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::evaluation::ValueSource";
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "push",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          ev,
                                                                          "halo2_proofs::plonk::evaluation::Evaluator",
                                                                          "value_parts"
                                                                        |);
                                                                        M.read (| vs |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                let _ :=
                                                                  M.write (|
                                                                    e,
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                                          [ Ty.associated ],
                                                                        "add_gate",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| e |);
                                                                        M.read (| poly |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                  |)))
                                            ]
                                          |))))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              let e_exprs :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::IntoIter")
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                            [ Ty.path "u32"; Ty.associated; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "collect",
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path
                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.apply
                                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                                  [ Ty.path "u32"; Ty.associated; Ty.path "alloc::alloc::Global" ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.path
                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.apply
                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                [ Ty.path "u32"; Ty.associated; Ty.path "alloc::alloc::Global" ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                [ Ty.associated ],
                              "flatten",
                              []
                            |),
                            [ M.read (| e |) ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let n_gpu :=
                M.copy (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::deref::Deref",
                      Ty.path "halo2_proofs::plonk::prover::N_GPU",
                      [],
                      "deref",
                      []
                    |),
                    [ M.read (| M.get_constant (| "halo2_proofs::plonk::prover::N_GPU" |) |) ]
                  |)
                |) in
              let _ :=
                let lvl := M.alloc (| Value.StructTuple "log::Level::Debug" [] |) in
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.and (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    Ty.path "log::Level",
                                    [ Ty.path "log::LevelFilter" ],
                                    "le",
                                    []
                                  |),
                                  [ lvl; M.get_constant (| "log::STATIC_MAX_LEVEL" |) ]
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialOrd",
                                      Ty.path "log::Level",
                                      [ Ty.path "log::LevelFilter" ],
                                      "le",
                                      []
                                    |),
                                    [
                                      lvl;
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (| "log::max_level", [] |),
                                          []
                                        |)
                                      |)
                                    ]
                                  |)))
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let _ :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_function (| "log::__private_api::log", [ Ty.tuple [] ] |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_v1",
                                    []
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.alloc (|
                                        Value.Array [ M.read (| Value.String "gpus number is " |) ]
                                      |));
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.alloc (|
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_display",
                                                [ Ty.path "usize" ]
                                              |),
                                              [ n_gpu ]
                                            |)
                                          ]
                                      |))
                                  ]
                                |);
                                M.read (| lvl |);
                                M.alloc (|
                                  Value.Tuple
                                    [
                                      M.read (| Value.String "halo2_proofs::plonk::evaluation" |);
                                      M.read (| Value.String "halo2_proofs::plonk::evaluation" |);
                                      M.read (|
                                        Value.String "halo2_proofs/src/plonk/evaluation.rs"
                                      |)
                                    ]
                                |);
                                Value.Integer 298;
                                Value.Tuple []
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let es :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Chunks")
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.apply
                                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                                    [ Ty.path "u32"; Ty.associated; Ty.path "alloc::alloc::Global" ]
                                ]
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.path
                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.apply
                                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                                [
                                                  Ty.path "u32";
                                                  Ty.associated;
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                    ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                              [ Ty.associated ])
                        ],
                      [],
                      "collect",
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                              [ Ty.associated ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Chunks")
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.apply
                                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                                    [ Ty.path "u32"; Ty.associated; Ty.path "alloc::alloc::Global" ]
                                ]
                            ],
                          [],
                          "map",
                          [
                            Ty.apply
                              (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                              [ Ty.associated ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.path
                                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "alloc::collections::btree::map::BTreeMap")
                                                  [
                                                    Ty.path "u32";
                                                    Ty.associated;
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                          ]
                                      ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                [ Ty.associated ])
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.path
                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.apply
                                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                                        [
                                          Ty.path "u32";
                                          Ty.associated;
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ],
                              "chunks",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.path
                                                "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.apply
                                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                                            [
                                              Ty.path "u32";
                                              Ty.associated;
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [ e_exprs ]
                              |);
                              BinOp.Panic.div (|
                                Integer.Usize,
                                BinOp.Panic.sub (|
                                  Integer.Usize,
                                  BinOp.Panic.add (|
                                    Integer.Usize,
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.path
                                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "alloc::collections::btree::map::BTreeMap")
                                                  [
                                                    Ty.path "u32";
                                                    Ty.associated;
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        "len",
                                        []
                                      |),
                                      [ e_exprs ]
                                    |),
                                    M.read (| n_gpu |)
                                  |),
                                  Value.Integer 1
                                |),
                                M.read (| n_gpu |)
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let e := M.copy (| γ |) in
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                [ Ty.associated ],
                                              "reconstruct",
                                              []
                                            |),
                                            [ M.read (| e |) ]
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                    [ Ty.associated ]
                                ]
                            ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                    [ Ty.associated ]
                                ],
                              [],
                              "enumerate",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                        [ Ty.associated ]
                                    ],
                                  "iter",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                            [ Ty.associated ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [ es ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                  [ Ty.associated ]
                                              ]
                                          ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                        let i := M.copy (| γ1_0 |) in
                                        let e := M.copy (| γ1_1 |) in
                                        let complexity :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                  [ Ty.associated ],
                                                "get_complexity",
                                                []
                                              |),
                                              [ M.read (| e |) ]
                                            |)
                                          |) in
                                        let _ :=
                                          M.write (|
                                            M.SubPointer.get_struct_record_field (|
                                              ev,
                                              "halo2_proofs::plonk::evaluation::Evaluator",
                                              "unit_ref_count"
                                            |),
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "std::collections::hash::map::IntoIter")
                                                  [ Ty.path "usize"; Ty.path "u32" ],
                                                [],
                                                "collect",
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.tuple [ Ty.path "usize"; Ty.path "u32" ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    Ty.apply
                                                      (Ty.path
                                                        "std::collections::hash::map::HashMap")
                                                      [
                                                        Ty.path "usize";
                                                        Ty.path "u32";
                                                        Ty.path "std::hash::random::RandomState"
                                                      ],
                                                    [],
                                                    "into_iter",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        complexity,
                                                        "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                                                        "ref_cnt"
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  [ Ty.tuple [ Ty.path "usize"; Ty.path "u32" ] ],
                                                "sort_by",
                                                [
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.tuple
                                                                [ Ty.path "usize"; Ty.path "u32" ]
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.tuple
                                                                [ Ty.path "usize"; Ty.path "u32" ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.path "core::cmp::Ordering")
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::DerefMut",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.tuple [ Ty.path "usize"; Ty.path "u32" ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    "deref_mut",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      ev,
                                                      "halo2_proofs::plonk::evaluation::Evaluator",
                                                      "unit_ref_count"
                                                    |)
                                                  ]
                                                |);
                                                M.closure
                                                  (fun γ =>
                                                    ltac:(M.monadic
                                                      match γ with
                                                      | [ α0; α1 ] =>
                                                        M.match_operator (|
                                                          M.alloc (| α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ := M.read (| γ |) in
                                                                let γ1_0 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    0
                                                                  |) in
                                                                let γ1_1 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ,
                                                                    1
                                                                  |) in
                                                                let l := M.alloc (| γ1_1 |) in
                                                                M.match_operator (|
                                                                  M.alloc (| α1 |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ := M.read (| γ |) in
                                                                        let γ1_0 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ,
                                                                            0
                                                                          |) in
                                                                        let γ1_1 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ,
                                                                            1
                                                                          |) in
                                                                        let r :=
                                                                          M.alloc (| γ1_1 |) in
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::cmp::Ord",
                                                                            Ty.path "u32",
                                                                            [],
                                                                            "cmp",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (| l |);
                                                                            M.read (| r |)
                                                                          ]
                                                                        |)))
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)
                                                      | _ => M.impossible (||)
                                                      end))
                                              ]
                                            |)
                                          |) in
                                        let _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  [ Ty.tuple [ Ty.path "usize"; Ty.path "u32" ] ],
                                                "reverse",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::DerefMut",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.tuple [ Ty.path "usize"; Ty.path "u32" ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    "deref_mut",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      ev,
                                                      "halo2_proofs::plonk::evaluation::Evaluator",
                                                      "unit_ref_count"
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let _ :=
                                          let lvl :=
                                            M.alloc (|
                                              Value.StructTuple "log::Level::Debug" []
                                            |) in
                                          M.match_operator (|
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        LogicalOp.and (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialOrd",
                                                              Ty.path "log::Level",
                                                              [ Ty.path "log::LevelFilter" ],
                                                              "le",
                                                              []
                                                            |),
                                                            [
                                                              lvl;
                                                              M.get_constant (|
                                                                "log::STATIC_MAX_LEVEL"
                                                              |)
                                                            ]
                                                          |),
                                                          ltac:(M.monadic
                                                            (M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialOrd",
                                                                Ty.path "log::Level",
                                                                [ Ty.path "log::LevelFilter" ],
                                                                "le",
                                                                []
                                                              |),
                                                              [
                                                                lvl;
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_function (|
                                                                      "log::max_level",
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                |)
                                                              ]
                                                            |)))
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  let _ :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "log::__private_api::log",
                                                          [ Ty.tuple [] ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_v1",
                                                              []
                                                            |),
                                                            [
                                                              (* Unsize *)
                                                              M.pointer_coercion
                                                                (M.alloc (|
                                                                  Value.Array
                                                                    [
                                                                      M.read (|
                                                                        Value.String
                                                                          "--------- expr part "
                                                                      |);
                                                                      M.read (|
                                                                        Value.String " ---------"
                                                                      |)
                                                                    ]
                                                                |));
                                                              (* Unsize *)
                                                              M.pointer_coercion
                                                                (M.alloc (|
                                                                  Value.Array
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "core::fmt::rt::Argument",
                                                                          "new_display",
                                                                          [ Ty.path "usize" ]
                                                                        |),
                                                                        [ i ]
                                                                      |)
                                                                    ]
                                                                |))
                                                            ]
                                                          |);
                                                          M.read (| lvl |);
                                                          M.alloc (|
                                                            Value.Tuple
                                                              [
                                                                M.read (|
                                                                  Value.String
                                                                    "halo2_proofs::plonk::evaluation"
                                                                |);
                                                                M.read (|
                                                                  Value.String
                                                                    "halo2_proofs::plonk::evaluation"
                                                                |);
                                                                M.read (|
                                                                  Value.String
                                                                    "halo2_proofs/src/plonk/evaluation.rs"
                                                                |)
                                                              ]
                                                          |);
                                                          Value.Integer 310;
                                                          Value.Tuple []
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        let _ :=
                                          let lvl :=
                                            M.alloc (|
                                              Value.StructTuple "log::Level::Debug" []
                                            |) in
                                          M.match_operator (|
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        LogicalOp.and (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialOrd",
                                                              Ty.path "log::Level",
                                                              [ Ty.path "log::LevelFilter" ],
                                                              "le",
                                                              []
                                                            |),
                                                            [
                                                              lvl;
                                                              M.get_constant (|
                                                                "log::STATIC_MAX_LEVEL"
                                                              |)
                                                            ]
                                                          |),
                                                          ltac:(M.monadic
                                                            (M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialOrd",
                                                                Ty.path "log::Level",
                                                                [ Ty.path "log::LevelFilter" ],
                                                                "le",
                                                                []
                                                              |),
                                                              [
                                                                lvl;
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_function (|
                                                                      "log::max_level",
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                |)
                                                              ]
                                                            |)))
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  let _ :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "log::__private_api::log",
                                                          [ Ty.tuple [] ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_v1",
                                                              []
                                                            |),
                                                            [
                                                              (* Unsize *)
                                                              M.pointer_coercion
                                                                (M.alloc (|
                                                                  Value.Array
                                                                    [
                                                                      M.read (|
                                                                        Value.String
                                                                          "complexity is "
                                                                      |)
                                                                    ]
                                                                |));
                                                              (* Unsize *)
                                                              M.pointer_coercion
                                                                (M.alloc (|
                                                                  Value.Array
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "core::fmt::rt::Argument",
                                                                          "new_debug",
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler"
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                                                  [ Ty.associated ],
                                                                                "get_complexity",
                                                                                []
                                                                              |),
                                                                              [ M.read (| e |) ]
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                |))
                                                            ]
                                                          |);
                                                          M.read (| lvl |);
                                                          M.alloc (|
                                                            Value.Tuple
                                                              [
                                                                M.read (|
                                                                  Value.String
                                                                    "halo2_proofs::plonk::evaluation"
                                                                |);
                                                                M.read (|
                                                                  Value.String
                                                                    "halo2_proofs::plonk::evaluation"
                                                                |);
                                                                M.read (|
                                                                  Value.String
                                                                    "halo2_proofs/src/plonk/evaluation.rs"
                                                                |)
                                                              ]
                                                          |);
                                                          Value.Integer 311;
                                                          Value.Tuple []
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        let _ :=
                                          let lvl :=
                                            M.alloc (|
                                              Value.StructTuple "log::Level::Debug" []
                                            |) in
                                          M.match_operator (|
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        LogicalOp.and (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialOrd",
                                                              Ty.path "log::Level",
                                                              [ Ty.path "log::LevelFilter" ],
                                                              "le",
                                                              []
                                                            |),
                                                            [
                                                              lvl;
                                                              M.get_constant (|
                                                                "log::STATIC_MAX_LEVEL"
                                                              |)
                                                            ]
                                                          |),
                                                          ltac:(M.monadic
                                                            (M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialOrd",
                                                                Ty.path "log::Level",
                                                                [ Ty.path "log::LevelFilter" ],
                                                                "le",
                                                                []
                                                              |),
                                                              [
                                                                lvl;
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_function (|
                                                                      "log::max_level",
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                |)
                                                              ]
                                                            |)))
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  let _ :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "log::__private_api::log",
                                                          [ Ty.tuple [] ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_v1",
                                                              []
                                                            |),
                                                            [
                                                              (* Unsize *)
                                                              M.pointer_coercion
                                                                (M.alloc (|
                                                                  Value.Array
                                                                    [
                                                                      M.read (|
                                                                        Value.String
                                                                          "sorted ref cnt is "
                                                                      |)
                                                                    ]
                                                                |));
                                                              (* Unsize *)
                                                              M.pointer_coercion
                                                                (M.alloc (|
                                                                  Value.Array
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "core::fmt::rt::Argument",
                                                                          "new_debug",
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.path "u32"
                                                                                  ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ]
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            ev,
                                                                            "halo2_proofs::plonk::evaluation::Evaluator",
                                                                            "unit_ref_count"
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                |))
                                                            ]
                                                          |);
                                                          M.read (| lvl |);
                                                          M.alloc (|
                                                            Value.Tuple
                                                              [
                                                                M.read (|
                                                                  Value.String
                                                                    "halo2_proofs::plonk::evaluation"
                                                                |);
                                                                M.read (|
                                                                  Value.String
                                                                    "halo2_proofs::plonk::evaluation"
                                                                |);
                                                                M.read (|
                                                                  Value.String
                                                                    "halo2_proofs/src/plonk/evaluation.rs"
                                                                |)
                                                              ]
                                                          |);
                                                          Value.Integer 312;
                                                          Value.Tuple []
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        let _ :=
                                          let lvl :=
                                            M.alloc (|
                                              Value.StructTuple "log::Level::Debug" []
                                            |) in
                                          M.match_operator (|
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        LogicalOp.and (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialOrd",
                                                              Ty.path "log::Level",
                                                              [ Ty.path "log::LevelFilter" ],
                                                              "le",
                                                              []
                                                            |),
                                                            [
                                                              lvl;
                                                              M.get_constant (|
                                                                "log::STATIC_MAX_LEVEL"
                                                              |)
                                                            ]
                                                          |),
                                                          ltac:(M.monadic
                                                            (M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialOrd",
                                                                Ty.path "log::Level",
                                                                [ Ty.path "log::LevelFilter" ],
                                                                "le",
                                                                []
                                                              |),
                                                              [
                                                                lvl;
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_function (|
                                                                      "log::max_level",
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                |)
                                                              ]
                                                            |)))
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  let _ :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "log::__private_api::log",
                                                          [ Ty.tuple [] ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_v1",
                                                              []
                                                            |),
                                                            [
                                                              (* Unsize *)
                                                              M.pointer_coercion
                                                                (M.alloc (|
                                                                  Value.Array
                                                                    [
                                                                      M.read (|
                                                                        Value.String "r deep is "
                                                                      |)
                                                                    ]
                                                                |));
                                                              (* Unsize *)
                                                              M.pointer_coercion
                                                                (M.alloc (|
                                                                  Value.Array
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "core::fmt::rt::Argument",
                                                                          "new_display",
                                                                          [ Ty.path "u32" ]
                                                                        |),
                                                                        [
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                                                  [ Ty.associated ],
                                                                                "get_r_deep",
                                                                                []
                                                                              |),
                                                                              [ M.read (| e |) ]
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                |))
                                                            ]
                                                          |);
                                                          M.read (| lvl |);
                                                          M.alloc (|
                                                            Value.Tuple
                                                              [
                                                                M.read (|
                                                                  Value.String
                                                                    "halo2_proofs::plonk::evaluation"
                                                                |);
                                                                M.read (|
                                                                  Value.String
                                                                    "halo2_proofs::plonk::evaluation"
                                                                |);
                                                                M.read (|
                                                                  Value.String
                                                                    "halo2_proofs/src/plonk/evaluation.rs"
                                                                |)
                                                              ]
                                                          |);
                                                          Value.Integer 313;
                                                          Value.Tuple []
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                [ Ty.associated ]
                            ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                    [ Ty.associated ]
                                ],
                              "iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                        [ Ty.associated ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| cs |),
                                    "halo2_proofs::plonk::circuit::ConstraintSystem",
                                    "lookups"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                              [ Ty.associated ]
                                          ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let lookup := M.copy (| γ0_0 |) in
                                        let evaluate_lc :=
                                          M.alloc (|
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0; α1 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let ev := M.copy (| γ |) in
                                                            M.match_operator (|
                                                              M.alloc (| α1 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let expressions :=
                                                                      M.copy (| γ |) in
                                                                    M.read (|
                                                                      let parts :=
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::iter::adapters::map::Map")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::Iter")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [
                                                                                          Ty.associated
                                                                                        ]
                                                                                    ];
                                                                                  Ty.function
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                [
                                                                                                  Ty.associated
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::evaluation::ValueSource")
                                                                                ],
                                                                              [],
                                                                              "collect",
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  [
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::evaluation::ValueSource";
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ]
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::Iter")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [
                                                                                          Ty.associated
                                                                                        ]
                                                                                    ],
                                                                                  [],
                                                                                  "map",
                                                                                  [
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::evaluation::ValueSource";
                                                                                    Ty.function
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                                  [
                                                                                                    Ty.associated
                                                                                                  ]
                                                                                              ]
                                                                                          ]
                                                                                      ]
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::evaluation::ValueSource")
                                                                                  ]
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "slice")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                            [
                                                                                              Ty.associated
                                                                                            ]
                                                                                        ],
                                                                                      "iter",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::deref::Deref",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                                [
                                                                                                  Ty.associated
                                                                                                ];
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          [],
                                                                                          "deref",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            expressions
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    ]
                                                                                  |);
                                                                                  M.closure
                                                                                    (fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        match γ with
                                                                                        | [ α0 ] =>
                                                                                          M.match_operator (|
                                                                                            M.alloc (|
                                                                                              α0
                                                                                            |),
                                                                                            [
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (let
                                                                                                        expr :=
                                                                                                    M.copy (|
                                                                                                      γ
                                                                                                    |) in
                                                                                                  M.call_closure (|
                                                                                                    M.get_associated_function (|
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "halo2_proofs::plonk::evaluation::Evaluator")
                                                                                                        [
                                                                                                          C
                                                                                                        ],
                                                                                                      "add_expression",
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.read (|
                                                                                                        ev
                                                                                                      |);
                                                                                                      M.read (|
                                                                                                        expr
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)))
                                                                                            ]
                                                                                          |)
                                                                                        | _ =>
                                                                                          M.impossible (||)
                                                                                        end))
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |) in
                                                                      let lc :=
                                                                        M.copy (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::index::Index",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::evaluation::ValueSource";
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [ Ty.path "usize" ],
                                                                              "index",
                                                                              []
                                                                            |),
                                                                            [ parts; Value.Integer 0
                                                                            ]
                                                                          |)
                                                                        |) in
                                                                      let _ :=
                                                                        M.use
                                                                          (M.match_operator (|
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::iter::traits::collect::IntoIterator",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::iter::adapters::skip::Skip")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::Iter")
                                                                                        [
                                                                                          Ty.path
                                                                                            "halo2_proofs::plonk::evaluation::ValueSource"
                                                                                        ]
                                                                                    ],
                                                                                  [],
                                                                                  "into_iter",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::Iter")
                                                                                        [
                                                                                          Ty.path
                                                                                            "halo2_proofs::plonk::evaluation::ValueSource"
                                                                                        ],
                                                                                      [],
                                                                                      "skip",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "slice")
                                                                                            [
                                                                                              Ty.path
                                                                                                "halo2_proofs::plonk::evaluation::ValueSource"
                                                                                            ],
                                                                                          "iter",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::deref::Deref",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::plonk::evaluation::ValueSource";
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              [],
                                                                                              "deref",
                                                                                              []
                                                                                            |),
                                                                                            [ parts
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |);
                                                                                      Value.Integer
                                                                                        1
                                                                                    ]
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let iter :=
                                                                                    M.copy (|
                                                                                      γ
                                                                                    |) in
                                                                                  M.loop (|
                                                                                    ltac:(M.monadic
                                                                                      (let _ :=
                                                                                        M.match_operator (|
                                                                                          M.alloc (|
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "core::iter::traits::iterator::Iterator",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::iter::adapters::skip::Skip")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::slice::iter::Iter")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::evaluation::ValueSource"
                                                                                                      ]
                                                                                                  ],
                                                                                                [],
                                                                                                "next",
                                                                                                []
                                                                                              |),
                                                                                              [ iter
                                                                                              ]
                                                                                            |)
                                                                                          |),
                                                                                          [
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (M.alloc (|
                                                                                                  M.never_to_any (|
                                                                                                    M.read (|
                                                                                                      M.break (||)
                                                                                                    |)
                                                                                                  |)
                                                                                                |)));
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (let
                                                                                                      γ0_0 :=
                                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                                    γ,
                                                                                                    "core::option::Option::Some",
                                                                                                    0
                                                                                                  |) in
                                                                                                let
                                                                                                      part :=
                                                                                                  M.copy (|
                                                                                                    γ0_0
                                                                                                  |) in
                                                                                                let
                                                                                                      _ :=
                                                                                                  M.write (|
                                                                                                    lc,
                                                                                                    M.call_closure (|
                                                                                                      M.get_associated_function (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "halo2_proofs::plonk::evaluation::Evaluator")
                                                                                                          [
                                                                                                            C
                                                                                                          ],
                                                                                                        "add_calculation",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          ev
                                                                                                        |);
                                                                                                        Value.StructTuple
                                                                                                          "halo2_proofs::plonk::evaluation::Calculation::LcTheta"
                                                                                                          [
                                                                                                            M.read (|
                                                                                                              lc
                                                                                                            |);
                                                                                                            M.read (|
                                                                                                              M.read (|
                                                                                                                part
                                                                                                              |)
                                                                                                            |)
                                                                                                          ]
                                                                                                      ]
                                                                                                    |)
                                                                                                  |) in
                                                                                                M.alloc (|
                                                                                                  Value.Tuple
                                                                                                    []
                                                                                                |)))
                                                                                          ]
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |)))
                                                                                  |)))
                                                                            ]
                                                                          |)) in
                                                                      lc
                                                                    |)))
                                                              ]
                                                            |)))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          |) in
                                        let compressed_input_coset :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::function::Fn",
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::evaluation::Evaluator")
                                                              [ C ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ Ty.associated ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.path
                                                    "halo2_proofs::plonk::evaluation::ValueSource"),
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::evaluation::Evaluator")
                                                            [ C ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ Ty.associated ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ]
                                                    ]
                                                ],
                                                "call",
                                                []
                                              |),
                                              [
                                                evaluate_lc;
                                                Value.Tuple
                                                  [
                                                    ev;
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| lookup |),
                                                      "halo2_proofs::plonk::lookup::Argument",
                                                      "input_expressions"
                                                    |)
                                                  ]
                                              ]
                                            |)
                                          |) in
                                        let compressed_table_coset :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::function::Fn",
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::evaluation::Evaluator")
                                                              [ C ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ Ty.associated ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.path
                                                    "halo2_proofs::plonk::evaluation::ValueSource"),
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::evaluation::Evaluator")
                                                            [ C ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ Ty.associated ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ]
                                                    ]
                                                ],
                                                "call",
                                                []
                                              |),
                                              [
                                                evaluate_lc;
                                                Value.Tuple
                                                  [
                                                    ev;
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| lookup |),
                                                      "halo2_proofs::plonk::lookup::Argument",
                                                      "table_expressions"
                                                    |)
                                                  ]
                                              ]
                                            |)
                                          |) in
                                        let right_gamma :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::evaluation::Evaluator")
                                                  [ C ],
                                                "add_calculation",
                                                []
                                              |),
                                              [
                                                ev;
                                                Value.StructTuple
                                                  "halo2_proofs::plonk::evaluation::Calculation::AddGamma"
                                                  [ M.read (| compressed_table_coset |) ]
                                              ]
                                            |)
                                          |) in
                                        let _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.path
                                                      "halo2_proofs::plonk::evaluation::Calculation";
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "push",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  ev,
                                                  "halo2_proofs::plonk::evaluation::Evaluator",
                                                  "lookup_results"
                                                |);
                                                Value.StructTuple
                                                  "halo2_proofs::plonk::evaluation::Calculation::LcBeta"
                                                  [
                                                    M.read (| compressed_input_coset |);
                                                    M.read (| right_gamma |)
                                                  ]
                                              ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                [ Ty.associated ]
                            ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                    [ Ty.associated ]
                                ],
                              "iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                        [ Ty.associated ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| cs |),
                                    "halo2_proofs::plonk::circuit::ConstraintSystem",
                                    "lookups"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                              [ Ty.associated ]
                                          ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let lookup := M.copy (| γ0_0 |) in
                                        let evaluate_lc :=
                                          M.alloc (|
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let expressions := M.copy (| γ |) in
                                                            M.read (|
                                                              let parts :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::map::Map")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ Ty.associated ]
                                                                            ];
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [
                                                                                          Ty.associated
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                                                              [ Ty.associated ])
                                                                        ],
                                                                      [],
                                                                      "collect",
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                                                              [ Ty.associated ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ]
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                                [ Ty.associated ]
                                                                            ],
                                                                          [],
                                                                          "map",
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                                                              [ Ty.associated ];
                                                                            Ty.function
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                          [
                                                                                            Ty.associated
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                              (Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                                                                [ Ty.associated ])
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ Ty.associated
                                                                                    ]
                                                                                ],
                                                                              "iter",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::deref::Deref",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Expression")
                                                                                        [
                                                                                          Ty.associated
                                                                                        ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [],
                                                                                  "deref",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    expressions
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          M.closure
                                                                            (fun γ =>
                                                                              ltac:(M.monadic
                                                                                match γ with
                                                                                | [ α0 ] =>
                                                                                  M.match_operator (|
                                                                                    M.alloc (|
                                                                                      α0
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                expr :=
                                                                                            M.copy (|
                                                                                              γ
                                                                                            |) in
                                                                                          Value.StructTuple
                                                                                            "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::Expression"
                                                                                            [
                                                                                              M.call_closure (|
                                                                                                M.get_associated_function (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                                                                    [
                                                                                                      Ty.associated
                                                                                                    ],
                                                                                                  "from_expr",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.read (|
                                                                                                    expr
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]))
                                                                                    ]
                                                                                  |)
                                                                                | _ =>
                                                                                  M.impossible (||)
                                                                                end))
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              let lc :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::clone::Clone",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                                                        [ Ty.associated ],
                                                                      [],
                                                                      "clone",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::index::Index",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                                                                [ Ty.associated ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [ Ty.path "usize" ],
                                                                          "index",
                                                                          []
                                                                        |),
                                                                        [ parts; Value.Integer 0 ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |) in
                                                              let _ :=
                                                                M.use
                                                                  (M.match_operator (|
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::collect::IntoIterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::iter::adapters::skip::Skip")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::into_iter::IntoIter")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                                                                    [ Ty.associated
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ],
                                                                          [],
                                                                          "into_iter",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::into_iter::IntoIter")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                                                                    [ Ty.associated
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [],
                                                                              "skip",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::iter::traits::collect::IntoIterator",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                                                                        [
                                                                                          Ty.associated
                                                                                        ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [],
                                                                                  "into_iter",
                                                                                  []
                                                                                |),
                                                                                [ M.read (| parts |)
                                                                                ]
                                                                              |);
                                                                              Value.Integer 1
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let iter :=
                                                                            M.copy (| γ |) in
                                                                          M.loop (|
                                                                            ltac:(M.monadic
                                                                              (let _ :=
                                                                                M.match_operator (|
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::iter::traits::iterator::Iterator",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::iter::adapters::skip::Skip")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::into_iter::IntoIter")
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                                                                                  [
                                                                                                    Ty.associated
                                                                                                  ];
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ]
                                                                                          ],
                                                                                        [],
                                                                                        "next",
                                                                                        []
                                                                                      |),
                                                                                      [ iter ]
                                                                                    |)
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (M.alloc (|
                                                                                          M.never_to_any (|
                                                                                            M.read (|
                                                                                              M.break (||)
                                                                                            |)
                                                                                          |)
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::option::Option::Some",
                                                                                            0
                                                                                          |) in
                                                                                        let part :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        let _ :=
                                                                                          M.write (|
                                                                                            lc,
                                                                                            Value.StructTuple
                                                                                              "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::LcTheta"
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::boxed::Box")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                                                                                          [
                                                                                                            Ty.associated
                                                                                                          ];
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ],
                                                                                                    "new",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      lc
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::boxed::Box")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                                                                                          [
                                                                                                            Ty.associated
                                                                                                          ];
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ],
                                                                                                    "new",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      part
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          Value.Tuple
                                                                                            []
                                                                                        |)))
                                                                                  ]
                                                                                |) in
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |)))
                                                                          |)))
                                                                    ]
                                                                  |)) in
                                                              lc
                                                            |)))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          |) in
                                        let compressed_input_coset :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::function::Fn",
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ Ty.associated ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                                    [ Ty.associated ]),
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ Ty.associated ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ]
                                                    ]
                                                ],
                                                "call",
                                                []
                                              |),
                                              [
                                                evaluate_lc;
                                                Value.Tuple
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| lookup |),
                                                      "halo2_proofs::plonk::lookup::Argument",
                                                      "input_expressions"
                                                    |)
                                                  ]
                                              ]
                                            |)
                                          |) in
                                        let compressed_table_coset :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::function::Fn",
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ Ty.associated ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                                    [ Ty.associated ]),
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ Ty.associated ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ]
                                                    ]
                                                ],
                                                "call",
                                                []
                                              |),
                                              [
                                                evaluate_lc;
                                                Value.Tuple
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| lookup |),
                                                      "halo2_proofs::plonk::lookup::Argument",
                                                      "table_expressions"
                                                    |)
                                                  ]
                                              ]
                                            |)
                                          |) in
                                        let right_gamma :=
                                          M.alloc (|
                                            Value.StructTuple
                                              "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::AddGamma"
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::boxed::Box")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                                          [ Ty.associated ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  [ M.read (| compressed_table_coset |) ]
                                                |)
                                              ]
                                          |) in
                                        let _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                                      [ Ty.associated ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "push",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  ev,
                                                  "halo2_proofs::plonk::evaluation::Evaluator",
                                                  "gpu_lookup_expr"
                                                |);
                                                Value.StructTuple
                                                  "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::LcBeta"
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::boxed::Box")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                                              [ Ty.associated ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "new",
                                                        []
                                                      |),
                                                      [ M.read (| compressed_input_coset |) ]
                                                    |);
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::boxed::Box")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                                              [ Ty.associated ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "new",
                                                        []
                                                      |),
                                                      [ M.read (| right_gamma |) ]
                                                    |)
                                                  ]
                                              ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              let _ :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    ev,
                    "halo2_proofs::plonk::evaluation::Evaluator",
                    "gpu_gates_expr"
                  |),
                  M.read (| es |)
                |) in
              ev
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "new" (new C).
      
      (*
          fn add_rotation(&mut self, rotation: &Rotation) -> usize {
              let position = self.rotations.iter().position(|&c| c == rotation.0);
              match position {
                  Some(pos) => pos,
                  None => {
                      self.rotations.push(rotation.0);
                      self.rotations.len() - 1
                  }
              }
          }
      *)
      Definition add_rotation (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; rotation ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let rotation := M.alloc (| rotation |) in
            M.read (|
              let position :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "i32" ],
                      [],
                      "position",
                      [
                        Ty.function
                          [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "i32" ] ] ]
                          (Ty.path "bool")
                      ]
                    |),
                    [
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [ Ty.path "i32" ],
                            "iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ],
                                [],
                                "deref",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::plonk::evaluation::Evaluator",
                                  "rotations"
                                |)
                              ]
                            |)
                          ]
                        |)
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ := M.read (| γ |) in
                                      let c := M.copy (| γ |) in
                                      BinOp.Pure.eq
                                        (M.read (| c |))
                                        (M.read (|
                                          M.SubPointer.get_struct_tuple_field (|
                                            M.read (| rotation |),
                                            "halo2_proofs::poly::Rotation",
                                            0
                                          |)
                                        |))))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              M.match_operator (|
                position,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::option::Option::Some",
                          0
                        |) in
                      let pos := M.copy (| γ0_0 |) in
                      pos));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ],
                              "push",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::plonk::evaluation::Evaluator",
                                "rotations"
                              |);
                              M.read (|
                                M.SubPointer.get_struct_tuple_field (|
                                  M.read (| rotation |),
                                  "halo2_proofs::poly::Rotation",
                                  0
                                |)
                              |)
                            ]
                          |)
                        |) in
                      M.alloc (|
                        BinOp.Panic.sub (|
                          Integer.Usize,
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ],
                              "len",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::plonk::evaluation::Evaluator",
                                "rotations"
                              |)
                            ]
                          |),
                          Value.Integer 1
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_add_rotation :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "add_rotation" (add_rotation C).
      
      (*
          fn add_constant(&mut self, constant: &C::ScalarExt) -> ValueSource {
              let position = self.constants.iter().position(|&c| c == *constant);
              ValueSource::Constant(match position {
                  Some(pos) => pos,
                  None => {
                      self.constants.push( *constant);
                      self.constants.len() - 1
                  }
              })
          }
      *)
      Definition add_constant (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; constant ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let constant := M.alloc (| constant |) in
            M.read (|
              let position :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.associated ],
                      [],
                      "position",
                      [
                        Ty.function
                          [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.associated ] ] ]
                          (Ty.path "bool")
                      ]
                    |),
                    [
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [ Ty.associated ],
                            "iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                [],
                                "deref",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::plonk::evaluation::Evaluator",
                                  "constants"
                                |)
                              ]
                            |)
                          ]
                        |)
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ := M.read (| γ |) in
                                      let c := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::cmp::PartialEq",
                                          Ty.associated,
                                          [ Ty.associated ],
                                          "eq",
                                          []
                                        |),
                                        [ c; M.read (| constant |) ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              M.alloc (|
                Value.StructTuple
                  "halo2_proofs::plonk::evaluation::ValueSource::Constant"
                  [
                    M.read (|
                      M.match_operator (|
                        position,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let pos := M.copy (| γ0_0 |) in
                              pos));
                          fun γ =>
                            ltac:(M.monadic
                              (let _ :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                      "push",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "halo2_proofs::plonk::evaluation::Evaluator",
                                        "constants"
                                      |);
                                      M.read (| M.read (| constant |) |)
                                    ]
                                  |)
                                |) in
                              M.alloc (|
                                BinOp.Panic.sub (|
                                  Integer.Usize,
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                      "len",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "halo2_proofs::plonk::evaluation::Evaluator",
                                        "constants"
                                      |)
                                    ]
                                  |),
                                  Value.Integer 1
                                |)
                              |)))
                        ]
                      |)
                    |)
                  ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_add_constant :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "add_constant" (add_constant C).
      
      (*
          fn add_calculation(&mut self, calculation: Calculation) -> ValueSource {
              let position = self
                  .calculations
                  .iter()
                  .position(|c| c.calculation == calculation);
              match position {
                  Some(pos) => {
                      self.calculations[pos].counter += 1;
                      ValueSource::Intermediate(pos)
                  }
                  None => {
                      self.calculations.push(CalculationInfo {
                          counter: 1,
                          calculation,
                      });
                      ValueSource::Intermediate(self.calculations.len() - 1)
                  }
              }
          }
      *)
      Definition add_calculation (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; calculation ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let calculation := M.alloc (| calculation |) in
            M.read (|
              let position :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        [ Ty.path "halo2_proofs::plonk::evaluation::CalculationInfo" ],
                      [],
                      "position",
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  [ Ty.path "halo2_proofs::plonk::evaluation::CalculationInfo" ]
                              ]
                          ]
                          (Ty.path "bool")
                      ]
                    |),
                    [
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              [ Ty.path "halo2_proofs::plonk::evaluation::CalculationInfo" ],
                            "iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path "halo2_proofs::plonk::evaluation::CalculationInfo";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "deref",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::plonk::evaluation::Evaluator",
                                  "calculations"
                                |)
                              ]
                            |)
                          ]
                        |)
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let c := M.copy (| γ |) in
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::cmp::PartialEq",
                                          Ty.path "halo2_proofs::plonk::evaluation::Calculation",
                                          [ Ty.path "halo2_proofs::plonk::evaluation::Calculation"
                                          ],
                                          "eq",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| c |),
                                            "halo2_proofs::plonk::evaluation::CalculationInfo",
                                            "calculation"
                                          |);
                                          calculation
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              M.match_operator (|
                position,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::option::Option::Some",
                          0
                        |) in
                      let pos := M.copy (| γ0_0 |) in
                      let _ :=
                        let β :=
                          M.SubPointer.get_struct_record_field (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::index::IndexMut",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path "halo2_proofs::plonk::evaluation::CalculationInfo";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [ Ty.path "usize" ],
                                "index_mut",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::plonk::evaluation::Evaluator",
                                  "calculations"
                                |);
                                M.read (| pos |)
                              ]
                            |),
                            "halo2_proofs::plonk::evaluation::CalculationInfo",
                            "counter"
                          |) in
                        M.write (|
                          β,
                          BinOp.Panic.add (| Integer.Usize, M.read (| β |), Value.Integer 1 |)
                        |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation::ValueSource::Intermediate"
                          [ M.read (| pos |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.path "halo2_proofs::plonk::evaluation::CalculationInfo";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "push",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::plonk::evaluation::Evaluator",
                                "calculations"
                              |);
                              Value.StructRecord
                                "halo2_proofs::plonk::evaluation::CalculationInfo"
                                [
                                  ("counter", Value.Integer 1);
                                  ("calculation", M.read (| calculation |))
                                ]
                            ]
                          |)
                        |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation::ValueSource::Intermediate"
                          [
                            BinOp.Panic.sub (|
                              Integer.Usize,
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.path "halo2_proofs::plonk::evaluation::CalculationInfo";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "len",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "halo2_proofs::plonk::evaluation::Evaluator",
                                    "calculations"
                                  |)
                                ]
                              |),
                              Value.Integer 1
                            |)
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_add_calculation :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "add_calculation" (add_calculation C).
      
      (*
          fn add_expression(&mut self, expr: &Expression<C::ScalarExt>) -> ValueSource {
              match expr {
                  Expression::Constant(scalar) => self.add_constant(scalar),
                  Expression::Selector(_selector) => unreachable!(),
                  Expression::Fixed {
                      query_index: _,
                      column_index,
                      rotation,
                  } => {
                      let rot_idx = self.add_rotation(rotation);
                      self.add_calculation(Calculation::Store(ValueSource::Fixed(
                          *column_index,
                          rot_idx,
                      )))
                  }
                  Expression::Advice {
                      query_index: _,
                      column_index,
                      rotation,
                  } => {
                      let rot_idx = self.add_rotation(rotation);
                      self.add_calculation(Calculation::Store(ValueSource::Advice(
                          *column_index,
                          rot_idx,
                      )))
                  }
                  Expression::Instance {
                      query_index: _,
                      column_index,
                      rotation,
                  } => {
                      let rot_idx = self.add_rotation(rotation);
                      self.add_calculation(Calculation::Store(ValueSource::Instance(
                          *column_index,
                          rot_idx,
                      )))
                  }
                  Expression::Negated(a) => match **a {
                      Expression::Constant(scalar) => self.add_constant(&-scalar),
                      _ => {
                          let result_a = self.add_expression(a);
                          match result_a {
                              ValueSource::Constant(0) => result_a,
                              _ => self.add_calculation(Calculation::Negate(result_a)),
                          }
                      }
                  },
                  Expression::Sum(a, b) => {
                      // Undo subtraction stored as a + (-b) in expressions
                      match &**b {
                          Expression::Negated(b_int) => {
                              let result_a = self.add_expression(a);
                              let result_b = self.add_expression(b_int);
                              if result_a == ValueSource::Constant(0) {
                                  result_b
                              } else if result_b == ValueSource::Constant(0) {
                                  result_a
                              } else {
                                  self.add_calculation(Calculation::Sub(result_a, result_b))
                              }
                          }
                          _ => {
                              let result_a = self.add_expression(a);
                              let result_b = self.add_expression(b);
                              if result_a == ValueSource::Constant(0) {
                                  result_b
                              } else if result_b == ValueSource::Constant(0) {
                                  result_a
                              } else if result_a <= result_b {
                                  self.add_calculation(Calculation::Add(result_a, result_b))
                              } else {
                                  self.add_calculation(Calculation::Add(result_b, result_a))
                              }
                          }
                      }
                  }
                  Expression::Product(a, b) => {
                      let result_a = self.add_expression(a);
                      let result_b = self.add_expression(b);
                      if result_a == ValueSource::Constant(0) || result_b == ValueSource::Constant(0) {
                          ValueSource::Constant(0)
                      } else if result_a == ValueSource::Constant(1) {
                          result_b
                      } else if result_b == ValueSource::Constant(1) {
                          result_a
                      } else if result_a <= result_b {
                          self.add_calculation(Calculation::Mul(result_a, result_b))
                      } else {
                          self.add_calculation(Calculation::Mul(result_b, result_a))
                      }
                  }
                  Expression::Scaled(a, f) => {
                      if *f == C::ScalarExt::zero() {
                          ValueSource::Constant(0)
                      } else if *f == C::ScalarExt::one() {
                          self.add_expression(a)
                      } else {
                          let cst = self.add_constant(f);
                          let result_a = self.add_expression(a);
                          self.add_calculation(Calculation::Mul(result_a, cst))
                      }
                  }
              }
          }
      *)
      Definition add_expression (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; expr ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let expr := M.alloc (| expr |) in
            M.read (|
              M.match_operator (|
                expr,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Constant",
                          0
                        |) in
                      let scalar := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::Evaluator") [ C ],
                            "add_constant",
                            []
                          |),
                          [ M.read (| self |); M.read (| scalar |) ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Selector",
                          0
                        |) in
                      let _selector := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            M.get_function (| "core::panicking::panic", [] |),
                            [ M.read (| Value.String "internal error: entered unreachable code" |) ]
                          |)
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Fixed",
                          "query_index"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Fixed",
                          "column_index"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Fixed",
                          "rotation"
                        |) in
                      let column_index := M.alloc (| γ1_1 |) in
                      let rotation := M.alloc (| γ1_2 |) in
                      let rot_idx :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::Evaluator") [ C ],
                              "add_rotation",
                              []
                            |),
                            [ M.read (| self |); M.read (| rotation |) ]
                          |)
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::Evaluator") [ C ],
                            "add_calculation",
                            []
                          |),
                          [
                            M.read (| self |);
                            Value.StructTuple
                              "halo2_proofs::plonk::evaluation::Calculation::Store"
                              [
                                Value.StructTuple
                                  "halo2_proofs::plonk::evaluation::ValueSource::Fixed"
                                  [ M.read (| M.read (| column_index |) |); M.read (| rot_idx |) ]
                              ]
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Advice",
                          "query_index"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Advice",
                          "column_index"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Advice",
                          "rotation"
                        |) in
                      let column_index := M.alloc (| γ1_1 |) in
                      let rotation := M.alloc (| γ1_2 |) in
                      let rot_idx :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::Evaluator") [ C ],
                              "add_rotation",
                              []
                            |),
                            [ M.read (| self |); M.read (| rotation |) ]
                          |)
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::Evaluator") [ C ],
                            "add_calculation",
                            []
                          |),
                          [
                            M.read (| self |);
                            Value.StructTuple
                              "halo2_proofs::plonk::evaluation::Calculation::Store"
                              [
                                Value.StructTuple
                                  "halo2_proofs::plonk::evaluation::ValueSource::Advice"
                                  [ M.read (| M.read (| column_index |) |); M.read (| rot_idx |) ]
                              ]
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Instance",
                          "query_index"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Instance",
                          "column_index"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Instance",
                          "rotation"
                        |) in
                      let column_index := M.alloc (| γ1_1 |) in
                      let rotation := M.alloc (| γ1_2 |) in
                      let rot_idx :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::Evaluator") [ C ],
                              "add_rotation",
                              []
                            |),
                            [ M.read (| self |); M.read (| rotation |) ]
                          |)
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::Evaluator") [ C ],
                            "add_calculation",
                            []
                          |),
                          [
                            M.read (| self |);
                            Value.StructTuple
                              "halo2_proofs::plonk::evaluation::Calculation::Store"
                              [
                                Value.StructTuple
                                  "halo2_proofs::plonk::evaluation::ValueSource::Instance"
                                  [ M.read (| M.read (| column_index |) |); M.read (| rot_idx |) ]
                              ]
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Negated",
                          0
                        |) in
                      let a := M.alloc (| γ1_0 |) in
                      M.match_operator (|
                        M.read (| M.read (| a |) |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "halo2_proofs::plonk::circuit::Expression::Constant",
                                  0
                                |) in
                              let scalar := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::evaluation::Evaluator")
                                      [ C ],
                                    "add_constant",
                                    []
                                  |),
                                  [
                                    M.read (| self |);
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::arith::Neg",
                                          Ty.associated,
                                          [],
                                          "neg",
                                          []
                                        |),
                                        [ M.read (| scalar |) ]
                                      |)
                                    |)
                                  ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let result_a :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::evaluation::Evaluator")
                                        [ C ],
                                      "add_expression",
                                      []
                                    |),
                                    [ M.read (| self |); M.read (| M.read (| a |) |) ]
                                  |)
                                |) in
                              M.match_operator (|
                                result_a,
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "halo2_proofs::plonk::evaluation::ValueSource::Constant",
                                          0
                                        |) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ0_0 |),
                                          Value.Integer 0
                                        |) in
                                      result_a));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::evaluation::Evaluator")
                                              [ C ],
                                            "add_calculation",
                                            []
                                          |),
                                          [
                                            M.read (| self |);
                                            Value.StructTuple
                                              "halo2_proofs::plonk::evaluation::Calculation::Negate"
                                              [ M.read (| result_a |) ]
                                          ]
                                        |)
                                      |)))
                                ]
                              |)))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Sum",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Sum",
                          1
                        |) in
                      let a := M.alloc (| γ1_0 |) in
                      let b := M.alloc (| γ1_1 |) in
                      M.match_operator (|
                        M.alloc (| M.read (| M.read (| b |) |) |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "halo2_proofs::plonk::circuit::Expression::Negated",
                                  0
                                |) in
                              let b_int := M.alloc (| γ1_0 |) in
                              let result_a :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::evaluation::Evaluator")
                                        [ C ],
                                      "add_expression",
                                      []
                                    |),
                                    [ M.read (| self |); M.read (| M.read (| a |) |) ]
                                  |)
                                |) in
                              let result_b :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::evaluation::Evaluator")
                                        [ C ],
                                      "add_expression",
                                      []
                                    |),
                                    [ M.read (| self |); M.read (| M.read (| b_int |) |) ]
                                  |)
                                |) in
                              M.match_operator (|
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::cmp::PartialEq",
                                                Ty.path
                                                  "halo2_proofs::plonk::evaluation::ValueSource",
                                                [
                                                  Ty.path
                                                    "halo2_proofs::plonk::evaluation::ValueSource"
                                                ],
                                                "eq",
                                                []
                                              |),
                                              [
                                                result_a;
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "halo2_proofs::plonk::evaluation::ValueSource::Constant"
                                                    [ Value.Integer 0 ]
                                                |)
                                              ]
                                            |)
                                          |)) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      result_b));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::cmp::PartialEq",
                                                        Ty.path
                                                          "halo2_proofs::plonk::evaluation::ValueSource",
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::plonk::evaluation::ValueSource"
                                                        ],
                                                        "eq",
                                                        []
                                                      |),
                                                      [
                                                        result_b;
                                                        M.alloc (|
                                                          Value.StructTuple
                                                            "halo2_proofs::plonk::evaluation::ValueSource::Constant"
                                                            [ Value.Integer 0 ]
                                                        |)
                                                      ]
                                                    |)
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              result_a));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::evaluation::Evaluator")
                                                      [ C ],
                                                    "add_calculation",
                                                    []
                                                  |),
                                                  [
                                                    M.read (| self |);
                                                    Value.StructTuple
                                                      "halo2_proofs::plonk::evaluation::Calculation::Sub"
                                                      [ M.read (| result_a |); M.read (| result_b |)
                                                      ]
                                                  ]
                                                |)
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let result_a :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::evaluation::Evaluator")
                                        [ C ],
                                      "add_expression",
                                      []
                                    |),
                                    [ M.read (| self |); M.read (| M.read (| a |) |) ]
                                  |)
                                |) in
                              let result_b :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::evaluation::Evaluator")
                                        [ C ],
                                      "add_expression",
                                      []
                                    |),
                                    [ M.read (| self |); M.read (| M.read (| b |) |) ]
                                  |)
                                |) in
                              M.match_operator (|
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::cmp::PartialEq",
                                                Ty.path
                                                  "halo2_proofs::plonk::evaluation::ValueSource",
                                                [
                                                  Ty.path
                                                    "halo2_proofs::plonk::evaluation::ValueSource"
                                                ],
                                                "eq",
                                                []
                                              |),
                                              [
                                                result_a;
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "halo2_proofs::plonk::evaluation::ValueSource::Constant"
                                                    [ Value.Integer 0 ]
                                                |)
                                              ]
                                            |)
                                          |)) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      result_b));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::cmp::PartialEq",
                                                        Ty.path
                                                          "halo2_proofs::plonk::evaluation::ValueSource",
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::plonk::evaluation::ValueSource"
                                                        ],
                                                        "eq",
                                                        []
                                                      |),
                                                      [
                                                        result_b;
                                                        M.alloc (|
                                                          Value.StructTuple
                                                            "halo2_proofs::plonk::evaluation::ValueSource::Constant"
                                                            [ Value.Integer 0 ]
                                                        |)
                                                      ]
                                                    |)
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              result_a));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialOrd",
                                                                Ty.path
                                                                  "halo2_proofs::plonk::evaluation::ValueSource",
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::evaluation::ValueSource"
                                                                ],
                                                                "le",
                                                                []
                                                              |),
                                                              [ result_a; result_b ]
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        M.is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::evaluation::Evaluator")
                                                              [ C ],
                                                            "add_calculation",
                                                            []
                                                          |),
                                                          [
                                                            M.read (| self |);
                                                            Value.StructTuple
                                                              "halo2_proofs::plonk::evaluation::Calculation::Add"
                                                              [
                                                                M.read (| result_a |);
                                                                M.read (| result_b |)
                                                              ]
                                                          ]
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::evaluation::Evaluator")
                                                              [ C ],
                                                            "add_calculation",
                                                            []
                                                          |),
                                                          [
                                                            M.read (| self |);
                                                            Value.StructTuple
                                                              "halo2_proofs::plonk::evaluation::Calculation::Add"
                                                              [
                                                                M.read (| result_b |);
                                                                M.read (| result_a |)
                                                              ]
                                                          ]
                                                        |)
                                                      |)))
                                                ]
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Product",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Product",
                          1
                        |) in
                      let a := M.alloc (| γ1_0 |) in
                      let b := M.alloc (| γ1_1 |) in
                      let result_a :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::Evaluator") [ C ],
                              "add_expression",
                              []
                            |),
                            [ M.read (| self |); M.read (| M.read (| a |) |) ]
                          |)
                        |) in
                      let result_b :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::Evaluator") [ C ],
                              "add_expression",
                              []
                            |),
                            [ M.read (| self |); M.read (| M.read (| b |) |) ]
                          |)
                        |) in
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    LogicalOp.or (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::cmp::PartialEq",
                                          Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                          [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource"
                                          ],
                                          "eq",
                                          []
                                        |),
                                        [
                                          result_a;
                                          M.alloc (|
                                            Value.StructTuple
                                              "halo2_proofs::plonk::evaluation::ValueSource::Constant"
                                              [ Value.Integer 0 ]
                                          |)
                                        ]
                                      |),
                                      ltac:(M.monadic
                                        (M.call_closure (|
                                          M.get_trait_method (|
                                            "core::cmp::PartialEq",
                                            Ty.path "halo2_proofs::plonk::evaluation::ValueSource",
                                            [ Ty.path "halo2_proofs::plonk::evaluation::ValueSource"
                                            ],
                                            "eq",
                                            []
                                          |),
                                          [
                                            result_b;
                                            M.alloc (|
                                              Value.StructTuple
                                                "halo2_proofs::plonk::evaluation::ValueSource::Constant"
                                                [ Value.Integer 0 ]
                                            |)
                                          ]
                                        |)))
                                    |)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (|
                                Value.StructTuple
                                  "halo2_proofs::plonk::evaluation::ValueSource::Constant"
                                  [ Value.Integer 0 ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::cmp::PartialEq",
                                                Ty.path
                                                  "halo2_proofs::plonk::evaluation::ValueSource",
                                                [
                                                  Ty.path
                                                    "halo2_proofs::plonk::evaluation::ValueSource"
                                                ],
                                                "eq",
                                                []
                                              |),
                                              [
                                                result_a;
                                                M.alloc (|
                                                  Value.StructTuple
                                                    "halo2_proofs::plonk::evaluation::ValueSource::Constant"
                                                    [ Value.Integer 1 ]
                                                |)
                                              ]
                                            |)
                                          |)) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      result_b));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::cmp::PartialEq",
                                                        Ty.path
                                                          "halo2_proofs::plonk::evaluation::ValueSource",
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::plonk::evaluation::ValueSource"
                                                        ],
                                                        "eq",
                                                        []
                                                      |),
                                                      [
                                                        result_b;
                                                        M.alloc (|
                                                          Value.StructTuple
                                                            "halo2_proofs::plonk::evaluation::ValueSource::Constant"
                                                            [ Value.Integer 1 ]
                                                        |)
                                                      ]
                                                    |)
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              result_a));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::cmp::PartialOrd",
                                                                Ty.path
                                                                  "halo2_proofs::plonk::evaluation::ValueSource",
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::evaluation::ValueSource"
                                                                ],
                                                                "le",
                                                                []
                                                              |),
                                                              [ result_a; result_b ]
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        M.is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::evaluation::Evaluator")
                                                              [ C ],
                                                            "add_calculation",
                                                            []
                                                          |),
                                                          [
                                                            M.read (| self |);
                                                            Value.StructTuple
                                                              "halo2_proofs::plonk::evaluation::Calculation::Mul"
                                                              [
                                                                M.read (| result_a |);
                                                                M.read (| result_b |)
                                                              ]
                                                          ]
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::evaluation::Evaluator")
                                                              [ C ],
                                                            "add_calculation",
                                                            []
                                                          |),
                                                          [
                                                            M.read (| self |);
                                                            Value.StructTuple
                                                              "halo2_proofs::plonk::evaluation::Calculation::Mul"
                                                              [
                                                                M.read (| result_b |);
                                                                M.read (| result_a |)
                                                              ]
                                                          ]
                                                        |)
                                                      |)))
                                                ]
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Scaled",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Scaled",
                          1
                        |) in
                      let a := M.alloc (| γ1_0 |) in
                      let f := M.alloc (| γ1_1 |) in
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.associated,
                                        [ Ty.associated ],
                                        "eq",
                                        []
                                      |),
                                      [
                                        M.read (| f |);
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "ff::Field",
                                              Ty.associated,
                                              [],
                                              "zero",
                                              []
                                            |),
                                            []
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (|
                                Value.StructTuple
                                  "halo2_proofs::plonk::evaluation::ValueSource::Constant"
                                  [ Value.Integer 0 ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::cmp::PartialEq",
                                                Ty.associated,
                                                [ Ty.associated ],
                                                "eq",
                                                []
                                              |),
                                              [
                                                M.read (| f |);
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "ff::Field",
                                                      Ty.associated,
                                                      [],
                                                      "one",
                                                      []
                                                    |),
                                                    []
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::evaluation::Evaluator")
                                              [ C ],
                                            "add_expression",
                                            []
                                          |),
                                          [ M.read (| self |); M.read (| M.read (| a |) |) ]
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let cst :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::evaluation::Evaluator")
                                                [ C ],
                                              "add_constant",
                                              []
                                            |),
                                            [ M.read (| self |); M.read (| f |) ]
                                          |)
                                        |) in
                                      let result_a :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::evaluation::Evaluator")
                                                [ C ],
                                              "add_expression",
                                              []
                                            |),
                                            [ M.read (| self |); M.read (| M.read (| a |) |) ]
                                          |)
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::evaluation::Evaluator")
                                              [ C ],
                                            "add_calculation",
                                            []
                                          |),
                                          [
                                            M.read (| self |);
                                            Value.StructTuple
                                              "halo2_proofs::plonk::evaluation::Calculation::Mul"
                                              [ M.read (| result_a |); M.read (| cst |) ]
                                          ]
                                        |)
                                      |)))
                                ]
                              |)))
                        ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_add_expression :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "add_expression" (add_expression C).
      
      (*
          pub(in crate::plonk) fn evaluate_h(
              &self,
              pk: &ProvingKey<C>,
              advice: Vec<&Vec<Polynomial<C::ScalarExt, ExtendedLagrangeCoeff>>>,
              instance: Vec<&Vec<Polynomial<C::ScalarExt, ExtendedLagrangeCoeff>>>,
              y: C::ScalarExt,
              beta: C::ScalarExt,
              gamma: C::ScalarExt,
              theta: C::ScalarExt,
              lookups: &[Vec<lookup::prover::Committed<C>>],
              permutations: &[permutation::prover::Committed<C>],
          ) -> Polynomial<C::ScalarExt, ExtendedLagrangeCoeff> {
              let domain = &pk.vk.domain;
              let size = domain.extended_len();
              let rot_scale = 1 << (domain.extended_k() - domain.k());
              let fixed = &pk.fixed_cosets[..];
              let extended_omega = domain.get_extended_omega();
              let num_lookups = pk.vk.cs.lookups.len();
              let isize = size as i32;
              let one = C::ScalarExt::one();
              let l0 = &pk.l0;
              let l_last = &pk.l_last;
              let l_active_row = &pk.l_active_row;
              let p = &pk.vk.cs.permutation;
      
              let mut values = domain.empty_extended();
              let mut lookup_values = vec![C::Scalar::zero(); size * num_lookups];
      
              // Core expression evaluations
              let num_threads = multicore::current_num_threads();
              let mut table_values_box = ThreadBox::wrap(&mut lookup_values);
      
              for (((advice, instance), lookups), permutation) in advice
                  .iter()
                  .zip(instance.iter())
                  .zip(lookups.iter())
                  .zip(permutations.iter())
              {
                  let timer = ark_std::start_timer!(|| "expressions");
                  multicore::scope(|scope| {
                      let chunk_size = (size + num_threads - 1) / num_threads;
                      for (thread_idx, values) in values.chunks_mut(chunk_size).enumerate() {
                          let start = thread_idx * chunk_size;
                          scope.spawn(move |_| {
                              let table_values = table_values_box.unwrap();
                              let mut rotations = vec![0usize; self.rotations.len()];
                              let mut intermediates: Vec<C::ScalarExt> =
                                  vec![C::ScalarExt::zero(); self.calculations.len()];
                              for (i, value) in values.iter_mut().enumerate() {
                                  let idx = start + i;
      
                                  // All rotation index values
                                  for (rot_idx, rot) in self.rotations.iter().enumerate() {
                                      rotations[rot_idx] = get_rotation_idx(idx, *rot, rot_scale, isize);
                                  }
      
                                  // All calculations, with cached intermediate results
                                  for (i_idx, calc) in self.calculations.iter().enumerate() {
                                      intermediates[i_idx] = calc.calculation.evaluate(
                                          &rotations,
                                          &self.constants,
                                          &intermediates,
                                          fixed,
                                          advice,
                                          instance,
                                          &beta,
                                          &gamma,
                                          &theta,
                                      );
                                  }
      
                                  // Accumulate value parts
                                  for value_part in self.value_parts.iter() {
                                      *value = *value * y
                                          + value_part.get(
                                              &rotations,
                                              &self.constants,
                                              &intermediates,
                                              fixed,
                                              advice,
                                              instance,
                                          );
                                  }
      
                                  // Values required for the lookups
                                  for (t, table_result) in self.lookup_results.iter().enumerate() {
                                      table_values[t * size + idx] = table_result.evaluate(
                                          &rotations,
                                          &self.constants,
                                          &intermediates,
                                          fixed,
                                          advice,
                                          instance,
                                          &beta,
                                          &gamma,
                                          &theta,
                                      );
                                  }
                              }
                          });
                      }
                  });
                  end_timer!(timer);
      
                  let timer = ark_std::start_timer!(|| "permutations");
                  // Permutations
                  let sets = &permutation.sets;
                  if !sets.is_empty() {
                      let blinding_factors = pk.vk.cs.blinding_factors();
                      let last_rotation = Rotation(-((blinding_factors + 1) as i32));
                      let chunk_len = pk.vk.cs.degree() - 2;
                      let delta_start = beta * &C::Scalar::ZETA;
      
                      let first_set = sets.first().unwrap();
                      let last_set = sets.last().unwrap();
      
                      // Permutation constraints
                      parallelize(&mut values, |values, start| {
                          let mut beta_term = extended_omega.pow_vartime(&[start as u64, 0, 0, 0]);
                          for (i, value) in values.iter_mut().enumerate() {
                              let idx = start + i;
                              let r_next = get_rotation_idx(idx, 1, rot_scale, isize);
                              let r_last = get_rotation_idx(idx, last_rotation.0, rot_scale, isize);
      
                              // Enforce only for the first set.
                              // l_0(X) * (1 - z_0(X)) = 0
                              *value = *value * y
                                  + ((one - first_set.permutation_product_coset[idx]) * l0[idx]);
                              // Enforce only for the last set.
                              // l_last(X) * (z_l(X)^2 - z_l(X)) = 0
                              *value = *value * y
                                  + ((last_set.permutation_product_coset[idx]
                                      * last_set.permutation_product_coset[idx]
                                      - last_set.permutation_product_coset[idx])
                                      * l_last[idx]);
                              // Except for the first set, enforce.
                              // l_0(X) * (z_i(X) - z_{i-1}(\omega^(last) X)) = 0
                              for (set_idx, set) in sets.iter().enumerate() {
                                  if set_idx != 0 {
                                      *value = *value * y
                                          + ((set.permutation_product_coset[idx]
                                              - permutation.sets[set_idx - 1].permutation_product_coset
                                                  [r_last])
                                              * l0[idx]);
                                  }
                              }
                              // And for all the sets we enforce:
                              // (1 - (l_last(X) + l_blind(X))) * (
                              //   z_i(\omega X) \prod_j (p(X) + \beta s_j(X) + \gamma)
                              // - z_i(X) \prod_j (p(X) + \delta^j \beta X + \gamma)
                              // )
                              let mut current_delta = delta_start * beta_term;
                              for ((set, columns), cosets) in sets
                                  .iter()
                                  .zip(p.columns.chunks(chunk_len))
                                  .zip(pk.permutation.cosets.chunks(chunk_len))
                              {
                                  let mut left = set.permutation_product_coset[r_next];
                                  for (values, permutation) in columns
                                      .iter()
                                      .map(|&column| match column.column_type() {
                                          Any::Advice => &advice[column.index()],
                                          Any::Fixed => &fixed[column.index()],
                                          Any::Instance => &instance[column.index()],
                                      })
                                      .zip(cosets.iter())
                                  {
                                      left *= values[idx] + beta * permutation[idx] + gamma;
                                  }
      
                                  let mut right = set.permutation_product_coset[idx];
                                  for values in columns.iter().map(|&column| match column.column_type() {
                                      Any::Advice => &advice[column.index()],
                                      Any::Fixed => &fixed[column.index()],
                                      Any::Instance => &instance[column.index()],
                                  }) {
                                      right *= values[idx] + current_delta + gamma;
                                      current_delta *= &C::Scalar::DELTA;
                                  }
      
                                  *value = *value * y + ((left - right) * l_active_row[idx]);
                              }
                              beta_term *= &extended_omega;
                          }
                      });
                  }
                  end_timer!(timer);
      
                  let timer = ark_std::start_timer!(|| "eval_h_lookups");
      
                  for (lookup_idx, lookup) in lookups.iter().enumerate() {
                      // Lookup constraints
                      let table = &lookup_values[lookup_idx * size..(lookup_idx + 1) * size];
                      // Polynomials required for this lookup.
                      // Calculated here so these only have to be kept in memory for the short time
                      // they are actually needed.
                      let product_coset = pk.vk.domain.coeff_to_extended(lookup.product_poly.clone());
                      let permuted_input_coset = pk
                          .vk
                          .domain
                          .coeff_to_extended(lookup.permuted_input_poly.clone());
                      let permuted_table_coset = pk
                          .vk
                          .domain
                          .coeff_to_extended(lookup.permuted_table_poly.clone());
      
                      parallelize(&mut values, |values, start| {
                          for (i, value) in values.iter_mut().enumerate() {
                              let idx = start + i;
      
                              let r_next = get_rotation_idx(idx, 1, rot_scale, isize);
                              let r_prev = get_rotation_idx(idx, -1, rot_scale, isize);
      
                              let a_minus_s = permuted_input_coset[idx] - permuted_table_coset[idx];
                              // l_0(X) * (1 - z(X)) = 0
                              *value = *value * y + ((one - product_coset[idx]) * l0[idx]);
                              // l_last(X) * (z(X)^2 - z(X)) = 0
                              *value = *value * y
                                  + ((product_coset[idx] * product_coset[idx] - product_coset[idx])
                                      * l_last[idx]);
                              // (1 - (l_last(X) + l_blind(X))) * (
                              //   z(\omega X) (a'(X) + \beta) (s'(X) + \gamma)
                              //   - z(X) (\theta^{m-1} a_0(X) + ... + a_{m-1}(X) + \beta)
                              //          (\theta^{m-1} s_0(X) + ... + s_{m-1}(X) + \gamma)
                              // ) = 0
      
                              *value = *value * y
                                  + ((product_coset[r_next]
                                      * (permuted_input_coset[idx] + beta)
                                      * (permuted_table_coset[idx] + gamma)
                                      - product_coset[idx] * table[idx])
                                      * l_active_row[idx]);
      
                              // Check that the first values in the permuted input expression and permuted
                              // fixed expression are the same.
                              // l_0(X) * (a'(X) - s'(X)) = 0
                              *value = *value * y + (a_minus_s * l0[idx]);
      
                              // Check that each value in the permuted lookup input expression is either
                              // equal to the value above it, or the value at the same index in the
                              // permuted table expression.
                              // (1 - (l_last + l_blind)) * (a′(X) − s′(X))⋅(a′(X) − a′(\omega^{-1} X)) = 0
                              *value = *value * y
                                  + (a_minus_s
                                      * (permuted_input_coset[idx] - permuted_input_coset[r_prev])
                                      * l_active_row[idx]);
                          }
                      });
                  }
      
                  end_timer!(timer);
              }
      
              values
          }
      *)
      Definition evaluate_h (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; pk; advice; instance; y; beta; gamma; theta; lookups; permutations ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let pk := M.alloc (| pk |) in
            let advice := M.alloc (| advice |) in
            let instance := M.alloc (| instance |) in
            let y := M.alloc (| y |) in
            let beta := M.alloc (| beta |) in
            let gamma := M.alloc (| gamma |) in
            let theta := M.alloc (| theta |) in
            let lookups := M.alloc (| lookups |) in
            let permutations := M.alloc (| permutations |) in
            M.read (|
              let domain :=
                M.alloc (|
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| pk |),
                      "halo2_proofs::plonk::ProvingKey",
                      "vk"
                    |),
                    "halo2_proofs::plonk::VerifyingKey",
                    "domain"
                  |)
                |) in
              let size :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                        [ Ty.associated ],
                      "extended_len",
                      []
                    |),
                    [ M.read (| domain |) ]
                  |)
                |) in
              let rot_scale :=
                M.alloc (|
                  BinOp.Panic.shl (|
                    Value.Integer 1,
                    BinOp.Panic.sub (|
                      Integer.U32,
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                            [ Ty.associated ],
                          "extended_k",
                          []
                        |),
                        [ M.read (| domain |) ]
                      |),
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                            [ Ty.associated ],
                          "k",
                          []
                        |),
                        [ M.read (| domain |) ]
                      |)
                    |)
                  |)
                |) in
              let fixed :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::index::Index",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.apply
                            (Ty.path "halo2_proofs::poly::Polynomial")
                            [ Ty.associated; Ty.path "halo2_proofs::poly::ExtendedLagrangeCoeff" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [ Ty.path "core::ops::range::RangeFull" ],
                      "index",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| pk |),
                        "halo2_proofs::plonk::ProvingKey",
                        "fixed_cosets"
                      |);
                      Value.StructTuple "core::ops::range::RangeFull" []
                    ]
                  |)
                |) in
              let extended_omega :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                        [ Ty.associated ],
                      "get_extended_omega",
                      []
                    |),
                    [ M.read (| domain |) ]
                  |)
                |) in
              let num_lookups :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.apply
                            (Ty.path "halo2_proofs::plonk::lookup::Argument")
                            [ Ty.associated ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "len",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.SubPointer.get_struct_record_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| pk |),
                            "halo2_proofs::plonk::ProvingKey",
                            "vk"
                          |),
                          "halo2_proofs::plonk::VerifyingKey",
                          "cs"
                        |),
                        "halo2_proofs::plonk::circuit::ConstraintSystem",
                        "lookups"
                      |)
                    ]
                  |)
                |) in
              let isize := M.alloc (| M.rust_cast (M.read (| size |)) |) in
              let one :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (| "ff::Field", Ty.associated, [], "one", [] |),
                    []
                  |)
                |) in
              let l0 :=
                M.alloc (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| pk |),
                    "halo2_proofs::plonk::ProvingKey",
                    "l0"
                  |)
                |) in
              let l_last :=
                M.alloc (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| pk |),
                    "halo2_proofs::plonk::ProvingKey",
                    "l_last"
                  |)
                |) in
              let l_active_row :=
                M.alloc (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| pk |),
                    "halo2_proofs::plonk::ProvingKey",
                    "l_active_row"
                  |)
                |) in
              let p :=
                M.alloc (|
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| pk |),
                        "halo2_proofs::plonk::ProvingKey",
                        "vk"
                      |),
                      "halo2_proofs::plonk::VerifyingKey",
                      "cs"
                    |),
                    "halo2_proofs::plonk::circuit::ConstraintSystem",
                    "permutation"
                  |)
                |) in
              let values :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                        [ Ty.associated ],
                      "empty_extended",
                      []
                    |),
                    [ M.read (| domain |) ]
                  |)
                |) in
              let lookup_values :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (| "alloc::vec::from_elem", [ Ty.associated ] |),
                    [
                      M.call_closure (|
                        M.get_trait_method (| "ff::Field", Ty.associated, [], "zero", [] |),
                        []
                      |);
                      BinOp.Panic.mul (|
                        Integer.Usize,
                        M.read (| size |),
                        M.read (| num_lookups |)
                      |)
                    ]
                  |)
                |) in
              let num_threads :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (| "rayon_core::current_num_threads", [] |),
                    []
                  |)
                |) in
              let table_values_box :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::evaluation::ThreadBox")
                        [ Ty.associated ],
                      "wrap",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::DerefMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                          [],
                          "deref_mut",
                          []
                        |),
                        [ lookup_values ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.associated;
                                                      Ty.path
                                                        "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.associated;
                                                      Ty.path
                                                        "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::lookup::prover::Committed")
                                            [ C ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::permutation::prover::Committed")
                                    [ C ]
                                ]
                            ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.associated;
                                                      Ty.path
                                                        "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.associated;
                                                      Ty.path
                                                        "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::lookup::prover::Committed")
                                            [ C ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ],
                              [],
                              "zip",
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::permutation::prover::Committed")
                                      [ C ]
                                  ]
                              ]
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.associated;
                                                      Ty.path
                                                        "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.associated;
                                                      Ty.path
                                                        "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                    ],
                                  [],
                                  "zip",
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::lookup::prover::Committed")
                                              [ C ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.associated;
                                                      Ty.path
                                                        "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ],
                                      [],
                                      "zip",
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                                      [
                                                        Ty.associated;
                                                        Ty.path
                                                          "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                          ]
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.associated;
                                                          Ty.path
                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ]
                                            ],
                                          "iter",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::Polynomial")
                                                            [
                                                              Ty.associated;
                                                              Ty.path
                                                                "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [ advice ]
                                          |)
                                        ]
                                      |);
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.associated;
                                                          Ty.path
                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ]
                                            ],
                                          "iter",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::Polynomial")
                                                            [
                                                              Ty.associated;
                                                              Ty.path
                                                                "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [ instance ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::lookup::prover::Committed")
                                                [ C ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      "iter",
                                      []
                                    |),
                                    [ M.read (| lookups |) ]
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "halo2_proofs::plonk::permutation::prover::Committed")
                                        [ C ]
                                    ],
                                  "iter",
                                  []
                                |),
                                [ M.read (| permutations |) ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::zip::Zip")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::Polynomial")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path
                                                                      "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::Polynomial")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path
                                                                      "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::lookup::prover::Committed")
                                                          [ C ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::permutation::prover::Committed")
                                                  [ C ]
                                              ]
                                          ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                        let γ2_0 := M.SubPointer.get_tuple_field (| γ1_0, 0 |) in
                                        let γ2_1 := M.SubPointer.get_tuple_field (| γ1_0, 1 |) in
                                        let γ3_0 := M.SubPointer.get_tuple_field (| γ2_0, 0 |) in
                                        let γ3_1 := M.SubPointer.get_tuple_field (| γ2_0, 1 |) in
                                        let advice := M.copy (| γ3_0 |) in
                                        let instance := M.copy (| γ3_1 |) in
                                        let lookups := M.copy (| γ2_1 |) in
                                        let permutation := M.copy (| γ1_1 |) in
                                        let timer :=
                                          M.alloc (|
                                            Value.StructTuple
                                              "ark_std::perf_trace::inner::TimerInfo"
                                              []
                                          |) in
                                        let _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_function (|
                                                "rayon_core::scope::scope",
                                                [
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [ Ty.path "rayon_core::scope::Scope" ]
                                                        ]
                                                    ]
                                                    (Ty.tuple []);
                                                  Ty.tuple []
                                                ]
                                              |),
                                              [
                                                M.closure
                                                  (fun γ =>
                                                    ltac:(M.monadic
                                                      match γ with
                                                      | [ α0 ] =>
                                                        M.match_operator (|
                                                          M.alloc (| α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let scope := M.copy (| γ |) in
                                                                M.read (|
                                                                  let chunk_size :=
                                                                    M.alloc (|
                                                                      BinOp.Panic.div (|
                                                                        Integer.Usize,
                                                                        BinOp.Panic.sub (|
                                                                          Integer.Usize,
                                                                          BinOp.Panic.add (|
                                                                            Integer.Usize,
                                                                            M.read (| size |),
                                                                            M.read (| num_threads |)
                                                                          |),
                                                                          Value.Integer 1
                                                                        |),
                                                                        M.read (| num_threads |)
                                                                      |)
                                                                    |) in
                                                                  M.use
                                                                    (M.match_operator (|
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::iter::traits::collect::IntoIterator",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::iter::adapters::enumerate::Enumerate")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::slice::iter::ChunksMut")
                                                                                  [ Ty.associated ]
                                                                              ],
                                                                            [],
                                                                            "into_iter",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::iter::traits::iterator::Iterator",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::slice::iter::ChunksMut")
                                                                                  [ Ty.associated ],
                                                                                [],
                                                                                "enumerate",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "slice")
                                                                                      [
                                                                                        Ty.associated
                                                                                      ],
                                                                                    "chunks_mut",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::deref::DerefMut",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::poly::Polynomial")
                                                                                          [
                                                                                            Ty.associated;
                                                                                            Ty.path
                                                                                              "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                          ],
                                                                                        [],
                                                                                        "deref_mut",
                                                                                        []
                                                                                      |),
                                                                                      [ values ]
                                                                                    |);
                                                                                    M.read (|
                                                                                      chunk_size
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let iter :=
                                                                              M.copy (| γ |) in
                                                                            M.loop (|
                                                                              ltac:(M.monadic
                                                                                (let _ :=
                                                                                  M.match_operator (|
                                                                                    M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::iter::traits::iterator::Iterator",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::iter::adapters::enumerate::Enumerate")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::slice::iter::ChunksMut")
                                                                                                [
                                                                                                  Ty.associated
                                                                                                ]
                                                                                            ],
                                                                                          [],
                                                                                          "next",
                                                                                          []
                                                                                        |),
                                                                                        [ iter ]
                                                                                      |)
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (M.alloc (|
                                                                                            M.never_to_any (|
                                                                                              M.read (|
                                                                                                M.break (||)
                                                                                              |)
                                                                                            |)
                                                                                          |)));
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                γ0_0 :=
                                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                                              γ,
                                                                                              "core::option::Option::Some",
                                                                                              0
                                                                                            |) in
                                                                                          let
                                                                                                γ1_0 :=
                                                                                            M.SubPointer.get_tuple_field (|
                                                                                              γ0_0,
                                                                                              0
                                                                                            |) in
                                                                                          let
                                                                                                γ1_1 :=
                                                                                            M.SubPointer.get_tuple_field (|
                                                                                              γ0_0,
                                                                                              1
                                                                                            |) in
                                                                                          let
                                                                                                thread_idx :=
                                                                                            M.copy (|
                                                                                              γ1_0
                                                                                            |) in
                                                                                          let
                                                                                                values :=
                                                                                            M.copy (|
                                                                                              γ1_1
                                                                                            |) in
                                                                                          let
                                                                                                start :=
                                                                                            M.alloc (|
                                                                                              BinOp.Panic.mul (|
                                                                                                Integer.Usize,
                                                                                                M.read (|
                                                                                                  thread_idx
                                                                                                |),
                                                                                                M.read (|
                                                                                                  chunk_size
                                                                                                |)
                                                                                              |)
                                                                                            |) in
                                                                                          let _ :=
                                                                                            M.alloc (|
                                                                                              M.call_closure (|
                                                                                                M.get_associated_function (|
                                                                                                  Ty.path
                                                                                                    "rayon_core::scope::Scope",
                                                                                                  "spawn",
                                                                                                  [
                                                                                                    Ty.function
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "rayon_core::scope::Scope"
                                                                                                              ]
                                                                                                          ]
                                                                                                      ]
                                                                                                      (Ty.tuple
                                                                                                        [])
                                                                                                  ]
                                                                                                |),
                                                                                                [
                                                                                                  M.read (|
                                                                                                    scope
                                                                                                  |);
                                                                                                  M.closure
                                                                                                    (fun
                                                                                                        γ =>
                                                                                                      ltac:(M.monadic
                                                                                                        match
                                                                                                          γ
                                                                                                        with
                                                                                                        | [
                                                                                                              α0
                                                                                                            ] =>
                                                                                                          M.match_operator (|
                                                                                                            M.alloc (|
                                                                                                              α0
                                                                                                            |),
                                                                                                            [
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (M.read (|
                                                                                                                    let
                                                                                                                          table_values :=
                                                                                                                      M.alloc (|
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_associated_function (|
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "halo2_proofs::plonk::evaluation::ThreadBox")
                                                                                                                              [
                                                                                                                                Ty.associated
                                                                                                                              ],
                                                                                                                            "unwrap",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            table_values_box
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          rotations :=
                                                                                                                      M.alloc (|
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_function (|
                                                                                                                            "alloc::vec::from_elem",
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "usize"
                                                                                                                            ]
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            Value.Integer
                                                                                                                              0;
                                                                                                                            M.call_closure (|
                                                                                                                              M.get_associated_function (|
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                  [
                                                                                                                                    Ty.path
                                                                                                                                      "i32";
                                                                                                                                    Ty.path
                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                  ],
                                                                                                                                "len",
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                                  M.read (|
                                                                                                                                    self
                                                                                                                                  |),
                                                                                                                                  "halo2_proofs::plonk::evaluation::Evaluator",
                                                                                                                                  "rotations"
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          intermediates :=
                                                                                                                      M.alloc (|
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_function (|
                                                                                                                            "alloc::vec::from_elem",
                                                                                                                            [
                                                                                                                              Ty.associated
                                                                                                                            ]
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.call_closure (|
                                                                                                                              M.get_trait_method (|
                                                                                                                                "ff::Field",
                                                                                                                                Ty.associated,
                                                                                                                                [],
                                                                                                                                "zero",
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              []
                                                                                                                            |);
                                                                                                                            M.call_closure (|
                                                                                                                              M.get_associated_function (|
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                  [
                                                                                                                                    Ty.path
                                                                                                                                      "halo2_proofs::plonk::evaluation::CalculationInfo";
                                                                                                                                    Ty.path
                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                  ],
                                                                                                                                "len",
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                                  M.read (|
                                                                                                                                    self
                                                                                                                                  |),
                                                                                                                                  "halo2_proofs::plonk::evaluation::Evaluator",
                                                                                                                                  "calculations"
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |) in
                                                                                                                    M.use
                                                                                                                      (M.match_operator (|
                                                                                                                        M.alloc (|
                                                                                                                          M.call_closure (|
                                                                                                                            M.get_trait_method (|
                                                                                                                              "core::iter::traits::collect::IntoIterator",
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "core::iter::adapters::enumerate::Enumerate")
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "core::slice::iter::IterMut")
                                                                                                                                    [
                                                                                                                                      Ty.associated
                                                                                                                                    ]
                                                                                                                                ],
                                                                                                                              [],
                                                                                                                              "into_iter",
                                                                                                                              []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              M.call_closure (|
                                                                                                                                M.get_trait_method (|
                                                                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "core::slice::iter::IterMut")
                                                                                                                                    [
                                                                                                                                      Ty.associated
                                                                                                                                    ],
                                                                                                                                  [],
                                                                                                                                  "enumerate",
                                                                                                                                  []
                                                                                                                                |),
                                                                                                                                [
                                                                                                                                  M.call_closure (|
                                                                                                                                    M.get_associated_function (|
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "slice")
                                                                                                                                        [
                                                                                                                                          Ty.associated
                                                                                                                                        ],
                                                                                                                                      "iter_mut",
                                                                                                                                      []
                                                                                                                                    |),
                                                                                                                                    [
                                                                                                                                      M.read (|
                                                                                                                                        values
                                                                                                                                      |)
                                                                                                                                    ]
                                                                                                                                  |)
                                                                                                                                ]
                                                                                                                              |)
                                                                                                                            ]
                                                                                                                          |)
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          fun
                                                                                                                              γ =>
                                                                                                                            ltac:(M.monadic
                                                                                                                              (let
                                                                                                                                    iter :=
                                                                                                                                M.copy (|
                                                                                                                                  γ
                                                                                                                                |) in
                                                                                                                              M.loop (|
                                                                                                                                ltac:(M.monadic
                                                                                                                                  (let
                                                                                                                                        _ :=
                                                                                                                                    M.match_operator (|
                                                                                                                                      M.alloc (|
                                                                                                                                        M.call_closure (|
                                                                                                                                          M.get_trait_method (|
                                                                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "core::iter::adapters::enumerate::Enumerate")
                                                                                                                                              [
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "core::slice::iter::IterMut")
                                                                                                                                                  [
                                                                                                                                                    Ty.associated
                                                                                                                                                  ]
                                                                                                                                              ],
                                                                                                                                            [],
                                                                                                                                            "next",
                                                                                                                                            []
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            iter
                                                                                                                                          ]
                                                                                                                                        |)
                                                                                                                                      |),
                                                                                                                                      [
                                                                                                                                        fun
                                                                                                                                            γ =>
                                                                                                                                          ltac:(M.monadic
                                                                                                                                            (M.alloc (|
                                                                                                                                              M.never_to_any (|
                                                                                                                                                M.read (|
                                                                                                                                                  M.break (||)
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            |)));
                                                                                                                                        fun
                                                                                                                                            γ =>
                                                                                                                                          ltac:(M.monadic
                                                                                                                                            (let
                                                                                                                                                  γ0_0 :=
                                                                                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                                                                                γ,
                                                                                                                                                "core::option::Option::Some",
                                                                                                                                                0
                                                                                                                                              |) in
                                                                                                                                            let
                                                                                                                                                  γ1_0 :=
                                                                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                                                                γ0_0,
                                                                                                                                                0
                                                                                                                                              |) in
                                                                                                                                            let
                                                                                                                                                  γ1_1 :=
                                                                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                                                                γ0_0,
                                                                                                                                                1
                                                                                                                                              |) in
                                                                                                                                            let
                                                                                                                                                  i :=
                                                                                                                                              M.copy (|
                                                                                                                                                γ1_0
                                                                                                                                              |) in
                                                                                                                                            let
                                                                                                                                                  value :=
                                                                                                                                              M.copy (|
                                                                                                                                                γ1_1
                                                                                                                                              |) in
                                                                                                                                            let
                                                                                                                                                  idx :=
                                                                                                                                              M.alloc (|
                                                                                                                                                BinOp.Panic.add (|
                                                                                                                                                  Integer.Usize,
                                                                                                                                                  M.read (|
                                                                                                                                                    start
                                                                                                                                                  |),
                                                                                                                                                  M.read (|
                                                                                                                                                    i
                                                                                                                                                  |)
                                                                                                                                                |)
                                                                                                                                              |) in
                                                                                                                                            let
                                                                                                                                                  _ :=
                                                                                                                                              M.use
                                                                                                                                                (M.match_operator (|
                                                                                                                                                  M.alloc (|
                                                                                                                                                    M.call_closure (|
                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                        "core::iter::traits::collect::IntoIterator",
                                                                                                                                                        Ty.apply
                                                                                                                                                          (Ty.path
                                                                                                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                                                                                                          [
                                                                                                                                                            Ty.apply
                                                                                                                                                              (Ty.path
                                                                                                                                                                "core::slice::iter::Iter")
                                                                                                                                                              [
                                                                                                                                                                Ty.path
                                                                                                                                                                  "i32"
                                                                                                                                                              ]
                                                                                                                                                          ],
                                                                                                                                                        [],
                                                                                                                                                        "into_iter",
                                                                                                                                                        []
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        M.call_closure (|
                                                                                                                                                          M.get_trait_method (|
                                                                                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                                                                                            Ty.apply
                                                                                                                                                              (Ty.path
                                                                                                                                                                "core::slice::iter::Iter")
                                                                                                                                                              [
                                                                                                                                                                Ty.path
                                                                                                                                                                  "i32"
                                                                                                                                                              ],
                                                                                                                                                            [],
                                                                                                                                                            "enumerate",
                                                                                                                                                            []
                                                                                                                                                          |),
                                                                                                                                                          [
                                                                                                                                                            M.call_closure (|
                                                                                                                                                              M.get_associated_function (|
                                                                                                                                                                Ty.apply
                                                                                                                                                                  (Ty.path
                                                                                                                                                                    "slice")
                                                                                                                                                                  [
                                                                                                                                                                    Ty.path
                                                                                                                                                                      "i32"
                                                                                                                                                                  ],
                                                                                                                                                                "iter",
                                                                                                                                                                []
                                                                                                                                                              |),
                                                                                                                                                              [
                                                                                                                                                                M.call_closure (|
                                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                                    "core::ops::deref::Deref",
                                                                                                                                                                    Ty.apply
                                                                                                                                                                      (Ty.path
                                                                                                                                                                        "alloc::vec::Vec")
                                                                                                                                                                      [
                                                                                                                                                                        Ty.path
                                                                                                                                                                          "i32";
                                                                                                                                                                        Ty.path
                                                                                                                                                                          "alloc::alloc::Global"
                                                                                                                                                                      ],
                                                                                                                                                                    [],
                                                                                                                                                                    "deref",
                                                                                                                                                                    []
                                                                                                                                                                  |),
                                                                                                                                                                  [
                                                                                                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                                                                                                      M.read (|
                                                                                                                                                                        self
                                                                                                                                                                      |),
                                                                                                                                                                      "halo2_proofs::plonk::evaluation::Evaluator",
                                                                                                                                                                      "rotations"
                                                                                                                                                                    |)
                                                                                                                                                                  ]
                                                                                                                                                                |)
                                                                                                                                                              ]
                                                                                                                                                            |)
                                                                                                                                                          ]
                                                                                                                                                        |)
                                                                                                                                                      ]
                                                                                                                                                    |)
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    fun
                                                                                                                                                        γ =>
                                                                                                                                                      ltac:(M.monadic
                                                                                                                                                        (let
                                                                                                                                                              iter :=
                                                                                                                                                          M.copy (|
                                                                                                                                                            γ
                                                                                                                                                          |) in
                                                                                                                                                        M.loop (|
                                                                                                                                                          ltac:(M.monadic
                                                                                                                                                            (let
                                                                                                                                                                  _ :=
                                                                                                                                                              M.match_operator (|
                                                                                                                                                                M.alloc (|
                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                                                                                                      Ty.apply
                                                                                                                                                                        (Ty.path
                                                                                                                                                                          "core::iter::adapters::enumerate::Enumerate")
                                                                                                                                                                        [
                                                                                                                                                                          Ty.apply
                                                                                                                                                                            (Ty.path
                                                                                                                                                                              "core::slice::iter::Iter")
                                                                                                                                                                            [
                                                                                                                                                                              Ty.path
                                                                                                                                                                                "i32"
                                                                                                                                                                            ]
                                                                                                                                                                        ],
                                                                                                                                                                      [],
                                                                                                                                                                      "next",
                                                                                                                                                                      []
                                                                                                                                                                    |),
                                                                                                                                                                    [
                                                                                                                                                                      iter
                                                                                                                                                                    ]
                                                                                                                                                                  |)
                                                                                                                                                                |),
                                                                                                                                                                [
                                                                                                                                                                  fun
                                                                                                                                                                      γ =>
                                                                                                                                                                    ltac:(M.monadic
                                                                                                                                                                      (M.alloc (|
                                                                                                                                                                        M.never_to_any (|
                                                                                                                                                                          M.read (|
                                                                                                                                                                            M.break (||)
                                                                                                                                                                          |)
                                                                                                                                                                        |)
                                                                                                                                                                      |)));
                                                                                                                                                                  fun
                                                                                                                                                                      γ =>
                                                                                                                                                                    ltac:(M.monadic
                                                                                                                                                                      (let
                                                                                                                                                                            γ0_0 :=
                                                                                                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                                                                                                          γ,
                                                                                                                                                                          "core::option::Option::Some",
                                                                                                                                                                          0
                                                                                                                                                                        |) in
                                                                                                                                                                      let
                                                                                                                                                                            γ1_0 :=
                                                                                                                                                                        M.SubPointer.get_tuple_field (|
                                                                                                                                                                          γ0_0,
                                                                                                                                                                          0
                                                                                                                                                                        |) in
                                                                                                                                                                      let
                                                                                                                                                                            γ1_1 :=
                                                                                                                                                                        M.SubPointer.get_tuple_field (|
                                                                                                                                                                          γ0_0,
                                                                                                                                                                          1
                                                                                                                                                                        |) in
                                                                                                                                                                      let
                                                                                                                                                                            rot_idx :=
                                                                                                                                                                        M.copy (|
                                                                                                                                                                          γ1_0
                                                                                                                                                                        |) in
                                                                                                                                                                      let
                                                                                                                                                                            rot :=
                                                                                                                                                                        M.copy (|
                                                                                                                                                                          γ1_1
                                                                                                                                                                        |) in
                                                                                                                                                                      let
                                                                                                                                                                            _ :=
                                                                                                                                                                        M.write (|
                                                                                                                                                                          M.call_closure (|
                                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                                              "core::ops::index::IndexMut",
                                                                                                                                                                              Ty.apply
                                                                                                                                                                                (Ty.path
                                                                                                                                                                                  "alloc::vec::Vec")
                                                                                                                                                                                [
                                                                                                                                                                                  Ty.path
                                                                                                                                                                                    "usize";
                                                                                                                                                                                  Ty.path
                                                                                                                                                                                    "alloc::alloc::Global"
                                                                                                                                                                                ],
                                                                                                                                                                              [
                                                                                                                                                                                Ty.path
                                                                                                                                                                                  "usize"
                                                                                                                                                                              ],
                                                                                                                                                                              "index_mut",
                                                                                                                                                                              []
                                                                                                                                                                            |),
                                                                                                                                                                            [
                                                                                                                                                                              rotations;
                                                                                                                                                                              M.read (|
                                                                                                                                                                                rot_idx
                                                                                                                                                                              |)
                                                                                                                                                                            ]
                                                                                                                                                                          |),
                                                                                                                                                                          M.call_closure (|
                                                                                                                                                                            M.get_function (|
                                                                                                                                                                              "halo2_proofs::plonk::evaluation::get_rotation_idx",
                                                                                                                                                                              []
                                                                                                                                                                            |),
                                                                                                                                                                            [
                                                                                                                                                                              M.read (|
                                                                                                                                                                                idx
                                                                                                                                                                              |);
                                                                                                                                                                              M.read (|
                                                                                                                                                                                M.read (|
                                                                                                                                                                                  rot
                                                                                                                                                                                |)
                                                                                                                                                                              |);
                                                                                                                                                                              M.read (|
                                                                                                                                                                                rot_scale
                                                                                                                                                                              |);
                                                                                                                                                                              M.read (|
                                                                                                                                                                                isize
                                                                                                                                                                              |)
                                                                                                                                                                            ]
                                                                                                                                                                          |)
                                                                                                                                                                        |) in
                                                                                                                                                                      M.alloc (|
                                                                                                                                                                        Value.Tuple
                                                                                                                                                                          []
                                                                                                                                                                      |)))
                                                                                                                                                                ]
                                                                                                                                                              |) in
                                                                                                                                                            M.alloc (|
                                                                                                                                                              Value.Tuple
                                                                                                                                                                []
                                                                                                                                                            |)))
                                                                                                                                                        |)))
                                                                                                                                                  ]
                                                                                                                                                |)) in
                                                                                                                                            let
                                                                                                                                                  _ :=
                                                                                                                                              M.use
                                                                                                                                                (M.match_operator (|
                                                                                                                                                  M.alloc (|
                                                                                                                                                    M.call_closure (|
                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                        "core::iter::traits::collect::IntoIterator",
                                                                                                                                                        Ty.apply
                                                                                                                                                          (Ty.path
                                                                                                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                                                                                                          [
                                                                                                                                                            Ty.apply
                                                                                                                                                              (Ty.path
                                                                                                                                                                "core::slice::iter::Iter")
                                                                                                                                                              [
                                                                                                                                                                Ty.path
                                                                                                                                                                  "halo2_proofs::plonk::evaluation::CalculationInfo"
                                                                                                                                                              ]
                                                                                                                                                          ],
                                                                                                                                                        [],
                                                                                                                                                        "into_iter",
                                                                                                                                                        []
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        M.call_closure (|
                                                                                                                                                          M.get_trait_method (|
                                                                                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                                                                                            Ty.apply
                                                                                                                                                              (Ty.path
                                                                                                                                                                "core::slice::iter::Iter")
                                                                                                                                                              [
                                                                                                                                                                Ty.path
                                                                                                                                                                  "halo2_proofs::plonk::evaluation::CalculationInfo"
                                                                                                                                                              ],
                                                                                                                                                            [],
                                                                                                                                                            "enumerate",
                                                                                                                                                            []
                                                                                                                                                          |),
                                                                                                                                                          [
                                                                                                                                                            M.call_closure (|
                                                                                                                                                              M.get_associated_function (|
                                                                                                                                                                Ty.apply
                                                                                                                                                                  (Ty.path
                                                                                                                                                                    "slice")
                                                                                                                                                                  [
                                                                                                                                                                    Ty.path
                                                                                                                                                                      "halo2_proofs::plonk::evaluation::CalculationInfo"
                                                                                                                                                                  ],
                                                                                                                                                                "iter",
                                                                                                                                                                []
                                                                                                                                                              |),
                                                                                                                                                              [
                                                                                                                                                                M.call_closure (|
                                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                                    "core::ops::deref::Deref",
                                                                                                                                                                    Ty.apply
                                                                                                                                                                      (Ty.path
                                                                                                                                                                        "alloc::vec::Vec")
                                                                                                                                                                      [
                                                                                                                                                                        Ty.path
                                                                                                                                                                          "halo2_proofs::plonk::evaluation::CalculationInfo";
                                                                                                                                                                        Ty.path
                                                                                                                                                                          "alloc::alloc::Global"
                                                                                                                                                                      ],
                                                                                                                                                                    [],
                                                                                                                                                                    "deref",
                                                                                                                                                                    []
                                                                                                                                                                  |),
                                                                                                                                                                  [
                                                                                                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                                                                                                      M.read (|
                                                                                                                                                                        self
                                                                                                                                                                      |),
                                                                                                                                                                      "halo2_proofs::plonk::evaluation::Evaluator",
                                                                                                                                                                      "calculations"
                                                                                                                                                                    |)
                                                                                                                                                                  ]
                                                                                                                                                                |)
                                                                                                                                                              ]
                                                                                                                                                            |)
                                                                                                                                                          ]
                                                                                                                                                        |)
                                                                                                                                                      ]
                                                                                                                                                    |)
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    fun
                                                                                                                                                        γ =>
                                                                                                                                                      ltac:(M.monadic
                                                                                                                                                        (let
                                                                                                                                                              iter :=
                                                                                                                                                          M.copy (|
                                                                                                                                                            γ
                                                                                                                                                          |) in
                                                                                                                                                        M.loop (|
                                                                                                                                                          ltac:(M.monadic
                                                                                                                                                            (let
                                                                                                                                                                  _ :=
                                                                                                                                                              M.match_operator (|
                                                                                                                                                                M.alloc (|
                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                                                                                                      Ty.apply
                                                                                                                                                                        (Ty.path
                                                                                                                                                                          "core::iter::adapters::enumerate::Enumerate")
                                                                                                                                                                        [
                                                                                                                                                                          Ty.apply
                                                                                                                                                                            (Ty.path
                                                                                                                                                                              "core::slice::iter::Iter")
                                                                                                                                                                            [
                                                                                                                                                                              Ty.path
                                                                                                                                                                                "halo2_proofs::plonk::evaluation::CalculationInfo"
                                                                                                                                                                            ]
                                                                                                                                                                        ],
                                                                                                                                                                      [],
                                                                                                                                                                      "next",
                                                                                                                                                                      []
                                                                                                                                                                    |),
                                                                                                                                                                    [
                                                                                                                                                                      iter
                                                                                                                                                                    ]
                                                                                                                                                                  |)
                                                                                                                                                                |),
                                                                                                                                                                [
                                                                                                                                                                  fun
                                                                                                                                                                      γ =>
                                                                                                                                                                    ltac:(M.monadic
                                                                                                                                                                      (M.alloc (|
                                                                                                                                                                        M.never_to_any (|
                                                                                                                                                                          M.read (|
                                                                                                                                                                            M.break (||)
                                                                                                                                                                          |)
                                                                                                                                                                        |)
                                                                                                                                                                      |)));
                                                                                                                                                                  fun
                                                                                                                                                                      γ =>
                                                                                                                                                                    ltac:(M.monadic
                                                                                                                                                                      (let
                                                                                                                                                                            γ0_0 :=
                                                                                                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                                                                                                          γ,
                                                                                                                                                                          "core::option::Option::Some",
                                                                                                                                                                          0
                                                                                                                                                                        |) in
                                                                                                                                                                      let
                                                                                                                                                                            γ1_0 :=
                                                                                                                                                                        M.SubPointer.get_tuple_field (|
                                                                                                                                                                          γ0_0,
                                                                                                                                                                          0
                                                                                                                                                                        |) in
                                                                                                                                                                      let
                                                                                                                                                                            γ1_1 :=
                                                                                                                                                                        M.SubPointer.get_tuple_field (|
                                                                                                                                                                          γ0_0,
                                                                                                                                                                          1
                                                                                                                                                                        |) in
                                                                                                                                                                      let
                                                                                                                                                                            i_idx :=
                                                                                                                                                                        M.copy (|
                                                                                                                                                                          γ1_0
                                                                                                                                                                        |) in
                                                                                                                                                                      let
                                                                                                                                                                            calc :=
                                                                                                                                                                        M.copy (|
                                                                                                                                                                          γ1_1
                                                                                                                                                                        |) in
                                                                                                                                                                      let
                                                                                                                                                                            _ :=
                                                                                                                                                                        M.write (|
                                                                                                                                                                          M.call_closure (|
                                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                                              "core::ops::index::IndexMut",
                                                                                                                                                                              Ty.apply
                                                                                                                                                                                (Ty.path
                                                                                                                                                                                  "alloc::vec::Vec")
                                                                                                                                                                                [
                                                                                                                                                                                  Ty.associated;
                                                                                                                                                                                  Ty.path
                                                                                                                                                                                    "alloc::alloc::Global"
                                                                                                                                                                                ],
                                                                                                                                                                              [
                                                                                                                                                                                Ty.path
                                                                                                                                                                                  "usize"
                                                                                                                                                                              ],
                                                                                                                                                                              "index_mut",
                                                                                                                                                                              []
                                                                                                                                                                            |),
                                                                                                                                                                            [
                                                                                                                                                                              intermediates;
                                                                                                                                                                              M.read (|
                                                                                                                                                                                i_idx
                                                                                                                                                                              |)
                                                                                                                                                                            ]
                                                                                                                                                                          |),
                                                                                                                                                                          M.call_closure (|
                                                                                                                                                                            M.get_associated_function (|
                                                                                                                                                                              Ty.path
                                                                                                                                                                                "halo2_proofs::plonk::evaluation::Calculation",
                                                                                                                                                                              "evaluate",
                                                                                                                                                                              [
                                                                                                                                                                                Ty.associated;
                                                                                                                                                                                Ty.path
                                                                                                                                                                                  "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                              ]
                                                                                                                                                                            |),
                                                                                                                                                                            [
                                                                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                                                                M.read (|
                                                                                                                                                                                  calc
                                                                                                                                                                                |),
                                                                                                                                                                                "halo2_proofs::plonk::evaluation::CalculationInfo",
                                                                                                                                                                                "calculation"
                                                                                                                                                                              |);
                                                                                                                                                                              M.call_closure (|
                                                                                                                                                                                M.get_trait_method (|
                                                                                                                                                                                  "core::ops::deref::Deref",
                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                      "alloc::vec::Vec")
                                                                                                                                                                                    [
                                                                                                                                                                                      Ty.path
                                                                                                                                                                                        "usize";
                                                                                                                                                                                      Ty.path
                                                                                                                                                                                        "alloc::alloc::Global"
                                                                                                                                                                                    ],
                                                                                                                                                                                  [],
                                                                                                                                                                                  "deref",
                                                                                                                                                                                  []
                                                                                                                                                                                |),
                                                                                                                                                                                [
                                                                                                                                                                                  rotations
                                                                                                                                                                                ]
                                                                                                                                                                              |);
                                                                                                                                                                              M.call_closure (|
                                                                                                                                                                                M.get_trait_method (|
                                                                                                                                                                                  "core::ops::deref::Deref",
                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                      "alloc::vec::Vec")
                                                                                                                                                                                    [
                                                                                                                                                                                      Ty.associated;
                                                                                                                                                                                      Ty.path
                                                                                                                                                                                        "alloc::alloc::Global"
                                                                                                                                                                                    ],
                                                                                                                                                                                  [],
                                                                                                                                                                                  "deref",
                                                                                                                                                                                  []
                                                                                                                                                                                |),
                                                                                                                                                                                [
                                                                                                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                                                                                                    M.read (|
                                                                                                                                                                                      self
                                                                                                                                                                                    |),
                                                                                                                                                                                    "halo2_proofs::plonk::evaluation::Evaluator",
                                                                                                                                                                                    "constants"
                                                                                                                                                                                  |)
                                                                                                                                                                                ]
                                                                                                                                                                              |);
                                                                                                                                                                              M.call_closure (|
                                                                                                                                                                                M.get_trait_method (|
                                                                                                                                                                                  "core::ops::deref::Deref",
                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                      "alloc::vec::Vec")
                                                                                                                                                                                    [
                                                                                                                                                                                      Ty.associated;
                                                                                                                                                                                      Ty.path
                                                                                                                                                                                        "alloc::alloc::Global"
                                                                                                                                                                                    ],
                                                                                                                                                                                  [],
                                                                                                                                                                                  "deref",
                                                                                                                                                                                  []
                                                                                                                                                                                |),
                                                                                                                                                                                [
                                                                                                                                                                                  intermediates
                                                                                                                                                                                ]
                                                                                                                                                                              |);
                                                                                                                                                                              M.read (|
                                                                                                                                                                                fixed
                                                                                                                                                                              |);
                                                                                                                                                                              M.call_closure (|
                                                                                                                                                                                M.get_trait_method (|
                                                                                                                                                                                  "core::ops::deref::Deref",
                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                      "alloc::vec::Vec")
                                                                                                                                                                                    [
                                                                                                                                                                                      Ty.apply
                                                                                                                                                                                        (Ty.path
                                                                                                                                                                                          "halo2_proofs::poly::Polynomial")
                                                                                                                                                                                        [
                                                                                                                                                                                          Ty.associated;
                                                                                                                                                                                          Ty.path
                                                                                                                                                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                                        ];
                                                                                                                                                                                      Ty.path
                                                                                                                                                                                        "alloc::alloc::Global"
                                                                                                                                                                                    ],
                                                                                                                                                                                  [],
                                                                                                                                                                                  "deref",
                                                                                                                                                                                  []
                                                                                                                                                                                |),
                                                                                                                                                                                [
                                                                                                                                                                                  M.read (|
                                                                                                                                                                                    M.read (|
                                                                                                                                                                                      advice
                                                                                                                                                                                    |)
                                                                                                                                                                                  |)
                                                                                                                                                                                ]
                                                                                                                                                                              |);
                                                                                                                                                                              M.call_closure (|
                                                                                                                                                                                M.get_trait_method (|
                                                                                                                                                                                  "core::ops::deref::Deref",
                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                      "alloc::vec::Vec")
                                                                                                                                                                                    [
                                                                                                                                                                                      Ty.apply
                                                                                                                                                                                        (Ty.path
                                                                                                                                                                                          "halo2_proofs::poly::Polynomial")
                                                                                                                                                                                        [
                                                                                                                                                                                          Ty.associated;
                                                                                                                                                                                          Ty.path
                                                                                                                                                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                                        ];
                                                                                                                                                                                      Ty.path
                                                                                                                                                                                        "alloc::alloc::Global"
                                                                                                                                                                                    ],
                                                                                                                                                                                  [],
                                                                                                                                                                                  "deref",
                                                                                                                                                                                  []
                                                                                                                                                                                |),
                                                                                                                                                                                [
                                                                                                                                                                                  M.read (|
                                                                                                                                                                                    M.read (|
                                                                                                                                                                                      instance
                                                                                                                                                                                    |)
                                                                                                                                                                                  |)
                                                                                                                                                                                ]
                                                                                                                                                                              |);
                                                                                                                                                                              beta;
                                                                                                                                                                              gamma;
                                                                                                                                                                              theta
                                                                                                                                                                            ]
                                                                                                                                                                          |)
                                                                                                                                                                        |) in
                                                                                                                                                                      M.alloc (|
                                                                                                                                                                        Value.Tuple
                                                                                                                                                                          []
                                                                                                                                                                      |)))
                                                                                                                                                                ]
                                                                                                                                                              |) in
                                                                                                                                                            M.alloc (|
                                                                                                                                                              Value.Tuple
                                                                                                                                                                []
                                                                                                                                                            |)))
                                                                                                                                                        |)))
                                                                                                                                                  ]
                                                                                                                                                |)) in
                                                                                                                                            let
                                                                                                                                                  _ :=
                                                                                                                                              M.use
                                                                                                                                                (M.match_operator (|
                                                                                                                                                  M.alloc (|
                                                                                                                                                    M.call_closure (|
                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                        "core::iter::traits::collect::IntoIterator",
                                                                                                                                                        Ty.apply
                                                                                                                                                          (Ty.path
                                                                                                                                                            "core::slice::iter::Iter")
                                                                                                                                                          [
                                                                                                                                                            Ty.path
                                                                                                                                                              "halo2_proofs::plonk::evaluation::ValueSource"
                                                                                                                                                          ],
                                                                                                                                                        [],
                                                                                                                                                        "into_iter",
                                                                                                                                                        []
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        M.call_closure (|
                                                                                                                                                          M.get_associated_function (|
                                                                                                                                                            Ty.apply
                                                                                                                                                              (Ty.path
                                                                                                                                                                "slice")
                                                                                                                                                              [
                                                                                                                                                                Ty.path
                                                                                                                                                                  "halo2_proofs::plonk::evaluation::ValueSource"
                                                                                                                                                              ],
                                                                                                                                                            "iter",
                                                                                                                                                            []
                                                                                                                                                          |),
                                                                                                                                                          [
                                                                                                                                                            M.call_closure (|
                                                                                                                                                              M.get_trait_method (|
                                                                                                                                                                "core::ops::deref::Deref",
                                                                                                                                                                Ty.apply
                                                                                                                                                                  (Ty.path
                                                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                                                  [
                                                                                                                                                                    Ty.path
                                                                                                                                                                      "halo2_proofs::plonk::evaluation::ValueSource";
                                                                                                                                                                    Ty.path
                                                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                                                  ],
                                                                                                                                                                [],
                                                                                                                                                                "deref",
                                                                                                                                                                []
                                                                                                                                                              |),
                                                                                                                                                              [
                                                                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                                                                  M.read (|
                                                                                                                                                                    self
                                                                                                                                                                  |),
                                                                                                                                                                  "halo2_proofs::plonk::evaluation::Evaluator",
                                                                                                                                                                  "value_parts"
                                                                                                                                                                |)
                                                                                                                                                              ]
                                                                                                                                                            |)
                                                                                                                                                          ]
                                                                                                                                                        |)
                                                                                                                                                      ]
                                                                                                                                                    |)
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    fun
                                                                                                                                                        γ =>
                                                                                                                                                      ltac:(M.monadic
                                                                                                                                                        (let
                                                                                                                                                              iter :=
                                                                                                                                                          M.copy (|
                                                                                                                                                            γ
                                                                                                                                                          |) in
                                                                                                                                                        M.loop (|
                                                                                                                                                          ltac:(M.monadic
                                                                                                                                                            (let
                                                                                                                                                                  _ :=
                                                                                                                                                              M.match_operator (|
                                                                                                                                                                M.alloc (|
                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                                                                                                      Ty.apply
                                                                                                                                                                        (Ty.path
                                                                                                                                                                          "core::slice::iter::Iter")
                                                                                                                                                                        [
                                                                                                                                                                          Ty.path
                                                                                                                                                                            "halo2_proofs::plonk::evaluation::ValueSource"
                                                                                                                                                                        ],
                                                                                                                                                                      [],
                                                                                                                                                                      "next",
                                                                                                                                                                      []
                                                                                                                                                                    |),
                                                                                                                                                                    [
                                                                                                                                                                      iter
                                                                                                                                                                    ]
                                                                                                                                                                  |)
                                                                                                                                                                |),
                                                                                                                                                                [
                                                                                                                                                                  fun
                                                                                                                                                                      γ =>
                                                                                                                                                                    ltac:(M.monadic
                                                                                                                                                                      (M.alloc (|
                                                                                                                                                                        M.never_to_any (|
                                                                                                                                                                          M.read (|
                                                                                                                                                                            M.break (||)
                                                                                                                                                                          |)
                                                                                                                                                                        |)
                                                                                                                                                                      |)));
                                                                                                                                                                  fun
                                                                                                                                                                      γ =>
                                                                                                                                                                    ltac:(M.monadic
                                                                                                                                                                      (let
                                                                                                                                                                            γ0_0 :=
                                                                                                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                                                                                                          γ,
                                                                                                                                                                          "core::option::Option::Some",
                                                                                                                                                                          0
                                                                                                                                                                        |) in
                                                                                                                                                                      let
                                                                                                                                                                            value_part :=
                                                                                                                                                                        M.copy (|
                                                                                                                                                                          γ0_0
                                                                                                                                                                        |) in
                                                                                                                                                                      let
                                                                                                                                                                            _ :=
                                                                                                                                                                        M.write (|
                                                                                                                                                                          M.read (|
                                                                                                                                                                            value
                                                                                                                                                                          |),
                                                                                                                                                                          M.call_closure (|
                                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                                              "core::ops::arith::Add",
                                                                                                                                                                              Ty.associated,
                                                                                                                                                                              [
                                                                                                                                                                                Ty.associated
                                                                                                                                                                              ],
                                                                                                                                                                              "add",
                                                                                                                                                                              []
                                                                                                                                                                            |),
                                                                                                                                                                            [
                                                                                                                                                                              M.call_closure (|
                                                                                                                                                                                M.get_trait_method (|
                                                                                                                                                                                  "core::ops::arith::Mul",
                                                                                                                                                                                  Ty.associated,
                                                                                                                                                                                  [
                                                                                                                                                                                    Ty.associated
                                                                                                                                                                                  ],
                                                                                                                                                                                  "mul",
                                                                                                                                                                                  []
                                                                                                                                                                                |),
                                                                                                                                                                                [
                                                                                                                                                                                  M.read (|
                                                                                                                                                                                    M.read (|
                                                                                                                                                                                      value
                                                                                                                                                                                    |)
                                                                                                                                                                                  |);
                                                                                                                                                                                  M.read (|
                                                                                                                                                                                    y
                                                                                                                                                                                  |)
                                                                                                                                                                                ]
                                                                                                                                                                              |);
                                                                                                                                                                              M.call_closure (|
                                                                                                                                                                                M.get_associated_function (|
                                                                                                                                                                                  Ty.path
                                                                                                                                                                                    "halo2_proofs::plonk::evaluation::ValueSource",
                                                                                                                                                                                  "get",
                                                                                                                                                                                  [
                                                                                                                                                                                    Ty.associated;
                                                                                                                                                                                    Ty.path
                                                                                                                                                                                      "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                                  ]
                                                                                                                                                                                |),
                                                                                                                                                                                [
                                                                                                                                                                                  M.read (|
                                                                                                                                                                                    value_part
                                                                                                                                                                                  |);
                                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                                                      "core::ops::deref::Deref",
                                                                                                                                                                                      Ty.apply
                                                                                                                                                                                        (Ty.path
                                                                                                                                                                                          "alloc::vec::Vec")
                                                                                                                                                                                        [
                                                                                                                                                                                          Ty.path
                                                                                                                                                                                            "usize";
                                                                                                                                                                                          Ty.path
                                                                                                                                                                                            "alloc::alloc::Global"
                                                                                                                                                                                        ],
                                                                                                                                                                                      [],
                                                                                                                                                                                      "deref",
                                                                                                                                                                                      []
                                                                                                                                                                                    |),
                                                                                                                                                                                    [
                                                                                                                                                                                      rotations
                                                                                                                                                                                    ]
                                                                                                                                                                                  |);
                                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                                                      "core::ops::deref::Deref",
                                                                                                                                                                                      Ty.apply
                                                                                                                                                                                        (Ty.path
                                                                                                                                                                                          "alloc::vec::Vec")
                                                                                                                                                                                        [
                                                                                                                                                                                          Ty.associated;
                                                                                                                                                                                          Ty.path
                                                                                                                                                                                            "alloc::alloc::Global"
                                                                                                                                                                                        ],
                                                                                                                                                                                      [],
                                                                                                                                                                                      "deref",
                                                                                                                                                                                      []
                                                                                                                                                                                    |),
                                                                                                                                                                                    [
                                                                                                                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                                                                                                                        M.read (|
                                                                                                                                                                                          self
                                                                                                                                                                                        |),
                                                                                                                                                                                        "halo2_proofs::plonk::evaluation::Evaluator",
                                                                                                                                                                                        "constants"
                                                                                                                                                                                      |)
                                                                                                                                                                                    ]
                                                                                                                                                                                  |);
                                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                                                      "core::ops::deref::Deref",
                                                                                                                                                                                      Ty.apply
                                                                                                                                                                                        (Ty.path
                                                                                                                                                                                          "alloc::vec::Vec")
                                                                                                                                                                                        [
                                                                                                                                                                                          Ty.associated;
                                                                                                                                                                                          Ty.path
                                                                                                                                                                                            "alloc::alloc::Global"
                                                                                                                                                                                        ],
                                                                                                                                                                                      [],
                                                                                                                                                                                      "deref",
                                                                                                                                                                                      []
                                                                                                                                                                                    |),
                                                                                                                                                                                    [
                                                                                                                                                                                      intermediates
                                                                                                                                                                                    ]
                                                                                                                                                                                  |);
                                                                                                                                                                                  M.read (|
                                                                                                                                                                                    fixed
                                                                                                                                                                                  |);
                                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                                                      "core::ops::deref::Deref",
                                                                                                                                                                                      Ty.apply
                                                                                                                                                                                        (Ty.path
                                                                                                                                                                                          "alloc::vec::Vec")
                                                                                                                                                                                        [
                                                                                                                                                                                          Ty.apply
                                                                                                                                                                                            (Ty.path
                                                                                                                                                                                              "halo2_proofs::poly::Polynomial")
                                                                                                                                                                                            [
                                                                                                                                                                                              Ty.associated;
                                                                                                                                                                                              Ty.path
                                                                                                                                                                                                "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                                            ];
                                                                                                                                                                                          Ty.path
                                                                                                                                                                                            "alloc::alloc::Global"
                                                                                                                                                                                        ],
                                                                                                                                                                                      [],
                                                                                                                                                                                      "deref",
                                                                                                                                                                                      []
                                                                                                                                                                                    |),
                                                                                                                                                                                    [
                                                                                                                                                                                      M.read (|
                                                                                                                                                                                        M.read (|
                                                                                                                                                                                          advice
                                                                                                                                                                                        |)
                                                                                                                                                                                      |)
                                                                                                                                                                                    ]
                                                                                                                                                                                  |);
                                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                                                      "core::ops::deref::Deref",
                                                                                                                                                                                      Ty.apply
                                                                                                                                                                                        (Ty.path
                                                                                                                                                                                          "alloc::vec::Vec")
                                                                                                                                                                                        [
                                                                                                                                                                                          Ty.apply
                                                                                                                                                                                            (Ty.path
                                                                                                                                                                                              "halo2_proofs::poly::Polynomial")
                                                                                                                                                                                            [
                                                                                                                                                                                              Ty.associated;
                                                                                                                                                                                              Ty.path
                                                                                                                                                                                                "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                                            ];
                                                                                                                                                                                          Ty.path
                                                                                                                                                                                            "alloc::alloc::Global"
                                                                                                                                                                                        ],
                                                                                                                                                                                      [],
                                                                                                                                                                                      "deref",
                                                                                                                                                                                      []
                                                                                                                                                                                    |),
                                                                                                                                                                                    [
                                                                                                                                                                                      M.read (|
                                                                                                                                                                                        M.read (|
                                                                                                                                                                                          instance
                                                                                                                                                                                        |)
                                                                                                                                                                                      |)
                                                                                                                                                                                    ]
                                                                                                                                                                                  |)
                                                                                                                                                                                ]
                                                                                                                                                                              |)
                                                                                                                                                                            ]
                                                                                                                                                                          |)
                                                                                                                                                                        |) in
                                                                                                                                                                      M.alloc (|
                                                                                                                                                                        Value.Tuple
                                                                                                                                                                          []
                                                                                                                                                                      |)))
                                                                                                                                                                ]
                                                                                                                                                              |) in
                                                                                                                                                            M.alloc (|
                                                                                                                                                              Value.Tuple
                                                                                                                                                                []
                                                                                                                                                            |)))
                                                                                                                                                        |)))
                                                                                                                                                  ]
                                                                                                                                                |)) in
                                                                                                                                            M.use
                                                                                                                                              (M.match_operator (|
                                                                                                                                                M.alloc (|
                                                                                                                                                  M.call_closure (|
                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                      "core::iter::traits::collect::IntoIterator",
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "core::iter::adapters::enumerate::Enumerate")
                                                                                                                                                        [
                                                                                                                                                          Ty.apply
                                                                                                                                                            (Ty.path
                                                                                                                                                              "core::slice::iter::Iter")
                                                                                                                                                            [
                                                                                                                                                              Ty.path
                                                                                                                                                                "halo2_proofs::plonk::evaluation::Calculation"
                                                                                                                                                            ]
                                                                                                                                                        ],
                                                                                                                                                      [],
                                                                                                                                                      "into_iter",
                                                                                                                                                      []
                                                                                                                                                    |),
                                                                                                                                                    [
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        M.get_trait_method (|
                                                                                                                                                          "core::iter::traits::iterator::Iterator",
                                                                                                                                                          Ty.apply
                                                                                                                                                            (Ty.path
                                                                                                                                                              "core::slice::iter::Iter")
                                                                                                                                                            [
                                                                                                                                                              Ty.path
                                                                                                                                                                "halo2_proofs::plonk::evaluation::Calculation"
                                                                                                                                                            ],
                                                                                                                                                          [],
                                                                                                                                                          "enumerate",
                                                                                                                                                          []
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          M.call_closure (|
                                                                                                                                                            M.get_associated_function (|
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "slice")
                                                                                                                                                                [
                                                                                                                                                                  Ty.path
                                                                                                                                                                    "halo2_proofs::plonk::evaluation::Calculation"
                                                                                                                                                                ],
                                                                                                                                                              "iter",
                                                                                                                                                              []
                                                                                                                                                            |),
                                                                                                                                                            [
                                                                                                                                                              M.call_closure (|
                                                                                                                                                                M.get_trait_method (|
                                                                                                                                                                  "core::ops::deref::Deref",
                                                                                                                                                                  Ty.apply
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "alloc::vec::Vec")
                                                                                                                                                                    [
                                                                                                                                                                      Ty.path
                                                                                                                                                                        "halo2_proofs::plonk::evaluation::Calculation";
                                                                                                                                                                      Ty.path
                                                                                                                                                                        "alloc::alloc::Global"
                                                                                                                                                                    ],
                                                                                                                                                                  [],
                                                                                                                                                                  "deref",
                                                                                                                                                                  []
                                                                                                                                                                |),
                                                                                                                                                                [
                                                                                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                                                                                    M.read (|
                                                                                                                                                                      self
                                                                                                                                                                    |),
                                                                                                                                                                    "halo2_proofs::plonk::evaluation::Evaluator",
                                                                                                                                                                    "lookup_results"
                                                                                                                                                                  |)
                                                                                                                                                                ]
                                                                                                                                                              |)
                                                                                                                                                            ]
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                      |)
                                                                                                                                                    ]
                                                                                                                                                  |)
                                                                                                                                                |),
                                                                                                                                                [
                                                                                                                                                  fun
                                                                                                                                                      γ =>
                                                                                                                                                    ltac:(M.monadic
                                                                                                                                                      (let
                                                                                                                                                            iter :=
                                                                                                                                                        M.copy (|
                                                                                                                                                          γ
                                                                                                                                                        |) in
                                                                                                                                                      M.loop (|
                                                                                                                                                        ltac:(M.monadic
                                                                                                                                                          (let
                                                                                                                                                                _ :=
                                                                                                                                                            M.match_operator (|
                                                                                                                                                              M.alloc (|
                                                                                                                                                                M.call_closure (|
                                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                                                                                                    Ty.apply
                                                                                                                                                                      (Ty.path
                                                                                                                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                                                                                                                      [
                                                                                                                                                                        Ty.apply
                                                                                                                                                                          (Ty.path
                                                                                                                                                                            "core::slice::iter::Iter")
                                                                                                                                                                          [
                                                                                                                                                                            Ty.path
                                                                                                                                                                              "halo2_proofs::plonk::evaluation::Calculation"
                                                                                                                                                                          ]
                                                                                                                                                                      ],
                                                                                                                                                                    [],
                                                                                                                                                                    "next",
                                                                                                                                                                    []
                                                                                                                                                                  |),
                                                                                                                                                                  [
                                                                                                                                                                    iter
                                                                                                                                                                  ]
                                                                                                                                                                |)
                                                                                                                                                              |),
                                                                                                                                                              [
                                                                                                                                                                fun
                                                                                                                                                                    γ =>
                                                                                                                                                                  ltac:(M.monadic
                                                                                                                                                                    (M.alloc (|
                                                                                                                                                                      M.never_to_any (|
                                                                                                                                                                        M.read (|
                                                                                                                                                                          M.break (||)
                                                                                                                                                                        |)
                                                                                                                                                                      |)
                                                                                                                                                                    |)));
                                                                                                                                                                fun
                                                                                                                                                                    γ =>
                                                                                                                                                                  ltac:(M.monadic
                                                                                                                                                                    (let
                                                                                                                                                                          γ0_0 :=
                                                                                                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                                                                                                        γ,
                                                                                                                                                                        "core::option::Option::Some",
                                                                                                                                                                        0
                                                                                                                                                                      |) in
                                                                                                                                                                    let
                                                                                                                                                                          γ1_0 :=
                                                                                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                                                                                        γ0_0,
                                                                                                                                                                        0
                                                                                                                                                                      |) in
                                                                                                                                                                    let
                                                                                                                                                                          γ1_1 :=
                                                                                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                                                                                        γ0_0,
                                                                                                                                                                        1
                                                                                                                                                                      |) in
                                                                                                                                                                    let
                                                                                                                                                                          t :=
                                                                                                                                                                      M.copy (|
                                                                                                                                                                        γ1_0
                                                                                                                                                                      |) in
                                                                                                                                                                    let
                                                                                                                                                                          table_result :=
                                                                                                                                                                      M.copy (|
                                                                                                                                                                        γ1_1
                                                                                                                                                                      |) in
                                                                                                                                                                    let
                                                                                                                                                                          _ :=
                                                                                                                                                                      M.write (|
                                                                                                                                                                        M.SubPointer.get_array_field (|
                                                                                                                                                                          M.read (|
                                                                                                                                                                            table_values
                                                                                                                                                                          |),
                                                                                                                                                                          M.alloc (|
                                                                                                                                                                            BinOp.Panic.add (|
                                                                                                                                                                              Integer.Usize,
                                                                                                                                                                              BinOp.Panic.mul (|
                                                                                                                                                                                Integer.Usize,
                                                                                                                                                                                M.read (|
                                                                                                                                                                                  t
                                                                                                                                                                                |),
                                                                                                                                                                                M.read (|
                                                                                                                                                                                  size
                                                                                                                                                                                |)
                                                                                                                                                                              |),
                                                                                                                                                                              M.read (|
                                                                                                                                                                                idx
                                                                                                                                                                              |)
                                                                                                                                                                            |)
                                                                                                                                                                          |)
                                                                                                                                                                        |),
                                                                                                                                                                        M.call_closure (|
                                                                                                                                                                          M.get_associated_function (|
                                                                                                                                                                            Ty.path
                                                                                                                                                                              "halo2_proofs::plonk::evaluation::Calculation",
                                                                                                                                                                            "evaluate",
                                                                                                                                                                            [
                                                                                                                                                                              Ty.associated;
                                                                                                                                                                              Ty.path
                                                                                                                                                                                "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                            ]
                                                                                                                                                                          |),
                                                                                                                                                                          [
                                                                                                                                                                            M.read (|
                                                                                                                                                                              table_result
                                                                                                                                                                            |);
                                                                                                                                                                            M.call_closure (|
                                                                                                                                                                              M.get_trait_method (|
                                                                                                                                                                                "core::ops::deref::Deref",
                                                                                                                                                                                Ty.apply
                                                                                                                                                                                  (Ty.path
                                                                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                                                                  [
                                                                                                                                                                                    Ty.path
                                                                                                                                                                                      "usize";
                                                                                                                                                                                    Ty.path
                                                                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                                                                  ],
                                                                                                                                                                                [],
                                                                                                                                                                                "deref",
                                                                                                                                                                                []
                                                                                                                                                                              |),
                                                                                                                                                                              [
                                                                                                                                                                                rotations
                                                                                                                                                                              ]
                                                                                                                                                                            |);
                                                                                                                                                                            M.call_closure (|
                                                                                                                                                                              M.get_trait_method (|
                                                                                                                                                                                "core::ops::deref::Deref",
                                                                                                                                                                                Ty.apply
                                                                                                                                                                                  (Ty.path
                                                                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                                                                  [
                                                                                                                                                                                    Ty.associated;
                                                                                                                                                                                    Ty.path
                                                                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                                                                  ],
                                                                                                                                                                                [],
                                                                                                                                                                                "deref",
                                                                                                                                                                                []
                                                                                                                                                                              |),
                                                                                                                                                                              [
                                                                                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                                                                                  M.read (|
                                                                                                                                                                                    self
                                                                                                                                                                                  |),
                                                                                                                                                                                  "halo2_proofs::plonk::evaluation::Evaluator",
                                                                                                                                                                                  "constants"
                                                                                                                                                                                |)
                                                                                                                                                                              ]
                                                                                                                                                                            |);
                                                                                                                                                                            M.call_closure (|
                                                                                                                                                                              M.get_trait_method (|
                                                                                                                                                                                "core::ops::deref::Deref",
                                                                                                                                                                                Ty.apply
                                                                                                                                                                                  (Ty.path
                                                                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                                                                  [
                                                                                                                                                                                    Ty.associated;
                                                                                                                                                                                    Ty.path
                                                                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                                                                  ],
                                                                                                                                                                                [],
                                                                                                                                                                                "deref",
                                                                                                                                                                                []
                                                                                                                                                                              |),
                                                                                                                                                                              [
                                                                                                                                                                                intermediates
                                                                                                                                                                              ]
                                                                                                                                                                            |);
                                                                                                                                                                            M.read (|
                                                                                                                                                                              fixed
                                                                                                                                                                            |);
                                                                                                                                                                            M.call_closure (|
                                                                                                                                                                              M.get_trait_method (|
                                                                                                                                                                                "core::ops::deref::Deref",
                                                                                                                                                                                Ty.apply
                                                                                                                                                                                  (Ty.path
                                                                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                                                                  [
                                                                                                                                                                                    Ty.apply
                                                                                                                                                                                      (Ty.path
                                                                                                                                                                                        "halo2_proofs::poly::Polynomial")
                                                                                                                                                                                      [
                                                                                                                                                                                        Ty.associated;
                                                                                                                                                                                        Ty.path
                                                                                                                                                                                          "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                                      ];
                                                                                                                                                                                    Ty.path
                                                                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                                                                  ],
                                                                                                                                                                                [],
                                                                                                                                                                                "deref",
                                                                                                                                                                                []
                                                                                                                                                                              |),
                                                                                                                                                                              [
                                                                                                                                                                                M.read (|
                                                                                                                                                                                  M.read (|
                                                                                                                                                                                    advice
                                                                                                                                                                                  |)
                                                                                                                                                                                |)
                                                                                                                                                                              ]
                                                                                                                                                                            |);
                                                                                                                                                                            M.call_closure (|
                                                                                                                                                                              M.get_trait_method (|
                                                                                                                                                                                "core::ops::deref::Deref",
                                                                                                                                                                                Ty.apply
                                                                                                                                                                                  (Ty.path
                                                                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                                                                  [
                                                                                                                                                                                    Ty.apply
                                                                                                                                                                                      (Ty.path
                                                                                                                                                                                        "halo2_proofs::poly::Polynomial")
                                                                                                                                                                                      [
                                                                                                                                                                                        Ty.associated;
                                                                                                                                                                                        Ty.path
                                                                                                                                                                                          "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                                      ];
                                                                                                                                                                                    Ty.path
                                                                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                                                                  ],
                                                                                                                                                                                [],
                                                                                                                                                                                "deref",
                                                                                                                                                                                []
                                                                                                                                                                              |),
                                                                                                                                                                              [
                                                                                                                                                                                M.read (|
                                                                                                                                                                                  M.read (|
                                                                                                                                                                                    instance
                                                                                                                                                                                  |)
                                                                                                                                                                                |)
                                                                                                                                                                              ]
                                                                                                                                                                            |);
                                                                                                                                                                            beta;
                                                                                                                                                                            gamma;
                                                                                                                                                                            theta
                                                                                                                                                                          ]
                                                                                                                                                                        |)
                                                                                                                                                                      |) in
                                                                                                                                                                    M.alloc (|
                                                                                                                                                                      Value.Tuple
                                                                                                                                                                        []
                                                                                                                                                                    |)))
                                                                                                                                                              ]
                                                                                                                                                            |) in
                                                                                                                                                          M.alloc (|
                                                                                                                                                            Value.Tuple
                                                                                                                                                              []
                                                                                                                                                          |)))
                                                                                                                                                      |)))
                                                                                                                                                ]
                                                                                                                                              |))))
                                                                                                                                      ]
                                                                                                                                    |) in
                                                                                                                                  M.alloc (|
                                                                                                                                    Value.Tuple
                                                                                                                                      []
                                                                                                                                  |)))
                                                                                                                              |)))
                                                                                                                        ]
                                                                                                                      |))
                                                                                                                  |)))
                                                                                                            ]
                                                                                                          |)
                                                                                                        | _ =>
                                                                                                          M.impossible (||)
                                                                                                        end))
                                                                                                ]
                                                                                              |)
                                                                                            |) in
                                                                                          M.alloc (|
                                                                                            Value.Tuple
                                                                                              []
                                                                                          |)))
                                                                                    ]
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)))
                                                                            |)))
                                                                      ]
                                                                    |))
                                                                |)))
                                                          ]
                                                        |)
                                                      | _ => M.impossible (||)
                                                      end))
                                              ]
                                            |)
                                          |) in
                                        M.match_operator (|
                                          timer,
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let timer :=
                                                  M.alloc (|
                                                    Value.StructTuple
                                                      "ark_std::perf_trace::inner::TimerInfo"
                                                      []
                                                  |) in
                                                let sets :=
                                                  M.alloc (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| permutation |),
                                                      "halo2_proofs::plonk::permutation::prover::Committed",
                                                      "sets"
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.match_operator (|
                                                    M.alloc (| Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                UnOp.Pure.not
                                                                  (M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                                                            [ C ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      "is_empty",
                                                                      []
                                                                    |),
                                                                    [ M.read (| sets |) ]
                                                                  |))
                                                              |)) in
                                                          let _ :=
                                                            M.is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          let blinding_factors :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                                    [ Ty.associated ],
                                                                  "blinding_factors",
                                                                  []
                                                                |),
                                                                [
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| pk |),
                                                                      "halo2_proofs::plonk::ProvingKey",
                                                                      "vk"
                                                                    |),
                                                                    "halo2_proofs::plonk::VerifyingKey",
                                                                    "cs"
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          let last_rotation :=
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "halo2_proofs::poly::Rotation"
                                                                [
                                                                  UnOp.Panic.neg (|
                                                                    Integer.I32,
                                                                    M.rust_cast
                                                                      (BinOp.Panic.add (|
                                                                        Integer.Usize,
                                                                        M.read (|
                                                                          blinding_factors
                                                                        |),
                                                                        Value.Integer 1
                                                                      |))
                                                                  |)
                                                                ]
                                                            |) in
                                                          let chunk_len :=
                                                            M.alloc (|
                                                              BinOp.Panic.sub (|
                                                                Integer.Usize,
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                                      [ Ty.associated ],
                                                                    "degree",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.read (| pk |),
                                                                        "halo2_proofs::plonk::ProvingKey",
                                                                        "vk"
                                                                      |),
                                                                      "halo2_proofs::plonk::VerifyingKey",
                                                                      "cs"
                                                                    |)
                                                                  ]
                                                                |),
                                                                Value.Integer 2
                                                              |)
                                                            |) in
                                                          let delta_start :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Mul",
                                                                  Ty.associated,
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [ Ty.associated ]
                                                                  ],
                                                                  "mul",
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| beta |);
                                                                  M.get_constant (|
                                                                    "pairing_bn256::arithmetic::fields::FieldExt::ZETA"
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          let first_set :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                                                            [ C ]
                                                                        ]
                                                                    ],
                                                                  "unwrap",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                                                            [ C ]
                                                                        ],
                                                                      "first",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                                                                [ C ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [],
                                                                          "deref",
                                                                          []
                                                                        |),
                                                                        [ M.read (| sets |) ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          let last_set :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                                                            [ C ]
                                                                        ]
                                                                    ],
                                                                  "unwrap",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                                                            [ C ]
                                                                        ],
                                                                      "last",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                                                                [ C ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [],
                                                                          "deref",
                                                                          []
                                                                        |),
                                                                        [ M.read (| sets |) ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          let _ :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_function (|
                                                                  "halo2_proofs::arithmetic::parallelize",
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&mut")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  [ Ty.associated ]
                                                                              ];
                                                                            Ty.path "usize"
                                                                          ]
                                                                      ]
                                                                      (Ty.tuple [])
                                                                  ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::DerefMut",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::poly::Polynomial")
                                                                        [
                                                                          Ty.associated;
                                                                          Ty.path
                                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                        ],
                                                                      [],
                                                                      "deref_mut",
                                                                      []
                                                                    |),
                                                                    [ values ]
                                                                  |);
                                                                  M.closure
                                                                    (fun γ =>
                                                                      ltac:(M.monadic
                                                                        match γ with
                                                                        | [ α0; α1 ] =>
                                                                          M.match_operator (|
                                                                            M.alloc (| α0 |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let values :=
                                                                                    M.copy (|
                                                                                      γ
                                                                                    |) in
                                                                                  M.match_operator (|
                                                                                    M.alloc (|
                                                                                      α1
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                start :=
                                                                                            M.copy (|
                                                                                              γ
                                                                                            |) in
                                                                                          M.read (|
                                                                                            let
                                                                                                  beta_term :=
                                                                                              M.alloc (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "ff::Field",
                                                                                                    Ty.associated,
                                                                                                    [],
                                                                                                    "pow_vartime",
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "array")
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "u64"
                                                                                                            ]
                                                                                                        ]
                                                                                                    ]
                                                                                                  |),
                                                                                                  [
                                                                                                    extended_omega;
                                                                                                    M.alloc (|
                                                                                                      Value.Array
                                                                                                        [
                                                                                                          M.rust_cast
                                                                                                            (M.read (|
                                                                                                              start
                                                                                                            |));
                                                                                                          Value.Integer
                                                                                                            0;
                                                                                                          Value.Integer
                                                                                                            0;
                                                                                                          Value.Integer
                                                                                                            0
                                                                                                        ]
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |) in
                                                                                            M.use
                                                                                              (M.match_operator (|
                                                                                                M.alloc (|
                                                                                                  M.call_closure (|
                                                                                                    M.get_trait_method (|
                                                                                                      "core::iter::traits::collect::IntoIterator",
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::iter::adapters::enumerate::Enumerate")
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::slice::iter::IterMut")
                                                                                                            [
                                                                                                              Ty.associated
                                                                                                            ]
                                                                                                        ],
                                                                                                      [],
                                                                                                      "into_iter",
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.call_closure (|
                                                                                                        M.get_trait_method (|
                                                                                                          "core::iter::traits::iterator::Iterator",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::slice::iter::IterMut")
                                                                                                            [
                                                                                                              Ty.associated
                                                                                                            ],
                                                                                                          [],
                                                                                                          "enumerate",
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.call_closure (|
                                                                                                            M.get_associated_function (|
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "slice")
                                                                                                                [
                                                                                                                  Ty.associated
                                                                                                                ],
                                                                                                              "iter_mut",
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.read (|
                                                                                                                values
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    ]
                                                                                                  |)
                                                                                                |),
                                                                                                [
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (let
                                                                                                            iter :=
                                                                                                        M.copy (|
                                                                                                          γ
                                                                                                        |) in
                                                                                                      M.loop (|
                                                                                                        ltac:(M.monadic
                                                                                                          (let
                                                                                                                _ :=
                                                                                                            M.match_operator (|
                                                                                                              M.alloc (|
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "core::slice::iter::IterMut")
                                                                                                                          [
                                                                                                                            Ty.associated
                                                                                                                          ]
                                                                                                                      ],
                                                                                                                    [],
                                                                                                                    "next",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    iter
                                                                                                                  ]
                                                                                                                |)
                                                                                                              |),
                                                                                                              [
                                                                                                                fun
                                                                                                                    γ =>
                                                                                                                  ltac:(M.monadic
                                                                                                                    (M.alloc (|
                                                                                                                      M.never_to_any (|
                                                                                                                        M.read (|
                                                                                                                          M.break (||)
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    |)));
                                                                                                                fun
                                                                                                                    γ =>
                                                                                                                  ltac:(M.monadic
                                                                                                                    (let
                                                                                                                          γ0_0 :=
                                                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                                                        γ,
                                                                                                                        "core::option::Option::Some",
                                                                                                                        0
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          γ1_0 :=
                                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                                        γ0_0,
                                                                                                                        0
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          γ1_1 :=
                                                                                                                      M.SubPointer.get_tuple_field (|
                                                                                                                        γ0_0,
                                                                                                                        1
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          i :=
                                                                                                                      M.copy (|
                                                                                                                        γ1_0
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          value :=
                                                                                                                      M.copy (|
                                                                                                                        γ1_1
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          idx :=
                                                                                                                      M.alloc (|
                                                                                                                        BinOp.Panic.add (|
                                                                                                                          Integer.Usize,
                                                                                                                          M.read (|
                                                                                                                            start
                                                                                                                          |),
                                                                                                                          M.read (|
                                                                                                                            i
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          r_next :=
                                                                                                                      M.alloc (|
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_function (|
                                                                                                                            "halo2_proofs::plonk::evaluation::get_rotation_idx",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.read (|
                                                                                                                              idx
                                                                                                                            |);
                                                                                                                            Value.Integer
                                                                                                                              1;
                                                                                                                            M.read (|
                                                                                                                              rot_scale
                                                                                                                            |);
                                                                                                                            M.read (|
                                                                                                                              isize
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          r_last :=
                                                                                                                      M.alloc (|
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_function (|
                                                                                                                            "halo2_proofs::plonk::evaluation::get_rotation_idx",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.read (|
                                                                                                                              idx
                                                                                                                            |);
                                                                                                                            M.read (|
                                                                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                                                                last_rotation,
                                                                                                                                "halo2_proofs::poly::Rotation",
                                                                                                                                0
                                                                                                                              |)
                                                                                                                            |);
                                                                                                                            M.read (|
                                                                                                                              rot_scale
                                                                                                                            |);
                                                                                                                            M.read (|
                                                                                                                              isize
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          _ :=
                                                                                                                      M.write (|
                                                                                                                        M.read (|
                                                                                                                          value
                                                                                                                        |),
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::ops::arith::Add",
                                                                                                                            Ty.associated,
                                                                                                                            [
                                                                                                                              Ty.associated
                                                                                                                            ],
                                                                                                                            "add",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.call_closure (|
                                                                                                                              M.get_trait_method (|
                                                                                                                                "core::ops::arith::Mul",
                                                                                                                                Ty.associated,
                                                                                                                                [
                                                                                                                                  Ty.associated
                                                                                                                                ],
                                                                                                                                "mul",
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.read (|
                                                                                                                                  M.read (|
                                                                                                                                    value
                                                                                                                                  |)
                                                                                                                                |);
                                                                                                                                M.read (|
                                                                                                                                  y
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |);
                                                                                                                            M.call_closure (|
                                                                                                                              M.get_trait_method (|
                                                                                                                                "core::ops::arith::Mul",
                                                                                                                                Ty.associated,
                                                                                                                                [
                                                                                                                                  Ty.associated
                                                                                                                                ],
                                                                                                                                "mul",
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.call_closure (|
                                                                                                                                  M.get_trait_method (|
                                                                                                                                    "core::ops::arith::Sub",
                                                                                                                                    Ty.associated,
                                                                                                                                    [
                                                                                                                                      Ty.associated
                                                                                                                                    ],
                                                                                                                                    "sub",
                                                                                                                                    []
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.read (|
                                                                                                                                      one
                                                                                                                                    |);
                                                                                                                                    M.read (|
                                                                                                                                      M.call_closure (|
                                                                                                                                        M.get_trait_method (|
                                                                                                                                          "core::ops::index::Index",
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "halo2_proofs::poly::Polynomial")
                                                                                                                                            [
                                                                                                                                              Ty.associated;
                                                                                                                                              Ty.path
                                                                                                                                                "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                            ],
                                                                                                                                          [
                                                                                                                                            Ty.path
                                                                                                                                              "usize"
                                                                                                                                          ],
                                                                                                                                          "index",
                                                                                                                                          []
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                                                            M.read (|
                                                                                                                                              first_set
                                                                                                                                            |),
                                                                                                                                            "halo2_proofs::plonk::permutation::prover::CommittedSet",
                                                                                                                                            "permutation_product_coset"
                                                                                                                                          |);
                                                                                                                                          M.read (|
                                                                                                                                            idx
                                                                                                                                          |)
                                                                                                                                        ]
                                                                                                                                      |)
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |);
                                                                                                                                M.read (|
                                                                                                                                  M.call_closure (|
                                                                                                                                    M.get_trait_method (|
                                                                                                                                      "core::ops::index::Index",
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "halo2_proofs::poly::Polynomial")
                                                                                                                                        [
                                                                                                                                          Ty.associated;
                                                                                                                                          Ty.path
                                                                                                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                        ],
                                                                                                                                      [
                                                                                                                                        Ty.path
                                                                                                                                          "usize"
                                                                                                                                      ],
                                                                                                                                      "index",
                                                                                                                                      []
                                                                                                                                    |),
                                                                                                                                    [
                                                                                                                                      M.read (|
                                                                                                                                        l0
                                                                                                                                      |);
                                                                                                                                      M.read (|
                                                                                                                                        idx
                                                                                                                                      |)
                                                                                                                                    ]
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          _ :=
                                                                                                                      M.write (|
                                                                                                                        M.read (|
                                                                                                                          value
                                                                                                                        |),
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::ops::arith::Add",
                                                                                                                            Ty.associated,
                                                                                                                            [
                                                                                                                              Ty.associated
                                                                                                                            ],
                                                                                                                            "add",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.call_closure (|
                                                                                                                              M.get_trait_method (|
                                                                                                                                "core::ops::arith::Mul",
                                                                                                                                Ty.associated,
                                                                                                                                [
                                                                                                                                  Ty.associated
                                                                                                                                ],
                                                                                                                                "mul",
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.read (|
                                                                                                                                  M.read (|
                                                                                                                                    value
                                                                                                                                  |)
                                                                                                                                |);
                                                                                                                                M.read (|
                                                                                                                                  y
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |);
                                                                                                                            M.call_closure (|
                                                                                                                              M.get_trait_method (|
                                                                                                                                "core::ops::arith::Mul",
                                                                                                                                Ty.associated,
                                                                                                                                [
                                                                                                                                  Ty.associated
                                                                                                                                ],
                                                                                                                                "mul",
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.call_closure (|
                                                                                                                                  M.get_trait_method (|
                                                                                                                                    "core::ops::arith::Sub",
                                                                                                                                    Ty.associated,
                                                                                                                                    [
                                                                                                                                      Ty.associated
                                                                                                                                    ],
                                                                                                                                    "sub",
                                                                                                                                    []
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.call_closure (|
                                                                                                                                      M.get_trait_method (|
                                                                                                                                        "core::ops::arith::Mul",
                                                                                                                                        Ty.associated,
                                                                                                                                        [
                                                                                                                                          Ty.associated
                                                                                                                                        ],
                                                                                                                                        "mul",
                                                                                                                                        []
                                                                                                                                      |),
                                                                                                                                      [
                                                                                                                                        M.read (|
                                                                                                                                          M.call_closure (|
                                                                                                                                            M.get_trait_method (|
                                                                                                                                              "core::ops::index::Index",
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "halo2_proofs::poly::Polynomial")
                                                                                                                                                [
                                                                                                                                                  Ty.associated;
                                                                                                                                                  Ty.path
                                                                                                                                                    "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                ],
                                                                                                                                              [
                                                                                                                                                Ty.path
                                                                                                                                                  "usize"
                                                                                                                                              ],
                                                                                                                                              "index",
                                                                                                                                              []
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                                M.read (|
                                                                                                                                                  last_set
                                                                                                                                                |),
                                                                                                                                                "halo2_proofs::plonk::permutation::prover::CommittedSet",
                                                                                                                                                "permutation_product_coset"
                                                                                                                                              |);
                                                                                                                                              M.read (|
                                                                                                                                                idx
                                                                                                                                              |)
                                                                                                                                            ]
                                                                                                                                          |)
                                                                                                                                        |);
                                                                                                                                        M.read (|
                                                                                                                                          M.call_closure (|
                                                                                                                                            M.get_trait_method (|
                                                                                                                                              "core::ops::index::Index",
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "halo2_proofs::poly::Polynomial")
                                                                                                                                                [
                                                                                                                                                  Ty.associated;
                                                                                                                                                  Ty.path
                                                                                                                                                    "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                ],
                                                                                                                                              [
                                                                                                                                                Ty.path
                                                                                                                                                  "usize"
                                                                                                                                              ],
                                                                                                                                              "index",
                                                                                                                                              []
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                                M.read (|
                                                                                                                                                  last_set
                                                                                                                                                |),
                                                                                                                                                "halo2_proofs::plonk::permutation::prover::CommittedSet",
                                                                                                                                                "permutation_product_coset"
                                                                                                                                              |);
                                                                                                                                              M.read (|
                                                                                                                                                idx
                                                                                                                                              |)
                                                                                                                                            ]
                                                                                                                                          |)
                                                                                                                                        |)
                                                                                                                                      ]
                                                                                                                                    |);
                                                                                                                                    M.read (|
                                                                                                                                      M.call_closure (|
                                                                                                                                        M.get_trait_method (|
                                                                                                                                          "core::ops::index::Index",
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "halo2_proofs::poly::Polynomial")
                                                                                                                                            [
                                                                                                                                              Ty.associated;
                                                                                                                                              Ty.path
                                                                                                                                                "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                            ],
                                                                                                                                          [
                                                                                                                                            Ty.path
                                                                                                                                              "usize"
                                                                                                                                          ],
                                                                                                                                          "index",
                                                                                                                                          []
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                                                            M.read (|
                                                                                                                                              last_set
                                                                                                                                            |),
                                                                                                                                            "halo2_proofs::plonk::permutation::prover::CommittedSet",
                                                                                                                                            "permutation_product_coset"
                                                                                                                                          |);
                                                                                                                                          M.read (|
                                                                                                                                            idx
                                                                                                                                          |)
                                                                                                                                        ]
                                                                                                                                      |)
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |);
                                                                                                                                M.read (|
                                                                                                                                  M.call_closure (|
                                                                                                                                    M.get_trait_method (|
                                                                                                                                      "core::ops::index::Index",
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "halo2_proofs::poly::Polynomial")
                                                                                                                                        [
                                                                                                                                          Ty.associated;
                                                                                                                                          Ty.path
                                                                                                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                        ],
                                                                                                                                      [
                                                                                                                                        Ty.path
                                                                                                                                          "usize"
                                                                                                                                      ],
                                                                                                                                      "index",
                                                                                                                                      []
                                                                                                                                    |),
                                                                                                                                    [
                                                                                                                                      M.read (|
                                                                                                                                        l_last
                                                                                                                                      |);
                                                                                                                                      M.read (|
                                                                                                                                        idx
                                                                                                                                      |)
                                                                                                                                    ]
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          _ :=
                                                                                                                      M.use
                                                                                                                        (M.match_operator (|
                                                                                                                          M.alloc (|
                                                                                                                            M.call_closure (|
                                                                                                                              M.get_trait_method (|
                                                                                                                                "core::iter::traits::collect::IntoIterator",
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "core::iter::adapters::enumerate::Enumerate")
                                                                                                                                  [
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "core::slice::iter::Iter")
                                                                                                                                      [
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                                                                                                                          [
                                                                                                                                            C
                                                                                                                                          ]
                                                                                                                                      ]
                                                                                                                                  ],
                                                                                                                                [],
                                                                                                                                "into_iter",
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.call_closure (|
                                                                                                                                  M.get_trait_method (|
                                                                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "core::slice::iter::Iter")
                                                                                                                                      [
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                                                                                                                          [
                                                                                                                                            C
                                                                                                                                          ]
                                                                                                                                      ],
                                                                                                                                    [],
                                                                                                                                    "enumerate",
                                                                                                                                    []
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.call_closure (|
                                                                                                                                      M.get_associated_function (|
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "slice")
                                                                                                                                          [
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                                                                                                                              [
                                                                                                                                                C
                                                                                                                                              ]
                                                                                                                                          ],
                                                                                                                                        "iter",
                                                                                                                                        []
                                                                                                                                      |),
                                                                                                                                      [
                                                                                                                                        M.call_closure (|
                                                                                                                                          M.get_trait_method (|
                                                                                                                                            "core::ops::deref::Deref",
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "alloc::vec::Vec")
                                                                                                                                              [
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                                                                                                                                  [
                                                                                                                                                    C
                                                                                                                                                  ];
                                                                                                                                                Ty.path
                                                                                                                                                  "alloc::alloc::Global"
                                                                                                                                              ],
                                                                                                                                            [],
                                                                                                                                            "deref",
                                                                                                                                            []
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            M.read (|
                                                                                                                                              sets
                                                                                                                                            |)
                                                                                                                                          ]
                                                                                                                                        |)
                                                                                                                                      ]
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |)
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            fun
                                                                                                                                γ =>
                                                                                                                              ltac:(M.monadic
                                                                                                                                (let
                                                                                                                                      iter :=
                                                                                                                                  M.copy (|
                                                                                                                                    γ
                                                                                                                                  |) in
                                                                                                                                M.loop (|
                                                                                                                                  ltac:(M.monadic
                                                                                                                                    (let
                                                                                                                                          _ :=
                                                                                                                                      M.match_operator (|
                                                                                                                                        M.alloc (|
                                                                                                                                          M.call_closure (|
                                                                                                                                            M.get_trait_method (|
                                                                                                                                              "core::iter::traits::iterator::Iterator",
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "core::iter::adapters::enumerate::Enumerate")
                                                                                                                                                [
                                                                                                                                                  Ty.apply
                                                                                                                                                    (Ty.path
                                                                                                                                                      "core::slice::iter::Iter")
                                                                                                                                                    [
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                                                                                                                                        [
                                                                                                                                                          C
                                                                                                                                                        ]
                                                                                                                                                    ]
                                                                                                                                                ],
                                                                                                                                              [],
                                                                                                                                              "next",
                                                                                                                                              []
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              iter
                                                                                                                                            ]
                                                                                                                                          |)
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          fun
                                                                                                                                              γ =>
                                                                                                                                            ltac:(M.monadic
                                                                                                                                              (M.alloc (|
                                                                                                                                                M.never_to_any (|
                                                                                                                                                  M.read (|
                                                                                                                                                    M.break (||)
                                                                                                                                                  |)
                                                                                                                                                |)
                                                                                                                                              |)));
                                                                                                                                          fun
                                                                                                                                              γ =>
                                                                                                                                            ltac:(M.monadic
                                                                                                                                              (let
                                                                                                                                                    γ0_0 :=
                                                                                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                                                                                  γ,
                                                                                                                                                  "core::option::Option::Some",
                                                                                                                                                  0
                                                                                                                                                |) in
                                                                                                                                              let
                                                                                                                                                    γ1_0 :=
                                                                                                                                                M.SubPointer.get_tuple_field (|
                                                                                                                                                  γ0_0,
                                                                                                                                                  0
                                                                                                                                                |) in
                                                                                                                                              let
                                                                                                                                                    γ1_1 :=
                                                                                                                                                M.SubPointer.get_tuple_field (|
                                                                                                                                                  γ0_0,
                                                                                                                                                  1
                                                                                                                                                |) in
                                                                                                                                              let
                                                                                                                                                    set_idx :=
                                                                                                                                                M.copy (|
                                                                                                                                                  γ1_0
                                                                                                                                                |) in
                                                                                                                                              let
                                                                                                                                                    set :=
                                                                                                                                                M.copy (|
                                                                                                                                                  γ1_1
                                                                                                                                                |) in
                                                                                                                                              M.match_operator (|
                                                                                                                                                M.alloc (|
                                                                                                                                                  Value.Tuple
                                                                                                                                                    []
                                                                                                                                                |),
                                                                                                                                                [
                                                                                                                                                  fun
                                                                                                                                                      γ =>
                                                                                                                                                    ltac:(M.monadic
                                                                                                                                                      (let
                                                                                                                                                            γ :=
                                                                                                                                                        M.use
                                                                                                                                                          (M.alloc (|
                                                                                                                                                            BinOp.Pure.ne
                                                                                                                                                              (M.read (|
                                                                                                                                                                set_idx
                                                                                                                                                              |))
                                                                                                                                                              (Value.Integer
                                                                                                                                                                0)
                                                                                                                                                          |)) in
                                                                                                                                                      let
                                                                                                                                                            _ :=
                                                                                                                                                        M.is_constant_or_break_match (|
                                                                                                                                                          M.read (|
                                                                                                                                                            γ
                                                                                                                                                          |),
                                                                                                                                                          Value.Bool
                                                                                                                                                            true
                                                                                                                                                        |) in
                                                                                                                                                      let
                                                                                                                                                            _ :=
                                                                                                                                                        M.write (|
                                                                                                                                                          M.read (|
                                                                                                                                                            value
                                                                                                                                                          |),
                                                                                                                                                          M.call_closure (|
                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                              "core::ops::arith::Add",
                                                                                                                                                              Ty.associated,
                                                                                                                                                              [
                                                                                                                                                                Ty.associated
                                                                                                                                                              ],
                                                                                                                                                              "add",
                                                                                                                                                              []
                                                                                                                                                            |),
                                                                                                                                                            [
                                                                                                                                                              M.call_closure (|
                                                                                                                                                                M.get_trait_method (|
                                                                                                                                                                  "core::ops::arith::Mul",
                                                                                                                                                                  Ty.associated,
                                                                                                                                                                  [
                                                                                                                                                                    Ty.associated
                                                                                                                                                                  ],
                                                                                                                                                                  "mul",
                                                                                                                                                                  []
                                                                                                                                                                |),
                                                                                                                                                                [
                                                                                                                                                                  M.read (|
                                                                                                                                                                    M.read (|
                                                                                                                                                                      value
                                                                                                                                                                    |)
                                                                                                                                                                  |);
                                                                                                                                                                  M.read (|
                                                                                                                                                                    y
                                                                                                                                                                  |)
                                                                                                                                                                ]
                                                                                                                                                              |);
                                                                                                                                                              M.call_closure (|
                                                                                                                                                                M.get_trait_method (|
                                                                                                                                                                  "core::ops::arith::Mul",
                                                                                                                                                                  Ty.associated,
                                                                                                                                                                  [
                                                                                                                                                                    Ty.associated
                                                                                                                                                                  ],
                                                                                                                                                                  "mul",
                                                                                                                                                                  []
                                                                                                                                                                |),
                                                                                                                                                                [
                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                                      "core::ops::arith::Sub",
                                                                                                                                                                      Ty.associated,
                                                                                                                                                                      [
                                                                                                                                                                        Ty.associated
                                                                                                                                                                      ],
                                                                                                                                                                      "sub",
                                                                                                                                                                      []
                                                                                                                                                                    |),
                                                                                                                                                                    [
                                                                                                                                                                      M.read (|
                                                                                                                                                                        M.call_closure (|
                                                                                                                                                                          M.get_trait_method (|
                                                                                                                                                                            "core::ops::index::Index",
                                                                                                                                                                            Ty.apply
                                                                                                                                                                              (Ty.path
                                                                                                                                                                                "halo2_proofs::poly::Polynomial")
                                                                                                                                                                              [
                                                                                                                                                                                Ty.associated;
                                                                                                                                                                                Ty.path
                                                                                                                                                                                  "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                              ],
                                                                                                                                                                            [
                                                                                                                                                                              Ty.path
                                                                                                                                                                                "usize"
                                                                                                                                                                            ],
                                                                                                                                                                            "index",
                                                                                                                                                                            []
                                                                                                                                                                          |),
                                                                                                                                                                          [
                                                                                                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                                                                                                              M.read (|
                                                                                                                                                                                set
                                                                                                                                                                              |),
                                                                                                                                                                              "halo2_proofs::plonk::permutation::prover::CommittedSet",
                                                                                                                                                                              "permutation_product_coset"
                                                                                                                                                                            |);
                                                                                                                                                                            M.read (|
                                                                                                                                                                              idx
                                                                                                                                                                            |)
                                                                                                                                                                          ]
                                                                                                                                                                        |)
                                                                                                                                                                      |);
                                                                                                                                                                      M.read (|
                                                                                                                                                                        M.call_closure (|
                                                                                                                                                                          M.get_trait_method (|
                                                                                                                                                                            "core::ops::index::Index",
                                                                                                                                                                            Ty.apply
                                                                                                                                                                              (Ty.path
                                                                                                                                                                                "halo2_proofs::poly::Polynomial")
                                                                                                                                                                              [
                                                                                                                                                                                Ty.associated;
                                                                                                                                                                                Ty.path
                                                                                                                                                                                  "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                              ],
                                                                                                                                                                            [
                                                                                                                                                                              Ty.path
                                                                                                                                                                                "usize"
                                                                                                                                                                            ],
                                                                                                                                                                            "index",
                                                                                                                                                                            []
                                                                                                                                                                          |),
                                                                                                                                                                          [
                                                                                                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                                                                                                              M.call_closure (|
                                                                                                                                                                                M.get_trait_method (|
                                                                                                                                                                                  "core::ops::index::Index",
                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                      "alloc::vec::Vec")
                                                                                                                                                                                    [
                                                                                                                                                                                      Ty.apply
                                                                                                                                                                                        (Ty.path
                                                                                                                                                                                          "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                                                                                                                                                                        [
                                                                                                                                                                                          C
                                                                                                                                                                                        ];
                                                                                                                                                                                      Ty.path
                                                                                                                                                                                        "alloc::alloc::Global"
                                                                                                                                                                                    ],
                                                                                                                                                                                  [
                                                                                                                                                                                    Ty.path
                                                                                                                                                                                      "usize"
                                                                                                                                                                                  ],
                                                                                                                                                                                  "index",
                                                                                                                                                                                  []
                                                                                                                                                                                |),
                                                                                                                                                                                [
                                                                                                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                                                                                                    M.read (|
                                                                                                                                                                                      permutation
                                                                                                                                                                                    |),
                                                                                                                                                                                    "halo2_proofs::plonk::permutation::prover::Committed",
                                                                                                                                                                                    "sets"
                                                                                                                                                                                  |);
                                                                                                                                                                                  BinOp.Panic.sub (|
                                                                                                                                                                                    Integer.Usize,
                                                                                                                                                                                    M.read (|
                                                                                                                                                                                      set_idx
                                                                                                                                                                                    |),
                                                                                                                                                                                    Value.Integer
                                                                                                                                                                                      1
                                                                                                                                                                                  |)
                                                                                                                                                                                ]
                                                                                                                                                                              |),
                                                                                                                                                                              "halo2_proofs::plonk::permutation::prover::CommittedSet",
                                                                                                                                                                              "permutation_product_coset"
                                                                                                                                                                            |);
                                                                                                                                                                            M.read (|
                                                                                                                                                                              r_last
                                                                                                                                                                            |)
                                                                                                                                                                          ]
                                                                                                                                                                        |)
                                                                                                                                                                      |)
                                                                                                                                                                    ]
                                                                                                                                                                  |);
                                                                                                                                                                  M.read (|
                                                                                                                                                                    M.call_closure (|
                                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                                        "core::ops::index::Index",
                                                                                                                                                                        Ty.apply
                                                                                                                                                                          (Ty.path
                                                                                                                                                                            "halo2_proofs::poly::Polynomial")
                                                                                                                                                                          [
                                                                                                                                                                            Ty.associated;
                                                                                                                                                                            Ty.path
                                                                                                                                                                              "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                          ],
                                                                                                                                                                        [
                                                                                                                                                                          Ty.path
                                                                                                                                                                            "usize"
                                                                                                                                                                        ],
                                                                                                                                                                        "index",
                                                                                                                                                                        []
                                                                                                                                                                      |),
                                                                                                                                                                      [
                                                                                                                                                                        M.read (|
                                                                                                                                                                          l0
                                                                                                                                                                        |);
                                                                                                                                                                        M.read (|
                                                                                                                                                                          idx
                                                                                                                                                                        |)
                                                                                                                                                                      ]
                                                                                                                                                                    |)
                                                                                                                                                                  |)
                                                                                                                                                                ]
                                                                                                                                                              |)
                                                                                                                                                            ]
                                                                                                                                                          |)
                                                                                                                                                        |) in
                                                                                                                                                      M.alloc (|
                                                                                                                                                        Value.Tuple
                                                                                                                                                          []
                                                                                                                                                      |)));
                                                                                                                                                  fun
                                                                                                                                                      γ =>
                                                                                                                                                    ltac:(M.monadic
                                                                                                                                                      (M.alloc (|
                                                                                                                                                        Value.Tuple
                                                                                                                                                          []
                                                                                                                                                      |)))
                                                                                                                                                ]
                                                                                                                                              |)))
                                                                                                                                        ]
                                                                                                                                      |) in
                                                                                                                                    M.alloc (|
                                                                                                                                      Value.Tuple
                                                                                                                                        []
                                                                                                                                    |)))
                                                                                                                                |)))
                                                                                                                          ]
                                                                                                                        |)) in
                                                                                                                    let
                                                                                                                          current_delta :=
                                                                                                                      M.alloc (|
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::ops::arith::Mul",
                                                                                                                            Ty.associated,
                                                                                                                            [
                                                                                                                              Ty.associated
                                                                                                                            ],
                                                                                                                            "mul",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.read (|
                                                                                                                              delta_start
                                                                                                                            |);
                                                                                                                            M.read (|
                                                                                                                              beta_term
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |) in
                                                                                                                    let
                                                                                                                          _ :=
                                                                                                                      M.use
                                                                                                                        (M.match_operator (|
                                                                                                                          M.alloc (|
                                                                                                                            M.call_closure (|
                                                                                                                              M.get_trait_method (|
                                                                                                                                "core::iter::traits::collect::IntoIterator",
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "core::iter::adapters::zip::Zip")
                                                                                                                                  [
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "core::iter::adapters::zip::Zip")
                                                                                                                                      [
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "core::slice::iter::Iter")
                                                                                                                                          [
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                                                                                                                              [
                                                                                                                                                C
                                                                                                                                              ]
                                                                                                                                          ];
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "core::slice::iter::Chunks")
                                                                                                                                          [
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                                                                                              [
                                                                                                                                                Ty.path
                                                                                                                                                  "halo2_proofs::plonk::circuit::Any"
                                                                                                                                              ]
                                                                                                                                          ]
                                                                                                                                      ];
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "core::slice::iter::Chunks")
                                                                                                                                      [
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "halo2_proofs::poly::Polynomial")
                                                                                                                                          [
                                                                                                                                            Ty.associated;
                                                                                                                                            Ty.path
                                                                                                                                              "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                          ]
                                                                                                                                      ]
                                                                                                                                  ],
                                                                                                                                [],
                                                                                                                                "into_iter",
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.call_closure (|
                                                                                                                                  M.get_trait_method (|
                                                                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "core::iter::adapters::zip::Zip")
                                                                                                                                      [
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "core::slice::iter::Iter")
                                                                                                                                          [
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                                                                                                                              [
                                                                                                                                                C
                                                                                                                                              ]
                                                                                                                                          ];
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "core::slice::iter::Chunks")
                                                                                                                                          [
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                                                                                              [
                                                                                                                                                Ty.path
                                                                                                                                                  "halo2_proofs::plonk::circuit::Any"
                                                                                                                                              ]
                                                                                                                                          ]
                                                                                                                                      ],
                                                                                                                                    [],
                                                                                                                                    "zip",
                                                                                                                                    [
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "core::slice::iter::Chunks")
                                                                                                                                        [
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "halo2_proofs::poly::Polynomial")
                                                                                                                                            [
                                                                                                                                              Ty.associated;
                                                                                                                                              Ty.path
                                                                                                                                                "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                            ]
                                                                                                                                        ]
                                                                                                                                    ]
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.call_closure (|
                                                                                                                                      M.get_trait_method (|
                                                                                                                                        "core::iter::traits::iterator::Iterator",
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "core::slice::iter::Iter")
                                                                                                                                          [
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                                                                                                                              [
                                                                                                                                                C
                                                                                                                                              ]
                                                                                                                                          ],
                                                                                                                                        [],
                                                                                                                                        "zip",
                                                                                                                                        [
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "core::slice::iter::Chunks")
                                                                                                                                            [
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                [
                                                                                                                                                  Ty.path
                                                                                                                                                    "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                ]
                                                                                                                                            ]
                                                                                                                                        ]
                                                                                                                                      |),
                                                                                                                                      [
                                                                                                                                        M.call_closure (|
                                                                                                                                          M.get_associated_function (|
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "slice")
                                                                                                                                              [
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                                                                                                                                  [
                                                                                                                                                    C
                                                                                                                                                  ]
                                                                                                                                              ],
                                                                                                                                            "iter",
                                                                                                                                            []
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            M.call_closure (|
                                                                                                                                              M.get_trait_method (|
                                                                                                                                                "core::ops::deref::Deref",
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                                  [
                                                                                                                                                    Ty.apply
                                                                                                                                                      (Ty.path
                                                                                                                                                        "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                                                                                                                                      [
                                                                                                                                                        C
                                                                                                                                                      ];
                                                                                                                                                    Ty.path
                                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                                  ],
                                                                                                                                                [],
                                                                                                                                                "deref",
                                                                                                                                                []
                                                                                                                                              |),
                                                                                                                                              [
                                                                                                                                                M.read (|
                                                                                                                                                  sets
                                                                                                                                                |)
                                                                                                                                              ]
                                                                                                                                            |)
                                                                                                                                          ]
                                                                                                                                        |);
                                                                                                                                        M.call_closure (|
                                                                                                                                          M.get_associated_function (|
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "slice")
                                                                                                                                              [
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                  [
                                                                                                                                                    Ty.path
                                                                                                                                                      "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                  ]
                                                                                                                                              ],
                                                                                                                                            "chunks",
                                                                                                                                            []
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            M.call_closure (|
                                                                                                                                              M.get_trait_method (|
                                                                                                                                                "core::ops::deref::Deref",
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                                  [
                                                                                                                                                    Ty.apply
                                                                                                                                                      (Ty.path
                                                                                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                      [
                                                                                                                                                        Ty.path
                                                                                                                                                          "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                      ];
                                                                                                                                                    Ty.path
                                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                                  ],
                                                                                                                                                [],
                                                                                                                                                "deref",
                                                                                                                                                []
                                                                                                                                              |),
                                                                                                                                              [
                                                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                                                  M.read (|
                                                                                                                                                    p
                                                                                                                                                  |),
                                                                                                                                                  "halo2_proofs::plonk::permutation::Argument",
                                                                                                                                                  "columns"
                                                                                                                                                |)
                                                                                                                                              ]
                                                                                                                                            |);
                                                                                                                                            M.read (|
                                                                                                                                              chunk_len
                                                                                                                                            |)
                                                                                                                                          ]
                                                                                                                                        |)
                                                                                                                                      ]
                                                                                                                                    |);
                                                                                                                                    M.call_closure (|
                                                                                                                                      M.get_associated_function (|
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "slice")
                                                                                                                                          [
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "halo2_proofs::poly::Polynomial")
                                                                                                                                              [
                                                                                                                                                Ty.associated;
                                                                                                                                                Ty.path
                                                                                                                                                  "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                              ]
                                                                                                                                          ],
                                                                                                                                        "chunks",
                                                                                                                                        []
                                                                                                                                      |),
                                                                                                                                      [
                                                                                                                                        M.call_closure (|
                                                                                                                                          M.get_trait_method (|
                                                                                                                                            "core::ops::deref::Deref",
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "alloc::vec::Vec")
                                                                                                                                              [
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "halo2_proofs::poly::Polynomial")
                                                                                                                                                  [
                                                                                                                                                    Ty.associated;
                                                                                                                                                    Ty.path
                                                                                                                                                      "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                  ];
                                                                                                                                                Ty.path
                                                                                                                                                  "alloc::alloc::Global"
                                                                                                                                              ],
                                                                                                                                            [],
                                                                                                                                            "deref",
                                                                                                                                            []
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                                M.read (|
                                                                                                                                                  pk
                                                                                                                                                |),
                                                                                                                                                "halo2_proofs::plonk::ProvingKey",
                                                                                                                                                "permutation"
                                                                                                                                              |),
                                                                                                                                              "halo2_proofs::plonk::permutation::ProvingKey",
                                                                                                                                              "cosets"
                                                                                                                                            |)
                                                                                                                                          ]
                                                                                                                                        |);
                                                                                                                                        M.read (|
                                                                                                                                          chunk_len
                                                                                                                                        |)
                                                                                                                                      ]
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |)
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            fun
                                                                                                                                γ =>
                                                                                                                              ltac:(M.monadic
                                                                                                                                (let
                                                                                                                                      iter :=
                                                                                                                                  M.copy (|
                                                                                                                                    γ
                                                                                                                                  |) in
                                                                                                                                M.loop (|
                                                                                                                                  ltac:(M.monadic
                                                                                                                                    (let
                                                                                                                                          _ :=
                                                                                                                                      M.match_operator (|
                                                                                                                                        M.alloc (|
                                                                                                                                          M.call_closure (|
                                                                                                                                            M.get_trait_method (|
                                                                                                                                              "core::iter::traits::iterator::Iterator",
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "core::iter::adapters::zip::Zip")
                                                                                                                                                [
                                                                                                                                                  Ty.apply
                                                                                                                                                    (Ty.path
                                                                                                                                                      "core::iter::adapters::zip::Zip")
                                                                                                                                                    [
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "core::slice::iter::Iter")
                                                                                                                                                        [
                                                                                                                                                          Ty.apply
                                                                                                                                                            (Ty.path
                                                                                                                                                              "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                                                                                                                                            [
                                                                                                                                                              C
                                                                                                                                                            ]
                                                                                                                                                        ];
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "core::slice::iter::Chunks")
                                                                                                                                                        [
                                                                                                                                                          Ty.apply
                                                                                                                                                            (Ty.path
                                                                                                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                            [
                                                                                                                                                              Ty.path
                                                                                                                                                                "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                            ]
                                                                                                                                                        ]
                                                                                                                                                    ];
                                                                                                                                                  Ty.apply
                                                                                                                                                    (Ty.path
                                                                                                                                                      "core::slice::iter::Chunks")
                                                                                                                                                    [
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "halo2_proofs::poly::Polynomial")
                                                                                                                                                        [
                                                                                                                                                          Ty.associated;
                                                                                                                                                          Ty.path
                                                                                                                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                        ]
                                                                                                                                                    ]
                                                                                                                                                ],
                                                                                                                                              [],
                                                                                                                                              "next",
                                                                                                                                              []
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              iter
                                                                                                                                            ]
                                                                                                                                          |)
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          fun
                                                                                                                                              γ =>
                                                                                                                                            ltac:(M.monadic
                                                                                                                                              (M.alloc (|
                                                                                                                                                M.never_to_any (|
                                                                                                                                                  M.read (|
                                                                                                                                                    M.break (||)
                                                                                                                                                  |)
                                                                                                                                                |)
                                                                                                                                              |)));
                                                                                                                                          fun
                                                                                                                                              γ =>
                                                                                                                                            ltac:(M.monadic
                                                                                                                                              (let
                                                                                                                                                    γ0_0 :=
                                                                                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                                                                                  γ,
                                                                                                                                                  "core::option::Option::Some",
                                                                                                                                                  0
                                                                                                                                                |) in
                                                                                                                                              let
                                                                                                                                                    γ1_0 :=
                                                                                                                                                M.SubPointer.get_tuple_field (|
                                                                                                                                                  γ0_0,
                                                                                                                                                  0
                                                                                                                                                |) in
                                                                                                                                              let
                                                                                                                                                    γ1_1 :=
                                                                                                                                                M.SubPointer.get_tuple_field (|
                                                                                                                                                  γ0_0,
                                                                                                                                                  1
                                                                                                                                                |) in
                                                                                                                                              let
                                                                                                                                                    γ2_0 :=
                                                                                                                                                M.SubPointer.get_tuple_field (|
                                                                                                                                                  γ1_0,
                                                                                                                                                  0
                                                                                                                                                |) in
                                                                                                                                              let
                                                                                                                                                    γ2_1 :=
                                                                                                                                                M.SubPointer.get_tuple_field (|
                                                                                                                                                  γ1_0,
                                                                                                                                                  1
                                                                                                                                                |) in
                                                                                                                                              let
                                                                                                                                                    set :=
                                                                                                                                                M.copy (|
                                                                                                                                                  γ2_0
                                                                                                                                                |) in
                                                                                                                                              let
                                                                                                                                                    columns :=
                                                                                                                                                M.copy (|
                                                                                                                                                  γ2_1
                                                                                                                                                |) in
                                                                                                                                              let
                                                                                                                                                    cosets :=
                                                                                                                                                M.copy (|
                                                                                                                                                  γ1_1
                                                                                                                                                |) in
                                                                                                                                              let
                                                                                                                                                    left :=
                                                                                                                                                M.copy (|
                                                                                                                                                  M.call_closure (|
                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                      "core::ops::index::Index",
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "halo2_proofs::poly::Polynomial")
                                                                                                                                                        [
                                                                                                                                                          Ty.associated;
                                                                                                                                                          Ty.path
                                                                                                                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                        ],
                                                                                                                                                      [
                                                                                                                                                        Ty.path
                                                                                                                                                          "usize"
                                                                                                                                                      ],
                                                                                                                                                      "index",
                                                                                                                                                      []
                                                                                                                                                    |),
                                                                                                                                                    [
                                                                                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                                                                                        M.read (|
                                                                                                                                                          set
                                                                                                                                                        |),
                                                                                                                                                        "halo2_proofs::plonk::permutation::prover::CommittedSet",
                                                                                                                                                        "permutation_product_coset"
                                                                                                                                                      |);
                                                                                                                                                      M.read (|
                                                                                                                                                        r_next
                                                                                                                                                      |)
                                                                                                                                                    ]
                                                                                                                                                  |)
                                                                                                                                                |) in
                                                                                                                                              let
                                                                                                                                                    _ :=
                                                                                                                                                M.use
                                                                                                                                                  (M.match_operator (|
                                                                                                                                                    M.alloc (|
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        M.get_trait_method (|
                                                                                                                                                          "core::iter::traits::collect::IntoIterator",
                                                                                                                                                          Ty.apply
                                                                                                                                                            (Ty.path
                                                                                                                                                              "core::iter::adapters::zip::Zip")
                                                                                                                                                            [
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "core::iter::adapters::map::Map")
                                                                                                                                                                [
                                                                                                                                                                  Ty.apply
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "core::slice::iter::Iter")
                                                                                                                                                                    [
                                                                                                                                                                      Ty.apply
                                                                                                                                                                        (Ty.path
                                                                                                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                        [
                                                                                                                                                                          Ty.path
                                                                                                                                                                            "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                        ]
                                                                                                                                                                    ];
                                                                                                                                                                  Ty.function
                                                                                                                                                                    [
                                                                                                                                                                      Ty.tuple
                                                                                                                                                                        [
                                                                                                                                                                          Ty.apply
                                                                                                                                                                            (Ty.path
                                                                                                                                                                              "&")
                                                                                                                                                                            [
                                                                                                                                                                              Ty.apply
                                                                                                                                                                                (Ty.path
                                                                                                                                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                                [
                                                                                                                                                                                  Ty.path
                                                                                                                                                                                    "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                                ]
                                                                                                                                                                            ]
                                                                                                                                                                        ]
                                                                                                                                                                    ]
                                                                                                                                                                    (Ty.apply
                                                                                                                                                                      (Ty.path
                                                                                                                                                                        "&")
                                                                                                                                                                      [
                                                                                                                                                                        Ty.apply
                                                                                                                                                                          (Ty.path
                                                                                                                                                                            "halo2_proofs::poly::Polynomial")
                                                                                                                                                                          [
                                                                                                                                                                            Ty.associated;
                                                                                                                                                                            Ty.path
                                                                                                                                                                              "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                          ]
                                                                                                                                                                      ])
                                                                                                                                                                ];
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "core::slice::iter::Iter")
                                                                                                                                                                [
                                                                                                                                                                  Ty.apply
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "halo2_proofs::poly::Polynomial")
                                                                                                                                                                    [
                                                                                                                                                                      Ty.associated;
                                                                                                                                                                      Ty.path
                                                                                                                                                                        "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                    ]
                                                                                                                                                                ]
                                                                                                                                                            ],
                                                                                                                                                          [],
                                                                                                                                                          "into_iter",
                                                                                                                                                          []
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          M.call_closure (|
                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                              "core::iter::traits::iterator::Iterator",
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "core::iter::adapters::map::Map")
                                                                                                                                                                [
                                                                                                                                                                  Ty.apply
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "core::slice::iter::Iter")
                                                                                                                                                                    [
                                                                                                                                                                      Ty.apply
                                                                                                                                                                        (Ty.path
                                                                                                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                        [
                                                                                                                                                                          Ty.path
                                                                                                                                                                            "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                        ]
                                                                                                                                                                    ];
                                                                                                                                                                  Ty.function
                                                                                                                                                                    [
                                                                                                                                                                      Ty.tuple
                                                                                                                                                                        [
                                                                                                                                                                          Ty.apply
                                                                                                                                                                            (Ty.path
                                                                                                                                                                              "&")
                                                                                                                                                                            [
                                                                                                                                                                              Ty.apply
                                                                                                                                                                                (Ty.path
                                                                                                                                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                                [
                                                                                                                                                                                  Ty.path
                                                                                                                                                                                    "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                                ]
                                                                                                                                                                            ]
                                                                                                                                                                        ]
                                                                                                                                                                    ]
                                                                                                                                                                    (Ty.apply
                                                                                                                                                                      (Ty.path
                                                                                                                                                                        "&")
                                                                                                                                                                      [
                                                                                                                                                                        Ty.apply
                                                                                                                                                                          (Ty.path
                                                                                                                                                                            "halo2_proofs::poly::Polynomial")
                                                                                                                                                                          [
                                                                                                                                                                            Ty.associated;
                                                                                                                                                                            Ty.path
                                                                                                                                                                              "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                          ]
                                                                                                                                                                      ])
                                                                                                                                                                ],
                                                                                                                                                              [],
                                                                                                                                                              "zip",
                                                                                                                                                              [
                                                                                                                                                                Ty.apply
                                                                                                                                                                  (Ty.path
                                                                                                                                                                    "core::slice::iter::Iter")
                                                                                                                                                                  [
                                                                                                                                                                    Ty.apply
                                                                                                                                                                      (Ty.path
                                                                                                                                                                        "halo2_proofs::poly::Polynomial")
                                                                                                                                                                      [
                                                                                                                                                                        Ty.associated;
                                                                                                                                                                        Ty.path
                                                                                                                                                                          "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                      ]
                                                                                                                                                                  ]
                                                                                                                                                              ]
                                                                                                                                                            |),
                                                                                                                                                            [
                                                                                                                                                              M.call_closure (|
                                                                                                                                                                M.get_trait_method (|
                                                                                                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                                                                                                  Ty.apply
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "core::slice::iter::Iter")
                                                                                                                                                                    [
                                                                                                                                                                      Ty.apply
                                                                                                                                                                        (Ty.path
                                                                                                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                        [
                                                                                                                                                                          Ty.path
                                                                                                                                                                            "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                        ]
                                                                                                                                                                    ],
                                                                                                                                                                  [],
                                                                                                                                                                  "map",
                                                                                                                                                                  [
                                                                                                                                                                    Ty.apply
                                                                                                                                                                      (Ty.path
                                                                                                                                                                        "&")
                                                                                                                                                                      [
                                                                                                                                                                        Ty.apply
                                                                                                                                                                          (Ty.path
                                                                                                                                                                            "halo2_proofs::poly::Polynomial")
                                                                                                                                                                          [
                                                                                                                                                                            Ty.associated;
                                                                                                                                                                            Ty.path
                                                                                                                                                                              "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                          ]
                                                                                                                                                                      ];
                                                                                                                                                                    Ty.function
                                                                                                                                                                      [
                                                                                                                                                                        Ty.tuple
                                                                                                                                                                          [
                                                                                                                                                                            Ty.apply
                                                                                                                                                                              (Ty.path
                                                                                                                                                                                "&")
                                                                                                                                                                              [
                                                                                                                                                                                Ty.apply
                                                                                                                                                                                  (Ty.path
                                                                                                                                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                                  [
                                                                                                                                                                                    Ty.path
                                                                                                                                                                                      "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                                  ]
                                                                                                                                                                              ]
                                                                                                                                                                          ]
                                                                                                                                                                      ]
                                                                                                                                                                      (Ty.apply
                                                                                                                                                                        (Ty.path
                                                                                                                                                                          "&")
                                                                                                                                                                        [
                                                                                                                                                                          Ty.apply
                                                                                                                                                                            (Ty.path
                                                                                                                                                                              "halo2_proofs::poly::Polynomial")
                                                                                                                                                                            [
                                                                                                                                                                              Ty.associated;
                                                                                                                                                                              Ty.path
                                                                                                                                                                                "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                            ]
                                                                                                                                                                        ])
                                                                                                                                                                  ]
                                                                                                                                                                |),
                                                                                                                                                                [
                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                    M.get_associated_function (|
                                                                                                                                                                      Ty.apply
                                                                                                                                                                        (Ty.path
                                                                                                                                                                          "slice")
                                                                                                                                                                        [
                                                                                                                                                                          Ty.apply
                                                                                                                                                                            (Ty.path
                                                                                                                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                            [
                                                                                                                                                                              Ty.path
                                                                                                                                                                                "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                            ]
                                                                                                                                                                        ],
                                                                                                                                                                      "iter",
                                                                                                                                                                      []
                                                                                                                                                                    |),
                                                                                                                                                                    [
                                                                                                                                                                      M.read (|
                                                                                                                                                                        columns
                                                                                                                                                                      |)
                                                                                                                                                                    ]
                                                                                                                                                                  |);
                                                                                                                                                                  M.closure
                                                                                                                                                                    (fun
                                                                                                                                                                        γ =>
                                                                                                                                                                      ltac:(M.monadic
                                                                                                                                                                        match
                                                                                                                                                                          γ
                                                                                                                                                                        with
                                                                                                                                                                        | [
                                                                                                                                                                              α0
                                                                                                                                                                            ] =>
                                                                                                                                                                          M.match_operator (|
                                                                                                                                                                            M.alloc (|
                                                                                                                                                                              α0
                                                                                                                                                                            |),
                                                                                                                                                                            [
                                                                                                                                                                              fun
                                                                                                                                                                                  γ =>
                                                                                                                                                                                ltac:(M.monadic
                                                                                                                                                                                  (let
                                                                                                                                                                                        γ :=
                                                                                                                                                                                    M.read (|
                                                                                                                                                                                      γ
                                                                                                                                                                                    |) in
                                                                                                                                                                                  let
                                                                                                                                                                                        column :=
                                                                                                                                                                                    M.copy (|
                                                                                                                                                                                      γ
                                                                                                                                                                                    |) in
                                                                                                                                                                                  M.read (|
                                                                                                                                                                                    M.match_operator (|
                                                                                                                                                                                      M.alloc (|
                                                                                                                                                                                        M.call_closure (|
                                                                                                                                                                                          M.get_associated_function (|
                                                                                                                                                                                            Ty.apply
                                                                                                                                                                                              (Ty.path
                                                                                                                                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                                              [
                                                                                                                                                                                                Ty.path
                                                                                                                                                                                                  "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                                              ],
                                                                                                                                                                                            "column_type",
                                                                                                                                                                                            []
                                                                                                                                                                                          |),
                                                                                                                                                                                          [
                                                                                                                                                                                            column
                                                                                                                                                                                          ]
                                                                                                                                                                                        |)
                                                                                                                                                                                      |),
                                                                                                                                                                                      [
                                                                                                                                                                                        fun
                                                                                                                                                                                            γ =>
                                                                                                                                                                                          ltac:(M.monadic
                                                                                                                                                                                            (let
                                                                                                                                                                                                  γ :=
                                                                                                                                                                                              M.read (|
                                                                                                                                                                                                γ
                                                                                                                                                                                              |) in
                                                                                                                                                                                            M.alloc (|
                                                                                                                                                                                              M.call_closure (|
                                                                                                                                                                                                M.get_trait_method (|
                                                                                                                                                                                                  "core::ops::index::Index",
                                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                                      "alloc::vec::Vec")
                                                                                                                                                                                                    [
                                                                                                                                                                                                      Ty.apply
                                                                                                                                                                                                        (Ty.path
                                                                                                                                                                                                          "halo2_proofs::poly::Polynomial")
                                                                                                                                                                                                        [
                                                                                                                                                                                                          Ty.associated;
                                                                                                                                                                                                          Ty.path
                                                                                                                                                                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                                                        ];
                                                                                                                                                                                                      Ty.path
                                                                                                                                                                                                        "alloc::alloc::Global"
                                                                                                                                                                                                    ],
                                                                                                                                                                                                  [
                                                                                                                                                                                                    Ty.path
                                                                                                                                                                                                      "usize"
                                                                                                                                                                                                  ],
                                                                                                                                                                                                  "index",
                                                                                                                                                                                                  []
                                                                                                                                                                                                |),
                                                                                                                                                                                                [
                                                                                                                                                                                                  M.read (|
                                                                                                                                                                                                    M.read (|
                                                                                                                                                                                                      advice
                                                                                                                                                                                                    |)
                                                                                                                                                                                                  |);
                                                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                                                    M.get_associated_function (|
                                                                                                                                                                                                      Ty.apply
                                                                                                                                                                                                        (Ty.path
                                                                                                                                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                                                        [
                                                                                                                                                                                                          Ty.path
                                                                                                                                                                                                            "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                                                        ],
                                                                                                                                                                                                      "index",
                                                                                                                                                                                                      []
                                                                                                                                                                                                    |),
                                                                                                                                                                                                    [
                                                                                                                                                                                                      column
                                                                                                                                                                                                    ]
                                                                                                                                                                                                  |)
                                                                                                                                                                                                ]
                                                                                                                                                                                              |)
                                                                                                                                                                                            |)));
                                                                                                                                                                                        fun
                                                                                                                                                                                            γ =>
                                                                                                                                                                                          ltac:(M.monadic
                                                                                                                                                                                            (let
                                                                                                                                                                                                  γ :=
                                                                                                                                                                                              M.read (|
                                                                                                                                                                                                γ
                                                                                                                                                                                              |) in
                                                                                                                                                                                            M.alloc (|
                                                                                                                                                                                              M.SubPointer.get_array_field (|
                                                                                                                                                                                                M.read (|
                                                                                                                                                                                                  fixed
                                                                                                                                                                                                |),
                                                                                                                                                                                                M.alloc (|
                                                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                                                    M.get_associated_function (|
                                                                                                                                                                                                      Ty.apply
                                                                                                                                                                                                        (Ty.path
                                                                                                                                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                                                        [
                                                                                                                                                                                                          Ty.path
                                                                                                                                                                                                            "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                                                        ],
                                                                                                                                                                                                      "index",
                                                                                                                                                                                                      []
                                                                                                                                                                                                    |),
                                                                                                                                                                                                    [
                                                                                                                                                                                                      column
                                                                                                                                                                                                    ]
                                                                                                                                                                                                  |)
                                                                                                                                                                                                |)
                                                                                                                                                                                              |)
                                                                                                                                                                                            |)));
                                                                                                                                                                                        fun
                                                                                                                                                                                            γ =>
                                                                                                                                                                                          ltac:(M.monadic
                                                                                                                                                                                            (let
                                                                                                                                                                                                  γ :=
                                                                                                                                                                                              M.read (|
                                                                                                                                                                                                γ
                                                                                                                                                                                              |) in
                                                                                                                                                                                            M.alloc (|
                                                                                                                                                                                              M.call_closure (|
                                                                                                                                                                                                M.get_trait_method (|
                                                                                                                                                                                                  "core::ops::index::Index",
                                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                                      "alloc::vec::Vec")
                                                                                                                                                                                                    [
                                                                                                                                                                                                      Ty.apply
                                                                                                                                                                                                        (Ty.path
                                                                                                                                                                                                          "halo2_proofs::poly::Polynomial")
                                                                                                                                                                                                        [
                                                                                                                                                                                                          Ty.associated;
                                                                                                                                                                                                          Ty.path
                                                                                                                                                                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                                                        ];
                                                                                                                                                                                                      Ty.path
                                                                                                                                                                                                        "alloc::alloc::Global"
                                                                                                                                                                                                    ],
                                                                                                                                                                                                  [
                                                                                                                                                                                                    Ty.path
                                                                                                                                                                                                      "usize"
                                                                                                                                                                                                  ],
                                                                                                                                                                                                  "index",
                                                                                                                                                                                                  []
                                                                                                                                                                                                |),
                                                                                                                                                                                                [
                                                                                                                                                                                                  M.read (|
                                                                                                                                                                                                    M.read (|
                                                                                                                                                                                                      instance
                                                                                                                                                                                                    |)
                                                                                                                                                                                                  |);
                                                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                                                    M.get_associated_function (|
                                                                                                                                                                                                      Ty.apply
                                                                                                                                                                                                        (Ty.path
                                                                                                                                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                                                        [
                                                                                                                                                                                                          Ty.path
                                                                                                                                                                                                            "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                                                        ],
                                                                                                                                                                                                      "index",
                                                                                                                                                                                                      []
                                                                                                                                                                                                    |),
                                                                                                                                                                                                    [
                                                                                                                                                                                                      column
                                                                                                                                                                                                    ]
                                                                                                                                                                                                  |)
                                                                                                                                                                                                ]
                                                                                                                                                                                              |)
                                                                                                                                                                                            |)))
                                                                                                                                                                                      ]
                                                                                                                                                                                    |)
                                                                                                                                                                                  |)))
                                                                                                                                                                            ]
                                                                                                                                                                          |)
                                                                                                                                                                        | _ =>
                                                                                                                                                                          M.impossible (||)
                                                                                                                                                                        end))
                                                                                                                                                                ]
                                                                                                                                                              |);
                                                                                                                                                              M.call_closure (|
                                                                                                                                                                M.get_associated_function (|
                                                                                                                                                                  Ty.apply
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "slice")
                                                                                                                                                                    [
                                                                                                                                                                      Ty.apply
                                                                                                                                                                        (Ty.path
                                                                                                                                                                          "halo2_proofs::poly::Polynomial")
                                                                                                                                                                        [
                                                                                                                                                                          Ty.associated;
                                                                                                                                                                          Ty.path
                                                                                                                                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                        ]
                                                                                                                                                                    ],
                                                                                                                                                                  "iter",
                                                                                                                                                                  []
                                                                                                                                                                |),
                                                                                                                                                                [
                                                                                                                                                                  M.read (|
                                                                                                                                                                    cosets
                                                                                                                                                                  |)
                                                                                                                                                                ]
                                                                                                                                                              |)
                                                                                                                                                            ]
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                      |)
                                                                                                                                                    |),
                                                                                                                                                    [
                                                                                                                                                      fun
                                                                                                                                                          γ =>
                                                                                                                                                        ltac:(M.monadic
                                                                                                                                                          (let
                                                                                                                                                                iter :=
                                                                                                                                                            M.copy (|
                                                                                                                                                              γ
                                                                                                                                                            |) in
                                                                                                                                                          M.loop (|
                                                                                                                                                            ltac:(M.monadic
                                                                                                                                                              (let
                                                                                                                                                                    _ :=
                                                                                                                                                                M.match_operator (|
                                                                                                                                                                  M.alloc (|
                                                                                                                                                                    M.call_closure (|
                                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                                        "core::iter::traits::iterator::Iterator",
                                                                                                                                                                        Ty.apply
                                                                                                                                                                          (Ty.path
                                                                                                                                                                            "core::iter::adapters::zip::Zip")
                                                                                                                                                                          [
                                                                                                                                                                            Ty.apply
                                                                                                                                                                              (Ty.path
                                                                                                                                                                                "core::iter::adapters::map::Map")
                                                                                                                                                                              [
                                                                                                                                                                                Ty.apply
                                                                                                                                                                                  (Ty.path
                                                                                                                                                                                    "core::slice::iter::Iter")
                                                                                                                                                                                  [
                                                                                                                                                                                    Ty.apply
                                                                                                                                                                                      (Ty.path
                                                                                                                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                                      [
                                                                                                                                                                                        Ty.path
                                                                                                                                                                                          "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                                      ]
                                                                                                                                                                                  ];
                                                                                                                                                                                Ty.function
                                                                                                                                                                                  [
                                                                                                                                                                                    Ty.tuple
                                                                                                                                                                                      [
                                                                                                                                                                                        Ty.apply
                                                                                                                                                                                          (Ty.path
                                                                                                                                                                                            "&")
                                                                                                                                                                                          [
                                                                                                                                                                                            Ty.apply
                                                                                                                                                                                              (Ty.path
                                                                                                                                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                                              [
                                                                                                                                                                                                Ty.path
                                                                                                                                                                                                  "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                                              ]
                                                                                                                                                                                          ]
                                                                                                                                                                                      ]
                                                                                                                                                                                  ]
                                                                                                                                                                                  (Ty.apply
                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                      "&")
                                                                                                                                                                                    [
                                                                                                                                                                                      Ty.apply
                                                                                                                                                                                        (Ty.path
                                                                                                                                                                                          "halo2_proofs::poly::Polynomial")
                                                                                                                                                                                        [
                                                                                                                                                                                          Ty.associated;
                                                                                                                                                                                          Ty.path
                                                                                                                                                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                                        ]
                                                                                                                                                                                    ])
                                                                                                                                                                              ];
                                                                                                                                                                            Ty.apply
                                                                                                                                                                              (Ty.path
                                                                                                                                                                                "core::slice::iter::Iter")
                                                                                                                                                                              [
                                                                                                                                                                                Ty.apply
                                                                                                                                                                                  (Ty.path
                                                                                                                                                                                    "halo2_proofs::poly::Polynomial")
                                                                                                                                                                                  [
                                                                                                                                                                                    Ty.associated;
                                                                                                                                                                                    Ty.path
                                                                                                                                                                                      "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                                  ]
                                                                                                                                                                              ]
                                                                                                                                                                          ],
                                                                                                                                                                        [],
                                                                                                                                                                        "next",
                                                                                                                                                                        []
                                                                                                                                                                      |),
                                                                                                                                                                      [
                                                                                                                                                                        iter
                                                                                                                                                                      ]
                                                                                                                                                                    |)
                                                                                                                                                                  |),
                                                                                                                                                                  [
                                                                                                                                                                    fun
                                                                                                                                                                        γ =>
                                                                                                                                                                      ltac:(M.monadic
                                                                                                                                                                        (M.alloc (|
                                                                                                                                                                          M.never_to_any (|
                                                                                                                                                                            M.read (|
                                                                                                                                                                              M.break (||)
                                                                                                                                                                            |)
                                                                                                                                                                          |)
                                                                                                                                                                        |)));
                                                                                                                                                                    fun
                                                                                                                                                                        γ =>
                                                                                                                                                                      ltac:(M.monadic
                                                                                                                                                                        (let
                                                                                                                                                                              γ0_0 :=
                                                                                                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                                                                                                            γ,
                                                                                                                                                                            "core::option::Option::Some",
                                                                                                                                                                            0
                                                                                                                                                                          |) in
                                                                                                                                                                        let
                                                                                                                                                                              γ1_0 :=
                                                                                                                                                                          M.SubPointer.get_tuple_field (|
                                                                                                                                                                            γ0_0,
                                                                                                                                                                            0
                                                                                                                                                                          |) in
                                                                                                                                                                        let
                                                                                                                                                                              γ1_1 :=
                                                                                                                                                                          M.SubPointer.get_tuple_field (|
                                                                                                                                                                            γ0_0,
                                                                                                                                                                            1
                                                                                                                                                                          |) in
                                                                                                                                                                        let
                                                                                                                                                                              values :=
                                                                                                                                                                          M.copy (|
                                                                                                                                                                            γ1_0
                                                                                                                                                                          |) in
                                                                                                                                                                        let
                                                                                                                                                                              permutation :=
                                                                                                                                                                          M.copy (|
                                                                                                                                                                            γ1_1
                                                                                                                                                                          |) in
                                                                                                                                                                        let
                                                                                                                                                                              _ :=
                                                                                                                                                                          M.alloc (|
                                                                                                                                                                            M.call_closure (|
                                                                                                                                                                              M.get_trait_method (|
                                                                                                                                                                                "core::ops::arith::MulAssign",
                                                                                                                                                                                Ty.associated,
                                                                                                                                                                                [
                                                                                                                                                                                  Ty.associated
                                                                                                                                                                                ],
                                                                                                                                                                                "mul_assign",
                                                                                                                                                                                []
                                                                                                                                                                              |),
                                                                                                                                                                              [
                                                                                                                                                                                left;
                                                                                                                                                                                M.call_closure (|
                                                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                                                    "core::ops::arith::Add",
                                                                                                                                                                                    Ty.associated,
                                                                                                                                                                                    [
                                                                                                                                                                                      Ty.associated
                                                                                                                                                                                    ],
                                                                                                                                                                                    "add",
                                                                                                                                                                                    []
                                                                                                                                                                                  |),
                                                                                                                                                                                  [
                                                                                                                                                                                    M.call_closure (|
                                                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                                                        "core::ops::arith::Add",
                                                                                                                                                                                        Ty.associated,
                                                                                                                                                                                        [
                                                                                                                                                                                          Ty.associated
                                                                                                                                                                                        ],
                                                                                                                                                                                        "add",
                                                                                                                                                                                        []
                                                                                                                                                                                      |),
                                                                                                                                                                                      [
                                                                                                                                                                                        M.read (|
                                                                                                                                                                                          M.call_closure (|
                                                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                                                              "core::ops::index::Index",
                                                                                                                                                                                              Ty.apply
                                                                                                                                                                                                (Ty.path
                                                                                                                                                                                                  "halo2_proofs::poly::Polynomial")
                                                                                                                                                                                                [
                                                                                                                                                                                                  Ty.associated;
                                                                                                                                                                                                  Ty.path
                                                                                                                                                                                                    "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                                                ],
                                                                                                                                                                                              [
                                                                                                                                                                                                Ty.path
                                                                                                                                                                                                  "usize"
                                                                                                                                                                                              ],
                                                                                                                                                                                              "index",
                                                                                                                                                                                              []
                                                                                                                                                                                            |),
                                                                                                                                                                                            [
                                                                                                                                                                                              M.read (|
                                                                                                                                                                                                values
                                                                                                                                                                                              |);
                                                                                                                                                                                              M.read (|
                                                                                                                                                                                                idx
                                                                                                                                                                                              |)
                                                                                                                                                                                            ]
                                                                                                                                                                                          |)
                                                                                                                                                                                        |);
                                                                                                                                                                                        M.call_closure (|
                                                                                                                                                                                          M.get_trait_method (|
                                                                                                                                                                                            "core::ops::arith::Mul",
                                                                                                                                                                                            Ty.associated,
                                                                                                                                                                                            [
                                                                                                                                                                                              Ty.associated
                                                                                                                                                                                            ],
                                                                                                                                                                                            "mul",
                                                                                                                                                                                            []
                                                                                                                                                                                          |),
                                                                                                                                                                                          [
                                                                                                                                                                                            M.read (|
                                                                                                                                                                                              beta
                                                                                                                                                                                            |);
                                                                                                                                                                                            M.read (|
                                                                                                                                                                                              M.call_closure (|
                                                                                                                                                                                                M.get_trait_method (|
                                                                                                                                                                                                  "core::ops::index::Index",
                                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                                      "halo2_proofs::poly::Polynomial")
                                                                                                                                                                                                    [
                                                                                                                                                                                                      Ty.associated;
                                                                                                                                                                                                      Ty.path
                                                                                                                                                                                                        "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                                                    ],
                                                                                                                                                                                                  [
                                                                                                                                                                                                    Ty.path
                                                                                                                                                                                                      "usize"
                                                                                                                                                                                                  ],
                                                                                                                                                                                                  "index",
                                                                                                                                                                                                  []
                                                                                                                                                                                                |),
                                                                                                                                                                                                [
                                                                                                                                                                                                  M.read (|
                                                                                                                                                                                                    permutation
                                                                                                                                                                                                  |);
                                                                                                                                                                                                  M.read (|
                                                                                                                                                                                                    idx
                                                                                                                                                                                                  |)
                                                                                                                                                                                                ]
                                                                                                                                                                                              |)
                                                                                                                                                                                            |)
                                                                                                                                                                                          ]
                                                                                                                                                                                        |)
                                                                                                                                                                                      ]
                                                                                                                                                                                    |);
                                                                                                                                                                                    M.read (|
                                                                                                                                                                                      gamma
                                                                                                                                                                                    |)
                                                                                                                                                                                  ]
                                                                                                                                                                                |)
                                                                                                                                                                              ]
                                                                                                                                                                            |)
                                                                                                                                                                          |) in
                                                                                                                                                                        M.alloc (|
                                                                                                                                                                          Value.Tuple
                                                                                                                                                                            []
                                                                                                                                                                        |)))
                                                                                                                                                                  ]
                                                                                                                                                                |) in
                                                                                                                                                              M.alloc (|
                                                                                                                                                                Value.Tuple
                                                                                                                                                                  []
                                                                                                                                                              |)))
                                                                                                                                                          |)))
                                                                                                                                                    ]
                                                                                                                                                  |)) in
                                                                                                                                              let
                                                                                                                                                    right :=
                                                                                                                                                M.copy (|
                                                                                                                                                  M.call_closure (|
                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                      "core::ops::index::Index",
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "halo2_proofs::poly::Polynomial")
                                                                                                                                                        [
                                                                                                                                                          Ty.associated;
                                                                                                                                                          Ty.path
                                                                                                                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                        ],
                                                                                                                                                      [
                                                                                                                                                        Ty.path
                                                                                                                                                          "usize"
                                                                                                                                                      ],
                                                                                                                                                      "index",
                                                                                                                                                      []
                                                                                                                                                    |),
                                                                                                                                                    [
                                                                                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                                                                                        M.read (|
                                                                                                                                                          set
                                                                                                                                                        |),
                                                                                                                                                        "halo2_proofs::plonk::permutation::prover::CommittedSet",
                                                                                                                                                        "permutation_product_coset"
                                                                                                                                                      |);
                                                                                                                                                      M.read (|
                                                                                                                                                        idx
                                                                                                                                                      |)
                                                                                                                                                    ]
                                                                                                                                                  |)
                                                                                                                                                |) in
                                                                                                                                              let
                                                                                                                                                    _ :=
                                                                                                                                                M.use
                                                                                                                                                  (M.match_operator (|
                                                                                                                                                    M.alloc (|
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        M.get_trait_method (|
                                                                                                                                                          "core::iter::traits::collect::IntoIterator",
                                                                                                                                                          Ty.apply
                                                                                                                                                            (Ty.path
                                                                                                                                                              "core::iter::adapters::map::Map")
                                                                                                                                                            [
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "core::slice::iter::Iter")
                                                                                                                                                                [
                                                                                                                                                                  Ty.apply
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                    [
                                                                                                                                                                      Ty.path
                                                                                                                                                                        "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                    ]
                                                                                                                                                                ];
                                                                                                                                                              Ty.function
                                                                                                                                                                [
                                                                                                                                                                  Ty.tuple
                                                                                                                                                                    [
                                                                                                                                                                      Ty.apply
                                                                                                                                                                        (Ty.path
                                                                                                                                                                          "&")
                                                                                                                                                                        [
                                                                                                                                                                          Ty.apply
                                                                                                                                                                            (Ty.path
                                                                                                                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                            [
                                                                                                                                                                              Ty.path
                                                                                                                                                                                "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                            ]
                                                                                                                                                                        ]
                                                                                                                                                                    ]
                                                                                                                                                                ]
                                                                                                                                                                (Ty.apply
                                                                                                                                                                  (Ty.path
                                                                                                                                                                    "&")
                                                                                                                                                                  [
                                                                                                                                                                    Ty.apply
                                                                                                                                                                      (Ty.path
                                                                                                                                                                        "halo2_proofs::poly::Polynomial")
                                                                                                                                                                      [
                                                                                                                                                                        Ty.associated;
                                                                                                                                                                        Ty.path
                                                                                                                                                                          "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                      ]
                                                                                                                                                                  ])
                                                                                                                                                            ],
                                                                                                                                                          [],
                                                                                                                                                          "into_iter",
                                                                                                                                                          []
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          M.call_closure (|
                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                              "core::iter::traits::iterator::Iterator",
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "core::slice::iter::Iter")
                                                                                                                                                                [
                                                                                                                                                                  Ty.apply
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                    [
                                                                                                                                                                      Ty.path
                                                                                                                                                                        "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                    ]
                                                                                                                                                                ],
                                                                                                                                                              [],
                                                                                                                                                              "map",
                                                                                                                                                              [
                                                                                                                                                                Ty.apply
                                                                                                                                                                  (Ty.path
                                                                                                                                                                    "&")
                                                                                                                                                                  [
                                                                                                                                                                    Ty.apply
                                                                                                                                                                      (Ty.path
                                                                                                                                                                        "halo2_proofs::poly::Polynomial")
                                                                                                                                                                      [
                                                                                                                                                                        Ty.associated;
                                                                                                                                                                        Ty.path
                                                                                                                                                                          "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                      ]
                                                                                                                                                                  ];
                                                                                                                                                                Ty.function
                                                                                                                                                                  [
                                                                                                                                                                    Ty.tuple
                                                                                                                                                                      [
                                                                                                                                                                        Ty.apply
                                                                                                                                                                          (Ty.path
                                                                                                                                                                            "&")
                                                                                                                                                                          [
                                                                                                                                                                            Ty.apply
                                                                                                                                                                              (Ty.path
                                                                                                                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                              [
                                                                                                                                                                                Ty.path
                                                                                                                                                                                  "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                              ]
                                                                                                                                                                          ]
                                                                                                                                                                      ]
                                                                                                                                                                  ]
                                                                                                                                                                  (Ty.apply
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "&")
                                                                                                                                                                    [
                                                                                                                                                                      Ty.apply
                                                                                                                                                                        (Ty.path
                                                                                                                                                                          "halo2_proofs::poly::Polynomial")
                                                                                                                                                                        [
                                                                                                                                                                          Ty.associated;
                                                                                                                                                                          Ty.path
                                                                                                                                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                        ]
                                                                                                                                                                    ])
                                                                                                                                                              ]
                                                                                                                                                            |),
                                                                                                                                                            [
                                                                                                                                                              M.call_closure (|
                                                                                                                                                                M.get_associated_function (|
                                                                                                                                                                  Ty.apply
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "slice")
                                                                                                                                                                    [
                                                                                                                                                                      Ty.apply
                                                                                                                                                                        (Ty.path
                                                                                                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                        [
                                                                                                                                                                          Ty.path
                                                                                                                                                                            "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                        ]
                                                                                                                                                                    ],
                                                                                                                                                                  "iter",
                                                                                                                                                                  []
                                                                                                                                                                |),
                                                                                                                                                                [
                                                                                                                                                                  M.read (|
                                                                                                                                                                    columns
                                                                                                                                                                  |)
                                                                                                                                                                ]
                                                                                                                                                              |);
                                                                                                                                                              M.closure
                                                                                                                                                                (fun
                                                                                                                                                                    γ =>
                                                                                                                                                                  ltac:(M.monadic
                                                                                                                                                                    match
                                                                                                                                                                      γ
                                                                                                                                                                    with
                                                                                                                                                                    | [
                                                                                                                                                                          α0
                                                                                                                                                                        ] =>
                                                                                                                                                                      M.match_operator (|
                                                                                                                                                                        M.alloc (|
                                                                                                                                                                          α0
                                                                                                                                                                        |),
                                                                                                                                                                        [
                                                                                                                                                                          fun
                                                                                                                                                                              γ =>
                                                                                                                                                                            ltac:(M.monadic
                                                                                                                                                                              (let
                                                                                                                                                                                    γ :=
                                                                                                                                                                                M.read (|
                                                                                                                                                                                  γ
                                                                                                                                                                                |) in
                                                                                                                                                                              let
                                                                                                                                                                                    column :=
                                                                                                                                                                                M.copy (|
                                                                                                                                                                                  γ
                                                                                                                                                                                |) in
                                                                                                                                                                              M.read (|
                                                                                                                                                                                M.match_operator (|
                                                                                                                                                                                  M.alloc (|
                                                                                                                                                                                    M.call_closure (|
                                                                                                                                                                                      M.get_associated_function (|
                                                                                                                                                                                        Ty.apply
                                                                                                                                                                                          (Ty.path
                                                                                                                                                                                            "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                                          [
                                                                                                                                                                                            Ty.path
                                                                                                                                                                                              "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                                          ],
                                                                                                                                                                                        "column_type",
                                                                                                                                                                                        []
                                                                                                                                                                                      |),
                                                                                                                                                                                      [
                                                                                                                                                                                        column
                                                                                                                                                                                      ]
                                                                                                                                                                                    |)
                                                                                                                                                                                  |),
                                                                                                                                                                                  [
                                                                                                                                                                                    fun
                                                                                                                                                                                        γ =>
                                                                                                                                                                                      ltac:(M.monadic
                                                                                                                                                                                        (let
                                                                                                                                                                                              γ :=
                                                                                                                                                                                          M.read (|
                                                                                                                                                                                            γ
                                                                                                                                                                                          |) in
                                                                                                                                                                                        M.alloc (|
                                                                                                                                                                                          M.call_closure (|
                                                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                                                              "core::ops::index::Index",
                                                                                                                                                                                              Ty.apply
                                                                                                                                                                                                (Ty.path
                                                                                                                                                                                                  "alloc::vec::Vec")
                                                                                                                                                                                                [
                                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                                      "halo2_proofs::poly::Polynomial")
                                                                                                                                                                                                    [
                                                                                                                                                                                                      Ty.associated;
                                                                                                                                                                                                      Ty.path
                                                                                                                                                                                                        "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                                                    ];
                                                                                                                                                                                                  Ty.path
                                                                                                                                                                                                    "alloc::alloc::Global"
                                                                                                                                                                                                ],
                                                                                                                                                                                              [
                                                                                                                                                                                                Ty.path
                                                                                                                                                                                                  "usize"
                                                                                                                                                                                              ],
                                                                                                                                                                                              "index",
                                                                                                                                                                                              []
                                                                                                                                                                                            |),
                                                                                                                                                                                            [
                                                                                                                                                                                              M.read (|
                                                                                                                                                                                                M.read (|
                                                                                                                                                                                                  advice
                                                                                                                                                                                                |)
                                                                                                                                                                                              |);
                                                                                                                                                                                              M.call_closure (|
                                                                                                                                                                                                M.get_associated_function (|
                                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                                                    [
                                                                                                                                                                                                      Ty.path
                                                                                                                                                                                                        "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                                                    ],
                                                                                                                                                                                                  "index",
                                                                                                                                                                                                  []
                                                                                                                                                                                                |),
                                                                                                                                                                                                [
                                                                                                                                                                                                  column
                                                                                                                                                                                                ]
                                                                                                                                                                                              |)
                                                                                                                                                                                            ]
                                                                                                                                                                                          |)
                                                                                                                                                                                        |)));
                                                                                                                                                                                    fun
                                                                                                                                                                                        γ =>
                                                                                                                                                                                      ltac:(M.monadic
                                                                                                                                                                                        (let
                                                                                                                                                                                              γ :=
                                                                                                                                                                                          M.read (|
                                                                                                                                                                                            γ
                                                                                                                                                                                          |) in
                                                                                                                                                                                        M.alloc (|
                                                                                                                                                                                          M.SubPointer.get_array_field (|
                                                                                                                                                                                            M.read (|
                                                                                                                                                                                              fixed
                                                                                                                                                                                            |),
                                                                                                                                                                                            M.alloc (|
                                                                                                                                                                                              M.call_closure (|
                                                                                                                                                                                                M.get_associated_function (|
                                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                                                    [
                                                                                                                                                                                                      Ty.path
                                                                                                                                                                                                        "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                                                    ],
                                                                                                                                                                                                  "index",
                                                                                                                                                                                                  []
                                                                                                                                                                                                |),
                                                                                                                                                                                                [
                                                                                                                                                                                                  column
                                                                                                                                                                                                ]
                                                                                                                                                                                              |)
                                                                                                                                                                                            |)
                                                                                                                                                                                          |)
                                                                                                                                                                                        |)));
                                                                                                                                                                                    fun
                                                                                                                                                                                        γ =>
                                                                                                                                                                                      ltac:(M.monadic
                                                                                                                                                                                        (let
                                                                                                                                                                                              γ :=
                                                                                                                                                                                          M.read (|
                                                                                                                                                                                            γ
                                                                                                                                                                                          |) in
                                                                                                                                                                                        M.alloc (|
                                                                                                                                                                                          M.call_closure (|
                                                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                                                              "core::ops::index::Index",
                                                                                                                                                                                              Ty.apply
                                                                                                                                                                                                (Ty.path
                                                                                                                                                                                                  "alloc::vec::Vec")
                                                                                                                                                                                                [
                                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                                      "halo2_proofs::poly::Polynomial")
                                                                                                                                                                                                    [
                                                                                                                                                                                                      Ty.associated;
                                                                                                                                                                                                      Ty.path
                                                                                                                                                                                                        "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                                                    ];
                                                                                                                                                                                                  Ty.path
                                                                                                                                                                                                    "alloc::alloc::Global"
                                                                                                                                                                                                ],
                                                                                                                                                                                              [
                                                                                                                                                                                                Ty.path
                                                                                                                                                                                                  "usize"
                                                                                                                                                                                              ],
                                                                                                                                                                                              "index",
                                                                                                                                                                                              []
                                                                                                                                                                                            |),
                                                                                                                                                                                            [
                                                                                                                                                                                              M.read (|
                                                                                                                                                                                                M.read (|
                                                                                                                                                                                                  instance
                                                                                                                                                                                                |)
                                                                                                                                                                                              |);
                                                                                                                                                                                              M.call_closure (|
                                                                                                                                                                                                M.get_associated_function (|
                                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                                                    [
                                                                                                                                                                                                      Ty.path
                                                                                                                                                                                                        "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                                                    ],
                                                                                                                                                                                                  "index",
                                                                                                                                                                                                  []
                                                                                                                                                                                                |),
                                                                                                                                                                                                [
                                                                                                                                                                                                  column
                                                                                                                                                                                                ]
                                                                                                                                                                                              |)
                                                                                                                                                                                            ]
                                                                                                                                                                                          |)
                                                                                                                                                                                        |)))
                                                                                                                                                                                  ]
                                                                                                                                                                                |)
                                                                                                                                                                              |)))
                                                                                                                                                                        ]
                                                                                                                                                                      |)
                                                                                                                                                                    | _ =>
                                                                                                                                                                      M.impossible (||)
                                                                                                                                                                    end))
                                                                                                                                                            ]
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                      |)
                                                                                                                                                    |),
                                                                                                                                                    [
                                                                                                                                                      fun
                                                                                                                                                          γ =>
                                                                                                                                                        ltac:(M.monadic
                                                                                                                                                          (let
                                                                                                                                                                iter :=
                                                                                                                                                            M.copy (|
                                                                                                                                                              γ
                                                                                                                                                            |) in
                                                                                                                                                          M.loop (|
                                                                                                                                                            ltac:(M.monadic
                                                                                                                                                              (let
                                                                                                                                                                    _ :=
                                                                                                                                                                M.match_operator (|
                                                                                                                                                                  M.alloc (|
                                                                                                                                                                    M.call_closure (|
                                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                                        "core::iter::traits::iterator::Iterator",
                                                                                                                                                                        Ty.apply
                                                                                                                                                                          (Ty.path
                                                                                                                                                                            "core::iter::adapters::map::Map")
                                                                                                                                                                          [
                                                                                                                                                                            Ty.apply
                                                                                                                                                                              (Ty.path
                                                                                                                                                                                "core::slice::iter::Iter")
                                                                                                                                                                              [
                                                                                                                                                                                Ty.apply
                                                                                                                                                                                  (Ty.path
                                                                                                                                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                                  [
                                                                                                                                                                                    Ty.path
                                                                                                                                                                                      "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                                  ]
                                                                                                                                                                              ];
                                                                                                                                                                            Ty.function
                                                                                                                                                                              [
                                                                                                                                                                                Ty.tuple
                                                                                                                                                                                  [
                                                                                                                                                                                    Ty.apply
                                                                                                                                                                                      (Ty.path
                                                                                                                                                                                        "&")
                                                                                                                                                                                      [
                                                                                                                                                                                        Ty.apply
                                                                                                                                                                                          (Ty.path
                                                                                                                                                                                            "halo2_proofs::plonk::circuit::Column")
                                                                                                                                                                                          [
                                                                                                                                                                                            Ty.path
                                                                                                                                                                                              "halo2_proofs::plonk::circuit::Any"
                                                                                                                                                                                          ]
                                                                                                                                                                                      ]
                                                                                                                                                                                  ]
                                                                                                                                                                              ]
                                                                                                                                                                              (Ty.apply
                                                                                                                                                                                (Ty.path
                                                                                                                                                                                  "&")
                                                                                                                                                                                [
                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                      "halo2_proofs::poly::Polynomial")
                                                                                                                                                                                    [
                                                                                                                                                                                      Ty.associated;
                                                                                                                                                                                      Ty.path
                                                                                                                                                                                        "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                                    ]
                                                                                                                                                                                ])
                                                                                                                                                                          ],
                                                                                                                                                                        [],
                                                                                                                                                                        "next",
                                                                                                                                                                        []
                                                                                                                                                                      |),
                                                                                                                                                                      [
                                                                                                                                                                        iter
                                                                                                                                                                      ]
                                                                                                                                                                    |)
                                                                                                                                                                  |),
                                                                                                                                                                  [
                                                                                                                                                                    fun
                                                                                                                                                                        γ =>
                                                                                                                                                                      ltac:(M.monadic
                                                                                                                                                                        (M.alloc (|
                                                                                                                                                                          M.never_to_any (|
                                                                                                                                                                            M.read (|
                                                                                                                                                                              M.break (||)
                                                                                                                                                                            |)
                                                                                                                                                                          |)
                                                                                                                                                                        |)));
                                                                                                                                                                    fun
                                                                                                                                                                        γ =>
                                                                                                                                                                      ltac:(M.monadic
                                                                                                                                                                        (let
                                                                                                                                                                              γ0_0 :=
                                                                                                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                                                                                                            γ,
                                                                                                                                                                            "core::option::Option::Some",
                                                                                                                                                                            0
                                                                                                                                                                          |) in
                                                                                                                                                                        let
                                                                                                                                                                              values :=
                                                                                                                                                                          M.copy (|
                                                                                                                                                                            γ0_0
                                                                                                                                                                          |) in
                                                                                                                                                                        let
                                                                                                                                                                              _ :=
                                                                                                                                                                          M.alloc (|
                                                                                                                                                                            M.call_closure (|
                                                                                                                                                                              M.get_trait_method (|
                                                                                                                                                                                "core::ops::arith::MulAssign",
                                                                                                                                                                                Ty.associated,
                                                                                                                                                                                [
                                                                                                                                                                                  Ty.associated
                                                                                                                                                                                ],
                                                                                                                                                                                "mul_assign",
                                                                                                                                                                                []
                                                                                                                                                                              |),
                                                                                                                                                                              [
                                                                                                                                                                                right;
                                                                                                                                                                                M.call_closure (|
                                                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                                                    "core::ops::arith::Add",
                                                                                                                                                                                    Ty.associated,
                                                                                                                                                                                    [
                                                                                                                                                                                      Ty.associated
                                                                                                                                                                                    ],
                                                                                                                                                                                    "add",
                                                                                                                                                                                    []
                                                                                                                                                                                  |),
                                                                                                                                                                                  [
                                                                                                                                                                                    M.call_closure (|
                                                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                                                        "core::ops::arith::Add",
                                                                                                                                                                                        Ty.associated,
                                                                                                                                                                                        [
                                                                                                                                                                                          Ty.associated
                                                                                                                                                                                        ],
                                                                                                                                                                                        "add",
                                                                                                                                                                                        []
                                                                                                                                                                                      |),
                                                                                                                                                                                      [
                                                                                                                                                                                        M.read (|
                                                                                                                                                                                          M.call_closure (|
                                                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                                                              "core::ops::index::Index",
                                                                                                                                                                                              Ty.apply
                                                                                                                                                                                                (Ty.path
                                                                                                                                                                                                  "halo2_proofs::poly::Polynomial")
                                                                                                                                                                                                [
                                                                                                                                                                                                  Ty.associated;
                                                                                                                                                                                                  Ty.path
                                                                                                                                                                                                    "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                                                ],
                                                                                                                                                                                              [
                                                                                                                                                                                                Ty.path
                                                                                                                                                                                                  "usize"
                                                                                                                                                                                              ],
                                                                                                                                                                                              "index",
                                                                                                                                                                                              []
                                                                                                                                                                                            |),
                                                                                                                                                                                            [
                                                                                                                                                                                              M.read (|
                                                                                                                                                                                                values
                                                                                                                                                                                              |);
                                                                                                                                                                                              M.read (|
                                                                                                                                                                                                idx
                                                                                                                                                                                              |)
                                                                                                                                                                                            ]
                                                                                                                                                                                          |)
                                                                                                                                                                                        |);
                                                                                                                                                                                        M.read (|
                                                                                                                                                                                          current_delta
                                                                                                                                                                                        |)
                                                                                                                                                                                      ]
                                                                                                                                                                                    |);
                                                                                                                                                                                    M.read (|
                                                                                                                                                                                      gamma
                                                                                                                                                                                    |)
                                                                                                                                                                                  ]
                                                                                                                                                                                |)
                                                                                                                                                                              ]
                                                                                                                                                                            |)
                                                                                                                                                                          |) in
                                                                                                                                                                        let
                                                                                                                                                                              _ :=
                                                                                                                                                                          M.alloc (|
                                                                                                                                                                            M.call_closure (|
                                                                                                                                                                              M.get_trait_method (|
                                                                                                                                                                                "core::ops::arith::MulAssign",
                                                                                                                                                                                Ty.associated,
                                                                                                                                                                                [
                                                                                                                                                                                  Ty.apply
                                                                                                                                                                                    (Ty.path
                                                                                                                                                                                      "&")
                                                                                                                                                                                    [
                                                                                                                                                                                      Ty.associated
                                                                                                                                                                                    ]
                                                                                                                                                                                ],
                                                                                                                                                                                "mul_assign",
                                                                                                                                                                                []
                                                                                                                                                                              |),
                                                                                                                                                                              [
                                                                                                                                                                                current_delta;
                                                                                                                                                                                M.get_constant (|
                                                                                                                                                                                  "pairing_bn256::arithmetic::fields::FieldExt::DELTA"
                                                                                                                                                                                |)
                                                                                                                                                                              ]
                                                                                                                                                                            |)
                                                                                                                                                                          |) in
                                                                                                                                                                        M.alloc (|
                                                                                                                                                                          Value.Tuple
                                                                                                                                                                            []
                                                                                                                                                                        |)))
                                                                                                                                                                  ]
                                                                                                                                                                |) in
                                                                                                                                                              M.alloc (|
                                                                                                                                                                Value.Tuple
                                                                                                                                                                  []
                                                                                                                                                              |)))
                                                                                                                                                          |)))
                                                                                                                                                    ]
                                                                                                                                                  |)) in
                                                                                                                                              let
                                                                                                                                                    _ :=
                                                                                                                                                M.write (|
                                                                                                                                                  M.read (|
                                                                                                                                                    value
                                                                                                                                                  |),
                                                                                                                                                  M.call_closure (|
                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                      "core::ops::arith::Add",
                                                                                                                                                      Ty.associated,
                                                                                                                                                      [
                                                                                                                                                        Ty.associated
                                                                                                                                                      ],
                                                                                                                                                      "add",
                                                                                                                                                      []
                                                                                                                                                    |),
                                                                                                                                                    [
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        M.get_trait_method (|
                                                                                                                                                          "core::ops::arith::Mul",
                                                                                                                                                          Ty.associated,
                                                                                                                                                          [
                                                                                                                                                            Ty.associated
                                                                                                                                                          ],
                                                                                                                                                          "mul",
                                                                                                                                                          []
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          M.read (|
                                                                                                                                                            M.read (|
                                                                                                                                                              value
                                                                                                                                                            |)
                                                                                                                                                          |);
                                                                                                                                                          M.read (|
                                                                                                                                                            y
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                      |);
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        M.get_trait_method (|
                                                                                                                                                          "core::ops::arith::Mul",
                                                                                                                                                          Ty.associated,
                                                                                                                                                          [
                                                                                                                                                            Ty.associated
                                                                                                                                                          ],
                                                                                                                                                          "mul",
                                                                                                                                                          []
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          M.call_closure (|
                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                              "core::ops::arith::Sub",
                                                                                                                                                              Ty.associated,
                                                                                                                                                              [
                                                                                                                                                                Ty.associated
                                                                                                                                                              ],
                                                                                                                                                              "sub",
                                                                                                                                                              []
                                                                                                                                                            |),
                                                                                                                                                            [
                                                                                                                                                              M.read (|
                                                                                                                                                                left
                                                                                                                                                              |);
                                                                                                                                                              M.read (|
                                                                                                                                                                right
                                                                                                                                                              |)
                                                                                                                                                            ]
                                                                                                                                                          |);
                                                                                                                                                          M.read (|
                                                                                                                                                            M.call_closure (|
                                                                                                                                                              M.get_trait_method (|
                                                                                                                                                                "core::ops::index::Index",
                                                                                                                                                                Ty.apply
                                                                                                                                                                  (Ty.path
                                                                                                                                                                    "halo2_proofs::poly::Polynomial")
                                                                                                                                                                  [
                                                                                                                                                                    Ty.associated;
                                                                                                                                                                    Ty.path
                                                                                                                                                                      "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                  ],
                                                                                                                                                                [
                                                                                                                                                                  Ty.path
                                                                                                                                                                    "usize"
                                                                                                                                                                ],
                                                                                                                                                                "index",
                                                                                                                                                                []
                                                                                                                                                              |),
                                                                                                                                                              [
                                                                                                                                                                M.read (|
                                                                                                                                                                  l_active_row
                                                                                                                                                                |);
                                                                                                                                                                M.read (|
                                                                                                                                                                  idx
                                                                                                                                                                |)
                                                                                                                                                              ]
                                                                                                                                                            |)
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                      |)
                                                                                                                                                    ]
                                                                                                                                                  |)
                                                                                                                                                |) in
                                                                                                                                              M.alloc (|
                                                                                                                                                Value.Tuple
                                                                                                                                                  []
                                                                                                                                              |)))
                                                                                                                                        ]
                                                                                                                                      |) in
                                                                                                                                    M.alloc (|
                                                                                                                                      Value.Tuple
                                                                                                                                        []
                                                                                                                                    |)))
                                                                                                                                |)))
                                                                                                                          ]
                                                                                                                        |)) in
                                                                                                                    let
                                                                                                                          _ :=
                                                                                                                      M.alloc (|
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::ops::arith::MulAssign",
                                                                                                                            Ty.associated,
                                                                                                                            [
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "&")
                                                                                                                                [
                                                                                                                                  Ty.associated
                                                                                                                                ]
                                                                                                                            ],
                                                                                                                            "mul_assign",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            beta_term;
                                                                                                                            extended_omega
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |) in
                                                                                                                    M.alloc (|
                                                                                                                      Value.Tuple
                                                                                                                        []
                                                                                                                    |)))
                                                                                                              ]
                                                                                                            |) in
                                                                                                          M.alloc (|
                                                                                                            Value.Tuple
                                                                                                              []
                                                                                                          |)))
                                                                                                      |)))
                                                                                                ]
                                                                                              |))
                                                                                          |)))
                                                                                    ]
                                                                                  |)))
                                                                            ]
                                                                          |)
                                                                        | _ => M.impossible (||)
                                                                        end))
                                                                ]
                                                              |)
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (M.alloc (| Value.Tuple [] |)))
                                                    ]
                                                  |) in
                                                M.match_operator (|
                                                  timer,
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let timer :=
                                                          M.alloc (|
                                                            Value.StructTuple
                                                              "ark_std::perf_trace::inner::TimerInfo"
                                                              []
                                                          |) in
                                                        let _ :=
                                                          M.use
                                                            (M.match_operator (|
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::collect::IntoIterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::lookup::prover::Committed")
                                                                              [ C ]
                                                                          ]
                                                                      ],
                                                                    [],
                                                                    "into_iter",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::lookup::prover::Committed")
                                                                              [ C ]
                                                                          ],
                                                                        [],
                                                                        "enumerate",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::lookup::prover::Committed")
                                                                                  [ C ]
                                                                              ],
                                                                            "iter",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::deref::Deref",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::lookup::prover::Committed")
                                                                                      [ C ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                [],
                                                                                "deref",
                                                                                []
                                                                              |),
                                                                              [ M.read (| lookups |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let iter := M.copy (| γ |) in
                                                                    M.loop (|
                                                                      ltac:(M.monadic
                                                                        (let _ :=
                                                                          M.match_operator (|
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::iter::adapters::enumerate::Enumerate")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::slice::iter::Iter")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::lookup::prover::Committed")
                                                                                            [ C ]
                                                                                        ]
                                                                                    ],
                                                                                  [],
                                                                                  "next",
                                                                                  []
                                                                                |),
                                                                                [ iter ]
                                                                              |)
                                                                            |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (M.alloc (|
                                                                                    M.never_to_any (|
                                                                                      M.read (|
                                                                                        M.break (||)
                                                                                      |)
                                                                                    |)
                                                                                  |)));
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let γ0_0 :=
                                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                                      γ,
                                                                                      "core::option::Option::Some",
                                                                                      0
                                                                                    |) in
                                                                                  let γ1_0 :=
                                                                                    M.SubPointer.get_tuple_field (|
                                                                                      γ0_0,
                                                                                      0
                                                                                    |) in
                                                                                  let γ1_1 :=
                                                                                    M.SubPointer.get_tuple_field (|
                                                                                      γ0_0,
                                                                                      1
                                                                                    |) in
                                                                                  let lookup_idx :=
                                                                                    M.copy (|
                                                                                      γ1_0
                                                                                    |) in
                                                                                  let lookup :=
                                                                                    M.copy (|
                                                                                      γ1_1
                                                                                    |) in
                                                                                  let table :=
                                                                                    M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::index::Index",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            [
                                                                                              Ty.associated;
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::ops::range::Range")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "usize"
                                                                                              ]
                                                                                          ],
                                                                                          "index",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          lookup_values;
                                                                                          Value.StructRecord
                                                                                            "core::ops::range::Range"
                                                                                            [
                                                                                              ("start",
                                                                                                BinOp.Panic.mul (|
                                                                                                  Integer.Usize,
                                                                                                  M.read (|
                                                                                                    lookup_idx
                                                                                                  |),
                                                                                                  M.read (|
                                                                                                    size
                                                                                                  |)
                                                                                                |));
                                                                                              ("end_",
                                                                                                BinOp.Panic.mul (|
                                                                                                  Integer.Usize,
                                                                                                  BinOp.Panic.add (|
                                                                                                    Integer.Usize,
                                                                                                    M.read (|
                                                                                                      lookup_idx
                                                                                                    |),
                                                                                                    Value.Integer
                                                                                                      1
                                                                                                  |),
                                                                                                  M.read (|
                                                                                                    size
                                                                                                  |)
                                                                                                |))
                                                                                            ]
                                                                                        ]
                                                                                      |)
                                                                                    |) in
                                                                                  let
                                                                                        product_coset :=
                                                                                    M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::poly::domain::EvaluationDomain")
                                                                                            [
                                                                                              Ty.associated
                                                                                            ],
                                                                                          "coeff_to_extended",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                              M.read (|
                                                                                                pk
                                                                                              |),
                                                                                              "halo2_proofs::plonk::ProvingKey",
                                                                                              "vk"
                                                                                            |),
                                                                                            "halo2_proofs::plonk::VerifyingKey",
                                                                                            "domain"
                                                                                          |);
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::clone::Clone",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::poly::Polynomial")
                                                                                                [
                                                                                                  Ty.associated;
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::poly::Coeff"
                                                                                                ],
                                                                                              [],
                                                                                              "clone",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.read (|
                                                                                                  lookup
                                                                                                |),
                                                                                                "halo2_proofs::plonk::lookup::prover::Committed",
                                                                                                "product_poly"
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |) in
                                                                                  let
                                                                                        permuted_input_coset :=
                                                                                    M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::poly::domain::EvaluationDomain")
                                                                                            [
                                                                                              Ty.associated
                                                                                            ],
                                                                                          "coeff_to_extended",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                              M.read (|
                                                                                                pk
                                                                                              |),
                                                                                              "halo2_proofs::plonk::ProvingKey",
                                                                                              "vk"
                                                                                            |),
                                                                                            "halo2_proofs::plonk::VerifyingKey",
                                                                                            "domain"
                                                                                          |);
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::clone::Clone",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::poly::Polynomial")
                                                                                                [
                                                                                                  Ty.associated;
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::poly::Coeff"
                                                                                                ],
                                                                                              [],
                                                                                              "clone",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.read (|
                                                                                                  lookup
                                                                                                |),
                                                                                                "halo2_proofs::plonk::lookup::prover::Committed",
                                                                                                "permuted_input_poly"
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |) in
                                                                                  let
                                                                                        permuted_table_coset :=
                                                                                    M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::poly::domain::EvaluationDomain")
                                                                                            [
                                                                                              Ty.associated
                                                                                            ],
                                                                                          "coeff_to_extended",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                              M.read (|
                                                                                                pk
                                                                                              |),
                                                                                              "halo2_proofs::plonk::ProvingKey",
                                                                                              "vk"
                                                                                            |),
                                                                                            "halo2_proofs::plonk::VerifyingKey",
                                                                                            "domain"
                                                                                          |);
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::clone::Clone",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::poly::Polynomial")
                                                                                                [
                                                                                                  Ty.associated;
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::poly::Coeff"
                                                                                                ],
                                                                                              [],
                                                                                              "clone",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.read (|
                                                                                                  lookup
                                                                                                |),
                                                                                                "halo2_proofs::plonk::lookup::prover::Committed",
                                                                                                "permuted_table_poly"
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |) in
                                                                                  let _ :=
                                                                                    M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_function (|
                                                                                          "halo2_proofs::arithmetic::parallelize",
                                                                                          [
                                                                                            Ty.associated;
                                                                                            Ty.function
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&mut")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "slice")
                                                                                                          [
                                                                                                            Ty.associated
                                                                                                          ]
                                                                                                      ];
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ]
                                                                                              ]
                                                                                              (Ty.tuple
                                                                                                [])
                                                                                          ]
                                                                                        |),
                                                                                        [
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::deref::DerefMut",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::poly::Polynomial")
                                                                                                [
                                                                                                  Ty.associated;
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                ],
                                                                                              [],
                                                                                              "deref_mut",
                                                                                              []
                                                                                            |),
                                                                                            [ values
                                                                                            ]
                                                                                          |);
                                                                                          M.closure
                                                                                            (fun
                                                                                                γ =>
                                                                                              ltac:(M.monadic
                                                                                                match
                                                                                                  γ
                                                                                                with
                                                                                                | [
                                                                                                      α0;
                                                                                                      α1
                                                                                                    ] =>
                                                                                                  M.match_operator (|
                                                                                                    M.alloc (|
                                                                                                      α0
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (let
                                                                                                                values :=
                                                                                                            M.copy (|
                                                                                                              γ
                                                                                                            |) in
                                                                                                          M.match_operator (|
                                                                                                            M.alloc (|
                                                                                                              α1
                                                                                                            |),
                                                                                                            [
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (let
                                                                                                                        start :=
                                                                                                                    M.copy (|
                                                                                                                      γ
                                                                                                                    |) in
                                                                                                                  M.read (|
                                                                                                                    M.use
                                                                                                                      (M.match_operator (|
                                                                                                                        M.alloc (|
                                                                                                                          M.call_closure (|
                                                                                                                            M.get_trait_method (|
                                                                                                                              "core::iter::traits::collect::IntoIterator",
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "core::iter::adapters::enumerate::Enumerate")
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "core::slice::iter::IterMut")
                                                                                                                                    [
                                                                                                                                      Ty.associated
                                                                                                                                    ]
                                                                                                                                ],
                                                                                                                              [],
                                                                                                                              "into_iter",
                                                                                                                              []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              M.call_closure (|
                                                                                                                                M.get_trait_method (|
                                                                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "core::slice::iter::IterMut")
                                                                                                                                    [
                                                                                                                                      Ty.associated
                                                                                                                                    ],
                                                                                                                                  [],
                                                                                                                                  "enumerate",
                                                                                                                                  []
                                                                                                                                |),
                                                                                                                                [
                                                                                                                                  M.call_closure (|
                                                                                                                                    M.get_associated_function (|
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "slice")
                                                                                                                                        [
                                                                                                                                          Ty.associated
                                                                                                                                        ],
                                                                                                                                      "iter_mut",
                                                                                                                                      []
                                                                                                                                    |),
                                                                                                                                    [
                                                                                                                                      M.read (|
                                                                                                                                        values
                                                                                                                                      |)
                                                                                                                                    ]
                                                                                                                                  |)
                                                                                                                                ]
                                                                                                                              |)
                                                                                                                            ]
                                                                                                                          |)
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          fun
                                                                                                                              γ =>
                                                                                                                            ltac:(M.monadic
                                                                                                                              (let
                                                                                                                                    iter :=
                                                                                                                                M.copy (|
                                                                                                                                  γ
                                                                                                                                |) in
                                                                                                                              M.loop (|
                                                                                                                                ltac:(M.monadic
                                                                                                                                  (let
                                                                                                                                        _ :=
                                                                                                                                    M.match_operator (|
                                                                                                                                      M.alloc (|
                                                                                                                                        M.call_closure (|
                                                                                                                                          M.get_trait_method (|
                                                                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "core::iter::adapters::enumerate::Enumerate")
                                                                                                                                              [
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "core::slice::iter::IterMut")
                                                                                                                                                  [
                                                                                                                                                    Ty.associated
                                                                                                                                                  ]
                                                                                                                                              ],
                                                                                                                                            [],
                                                                                                                                            "next",
                                                                                                                                            []
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            iter
                                                                                                                                          ]
                                                                                                                                        |)
                                                                                                                                      |),
                                                                                                                                      [
                                                                                                                                        fun
                                                                                                                                            γ =>
                                                                                                                                          ltac:(M.monadic
                                                                                                                                            (M.alloc (|
                                                                                                                                              M.never_to_any (|
                                                                                                                                                M.read (|
                                                                                                                                                  M.break (||)
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            |)));
                                                                                                                                        fun
                                                                                                                                            γ =>
                                                                                                                                          ltac:(M.monadic
                                                                                                                                            (let
                                                                                                                                                  γ0_0 :=
                                                                                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                                                                                γ,
                                                                                                                                                "core::option::Option::Some",
                                                                                                                                                0
                                                                                                                                              |) in
                                                                                                                                            let
                                                                                                                                                  γ1_0 :=
                                                                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                                                                γ0_0,
                                                                                                                                                0
                                                                                                                                              |) in
                                                                                                                                            let
                                                                                                                                                  γ1_1 :=
                                                                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                                                                γ0_0,
                                                                                                                                                1
                                                                                                                                              |) in
                                                                                                                                            let
                                                                                                                                                  i :=
                                                                                                                                              M.copy (|
                                                                                                                                                γ1_0
                                                                                                                                              |) in
                                                                                                                                            let
                                                                                                                                                  value :=
                                                                                                                                              M.copy (|
                                                                                                                                                γ1_1
                                                                                                                                              |) in
                                                                                                                                            let
                                                                                                                                                  idx :=
                                                                                                                                              M.alloc (|
                                                                                                                                                BinOp.Panic.add (|
                                                                                                                                                  Integer.Usize,
                                                                                                                                                  M.read (|
                                                                                                                                                    start
                                                                                                                                                  |),
                                                                                                                                                  M.read (|
                                                                                                                                                    i
                                                                                                                                                  |)
                                                                                                                                                |)
                                                                                                                                              |) in
                                                                                                                                            let
                                                                                                                                                  r_next :=
                                                                                                                                              M.alloc (|
                                                                                                                                                M.call_closure (|
                                                                                                                                                  M.get_function (|
                                                                                                                                                    "halo2_proofs::plonk::evaluation::get_rotation_idx",
                                                                                                                                                    []
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    M.read (|
                                                                                                                                                      idx
                                                                                                                                                    |);
                                                                                                                                                    Value.Integer
                                                                                                                                                      1;
                                                                                                                                                    M.read (|
                                                                                                                                                      rot_scale
                                                                                                                                                    |);
                                                                                                                                                    M.read (|
                                                                                                                                                      isize
                                                                                                                                                    |)
                                                                                                                                                  ]
                                                                                                                                                |)
                                                                                                                                              |) in
                                                                                                                                            let
                                                                                                                                                  r_prev :=
                                                                                                                                              M.alloc (|
                                                                                                                                                M.call_closure (|
                                                                                                                                                  M.get_function (|
                                                                                                                                                    "halo2_proofs::plonk::evaluation::get_rotation_idx",
                                                                                                                                                    []
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    M.read (|
                                                                                                                                                      idx
                                                                                                                                                    |);
                                                                                                                                                    Value.Integer
                                                                                                                                                      (-1);
                                                                                                                                                    M.read (|
                                                                                                                                                      rot_scale
                                                                                                                                                    |);
                                                                                                                                                    M.read (|
                                                                                                                                                      isize
                                                                                                                                                    |)
                                                                                                                                                  ]
                                                                                                                                                |)
                                                                                                                                              |) in
                                                                                                                                            let
                                                                                                                                                  a_minus_s :=
                                                                                                                                              M.alloc (|
                                                                                                                                                M.call_closure (|
                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                    "core::ops::arith::Sub",
                                                                                                                                                    Ty.associated,
                                                                                                                                                    [
                                                                                                                                                      Ty.associated
                                                                                                                                                    ],
                                                                                                                                                    "sub",
                                                                                                                                                    []
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    M.read (|
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        M.get_trait_method (|
                                                                                                                                                          "core::ops::index::Index",
                                                                                                                                                          Ty.apply
                                                                                                                                                            (Ty.path
                                                                                                                                                              "halo2_proofs::poly::Polynomial")
                                                                                                                                                            [
                                                                                                                                                              Ty.associated;
                                                                                                                                                              Ty.path
                                                                                                                                                                "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                            ],
                                                                                                                                                          [
                                                                                                                                                            Ty.path
                                                                                                                                                              "usize"
                                                                                                                                                          ],
                                                                                                                                                          "index",
                                                                                                                                                          []
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          permuted_input_coset;
                                                                                                                                                          M.read (|
                                                                                                                                                            idx
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                      |)
                                                                                                                                                    |);
                                                                                                                                                    M.read (|
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        M.get_trait_method (|
                                                                                                                                                          "core::ops::index::Index",
                                                                                                                                                          Ty.apply
                                                                                                                                                            (Ty.path
                                                                                                                                                              "halo2_proofs::poly::Polynomial")
                                                                                                                                                            [
                                                                                                                                                              Ty.associated;
                                                                                                                                                              Ty.path
                                                                                                                                                                "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                            ],
                                                                                                                                                          [
                                                                                                                                                            Ty.path
                                                                                                                                                              "usize"
                                                                                                                                                          ],
                                                                                                                                                          "index",
                                                                                                                                                          []
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          permuted_table_coset;
                                                                                                                                                          M.read (|
                                                                                                                                                            idx
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                      |)
                                                                                                                                                    |)
                                                                                                                                                  ]
                                                                                                                                                |)
                                                                                                                                              |) in
                                                                                                                                            let
                                                                                                                                                  _ :=
                                                                                                                                              M.write (|
                                                                                                                                                M.read (|
                                                                                                                                                  value
                                                                                                                                                |),
                                                                                                                                                M.call_closure (|
                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                    "core::ops::arith::Add",
                                                                                                                                                    Ty.associated,
                                                                                                                                                    [
                                                                                                                                                      Ty.associated
                                                                                                                                                    ],
                                                                                                                                                    "add",
                                                                                                                                                    []
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    M.call_closure (|
                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                        "core::ops::arith::Mul",
                                                                                                                                                        Ty.associated,
                                                                                                                                                        [
                                                                                                                                                          Ty.associated
                                                                                                                                                        ],
                                                                                                                                                        "mul",
                                                                                                                                                        []
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        M.read (|
                                                                                                                                                          M.read (|
                                                                                                                                                            value
                                                                                                                                                          |)
                                                                                                                                                        |);
                                                                                                                                                        M.read (|
                                                                                                                                                          y
                                                                                                                                                        |)
                                                                                                                                                      ]
                                                                                                                                                    |);
                                                                                                                                                    M.call_closure (|
                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                        "core::ops::arith::Mul",
                                                                                                                                                        Ty.associated,
                                                                                                                                                        [
                                                                                                                                                          Ty.associated
                                                                                                                                                        ],
                                                                                                                                                        "mul",
                                                                                                                                                        []
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        M.call_closure (|
                                                                                                                                                          M.get_trait_method (|
                                                                                                                                                            "core::ops::arith::Sub",
                                                                                                                                                            Ty.associated,
                                                                                                                                                            [
                                                                                                                                                              Ty.associated
                                                                                                                                                            ],
                                                                                                                                                            "sub",
                                                                                                                                                            []
                                                                                                                                                          |),
                                                                                                                                                          [
                                                                                                                                                            M.read (|
                                                                                                                                                              one
                                                                                                                                                            |);
                                                                                                                                                            M.read (|
                                                                                                                                                              M.call_closure (|
                                                                                                                                                                M.get_trait_method (|
                                                                                                                                                                  "core::ops::index::Index",
                                                                                                                                                                  Ty.apply
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "halo2_proofs::poly::Polynomial")
                                                                                                                                                                    [
                                                                                                                                                                      Ty.associated;
                                                                                                                                                                      Ty.path
                                                                                                                                                                        "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                    ],
                                                                                                                                                                  [
                                                                                                                                                                    Ty.path
                                                                                                                                                                      "usize"
                                                                                                                                                                  ],
                                                                                                                                                                  "index",
                                                                                                                                                                  []
                                                                                                                                                                |),
                                                                                                                                                                [
                                                                                                                                                                  product_coset;
                                                                                                                                                                  M.read (|
                                                                                                                                                                    idx
                                                                                                                                                                  |)
                                                                                                                                                                ]
                                                                                                                                                              |)
                                                                                                                                                            |)
                                                                                                                                                          ]
                                                                                                                                                        |);
                                                                                                                                                        M.read (|
                                                                                                                                                          M.call_closure (|
                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                              "core::ops::index::Index",
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "halo2_proofs::poly::Polynomial")
                                                                                                                                                                [
                                                                                                                                                                  Ty.associated;
                                                                                                                                                                  Ty.path
                                                                                                                                                                    "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                ],
                                                                                                                                                              [
                                                                                                                                                                Ty.path
                                                                                                                                                                  "usize"
                                                                                                                                                              ],
                                                                                                                                                              "index",
                                                                                                                                                              []
                                                                                                                                                            |),
                                                                                                                                                            [
                                                                                                                                                              M.read (|
                                                                                                                                                                l0
                                                                                                                                                              |);
                                                                                                                                                              M.read (|
                                                                                                                                                                idx
                                                                                                                                                              |)
                                                                                                                                                            ]
                                                                                                                                                          |)
                                                                                                                                                        |)
                                                                                                                                                      ]
                                                                                                                                                    |)
                                                                                                                                                  ]
                                                                                                                                                |)
                                                                                                                                              |) in
                                                                                                                                            let
                                                                                                                                                  _ :=
                                                                                                                                              M.write (|
                                                                                                                                                M.read (|
                                                                                                                                                  value
                                                                                                                                                |),
                                                                                                                                                M.call_closure (|
                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                    "core::ops::arith::Add",
                                                                                                                                                    Ty.associated,
                                                                                                                                                    [
                                                                                                                                                      Ty.associated
                                                                                                                                                    ],
                                                                                                                                                    "add",
                                                                                                                                                    []
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    M.call_closure (|
                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                        "core::ops::arith::Mul",
                                                                                                                                                        Ty.associated,
                                                                                                                                                        [
                                                                                                                                                          Ty.associated
                                                                                                                                                        ],
                                                                                                                                                        "mul",
                                                                                                                                                        []
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        M.read (|
                                                                                                                                                          M.read (|
                                                                                                                                                            value
                                                                                                                                                          |)
                                                                                                                                                        |);
                                                                                                                                                        M.read (|
                                                                                                                                                          y
                                                                                                                                                        |)
                                                                                                                                                      ]
                                                                                                                                                    |);
                                                                                                                                                    M.call_closure (|
                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                        "core::ops::arith::Mul",
                                                                                                                                                        Ty.associated,
                                                                                                                                                        [
                                                                                                                                                          Ty.associated
                                                                                                                                                        ],
                                                                                                                                                        "mul",
                                                                                                                                                        []
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        M.call_closure (|
                                                                                                                                                          M.get_trait_method (|
                                                                                                                                                            "core::ops::arith::Sub",
                                                                                                                                                            Ty.associated,
                                                                                                                                                            [
                                                                                                                                                              Ty.associated
                                                                                                                                                            ],
                                                                                                                                                            "sub",
                                                                                                                                                            []
                                                                                                                                                          |),
                                                                                                                                                          [
                                                                                                                                                            M.call_closure (|
                                                                                                                                                              M.get_trait_method (|
                                                                                                                                                                "core::ops::arith::Mul",
                                                                                                                                                                Ty.associated,
                                                                                                                                                                [
                                                                                                                                                                  Ty.associated
                                                                                                                                                                ],
                                                                                                                                                                "mul",
                                                                                                                                                                []
                                                                                                                                                              |),
                                                                                                                                                              [
                                                                                                                                                                M.read (|
                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                                      "core::ops::index::Index",
                                                                                                                                                                      Ty.apply
                                                                                                                                                                        (Ty.path
                                                                                                                                                                          "halo2_proofs::poly::Polynomial")
                                                                                                                                                                        [
                                                                                                                                                                          Ty.associated;
                                                                                                                                                                          Ty.path
                                                                                                                                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                        ],
                                                                                                                                                                      [
                                                                                                                                                                        Ty.path
                                                                                                                                                                          "usize"
                                                                                                                                                                      ],
                                                                                                                                                                      "index",
                                                                                                                                                                      []
                                                                                                                                                                    |),
                                                                                                                                                                    [
                                                                                                                                                                      product_coset;
                                                                                                                                                                      M.read (|
                                                                                                                                                                        idx
                                                                                                                                                                      |)
                                                                                                                                                                    ]
                                                                                                                                                                  |)
                                                                                                                                                                |);
                                                                                                                                                                M.read (|
                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                                      "core::ops::index::Index",
                                                                                                                                                                      Ty.apply
                                                                                                                                                                        (Ty.path
                                                                                                                                                                          "halo2_proofs::poly::Polynomial")
                                                                                                                                                                        [
                                                                                                                                                                          Ty.associated;
                                                                                                                                                                          Ty.path
                                                                                                                                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                        ],
                                                                                                                                                                      [
                                                                                                                                                                        Ty.path
                                                                                                                                                                          "usize"
                                                                                                                                                                      ],
                                                                                                                                                                      "index",
                                                                                                                                                                      []
                                                                                                                                                                    |),
                                                                                                                                                                    [
                                                                                                                                                                      product_coset;
                                                                                                                                                                      M.read (|
                                                                                                                                                                        idx
                                                                                                                                                                      |)
                                                                                                                                                                    ]
                                                                                                                                                                  |)
                                                                                                                                                                |)
                                                                                                                                                              ]
                                                                                                                                                            |);
                                                                                                                                                            M.read (|
                                                                                                                                                              M.call_closure (|
                                                                                                                                                                M.get_trait_method (|
                                                                                                                                                                  "core::ops::index::Index",
                                                                                                                                                                  Ty.apply
                                                                                                                                                                    (Ty.path
                                                                                                                                                                      "halo2_proofs::poly::Polynomial")
                                                                                                                                                                    [
                                                                                                                                                                      Ty.associated;
                                                                                                                                                                      Ty.path
                                                                                                                                                                        "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                    ],
                                                                                                                                                                  [
                                                                                                                                                                    Ty.path
                                                                                                                                                                      "usize"
                                                                                                                                                                  ],
                                                                                                                                                                  "index",
                                                                                                                                                                  []
                                                                                                                                                                |),
                                                                                                                                                                [
                                                                                                                                                                  product_coset;
                                                                                                                                                                  M.read (|
                                                                                                                                                                    idx
                                                                                                                                                                  |)
                                                                                                                                                                ]
                                                                                                                                                              |)
                                                                                                                                                            |)
                                                                                                                                                          ]
                                                                                                                                                        |);
                                                                                                                                                        M.read (|
                                                                                                                                                          M.call_closure (|
                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                              "core::ops::index::Index",
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "halo2_proofs::poly::Polynomial")
                                                                                                                                                                [
                                                                                                                                                                  Ty.associated;
                                                                                                                                                                  Ty.path
                                                                                                                                                                    "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                ],
                                                                                                                                                              [
                                                                                                                                                                Ty.path
                                                                                                                                                                  "usize"
                                                                                                                                                              ],
                                                                                                                                                              "index",
                                                                                                                                                              []
                                                                                                                                                            |),
                                                                                                                                                            [
                                                                                                                                                              M.read (|
                                                                                                                                                                l_last
                                                                                                                                                              |);
                                                                                                                                                              M.read (|
                                                                                                                                                                idx
                                                                                                                                                              |)
                                                                                                                                                            ]
                                                                                                                                                          |)
                                                                                                                                                        |)
                                                                                                                                                      ]
                                                                                                                                                    |)
                                                                                                                                                  ]
                                                                                                                                                |)
                                                                                                                                              |) in
                                                                                                                                            let
                                                                                                                                                  _ :=
                                                                                                                                              M.write (|
                                                                                                                                                M.read (|
                                                                                                                                                  value
                                                                                                                                                |),
                                                                                                                                                M.call_closure (|
                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                    "core::ops::arith::Add",
                                                                                                                                                    Ty.associated,
                                                                                                                                                    [
                                                                                                                                                      Ty.associated
                                                                                                                                                    ],
                                                                                                                                                    "add",
                                                                                                                                                    []
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    M.call_closure (|
                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                        "core::ops::arith::Mul",
                                                                                                                                                        Ty.associated,
                                                                                                                                                        [
                                                                                                                                                          Ty.associated
                                                                                                                                                        ],
                                                                                                                                                        "mul",
                                                                                                                                                        []
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        M.read (|
                                                                                                                                                          M.read (|
                                                                                                                                                            value
                                                                                                                                                          |)
                                                                                                                                                        |);
                                                                                                                                                        M.read (|
                                                                                                                                                          y
                                                                                                                                                        |)
                                                                                                                                                      ]
                                                                                                                                                    |);
                                                                                                                                                    M.call_closure (|
                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                        "core::ops::arith::Mul",
                                                                                                                                                        Ty.associated,
                                                                                                                                                        [
                                                                                                                                                          Ty.associated
                                                                                                                                                        ],
                                                                                                                                                        "mul",
                                                                                                                                                        []
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        M.call_closure (|
                                                                                                                                                          M.get_trait_method (|
                                                                                                                                                            "core::ops::arith::Sub",
                                                                                                                                                            Ty.associated,
                                                                                                                                                            [
                                                                                                                                                              Ty.associated
                                                                                                                                                            ],
                                                                                                                                                            "sub",
                                                                                                                                                            []
                                                                                                                                                          |),
                                                                                                                                                          [
                                                                                                                                                            M.call_closure (|
                                                                                                                                                              M.get_trait_method (|
                                                                                                                                                                "core::ops::arith::Mul",
                                                                                                                                                                Ty.associated,
                                                                                                                                                                [
                                                                                                                                                                  Ty.associated
                                                                                                                                                                ],
                                                                                                                                                                "mul",
                                                                                                                                                                []
                                                                                                                                                              |),
                                                                                                                                                              [
                                                                                                                                                                M.call_closure (|
                                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                                    "core::ops::arith::Mul",
                                                                                                                                                                    Ty.associated,
                                                                                                                                                                    [
                                                                                                                                                                      Ty.associated
                                                                                                                                                                    ],
                                                                                                                                                                    "mul",
                                                                                                                                                                    []
                                                                                                                                                                  |),
                                                                                                                                                                  [
                                                                                                                                                                    M.read (|
                                                                                                                                                                      M.call_closure (|
                                                                                                                                                                        M.get_trait_method (|
                                                                                                                                                                          "core::ops::index::Index",
                                                                                                                                                                          Ty.apply
                                                                                                                                                                            (Ty.path
                                                                                                                                                                              "halo2_proofs::poly::Polynomial")
                                                                                                                                                                            [
                                                                                                                                                                              Ty.associated;
                                                                                                                                                                              Ty.path
                                                                                                                                                                                "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                            ],
                                                                                                                                                                          [
                                                                                                                                                                            Ty.path
                                                                                                                                                                              "usize"
                                                                                                                                                                          ],
                                                                                                                                                                          "index",
                                                                                                                                                                          []
                                                                                                                                                                        |),
                                                                                                                                                                        [
                                                                                                                                                                          product_coset;
                                                                                                                                                                          M.read (|
                                                                                                                                                                            r_next
                                                                                                                                                                          |)
                                                                                                                                                                        ]
                                                                                                                                                                      |)
                                                                                                                                                                    |);
                                                                                                                                                                    M.call_closure (|
                                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                                        "core::ops::arith::Add",
                                                                                                                                                                        Ty.associated,
                                                                                                                                                                        [
                                                                                                                                                                          Ty.associated
                                                                                                                                                                        ],
                                                                                                                                                                        "add",
                                                                                                                                                                        []
                                                                                                                                                                      |),
                                                                                                                                                                      [
                                                                                                                                                                        M.read (|
                                                                                                                                                                          M.call_closure (|
                                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                                              "core::ops::index::Index",
                                                                                                                                                                              Ty.apply
                                                                                                                                                                                (Ty.path
                                                                                                                                                                                  "halo2_proofs::poly::Polynomial")
                                                                                                                                                                                [
                                                                                                                                                                                  Ty.associated;
                                                                                                                                                                                  Ty.path
                                                                                                                                                                                    "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                                ],
                                                                                                                                                                              [
                                                                                                                                                                                Ty.path
                                                                                                                                                                                  "usize"
                                                                                                                                                                              ],
                                                                                                                                                                              "index",
                                                                                                                                                                              []
                                                                                                                                                                            |),
                                                                                                                                                                            [
                                                                                                                                                                              permuted_input_coset;
                                                                                                                                                                              M.read (|
                                                                                                                                                                                idx
                                                                                                                                                                              |)
                                                                                                                                                                            ]
                                                                                                                                                                          |)
                                                                                                                                                                        |);
                                                                                                                                                                        M.read (|
                                                                                                                                                                          beta
                                                                                                                                                                        |)
                                                                                                                                                                      ]
                                                                                                                                                                    |)
                                                                                                                                                                  ]
                                                                                                                                                                |);
                                                                                                                                                                M.call_closure (|
                                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                                    "core::ops::arith::Add",
                                                                                                                                                                    Ty.associated,
                                                                                                                                                                    [
                                                                                                                                                                      Ty.associated
                                                                                                                                                                    ],
                                                                                                                                                                    "add",
                                                                                                                                                                    []
                                                                                                                                                                  |),
                                                                                                                                                                  [
                                                                                                                                                                    M.read (|
                                                                                                                                                                      M.call_closure (|
                                                                                                                                                                        M.get_trait_method (|
                                                                                                                                                                          "core::ops::index::Index",
                                                                                                                                                                          Ty.apply
                                                                                                                                                                            (Ty.path
                                                                                                                                                                              "halo2_proofs::poly::Polynomial")
                                                                                                                                                                            [
                                                                                                                                                                              Ty.associated;
                                                                                                                                                                              Ty.path
                                                                                                                                                                                "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                            ],
                                                                                                                                                                          [
                                                                                                                                                                            Ty.path
                                                                                                                                                                              "usize"
                                                                                                                                                                          ],
                                                                                                                                                                          "index",
                                                                                                                                                                          []
                                                                                                                                                                        |),
                                                                                                                                                                        [
                                                                                                                                                                          permuted_table_coset;
                                                                                                                                                                          M.read (|
                                                                                                                                                                            idx
                                                                                                                                                                          |)
                                                                                                                                                                        ]
                                                                                                                                                                      |)
                                                                                                                                                                    |);
                                                                                                                                                                    M.read (|
                                                                                                                                                                      gamma
                                                                                                                                                                    |)
                                                                                                                                                                  ]
                                                                                                                                                                |)
                                                                                                                                                              ]
                                                                                                                                                            |);
                                                                                                                                                            M.call_closure (|
                                                                                                                                                              M.get_trait_method (|
                                                                                                                                                                "core::ops::arith::Mul",
                                                                                                                                                                Ty.associated,
                                                                                                                                                                [
                                                                                                                                                                  Ty.associated
                                                                                                                                                                ],
                                                                                                                                                                "mul",
                                                                                                                                                                []
                                                                                                                                                              |),
                                                                                                                                                              [
                                                                                                                                                                M.read (|
                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                                      "core::ops::index::Index",
                                                                                                                                                                      Ty.apply
                                                                                                                                                                        (Ty.path
                                                                                                                                                                          "halo2_proofs::poly::Polynomial")
                                                                                                                                                                        [
                                                                                                                                                                          Ty.associated;
                                                                                                                                                                          Ty.path
                                                                                                                                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                        ],
                                                                                                                                                                      [
                                                                                                                                                                        Ty.path
                                                                                                                                                                          "usize"
                                                                                                                                                                      ],
                                                                                                                                                                      "index",
                                                                                                                                                                      []
                                                                                                                                                                    |),
                                                                                                                                                                    [
                                                                                                                                                                      product_coset;
                                                                                                                                                                      M.read (|
                                                                                                                                                                        idx
                                                                                                                                                                      |)
                                                                                                                                                                    ]
                                                                                                                                                                  |)
                                                                                                                                                                |);
                                                                                                                                                                M.read (|
                                                                                                                                                                  M.SubPointer.get_array_field (|
                                                                                                                                                                    M.read (|
                                                                                                                                                                      table
                                                                                                                                                                    |),
                                                                                                                                                                    idx
                                                                                                                                                                  |)
                                                                                                                                                                |)
                                                                                                                                                              ]
                                                                                                                                                            |)
                                                                                                                                                          ]
                                                                                                                                                        |);
                                                                                                                                                        M.read (|
                                                                                                                                                          M.call_closure (|
                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                              "core::ops::index::Index",
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "halo2_proofs::poly::Polynomial")
                                                                                                                                                                [
                                                                                                                                                                  Ty.associated;
                                                                                                                                                                  Ty.path
                                                                                                                                                                    "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                ],
                                                                                                                                                              [
                                                                                                                                                                Ty.path
                                                                                                                                                                  "usize"
                                                                                                                                                              ],
                                                                                                                                                              "index",
                                                                                                                                                              []
                                                                                                                                                            |),
                                                                                                                                                            [
                                                                                                                                                              M.read (|
                                                                                                                                                                l_active_row
                                                                                                                                                              |);
                                                                                                                                                              M.read (|
                                                                                                                                                                idx
                                                                                                                                                              |)
                                                                                                                                                            ]
                                                                                                                                                          |)
                                                                                                                                                        |)
                                                                                                                                                      ]
                                                                                                                                                    |)
                                                                                                                                                  ]
                                                                                                                                                |)
                                                                                                                                              |) in
                                                                                                                                            let
                                                                                                                                                  _ :=
                                                                                                                                              M.write (|
                                                                                                                                                M.read (|
                                                                                                                                                  value
                                                                                                                                                |),
                                                                                                                                                M.call_closure (|
                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                    "core::ops::arith::Add",
                                                                                                                                                    Ty.associated,
                                                                                                                                                    [
                                                                                                                                                      Ty.associated
                                                                                                                                                    ],
                                                                                                                                                    "add",
                                                                                                                                                    []
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    M.call_closure (|
                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                        "core::ops::arith::Mul",
                                                                                                                                                        Ty.associated,
                                                                                                                                                        [
                                                                                                                                                          Ty.associated
                                                                                                                                                        ],
                                                                                                                                                        "mul",
                                                                                                                                                        []
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        M.read (|
                                                                                                                                                          M.read (|
                                                                                                                                                            value
                                                                                                                                                          |)
                                                                                                                                                        |);
                                                                                                                                                        M.read (|
                                                                                                                                                          y
                                                                                                                                                        |)
                                                                                                                                                      ]
                                                                                                                                                    |);
                                                                                                                                                    M.call_closure (|
                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                        "core::ops::arith::Mul",
                                                                                                                                                        Ty.associated,
                                                                                                                                                        [
                                                                                                                                                          Ty.associated
                                                                                                                                                        ],
                                                                                                                                                        "mul",
                                                                                                                                                        []
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        M.read (|
                                                                                                                                                          a_minus_s
                                                                                                                                                        |);
                                                                                                                                                        M.read (|
                                                                                                                                                          M.call_closure (|
                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                              "core::ops::index::Index",
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "halo2_proofs::poly::Polynomial")
                                                                                                                                                                [
                                                                                                                                                                  Ty.associated;
                                                                                                                                                                  Ty.path
                                                                                                                                                                    "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                ],
                                                                                                                                                              [
                                                                                                                                                                Ty.path
                                                                                                                                                                  "usize"
                                                                                                                                                              ],
                                                                                                                                                              "index",
                                                                                                                                                              []
                                                                                                                                                            |),
                                                                                                                                                            [
                                                                                                                                                              M.read (|
                                                                                                                                                                l0
                                                                                                                                                              |);
                                                                                                                                                              M.read (|
                                                                                                                                                                idx
                                                                                                                                                              |)
                                                                                                                                                            ]
                                                                                                                                                          |)
                                                                                                                                                        |)
                                                                                                                                                      ]
                                                                                                                                                    |)
                                                                                                                                                  ]
                                                                                                                                                |)
                                                                                                                                              |) in
                                                                                                                                            let
                                                                                                                                                  _ :=
                                                                                                                                              M.write (|
                                                                                                                                                M.read (|
                                                                                                                                                  value
                                                                                                                                                |),
                                                                                                                                                M.call_closure (|
                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                    "core::ops::arith::Add",
                                                                                                                                                    Ty.associated,
                                                                                                                                                    [
                                                                                                                                                      Ty.associated
                                                                                                                                                    ],
                                                                                                                                                    "add",
                                                                                                                                                    []
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    M.call_closure (|
                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                        "core::ops::arith::Mul",
                                                                                                                                                        Ty.associated,
                                                                                                                                                        [
                                                                                                                                                          Ty.associated
                                                                                                                                                        ],
                                                                                                                                                        "mul",
                                                                                                                                                        []
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        M.read (|
                                                                                                                                                          M.read (|
                                                                                                                                                            value
                                                                                                                                                          |)
                                                                                                                                                        |);
                                                                                                                                                        M.read (|
                                                                                                                                                          y
                                                                                                                                                        |)
                                                                                                                                                      ]
                                                                                                                                                    |);
                                                                                                                                                    M.call_closure (|
                                                                                                                                                      M.get_trait_method (|
                                                                                                                                                        "core::ops::arith::Mul",
                                                                                                                                                        Ty.associated,
                                                                                                                                                        [
                                                                                                                                                          Ty.associated
                                                                                                                                                        ],
                                                                                                                                                        "mul",
                                                                                                                                                        []
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        M.call_closure (|
                                                                                                                                                          M.get_trait_method (|
                                                                                                                                                            "core::ops::arith::Mul",
                                                                                                                                                            Ty.associated,
                                                                                                                                                            [
                                                                                                                                                              Ty.associated
                                                                                                                                                            ],
                                                                                                                                                            "mul",
                                                                                                                                                            []
                                                                                                                                                          |),
                                                                                                                                                          [
                                                                                                                                                            M.read (|
                                                                                                                                                              a_minus_s
                                                                                                                                                            |);
                                                                                                                                                            M.call_closure (|
                                                                                                                                                              M.get_trait_method (|
                                                                                                                                                                "core::ops::arith::Sub",
                                                                                                                                                                Ty.associated,
                                                                                                                                                                [
                                                                                                                                                                  Ty.associated
                                                                                                                                                                ],
                                                                                                                                                                "sub",
                                                                                                                                                                []
                                                                                                                                                              |),
                                                                                                                                                              [
                                                                                                                                                                M.read (|
                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                                      "core::ops::index::Index",
                                                                                                                                                                      Ty.apply
                                                                                                                                                                        (Ty.path
                                                                                                                                                                          "halo2_proofs::poly::Polynomial")
                                                                                                                                                                        [
                                                                                                                                                                          Ty.associated;
                                                                                                                                                                          Ty.path
                                                                                                                                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                        ],
                                                                                                                                                                      [
                                                                                                                                                                        Ty.path
                                                                                                                                                                          "usize"
                                                                                                                                                                      ],
                                                                                                                                                                      "index",
                                                                                                                                                                      []
                                                                                                                                                                    |),
                                                                                                                                                                    [
                                                                                                                                                                      permuted_input_coset;
                                                                                                                                                                      M.read (|
                                                                                                                                                                        idx
                                                                                                                                                                      |)
                                                                                                                                                                    ]
                                                                                                                                                                  |)
                                                                                                                                                                |);
                                                                                                                                                                M.read (|
                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                                      "core::ops::index::Index",
                                                                                                                                                                      Ty.apply
                                                                                                                                                                        (Ty.path
                                                                                                                                                                          "halo2_proofs::poly::Polynomial")
                                                                                                                                                                        [
                                                                                                                                                                          Ty.associated;
                                                                                                                                                                          Ty.path
                                                                                                                                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                        ],
                                                                                                                                                                      [
                                                                                                                                                                        Ty.path
                                                                                                                                                                          "usize"
                                                                                                                                                                      ],
                                                                                                                                                                      "index",
                                                                                                                                                                      []
                                                                                                                                                                    |),
                                                                                                                                                                    [
                                                                                                                                                                      permuted_input_coset;
                                                                                                                                                                      M.read (|
                                                                                                                                                                        r_prev
                                                                                                                                                                      |)
                                                                                                                                                                    ]
                                                                                                                                                                  |)
                                                                                                                                                                |)
                                                                                                                                                              ]
                                                                                                                                                            |)
                                                                                                                                                          ]
                                                                                                                                                        |);
                                                                                                                                                        M.read (|
                                                                                                                                                          M.call_closure (|
                                                                                                                                                            M.get_trait_method (|
                                                                                                                                                              "core::ops::index::Index",
                                                                                                                                                              Ty.apply
                                                                                                                                                                (Ty.path
                                                                                                                                                                  "halo2_proofs::poly::Polynomial")
                                                                                                                                                                [
                                                                                                                                                                  Ty.associated;
                                                                                                                                                                  Ty.path
                                                                                                                                                                    "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                                                                ],
                                                                                                                                                              [
                                                                                                                                                                Ty.path
                                                                                                                                                                  "usize"
                                                                                                                                                              ],
                                                                                                                                                              "index",
                                                                                                                                                              []
                                                                                                                                                            |),
                                                                                                                                                            [
                                                                                                                                                              M.read (|
                                                                                                                                                                l_active_row
                                                                                                                                                              |);
                                                                                                                                                              M.read (|
                                                                                                                                                                idx
                                                                                                                                                              |)
                                                                                                                                                            ]
                                                                                                                                                          |)
                                                                                                                                                        |)
                                                                                                                                                      ]
                                                                                                                                                    |)
                                                                                                                                                  ]
                                                                                                                                                |)
                                                                                                                                              |) in
                                                                                                                                            M.alloc (|
                                                                                                                                              Value.Tuple
                                                                                                                                                []
                                                                                                                                            |)))
                                                                                                                                      ]
                                                                                                                                    |) in
                                                                                                                                  M.alloc (|
                                                                                                                                    Value.Tuple
                                                                                                                                      []
                                                                                                                                  |)))
                                                                                                                              |)))
                                                                                                                        ]
                                                                                                                      |))
                                                                                                                  |)))
                                                                                                            ]
                                                                                                          |)))
                                                                                                    ]
                                                                                                  |)
                                                                                                | _ =>
                                                                                                  M.impossible (||)
                                                                                                end))
                                                                                        ]
                                                                                      |)
                                                                                    |) in
                                                                                  M.alloc (|
                                                                                    Value.Tuple []
                                                                                  |)))
                                                                            ]
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                    |)))
                                                              ]
                                                            |)) in
                                                        M.match_operator (|
                                                          timer,
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |)))
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              values
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_evaluate_h :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "evaluate_h" (evaluate_h C).
    End Impl_halo2_proofs_plonk_evaluation_Evaluator_C.
    
    (* StructTuple
      {
        name := "ThreadBox";
        ty_params := [ "T" ];
        fields := [ Ty.apply (Ty.path "*mut") [ T ]; Ty.path "usize" ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_halo2_proofs_plonk_evaluation_ThreadBox_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::ThreadBox") [ T ].
      
      (* Clone *)
      Definition clone (T : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructTuple
              "halo2_proofs::plonk::evaluation::ThreadBox"
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "*mut") [ T ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_tuple_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::evaluation::ThreadBox",
                      0
                    |)
                  ]
                |);
                M.call_closure (|
                  M.get_trait_method (| "core::clone::Clone", Ty.path "usize", [], "clone", [] |),
                  [
                    M.SubPointer.get_struct_tuple_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::evaluation::ThreadBox",
                      1
                    |)
                  ]
                |)
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self T)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone T)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_T_for_halo2_proofs_plonk_evaluation_ThreadBox_T.
    
    Module Impl_core_marker_Copy_where_core_marker_Copy_T_for_halo2_proofs_plonk_evaluation_ThreadBox_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::ThreadBox") [ T ].
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (Self T)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Copy_where_core_marker_Copy_T_for_halo2_proofs_plonk_evaluation_ThreadBox_T.
    
    Module Impl_core_marker_Send_for_halo2_proofs_plonk_evaluation_ThreadBox_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::ThreadBox") [ T ].
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::marker::Send"
          (Self T)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Send_for_halo2_proofs_plonk_evaluation_ThreadBox_T.
    
    Module Impl_core_marker_Sync_for_halo2_proofs_plonk_evaluation_ThreadBox_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::ThreadBox") [ T ].
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::marker::Sync"
          (Self T)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Sync_for_halo2_proofs_plonk_evaluation_ThreadBox_T.
    
    Module Impl_halo2_proofs_plonk_evaluation_ThreadBox_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::evaluation::ThreadBox") [ T ].
      
      (*
          fn wrap(data: &mut [T]) -> Self {
              Self(data.as_mut_ptr(), data.len())
          }
      *)
      Definition wrap (T : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match τ, α with
        | [], [ data ] =>
          ltac:(M.monadic
            (let data := M.alloc (| data |) in
            Value.StructTuple
              "halo2_proofs::plonk::evaluation::ThreadBox"
              [
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply (Ty.path "slice") [ T ],
                    "as_mut_ptr",
                    []
                  |),
                  [ M.read (| data |) ]
                |);
                M.call_closure (|
                  M.get_associated_function (| Ty.apply (Ty.path "slice") [ T ], "len", [] |),
                  [ M.read (| data |) ]
                |)
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_wrap :
        forall (T : Ty.t),
        M.IsAssociatedFunction (Self T) "wrap" (wrap T).
      
      (*
          fn unwrap(&mut self) -> &mut [T] {
              #[allow(unsafe_code)]
              unsafe {
                  slice::from_raw_parts_mut(self.0, self.1)
              }
          }
      *)
      Definition unwrap (T : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_function (| "core::slice::raw::from_raw_parts_mut", [ T ] |),
              [
                M.read (|
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "halo2_proofs::plonk::evaluation::ThreadBox",
                    0
                  |)
                |);
                M.read (|
                  M.SubPointer.get_struct_tuple_field (|
                    M.read (| self |),
                    "halo2_proofs::plonk::evaluation::ThreadBox",
                    1
                  |)
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_unwrap :
        forall (T : Ty.t),
        M.IsAssociatedFunction (Self T) "unwrap" (unwrap T).
    End Impl_halo2_proofs_plonk_evaluation_ThreadBox_T.
    
    (*
    pub fn evaluate<F: FieldExt, B: Basis>(
        expression: &Expression<F>,
        size: usize,
        rot_scale: i32,
        fixed: &[Polynomial<F, B>],
        advice: &[Polynomial<F, B>],
        instance: &[Polynomial<F, B>],
        _theta: F,
    ) -> Vec<F> {
        if let Some(idx) = expression.is_pure_fixed() {
            return fixed[idx].to_vec();
        }
    
        if let Some(idx) = expression.is_pure_advice() {
            return advice[idx].to_vec();
        }
    
        if let Some(idx) = expression.is_pure_instance() {
            return instance[idx].to_vec();
        }
    
        #[cfg(not(feature = "cuda"))]
        {
            let mut values = vec![F::zero(); size];
            let isize = size as i32;
            parallelize(&mut values, |values, start| {
                for (i, value) in values.iter_mut().enumerate() {
                    let idx = start + i;
                    *value = expression.evaluate(
                        &|scalar| scalar,
                        &|_| panic!("virtual selectors are removed during optimization"),
                        &|_, column_index, rotation| {
                            fixed[column_index][get_rotation_idx(idx, rotation.0, rot_scale, isize)]
                        },
                        &|_, column_index, rotation| {
                            advice[column_index][get_rotation_idx(idx, rotation.0, rot_scale, isize)]
                        },
                        &|_, column_index, rotation| {
                            instance[column_index][get_rotation_idx(idx, rotation.0, rot_scale, isize)]
                        },
                        &|a| -a,
                        &|a, b| a + &b,
                        &|a, b| {
                            let a = a();
    
                            if a == F::zero() {
                                a
                            } else {
                                a * b()
                            }
                        },
                        &|a, scalar| a * scalar,
                    );
                }
            });
            return values;
        }
    
        #[cfg(feature = "cuda")]
        {
            return evaluate_gpu(
                &[expression.clone()],
                size,
                rot_scale,
                fixed,
                advice,
                instance,
                _theta,
            );
        }
    }
    *)
    Definition evaluate (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ F; B ], [ expression; size; rot_scale; fixed; advice; instance; _theta ] =>
        ltac:(M.monadic
          (let expression := M.alloc (| expression |) in
          let size := M.alloc (| size |) in
          let rot_scale := M.alloc (| rot_scale |) in
          let fixed := M.alloc (| fixed |) in
          let advice := M.alloc (| advice |) in
          let instance := M.alloc (| instance |) in
          let _theta := M.alloc (| _theta |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                    [ F ],
                                  "is_pure_fixed",
                                  []
                                |),
                                [ M.read (| expression |) ]
                              |)
                            |) in
                          let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::option::Option::Some",
                              0
                            |) in
                          let idx := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [ F ],
                                      "to_vec",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [ F; B ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [ M.SubPointer.get_array_field (| M.read (| fixed |), idx |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                    [ F ],
                                  "is_pure_advice",
                                  []
                                |),
                                [ M.read (| expression |) ]
                              |)
                            |) in
                          let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::option::Option::Some",
                              0
                            |) in
                          let idx := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [ F ],
                                      "to_vec",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [ F; B ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_array_field (|
                                            M.read (| advice |),
                                            idx
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                    [ F ],
                                  "is_pure_instance",
                                  []
                                |),
                                [ M.read (| expression |) ]
                              |)
                            |) in
                          let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::option::Option::Some",
                              0
                            |) in
                          let idx := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [ F ],
                                      "to_vec",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [ F; B ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_array_field (|
                                            M.read (| instance |),
                                            idx
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                M.alloc (|
                  M.never_to_any (|
                    M.read (|
                      let values :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_function (| "alloc::vec::from_elem", [ F ] |),
                            [
                              M.call_closure (|
                                M.get_trait_method (| "ff::Field", F, [], "zero", [] |),
                                []
                              |);
                              M.read (| size |)
                            ]
                          |)
                        |) in
                      let isize := M.alloc (| M.rust_cast (M.read (| size |)) |) in
                      let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_function (|
                              "halo2_proofs::arithmetic::parallelize",
                              [
                                F;
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&mut")
                                          [ Ty.apply (Ty.path "slice") [ F ] ];
                                        Ty.path "usize"
                                      ]
                                  ]
                                  (Ty.tuple [])
                              ]
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::DerefMut",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ F; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  "deref_mut",
                                  []
                                |),
                                [ values ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0; α1 ] =>
                                      M.match_operator (|
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let values := M.copy (| γ |) in
                                              M.match_operator (|
                                                M.alloc (| α1 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let start := M.copy (| γ |) in
                                                      M.read (|
                                                        M.use
                                                          (M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::collect::IntoIterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::enumerate::Enumerate")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::IterMut")
                                                                        [ F ]
                                                                    ],
                                                                  [],
                                                                  "into_iter",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::IterMut")
                                                                        [ F ],
                                                                      [],
                                                                      "enumerate",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            [ F ],
                                                                          "iter_mut",
                                                                          []
                                                                        |),
                                                                        [ M.read (| values |) ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let iter := M.copy (| γ |) in
                                                                  M.loop (|
                                                                    ltac:(M.monadic
                                                                      (let _ :=
                                                                        M.match_operator (|
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::iter::traits::iterator::Iterator",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::iter::adapters::enumerate::Enumerate")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::slice::iter::IterMut")
                                                                                      [ F ]
                                                                                  ],
                                                                                [],
                                                                                "next",
                                                                                []
                                                                              |),
                                                                              [ iter ]
                                                                            |)
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (M.alloc (|
                                                                                  M.never_to_any (|
                                                                                    M.read (|
                                                                                      M.break (||)
                                                                                    |)
                                                                                  |)
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ0_0 :=
                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                    γ,
                                                                                    "core::option::Option::Some",
                                                                                    0
                                                                                  |) in
                                                                                let γ1_0 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ0_0,
                                                                                    0
                                                                                  |) in
                                                                                let γ1_1 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ0_0,
                                                                                    1
                                                                                  |) in
                                                                                let i :=
                                                                                  M.copy (|
                                                                                    γ1_0
                                                                                  |) in
                                                                                let value :=
                                                                                  M.copy (|
                                                                                    γ1_1
                                                                                  |) in
                                                                                let idx :=
                                                                                  M.alloc (|
                                                                                    BinOp.Panic.add (|
                                                                                      Integer.Usize,
                                                                                      M.read (|
                                                                                        start
                                                                                      |),
                                                                                      M.read (| i |)
                                                                                    |)
                                                                                  |) in
                                                                                let _ :=
                                                                                  M.write (|
                                                                                    M.read (|
                                                                                      value
                                                                                    |),
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                          [ F ],
                                                                                        "evaluate",
                                                                                        [
                                                                                          F;
                                                                                          Ty.function
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [ F
                                                                                                ]
                                                                                            ]
                                                                                            F;
                                                                                          Ty.function
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::plonk::circuit::Selector"
                                                                                                ]
                                                                                            ]
                                                                                            F;
                                                                                          Ty.function
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize";
                                                                                                  Ty.path
                                                                                                    "usize";
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::poly::Rotation"
                                                                                                ]
                                                                                            ]
                                                                                            F;
                                                                                          Ty.function
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize";
                                                                                                  Ty.path
                                                                                                    "usize";
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::poly::Rotation"
                                                                                                ]
                                                                                            ]
                                                                                            F;
                                                                                          Ty.function
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize";
                                                                                                  Ty.path
                                                                                                    "usize";
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::poly::Rotation"
                                                                                                ]
                                                                                            ]
                                                                                            F;
                                                                                          Ty.function
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [ F
                                                                                                ]
                                                                                            ]
                                                                                            F;
                                                                                          Ty.function
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  F;
                                                                                                  F
                                                                                                ]
                                                                                            ]
                                                                                            F;
                                                                                          Ty.function
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    [
                                                                                                      Ty.dyn
                                                                                                        [
                                                                                                          ("core::ops::function::Fn::Trait",
                                                                                                            [])
                                                                                                        ]
                                                                                                    ];
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    [
                                                                                                      Ty.dyn
                                                                                                        [
                                                                                                          ("core::ops::function::Fn::Trait",
                                                                                                            [])
                                                                                                        ]
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                            F;
                                                                                          Ty.function
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  F;
                                                                                                  F
                                                                                                ]
                                                                                            ]
                                                                                            F
                                                                                        ]
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          expression
                                                                                        |);
                                                                                        M.alloc (|
                                                                                          M.closure
                                                                                            (fun
                                                                                                γ =>
                                                                                              ltac:(M.monadic
                                                                                                match
                                                                                                  γ
                                                                                                with
                                                                                                | [
                                                                                                      α0
                                                                                                    ] =>
                                                                                                  M.match_operator (|
                                                                                                    M.alloc (|
                                                                                                      α0
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (let
                                                                                                                scalar :=
                                                                                                            M.copy (|
                                                                                                              γ
                                                                                                            |) in
                                                                                                          M.read (|
                                                                                                            scalar
                                                                                                          |)))
                                                                                                    ]
                                                                                                  |)
                                                                                                | _ =>
                                                                                                  M.impossible (||)
                                                                                                end))
                                                                                        |);
                                                                                        M.alloc (|
                                                                                          M.closure
                                                                                            (fun
                                                                                                γ =>
                                                                                              ltac:(M.monadic
                                                                                                match
                                                                                                  γ
                                                                                                with
                                                                                                | [
                                                                                                      α0
                                                                                                    ] =>
                                                                                                  M.match_operator (|
                                                                                                    M.alloc (|
                                                                                                      α0
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (M.never_to_any (|
                                                                                                            M.call_closure (|
                                                                                                              M.get_function (|
                                                                                                                "std::panicking::begin_panic",
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "&")
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "str"
                                                                                                                    ]
                                                                                                                ]
                                                                                                              |),
                                                                                                              [
                                                                                                                M.read (|
                                                                                                                  Value.String
                                                                                                                    "virtual selectors are removed during optimization"
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          |)))
                                                                                                    ]
                                                                                                  |)
                                                                                                | _ =>
                                                                                                  M.impossible (||)
                                                                                                end))
                                                                                        |);
                                                                                        M.alloc (|
                                                                                          M.closure
                                                                                            (fun
                                                                                                γ =>
                                                                                              ltac:(M.monadic
                                                                                                match
                                                                                                  γ
                                                                                                with
                                                                                                | [
                                                                                                      α0;
                                                                                                      α1;
                                                                                                      α2
                                                                                                    ] =>
                                                                                                  M.match_operator (|
                                                                                                    M.alloc (|
                                                                                                      α0
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (M.match_operator (|
                                                                                                            M.alloc (|
                                                                                                              α1
                                                                                                            |),
                                                                                                            [
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (let
                                                                                                                        column_index :=
                                                                                                                    M.copy (|
                                                                                                                      γ
                                                                                                                    |) in
                                                                                                                  M.match_operator (|
                                                                                                                    M.alloc (|
                                                                                                                      α2
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (let
                                                                                                                                rotation :=
                                                                                                                            M.copy (|
                                                                                                                              γ
                                                                                                                            |) in
                                                                                                                          M.read (|
                                                                                                                            M.call_closure (|
                                                                                                                              M.get_trait_method (|
                                                                                                                                "core::ops::index::Index",
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "halo2_proofs::poly::Polynomial")
                                                                                                                                  [
                                                                                                                                    F;
                                                                                                                                    B
                                                                                                                                  ],
                                                                                                                                [
                                                                                                                                  Ty.path
                                                                                                                                    "usize"
                                                                                                                                ],
                                                                                                                                "index",
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.SubPointer.get_array_field (|
                                                                                                                                  M.read (|
                                                                                                                                    fixed
                                                                                                                                  |),
                                                                                                                                  column_index
                                                                                                                                |);
                                                                                                                                M.call_closure (|
                                                                                                                                  M.get_function (|
                                                                                                                                    "halo2_proofs::plonk::evaluation::get_rotation_idx",
                                                                                                                                    []
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.read (|
                                                                                                                                      idx
                                                                                                                                    |);
                                                                                                                                    M.read (|
                                                                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                                                                        rotation,
                                                                                                                                        "halo2_proofs::poly::Rotation",
                                                                                                                                        0
                                                                                                                                      |)
                                                                                                                                    |);
                                                                                                                                    M.read (|
                                                                                                                                      rot_scale
                                                                                                                                    |);
                                                                                                                                    M.read (|
                                                                                                                                      isize
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |)
                                                                                                                          |)))
                                                                                                                    ]
                                                                                                                  |)))
                                                                                                            ]
                                                                                                          |)))
                                                                                                    ]
                                                                                                  |)
                                                                                                | _ =>
                                                                                                  M.impossible (||)
                                                                                                end))
                                                                                        |);
                                                                                        M.alloc (|
                                                                                          M.closure
                                                                                            (fun
                                                                                                γ =>
                                                                                              ltac:(M.monadic
                                                                                                match
                                                                                                  γ
                                                                                                with
                                                                                                | [
                                                                                                      α0;
                                                                                                      α1;
                                                                                                      α2
                                                                                                    ] =>
                                                                                                  M.match_operator (|
                                                                                                    M.alloc (|
                                                                                                      α0
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (M.match_operator (|
                                                                                                            M.alloc (|
                                                                                                              α1
                                                                                                            |),
                                                                                                            [
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (let
                                                                                                                        column_index :=
                                                                                                                    M.copy (|
                                                                                                                      γ
                                                                                                                    |) in
                                                                                                                  M.match_operator (|
                                                                                                                    M.alloc (|
                                                                                                                      α2
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (let
                                                                                                                                rotation :=
                                                                                                                            M.copy (|
                                                                                                                              γ
                                                                                                                            |) in
                                                                                                                          M.read (|
                                                                                                                            M.call_closure (|
                                                                                                                              M.get_trait_method (|
                                                                                                                                "core::ops::index::Index",
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "halo2_proofs::poly::Polynomial")
                                                                                                                                  [
                                                                                                                                    F;
                                                                                                                                    B
                                                                                                                                  ],
                                                                                                                                [
                                                                                                                                  Ty.path
                                                                                                                                    "usize"
                                                                                                                                ],
                                                                                                                                "index",
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.SubPointer.get_array_field (|
                                                                                                                                  M.read (|
                                                                                                                                    advice
                                                                                                                                  |),
                                                                                                                                  column_index
                                                                                                                                |);
                                                                                                                                M.call_closure (|
                                                                                                                                  M.get_function (|
                                                                                                                                    "halo2_proofs::plonk::evaluation::get_rotation_idx",
                                                                                                                                    []
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.read (|
                                                                                                                                      idx
                                                                                                                                    |);
                                                                                                                                    M.read (|
                                                                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                                                                        rotation,
                                                                                                                                        "halo2_proofs::poly::Rotation",
                                                                                                                                        0
                                                                                                                                      |)
                                                                                                                                    |);
                                                                                                                                    M.read (|
                                                                                                                                      rot_scale
                                                                                                                                    |);
                                                                                                                                    M.read (|
                                                                                                                                      isize
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |)
                                                                                                                          |)))
                                                                                                                    ]
                                                                                                                  |)))
                                                                                                            ]
                                                                                                          |)))
                                                                                                    ]
                                                                                                  |)
                                                                                                | _ =>
                                                                                                  M.impossible (||)
                                                                                                end))
                                                                                        |);
                                                                                        M.alloc (|
                                                                                          M.closure
                                                                                            (fun
                                                                                                γ =>
                                                                                              ltac:(M.monadic
                                                                                                match
                                                                                                  γ
                                                                                                with
                                                                                                | [
                                                                                                      α0;
                                                                                                      α1;
                                                                                                      α2
                                                                                                    ] =>
                                                                                                  M.match_operator (|
                                                                                                    M.alloc (|
                                                                                                      α0
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (M.match_operator (|
                                                                                                            M.alloc (|
                                                                                                              α1
                                                                                                            |),
                                                                                                            [
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (let
                                                                                                                        column_index :=
                                                                                                                    M.copy (|
                                                                                                                      γ
                                                                                                                    |) in
                                                                                                                  M.match_operator (|
                                                                                                                    M.alloc (|
                                                                                                                      α2
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (let
                                                                                                                                rotation :=
                                                                                                                            M.copy (|
                                                                                                                              γ
                                                                                                                            |) in
                                                                                                                          M.read (|
                                                                                                                            M.call_closure (|
                                                                                                                              M.get_trait_method (|
                                                                                                                                "core::ops::index::Index",
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "halo2_proofs::poly::Polynomial")
                                                                                                                                  [
                                                                                                                                    F;
                                                                                                                                    B
                                                                                                                                  ],
                                                                                                                                [
                                                                                                                                  Ty.path
                                                                                                                                    "usize"
                                                                                                                                ],
                                                                                                                                "index",
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.SubPointer.get_array_field (|
                                                                                                                                  M.read (|
                                                                                                                                    instance
                                                                                                                                  |),
                                                                                                                                  column_index
                                                                                                                                |);
                                                                                                                                M.call_closure (|
                                                                                                                                  M.get_function (|
                                                                                                                                    "halo2_proofs::plonk::evaluation::get_rotation_idx",
                                                                                                                                    []
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.read (|
                                                                                                                                      idx
                                                                                                                                    |);
                                                                                                                                    M.read (|
                                                                                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                                                                                        rotation,
                                                                                                                                        "halo2_proofs::poly::Rotation",
                                                                                                                                        0
                                                                                                                                      |)
                                                                                                                                    |);
                                                                                                                                    M.read (|
                                                                                                                                      rot_scale
                                                                                                                                    |);
                                                                                                                                    M.read (|
                                                                                                                                      isize
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |)
                                                                                                                          |)))
                                                                                                                    ]
                                                                                                                  |)))
                                                                                                            ]
                                                                                                          |)))
                                                                                                    ]
                                                                                                  |)
                                                                                                | _ =>
                                                                                                  M.impossible (||)
                                                                                                end))
                                                                                        |);
                                                                                        M.alloc (|
                                                                                          M.closure
                                                                                            (fun
                                                                                                γ =>
                                                                                              ltac:(M.monadic
                                                                                                match
                                                                                                  γ
                                                                                                with
                                                                                                | [
                                                                                                      α0
                                                                                                    ] =>
                                                                                                  M.match_operator (|
                                                                                                    M.alloc (|
                                                                                                      α0
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (let
                                                                                                                a :=
                                                                                                            M.copy (|
                                                                                                              γ
                                                                                                            |) in
                                                                                                          M.call_closure (|
                                                                                                            M.get_trait_method (|
                                                                                                              "core::ops::arith::Neg",
                                                                                                              F,
                                                                                                              [],
                                                                                                              "neg",
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.read (|
                                                                                                                a
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)))
                                                                                                    ]
                                                                                                  |)
                                                                                                | _ =>
                                                                                                  M.impossible (||)
                                                                                                end))
                                                                                        |);
                                                                                        M.alloc (|
                                                                                          M.closure
                                                                                            (fun
                                                                                                γ =>
                                                                                              ltac:(M.monadic
                                                                                                match
                                                                                                  γ
                                                                                                with
                                                                                                | [
                                                                                                      α0;
                                                                                                      α1
                                                                                                    ] =>
                                                                                                  M.match_operator (|
                                                                                                    M.alloc (|
                                                                                                      α0
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (let
                                                                                                                a :=
                                                                                                            M.copy (|
                                                                                                              γ
                                                                                                            |) in
                                                                                                          M.match_operator (|
                                                                                                            M.alloc (|
                                                                                                              α1
                                                                                                            |),
                                                                                                            [
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (let
                                                                                                                        b :=
                                                                                                                    M.copy (|
                                                                                                                      γ
                                                                                                                    |) in
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::ops::arith::Add",
                                                                                                                      F,
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "&")
                                                                                                                          [
                                                                                                                            F
                                                                                                                          ]
                                                                                                                      ],
                                                                                                                      "add",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.read (|
                                                                                                                        a
                                                                                                                      |);
                                                                                                                      b
                                                                                                                    ]
                                                                                                                  |)))
                                                                                                            ]
                                                                                                          |)))
                                                                                                    ]
                                                                                                  |)
                                                                                                | _ =>
                                                                                                  M.impossible (||)
                                                                                                end))
                                                                                        |);
                                                                                        M.alloc (|
                                                                                          M.closure
                                                                                            (fun
                                                                                                γ =>
                                                                                              ltac:(M.monadic
                                                                                                match
                                                                                                  γ
                                                                                                with
                                                                                                | [
                                                                                                      α0;
                                                                                                      α1
                                                                                                    ] =>
                                                                                                  M.match_operator (|
                                                                                                    M.alloc (|
                                                                                                      α0
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (let
                                                                                                                a :=
                                                                                                            M.copy (|
                                                                                                              γ
                                                                                                            |) in
                                                                                                          M.match_operator (|
                                                                                                            M.alloc (|
                                                                                                              α1
                                                                                                            |),
                                                                                                            [
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (let
                                                                                                                        b :=
                                                                                                                    M.copy (|
                                                                                                                      γ
                                                                                                                    |) in
                                                                                                                  M.read (|
                                                                                                                    let
                                                                                                                          a :=
                                                                                                                      M.alloc (|
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::ops::function::Fn",
                                                                                                                            Ty.dyn
                                                                                                                              [
                                                                                                                                ("core::ops::function::Fn::Trait",
                                                                                                                                  [])
                                                                                                                              ],
                                                                                                                            [
                                                                                                                              Ty.tuple
                                                                                                                                []
                                                                                                                            ],
                                                                                                                            "call",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.read (|
                                                                                                                              a
                                                                                                                            |);
                                                                                                                            Value.Tuple
                                                                                                                              []
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |) in
                                                                                                                    M.match_operator (|
                                                                                                                      M.alloc (|
                                                                                                                        Value.Tuple
                                                                                                                          []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        fun
                                                                                                                            γ =>
                                                                                                                          ltac:(M.monadic
                                                                                                                            (let
                                                                                                                                  γ :=
                                                                                                                              M.use
                                                                                                                                (M.alloc (|
                                                                                                                                  M.call_closure (|
                                                                                                                                    M.get_trait_method (|
                                                                                                                                      "core::cmp::PartialEq",
                                                                                                                                      F,
                                                                                                                                      [
                                                                                                                                        F
                                                                                                                                      ],
                                                                                                                                      "eq",
                                                                                                                                      []
                                                                                                                                    |),
                                                                                                                                    [
                                                                                                                                      a;
                                                                                                                                      M.alloc (|
                                                                                                                                        M.call_closure (|
                                                                                                                                          M.get_trait_method (|
                                                                                                                                            "ff::Field",
                                                                                                                                            F,
                                                                                                                                            [],
                                                                                                                                            "zero",
                                                                                                                                            []
                                                                                                                                          |),
                                                                                                                                          []
                                                                                                                                        |)
                                                                                                                                      |)
                                                                                                                                    ]
                                                                                                                                  |)
                                                                                                                                |)) in
                                                                                                                            let
                                                                                                                                  _ :=
                                                                                                                              M.is_constant_or_break_match (|
                                                                                                                                M.read (|
                                                                                                                                  γ
                                                                                                                                |),
                                                                                                                                Value.Bool
                                                                                                                                  true
                                                                                                                              |) in
                                                                                                                            a));
                                                                                                                        fun
                                                                                                                            γ =>
                                                                                                                          ltac:(M.monadic
                                                                                                                            (M.alloc (|
                                                                                                                              M.call_closure (|
                                                                                                                                M.get_trait_method (|
                                                                                                                                  "core::ops::arith::Mul",
                                                                                                                                  F,
                                                                                                                                  [
                                                                                                                                    F
                                                                                                                                  ],
                                                                                                                                  "mul",
                                                                                                                                  []
                                                                                                                                |),
                                                                                                                                [
                                                                                                                                  M.read (|
                                                                                                                                    a
                                                                                                                                  |);
                                                                                                                                  M.call_closure (|
                                                                                                                                    M.get_trait_method (|
                                                                                                                                      "core::ops::function::Fn",
                                                                                                                                      Ty.dyn
                                                                                                                                        [
                                                                                                                                          ("core::ops::function::Fn::Trait",
                                                                                                                                            [])
                                                                                                                                        ],
                                                                                                                                      [
                                                                                                                                        Ty.tuple
                                                                                                                                          []
                                                                                                                                      ],
                                                                                                                                      "call",
                                                                                                                                      []
                                                                                                                                    |),
                                                                                                                                    [
                                                                                                                                      M.read (|
                                                                                                                                        b
                                                                                                                                      |);
                                                                                                                                      Value.Tuple
                                                                                                                                        []
                                                                                                                                    ]
                                                                                                                                  |)
                                                                                                                                ]
                                                                                                                              |)
                                                                                                                            |)))
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  |)))
                                                                                                            ]
                                                                                                          |)))
                                                                                                    ]
                                                                                                  |)
                                                                                                | _ =>
                                                                                                  M.impossible (||)
                                                                                                end))
                                                                                        |);
                                                                                        M.alloc (|
                                                                                          M.closure
                                                                                            (fun
                                                                                                γ =>
                                                                                              ltac:(M.monadic
                                                                                                match
                                                                                                  γ
                                                                                                with
                                                                                                | [
                                                                                                      α0;
                                                                                                      α1
                                                                                                    ] =>
                                                                                                  M.match_operator (|
                                                                                                    M.alloc (|
                                                                                                      α0
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (let
                                                                                                                a :=
                                                                                                            M.copy (|
                                                                                                              γ
                                                                                                            |) in
                                                                                                          M.match_operator (|
                                                                                                            M.alloc (|
                                                                                                              α1
                                                                                                            |),
                                                                                                            [
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (let
                                                                                                                        scalar :=
                                                                                                                    M.copy (|
                                                                                                                      γ
                                                                                                                    |) in
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::ops::arith::Mul",
                                                                                                                      F,
                                                                                                                      [
                                                                                                                        F
                                                                                                                      ],
                                                                                                                      "mul",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.read (|
                                                                                                                        a
                                                                                                                      |);
                                                                                                                      M.read (|
                                                                                                                        scalar
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)))
                                                                                                            ]
                                                                                                          |)))
                                                                                                    ]
                                                                                                  |)
                                                                                                | _ =>
                                                                                                  M.impossible (||)
                                                                                                end))
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)))
                                                                          ]
                                                                        |) in
                                                                      M.alloc (| Value.Tuple [] |)))
                                                                  |)))
                                                            ]
                                                          |))
                                                      |)))
                                                ]
                                              |)))
                                        ]
                                      |)
                                    | _ => M.impossible (||)
                                    end))
                            ]
                          |)
                        |) in
                      M.return_ (| M.read (| values |) |)
                    |)
                  |)
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
    pub fn evaluate_with_theta<F: FieldExt, B: Basis>(
        expressions: &[Expression<F>],
        size: usize,
        rot_scale: i32,
        fixed: &[Polynomial<F, B>],
        advice: &[Polynomial<F, B>],
        instance: &[Polynomial<F, B>],
        theta: F,
    ) -> Vec<F> {
        if expressions.len() == 1 {
            evaluate(
                &expressions[0],
                size,
                rot_scale,
                fixed,
                advice,
                instance,
                theta,
            )
        } else {
            #[cfg(not(feature = "cuda"))]
            {
                let mut values = vec![F::zero(); size];
                let isize = size as i32;
                parallelize(&mut values, |values, start| {
                    for (i, value) in values.iter_mut().enumerate() {
                        let idx = start + i;
                        for expression in expressions {
                            *value = *value * theta;
                            *value += expression.evaluate(
                                &|scalar| scalar,
                                &|_| panic!("virtual selectors are removed during optimization"),
                                &|_, column_index, rotation| {
                                    fixed[column_index]
                                        [get_rotation_idx(idx, rotation.0, rot_scale, isize)]
                                },
                                &|_, column_index, rotation| {
                                    advice[column_index]
                                        [get_rotation_idx(idx, rotation.0, rot_scale, isize)]
                                },
                                &|_, column_index, rotation| {
                                    instance[column_index]
                                        [get_rotation_idx(idx, rotation.0, rot_scale, isize)]
                                },
                                &|a| -a,
                                &|a, b| a + &b,
                                &|a, b| {
                                    let a = a();
    
                                    if a == F::zero() {
                                        a
                                    } else {
                                        a * b()
                                    }
                                },
                                &|a, scalar| a * scalar,
                            );
                        }
                    }
                });
                return values;
            }
    
            #[cfg(feature = "cuda")]
            {
                return evaluate_gpu(expressions, size, rot_scale, fixed, advice, instance, theta);
            }
        }
    }
    *)
    Definition evaluate_with_theta (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ F; B ], [ expressions; size; rot_scale; fixed; advice; instance; theta ] =>
        ltac:(M.monadic
          (let expressions := M.alloc (| expressions |) in
          let size := M.alloc (| size |) in
          let rot_scale := M.alloc (| rot_scale |) in
          let fixed := M.alloc (| fixed |) in
          let advice := M.alloc (| advice |) in
          let instance := M.alloc (| instance |) in
          let theta := M.alloc (| theta |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              BinOp.Pure.eq
                                (M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Expression")
                                          [ F ]
                                      ],
                                    "len",
                                    []
                                  |),
                                  [ M.read (| expressions |) ]
                                |))
                                (Value.Integer 1)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_function (|
                              "halo2_proofs::plonk::evaluation::evaluate",
                              [ F; B ]
                            |),
                            [
                              M.SubPointer.get_array_field (|
                                M.read (| expressions |),
                                M.alloc (| Value.Integer 0 |)
                              |);
                              M.read (| size |);
                              M.read (| rot_scale |);
                              M.read (| fixed |);
                              M.read (| advice |);
                              M.read (| instance |);
                              M.read (| theta |)
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          M.never_to_any (|
                            M.read (|
                              let values :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_function (| "alloc::vec::from_elem", [ F ] |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (| "ff::Field", F, [], "zero", [] |),
                                        []
                                      |);
                                      M.read (| size |)
                                    ]
                                  |)
                                |) in
                              let isize := M.alloc (| M.rust_cast (M.read (| size |)) |) in
                              let _ :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_function (|
                                      "halo2_proofs::arithmetic::parallelize",
                                      [
                                        F;
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  [ Ty.apply (Ty.path "slice") [ F ] ];
                                                Ty.path "usize"
                                              ]
                                          ]
                                          (Ty.tuple [])
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::DerefMut",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ F; Ty.path "alloc::alloc::Global" ],
                                          [],
                                          "deref_mut",
                                          []
                                        |),
                                        [ values ]
                                      |);
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0; α1 ] =>
                                              M.match_operator (|
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let values := M.copy (| γ |) in
                                                      M.match_operator (|
                                                        M.alloc (| α1 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let start := M.copy (| γ |) in
                                                              M.read (|
                                                                M.use
                                                                  (M.match_operator (|
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::collect::IntoIterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::iter::adapters::enumerate::Enumerate")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::IterMut")
                                                                                [ F ]
                                                                            ],
                                                                          [],
                                                                          "into_iter",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::IterMut")
                                                                                [ F ],
                                                                              [],
                                                                              "enumerate",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "slice")
                                                                                    [ F ],
                                                                                  "iter_mut",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    values
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let iter :=
                                                                            M.copy (| γ |) in
                                                                          M.loop (|
                                                                            ltac:(M.monadic
                                                                              (let _ :=
                                                                                M.match_operator (|
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::iter::traits::iterator::Iterator",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::IterMut")
                                                                                              [ F ]
                                                                                          ],
                                                                                        [],
                                                                                        "next",
                                                                                        []
                                                                                      |),
                                                                                      [ iter ]
                                                                                    |)
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (M.alloc (|
                                                                                          M.never_to_any (|
                                                                                            M.read (|
                                                                                              M.break (||)
                                                                                            |)
                                                                                          |)
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::option::Option::Some",
                                                                                            0
                                                                                          |) in
                                                                                        let γ1_0 :=
                                                                                          M.SubPointer.get_tuple_field (|
                                                                                            γ0_0,
                                                                                            0
                                                                                          |) in
                                                                                        let γ1_1 :=
                                                                                          M.SubPointer.get_tuple_field (|
                                                                                            γ0_0,
                                                                                            1
                                                                                          |) in
                                                                                        let i :=
                                                                                          M.copy (|
                                                                                            γ1_0
                                                                                          |) in
                                                                                        let value :=
                                                                                          M.copy (|
                                                                                            γ1_1
                                                                                          |) in
                                                                                        let idx :=
                                                                                          M.alloc (|
                                                                                            BinOp.Panic.add (|
                                                                                              Integer.Usize,
                                                                                              M.read (|
                                                                                                start
                                                                                              |),
                                                                                              M.read (|
                                                                                                i
                                                                                              |)
                                                                                            |)
                                                                                          |) in
                                                                                        M.use
                                                                                          (M.match_operator (|
                                                                                            M.alloc (|
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::iter::traits::collect::IntoIterator",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "slice")
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                                                            [
                                                                                                              F
                                                                                                            ]
                                                                                                        ]
                                                                                                    ],
                                                                                                  [],
                                                                                                  "into_iter",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.read (|
                                                                                                    expressions
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |),
                                                                                            [
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (let
                                                                                                        iter :=
                                                                                                    M.copy (|
                                                                                                      γ
                                                                                                    |) in
                                                                                                  M.loop (|
                                                                                                    ltac:(M.monadic
                                                                                                      (let
                                                                                                            _ :=
                                                                                                        M.match_operator (|
                                                                                                          M.alloc (|
                                                                                                            M.call_closure (|
                                                                                                              M.get_trait_method (|
                                                                                                                "core::iter::traits::iterator::Iterator",
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "core::slice::iter::Iter")
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                                                      [
                                                                                                                        F
                                                                                                                      ]
                                                                                                                  ],
                                                                                                                [],
                                                                                                                "next",
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                iter
                                                                                                              ]
                                                                                                            |)
                                                                                                          |),
                                                                                                          [
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                (M.alloc (|
                                                                                                                  M.never_to_any (|
                                                                                                                    M.read (|
                                                                                                                      M.break (||)
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)));
                                                                                                            fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                (let
                                                                                                                      γ0_0 :=
                                                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                                                    γ,
                                                                                                                    "core::option::Option::Some",
                                                                                                                    0
                                                                                                                  |) in
                                                                                                                let
                                                                                                                      expression :=
                                                                                                                  M.copy (|
                                                                                                                    γ0_0
                                                                                                                  |) in
                                                                                                                let
                                                                                                                      _ :=
                                                                                                                  M.write (|
                                                                                                                    M.read (|
                                                                                                                      value
                                                                                                                    |),
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::ops::arith::Mul",
                                                                                                                        F,
                                                                                                                        [
                                                                                                                          F
                                                                                                                        ],
                                                                                                                        "mul",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.read (|
                                                                                                                          M.read (|
                                                                                                                            value
                                                                                                                          |)
                                                                                                                        |);
                                                                                                                        M.read (|
                                                                                                                          theta
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  |) in
                                                                                                                let
                                                                                                                      _ :=
                                                                                                                  M.alloc (|
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::ops::arith::AddAssign",
                                                                                                                        F,
                                                                                                                        [
                                                                                                                          F
                                                                                                                        ],
                                                                                                                        "add_assign",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.read (|
                                                                                                                          value
                                                                                                                        |);
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_associated_function (|
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                                                              [
                                                                                                                                F
                                                                                                                              ],
                                                                                                                            "evaluate",
                                                                                                                            [
                                                                                                                              F;
                                                                                                                              Ty.function
                                                                                                                                [
                                                                                                                                  Ty.tuple
                                                                                                                                    [
                                                                                                                                      F
                                                                                                                                    ]
                                                                                                                                ]
                                                                                                                                F;
                                                                                                                              Ty.function
                                                                                                                                [
                                                                                                                                  Ty.tuple
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "halo2_proofs::plonk::circuit::Selector"
                                                                                                                                    ]
                                                                                                                                ]
                                                                                                                                F;
                                                                                                                              Ty.function
                                                                                                                                [
                                                                                                                                  Ty.tuple
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "usize";
                                                                                                                                      Ty.path
                                                                                                                                        "usize";
                                                                                                                                      Ty.path
                                                                                                                                        "halo2_proofs::poly::Rotation"
                                                                                                                                    ]
                                                                                                                                ]
                                                                                                                                F;
                                                                                                                              Ty.function
                                                                                                                                [
                                                                                                                                  Ty.tuple
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "usize";
                                                                                                                                      Ty.path
                                                                                                                                        "usize";
                                                                                                                                      Ty.path
                                                                                                                                        "halo2_proofs::poly::Rotation"
                                                                                                                                    ]
                                                                                                                                ]
                                                                                                                                F;
                                                                                                                              Ty.function
                                                                                                                                [
                                                                                                                                  Ty.tuple
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "usize";
                                                                                                                                      Ty.path
                                                                                                                                        "usize";
                                                                                                                                      Ty.path
                                                                                                                                        "halo2_proofs::poly::Rotation"
                                                                                                                                    ]
                                                                                                                                ]
                                                                                                                                F;
                                                                                                                              Ty.function
                                                                                                                                [
                                                                                                                                  Ty.tuple
                                                                                                                                    [
                                                                                                                                      F
                                                                                                                                    ]
                                                                                                                                ]
                                                                                                                                F;
                                                                                                                              Ty.function
                                                                                                                                [
                                                                                                                                  Ty.tuple
                                                                                                                                    [
                                                                                                                                      F;
                                                                                                                                      F
                                                                                                                                    ]
                                                                                                                                ]
                                                                                                                                F;
                                                                                                                              Ty.function
                                                                                                                                [
                                                                                                                                  Ty.tuple
                                                                                                                                    [
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "&")
                                                                                                                                        [
                                                                                                                                          Ty.dyn
                                                                                                                                            [
                                                                                                                                              ("core::ops::function::Fn::Trait",
                                                                                                                                                [])
                                                                                                                                            ]
                                                                                                                                        ];
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "&")
                                                                                                                                        [
                                                                                                                                          Ty.dyn
                                                                                                                                            [
                                                                                                                                              ("core::ops::function::Fn::Trait",
                                                                                                                                                [])
                                                                                                                                            ]
                                                                                                                                        ]
                                                                                                                                    ]
                                                                                                                                ]
                                                                                                                                F;
                                                                                                                              Ty.function
                                                                                                                                [
                                                                                                                                  Ty.tuple
                                                                                                                                    [
                                                                                                                                      F;
                                                                                                                                      F
                                                                                                                                    ]
                                                                                                                                ]
                                                                                                                                F
                                                                                                                            ]
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.read (|
                                                                                                                              expression
                                                                                                                            |);
                                                                                                                            M.alloc (|
                                                                                                                              M.closure
                                                                                                                                (fun
                                                                                                                                    γ =>
                                                                                                                                  ltac:(M.monadic
                                                                                                                                    match
                                                                                                                                      γ
                                                                                                                                    with
                                                                                                                                    | [
                                                                                                                                          α0
                                                                                                                                        ] =>
                                                                                                                                      M.match_operator (|
                                                                                                                                        M.alloc (|
                                                                                                                                          α0
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          fun
                                                                                                                                              γ =>
                                                                                                                                            ltac:(M.monadic
                                                                                                                                              (let
                                                                                                                                                    scalar :=
                                                                                                                                                M.copy (|
                                                                                                                                                  γ
                                                                                                                                                |) in
                                                                                                                                              M.read (|
                                                                                                                                                scalar
                                                                                                                                              |)))
                                                                                                                                        ]
                                                                                                                                      |)
                                                                                                                                    | _ =>
                                                                                                                                      M.impossible (||)
                                                                                                                                    end))
                                                                                                                            |);
                                                                                                                            M.alloc (|
                                                                                                                              M.closure
                                                                                                                                (fun
                                                                                                                                    γ =>
                                                                                                                                  ltac:(M.monadic
                                                                                                                                    match
                                                                                                                                      γ
                                                                                                                                    with
                                                                                                                                    | [
                                                                                                                                          α0
                                                                                                                                        ] =>
                                                                                                                                      M.match_operator (|
                                                                                                                                        M.alloc (|
                                                                                                                                          α0
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          fun
                                                                                                                                              γ =>
                                                                                                                                            ltac:(M.monadic
                                                                                                                                              (M.never_to_any (|
                                                                                                                                                M.call_closure (|
                                                                                                                                                  M.get_function (|
                                                                                                                                                    "std::panicking::begin_panic",
                                                                                                                                                    [
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "&")
                                                                                                                                                        [
                                                                                                                                                          Ty.path
                                                                                                                                                            "str"
                                                                                                                                                        ]
                                                                                                                                                    ]
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    M.read (|
                                                                                                                                                      Value.String
                                                                                                                                                        "virtual selectors are removed during optimization"
                                                                                                                                                    |)
                                                                                                                                                  ]
                                                                                                                                                |)
                                                                                                                                              |)))
                                                                                                                                        ]
                                                                                                                                      |)
                                                                                                                                    | _ =>
                                                                                                                                      M.impossible (||)
                                                                                                                                    end))
                                                                                                                            |);
                                                                                                                            M.alloc (|
                                                                                                                              M.closure
                                                                                                                                (fun
                                                                                                                                    γ =>
                                                                                                                                  ltac:(M.monadic
                                                                                                                                    match
                                                                                                                                      γ
                                                                                                                                    with
                                                                                                                                    | [
                                                                                                                                          α0;
                                                                                                                                          α1;
                                                                                                                                          α2
                                                                                                                                        ] =>
                                                                                                                                      M.match_operator (|
                                                                                                                                        M.alloc (|
                                                                                                                                          α0
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          fun
                                                                                                                                              γ =>
                                                                                                                                            ltac:(M.monadic
                                                                                                                                              (M.match_operator (|
                                                                                                                                                M.alloc (|
                                                                                                                                                  α1
                                                                                                                                                |),
                                                                                                                                                [
                                                                                                                                                  fun
                                                                                                                                                      γ =>
                                                                                                                                                    ltac:(M.monadic
                                                                                                                                                      (let
                                                                                                                                                            column_index :=
                                                                                                                                                        M.copy (|
                                                                                                                                                          γ
                                                                                                                                                        |) in
                                                                                                                                                      M.match_operator (|
                                                                                                                                                        M.alloc (|
                                                                                                                                                          α2
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          fun
                                                                                                                                                              γ =>
                                                                                                                                                            ltac:(M.monadic
                                                                                                                                                              (let
                                                                                                                                                                    rotation :=
                                                                                                                                                                M.copy (|
                                                                                                                                                                  γ
                                                                                                                                                                |) in
                                                                                                                                                              M.read (|
                                                                                                                                                                M.call_closure (|
                                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                                    "core::ops::index::Index",
                                                                                                                                                                    Ty.apply
                                                                                                                                                                      (Ty.path
                                                                                                                                                                        "halo2_proofs::poly::Polynomial")
                                                                                                                                                                      [
                                                                                                                                                                        F;
                                                                                                                                                                        B
                                                                                                                                                                      ],
                                                                                                                                                                    [
                                                                                                                                                                      Ty.path
                                                                                                                                                                        "usize"
                                                                                                                                                                    ],
                                                                                                                                                                    "index",
                                                                                                                                                                    []
                                                                                                                                                                  |),
                                                                                                                                                                  [
                                                                                                                                                                    M.SubPointer.get_array_field (|
                                                                                                                                                                      M.read (|
                                                                                                                                                                        fixed
                                                                                                                                                                      |),
                                                                                                                                                                      column_index
                                                                                                                                                                    |);
                                                                                                                                                                    M.call_closure (|
                                                                                                                                                                      M.get_function (|
                                                                                                                                                                        "halo2_proofs::plonk::evaluation::get_rotation_idx",
                                                                                                                                                                        []
                                                                                                                                                                      |),
                                                                                                                                                                      [
                                                                                                                                                                        M.read (|
                                                                                                                                                                          idx
                                                                                                                                                                        |);
                                                                                                                                                                        M.read (|
                                                                                                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                                                                                                            rotation,
                                                                                                                                                                            "halo2_proofs::poly::Rotation",
                                                                                                                                                                            0
                                                                                                                                                                          |)
                                                                                                                                                                        |);
                                                                                                                                                                        M.read (|
                                                                                                                                                                          rot_scale
                                                                                                                                                                        |);
                                                                                                                                                                        M.read (|
                                                                                                                                                                          isize
                                                                                                                                                                        |)
                                                                                                                                                                      ]
                                                                                                                                                                    |)
                                                                                                                                                                  ]
                                                                                                                                                                |)
                                                                                                                                                              |)))
                                                                                                                                                        ]
                                                                                                                                                      |)))
                                                                                                                                                ]
                                                                                                                                              |)))
                                                                                                                                        ]
                                                                                                                                      |)
                                                                                                                                    | _ =>
                                                                                                                                      M.impossible (||)
                                                                                                                                    end))
                                                                                                                            |);
                                                                                                                            M.alloc (|
                                                                                                                              M.closure
                                                                                                                                (fun
                                                                                                                                    γ =>
                                                                                                                                  ltac:(M.monadic
                                                                                                                                    match
                                                                                                                                      γ
                                                                                                                                    with
                                                                                                                                    | [
                                                                                                                                          α0;
                                                                                                                                          α1;
                                                                                                                                          α2
                                                                                                                                        ] =>
                                                                                                                                      M.match_operator (|
                                                                                                                                        M.alloc (|
                                                                                                                                          α0
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          fun
                                                                                                                                              γ =>
                                                                                                                                            ltac:(M.monadic
                                                                                                                                              (M.match_operator (|
                                                                                                                                                M.alloc (|
                                                                                                                                                  α1
                                                                                                                                                |),
                                                                                                                                                [
                                                                                                                                                  fun
                                                                                                                                                      γ =>
                                                                                                                                                    ltac:(M.monadic
                                                                                                                                                      (let
                                                                                                                                                            column_index :=
                                                                                                                                                        M.copy (|
                                                                                                                                                          γ
                                                                                                                                                        |) in
                                                                                                                                                      M.match_operator (|
                                                                                                                                                        M.alloc (|
                                                                                                                                                          α2
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          fun
                                                                                                                                                              γ =>
                                                                                                                                                            ltac:(M.monadic
                                                                                                                                                              (let
                                                                                                                                                                    rotation :=
                                                                                                                                                                M.copy (|
                                                                                                                                                                  γ
                                                                                                                                                                |) in
                                                                                                                                                              M.read (|
                                                                                                                                                                M.call_closure (|
                                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                                    "core::ops::index::Index",
                                                                                                                                                                    Ty.apply
                                                                                                                                                                      (Ty.path
                                                                                                                                                                        "halo2_proofs::poly::Polynomial")
                                                                                                                                                                      [
                                                                                                                                                                        F;
                                                                                                                                                                        B
                                                                                                                                                                      ],
                                                                                                                                                                    [
                                                                                                                                                                      Ty.path
                                                                                                                                                                        "usize"
                                                                                                                                                                    ],
                                                                                                                                                                    "index",
                                                                                                                                                                    []
                                                                                                                                                                  |),
                                                                                                                                                                  [
                                                                                                                                                                    M.SubPointer.get_array_field (|
                                                                                                                                                                      M.read (|
                                                                                                                                                                        advice
                                                                                                                                                                      |),
                                                                                                                                                                      column_index
                                                                                                                                                                    |);
                                                                                                                                                                    M.call_closure (|
                                                                                                                                                                      M.get_function (|
                                                                                                                                                                        "halo2_proofs::plonk::evaluation::get_rotation_idx",
                                                                                                                                                                        []
                                                                                                                                                                      |),
                                                                                                                                                                      [
                                                                                                                                                                        M.read (|
                                                                                                                                                                          idx
                                                                                                                                                                        |);
                                                                                                                                                                        M.read (|
                                                                                                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                                                                                                            rotation,
                                                                                                                                                                            "halo2_proofs::poly::Rotation",
                                                                                                                                                                            0
                                                                                                                                                                          |)
                                                                                                                                                                        |);
                                                                                                                                                                        M.read (|
                                                                                                                                                                          rot_scale
                                                                                                                                                                        |);
                                                                                                                                                                        M.read (|
                                                                                                                                                                          isize
                                                                                                                                                                        |)
                                                                                                                                                                      ]
                                                                                                                                                                    |)
                                                                                                                                                                  ]
                                                                                                                                                                |)
                                                                                                                                                              |)))
                                                                                                                                                        ]
                                                                                                                                                      |)))
                                                                                                                                                ]
                                                                                                                                              |)))
                                                                                                                                        ]
                                                                                                                                      |)
                                                                                                                                    | _ =>
                                                                                                                                      M.impossible (||)
                                                                                                                                    end))
                                                                                                                            |);
                                                                                                                            M.alloc (|
                                                                                                                              M.closure
                                                                                                                                (fun
                                                                                                                                    γ =>
                                                                                                                                  ltac:(M.monadic
                                                                                                                                    match
                                                                                                                                      γ
                                                                                                                                    with
                                                                                                                                    | [
                                                                                                                                          α0;
                                                                                                                                          α1;
                                                                                                                                          α2
                                                                                                                                        ] =>
                                                                                                                                      M.match_operator (|
                                                                                                                                        M.alloc (|
                                                                                                                                          α0
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          fun
                                                                                                                                              γ =>
                                                                                                                                            ltac:(M.monadic
                                                                                                                                              (M.match_operator (|
                                                                                                                                                M.alloc (|
                                                                                                                                                  α1
                                                                                                                                                |),
                                                                                                                                                [
                                                                                                                                                  fun
                                                                                                                                                      γ =>
                                                                                                                                                    ltac:(M.monadic
                                                                                                                                                      (let
                                                                                                                                                            column_index :=
                                                                                                                                                        M.copy (|
                                                                                                                                                          γ
                                                                                                                                                        |) in
                                                                                                                                                      M.match_operator (|
                                                                                                                                                        M.alloc (|
                                                                                                                                                          α2
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          fun
                                                                                                                                                              γ =>
                                                                                                                                                            ltac:(M.monadic
                                                                                                                                                              (let
                                                                                                                                                                    rotation :=
                                                                                                                                                                M.copy (|
                                                                                                                                                                  γ
                                                                                                                                                                |) in
                                                                                                                                                              M.read (|
                                                                                                                                                                M.call_closure (|
                                                                                                                                                                  M.get_trait_method (|
                                                                                                                                                                    "core::ops::index::Index",
                                                                                                                                                                    Ty.apply
                                                                                                                                                                      (Ty.path
                                                                                                                                                                        "halo2_proofs::poly::Polynomial")
                                                                                                                                                                      [
                                                                                                                                                                        F;
                                                                                                                                                                        B
                                                                                                                                                                      ],
                                                                                                                                                                    [
                                                                                                                                                                      Ty.path
                                                                                                                                                                        "usize"
                                                                                                                                                                    ],
                                                                                                                                                                    "index",
                                                                                                                                                                    []
                                                                                                                                                                  |),
                                                                                                                                                                  [
                                                                                                                                                                    M.SubPointer.get_array_field (|
                                                                                                                                                                      M.read (|
                                                                                                                                                                        instance
                                                                                                                                                                      |),
                                                                                                                                                                      column_index
                                                                                                                                                                    |);
                                                                                                                                                                    M.call_closure (|
                                                                                                                                                                      M.get_function (|
                                                                                                                                                                        "halo2_proofs::plonk::evaluation::get_rotation_idx",
                                                                                                                                                                        []
                                                                                                                                                                      |),
                                                                                                                                                                      [
                                                                                                                                                                        M.read (|
                                                                                                                                                                          idx
                                                                                                                                                                        |);
                                                                                                                                                                        M.read (|
                                                                                                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                                                                                                            rotation,
                                                                                                                                                                            "halo2_proofs::poly::Rotation",
                                                                                                                                                                            0
                                                                                                                                                                          |)
                                                                                                                                                                        |);
                                                                                                                                                                        M.read (|
                                                                                                                                                                          rot_scale
                                                                                                                                                                        |);
                                                                                                                                                                        M.read (|
                                                                                                                                                                          isize
                                                                                                                                                                        |)
                                                                                                                                                                      ]
                                                                                                                                                                    |)
                                                                                                                                                                  ]
                                                                                                                                                                |)
                                                                                                                                                              |)))
                                                                                                                                                        ]
                                                                                                                                                      |)))
                                                                                                                                                ]
                                                                                                                                              |)))
                                                                                                                                        ]
                                                                                                                                      |)
                                                                                                                                    | _ =>
                                                                                                                                      M.impossible (||)
                                                                                                                                    end))
                                                                                                                            |);
                                                                                                                            M.alloc (|
                                                                                                                              M.closure
                                                                                                                                (fun
                                                                                                                                    γ =>
                                                                                                                                  ltac:(M.monadic
                                                                                                                                    match
                                                                                                                                      γ
                                                                                                                                    with
                                                                                                                                    | [
                                                                                                                                          α0
                                                                                                                                        ] =>
                                                                                                                                      M.match_operator (|
                                                                                                                                        M.alloc (|
                                                                                                                                          α0
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          fun
                                                                                                                                              γ =>
                                                                                                                                            ltac:(M.monadic
                                                                                                                                              (let
                                                                                                                                                    a :=
                                                                                                                                                M.copy (|
                                                                                                                                                  γ
                                                                                                                                                |) in
                                                                                                                                              M.call_closure (|
                                                                                                                                                M.get_trait_method (|
                                                                                                                                                  "core::ops::arith::Neg",
                                                                                                                                                  F,
                                                                                                                                                  [],
                                                                                                                                                  "neg",
                                                                                                                                                  []
                                                                                                                                                |),
                                                                                                                                                [
                                                                                                                                                  M.read (|
                                                                                                                                                    a
                                                                                                                                                  |)
                                                                                                                                                ]
                                                                                                                                              |)))
                                                                                                                                        ]
                                                                                                                                      |)
                                                                                                                                    | _ =>
                                                                                                                                      M.impossible (||)
                                                                                                                                    end))
                                                                                                                            |);
                                                                                                                            M.alloc (|
                                                                                                                              M.closure
                                                                                                                                (fun
                                                                                                                                    γ =>
                                                                                                                                  ltac:(M.monadic
                                                                                                                                    match
                                                                                                                                      γ
                                                                                                                                    with
                                                                                                                                    | [
                                                                                                                                          α0;
                                                                                                                                          α1
                                                                                                                                        ] =>
                                                                                                                                      M.match_operator (|
                                                                                                                                        M.alloc (|
                                                                                                                                          α0
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          fun
                                                                                                                                              γ =>
                                                                                                                                            ltac:(M.monadic
                                                                                                                                              (let
                                                                                                                                                    a :=
                                                                                                                                                M.copy (|
                                                                                                                                                  γ
                                                                                                                                                |) in
                                                                                                                                              M.match_operator (|
                                                                                                                                                M.alloc (|
                                                                                                                                                  α1
                                                                                                                                                |),
                                                                                                                                                [
                                                                                                                                                  fun
                                                                                                                                                      γ =>
                                                                                                                                                    ltac:(M.monadic
                                                                                                                                                      (let
                                                                                                                                                            b :=
                                                                                                                                                        M.copy (|
                                                                                                                                                          γ
                                                                                                                                                        |) in
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        M.get_trait_method (|
                                                                                                                                                          "core::ops::arith::Add",
                                                                                                                                                          F,
                                                                                                                                                          [
                                                                                                                                                            Ty.apply
                                                                                                                                                              (Ty.path
                                                                                                                                                                "&")
                                                                                                                                                              [
                                                                                                                                                                F
                                                                                                                                                              ]
                                                                                                                                                          ],
                                                                                                                                                          "add",
                                                                                                                                                          []
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          M.read (|
                                                                                                                                                            a
                                                                                                                                                          |);
                                                                                                                                                          b
                                                                                                                                                        ]
                                                                                                                                                      |)))
                                                                                                                                                ]
                                                                                                                                              |)))
                                                                                                                                        ]
                                                                                                                                      |)
                                                                                                                                    | _ =>
                                                                                                                                      M.impossible (||)
                                                                                                                                    end))
                                                                                                                            |);
                                                                                                                            M.alloc (|
                                                                                                                              M.closure
                                                                                                                                (fun
                                                                                                                                    γ =>
                                                                                                                                  ltac:(M.monadic
                                                                                                                                    match
                                                                                                                                      γ
                                                                                                                                    with
                                                                                                                                    | [
                                                                                                                                          α0;
                                                                                                                                          α1
                                                                                                                                        ] =>
                                                                                                                                      M.match_operator (|
                                                                                                                                        M.alloc (|
                                                                                                                                          α0
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          fun
                                                                                                                                              γ =>
                                                                                                                                            ltac:(M.monadic
                                                                                                                                              (let
                                                                                                                                                    a :=
                                                                                                                                                M.copy (|
                                                                                                                                                  γ
                                                                                                                                                |) in
                                                                                                                                              M.match_operator (|
                                                                                                                                                M.alloc (|
                                                                                                                                                  α1
                                                                                                                                                |),
                                                                                                                                                [
                                                                                                                                                  fun
                                                                                                                                                      γ =>
                                                                                                                                                    ltac:(M.monadic
                                                                                                                                                      (let
                                                                                                                                                            b :=
                                                                                                                                                        M.copy (|
                                                                                                                                                          γ
                                                                                                                                                        |) in
                                                                                                                                                      M.read (|
                                                                                                                                                        let
                                                                                                                                                              a :=
                                                                                                                                                          M.alloc (|
                                                                                                                                                            M.call_closure (|
                                                                                                                                                              M.get_trait_method (|
                                                                                                                                                                "core::ops::function::Fn",
                                                                                                                                                                Ty.dyn
                                                                                                                                                                  [
                                                                                                                                                                    ("core::ops::function::Fn::Trait",
                                                                                                                                                                      [])
                                                                                                                                                                  ],
                                                                                                                                                                [
                                                                                                                                                                  Ty.tuple
                                                                                                                                                                    []
                                                                                                                                                                ],
                                                                                                                                                                "call",
                                                                                                                                                                []
                                                                                                                                                              |),
                                                                                                                                                              [
                                                                                                                                                                M.read (|
                                                                                                                                                                  a
                                                                                                                                                                |);
                                                                                                                                                                Value.Tuple
                                                                                                                                                                  []
                                                                                                                                                              ]
                                                                                                                                                            |)
                                                                                                                                                          |) in
                                                                                                                                                        M.match_operator (|
                                                                                                                                                          M.alloc (|
                                                                                                                                                            Value.Tuple
                                                                                                                                                              []
                                                                                                                                                          |),
                                                                                                                                                          [
                                                                                                                                                            fun
                                                                                                                                                                γ =>
                                                                                                                                                              ltac:(M.monadic
                                                                                                                                                                (let
                                                                                                                                                                      γ :=
                                                                                                                                                                  M.use
                                                                                                                                                                    (M.alloc (|
                                                                                                                                                                      M.call_closure (|
                                                                                                                                                                        M.get_trait_method (|
                                                                                                                                                                          "core::cmp::PartialEq",
                                                                                                                                                                          F,
                                                                                                                                                                          [
                                                                                                                                                                            F
                                                                                                                                                                          ],
                                                                                                                                                                          "eq",
                                                                                                                                                                          []
                                                                                                                                                                        |),
                                                                                                                                                                        [
                                                                                                                                                                          a;
                                                                                                                                                                          M.alloc (|
                                                                                                                                                                            M.call_closure (|
                                                                                                                                                                              M.get_trait_method (|
                                                                                                                                                                                "ff::Field",
                                                                                                                                                                                F,
                                                                                                                                                                                [],
                                                                                                                                                                                "zero",
                                                                                                                                                                                []
                                                                                                                                                                              |),
                                                                                                                                                                              []
                                                                                                                                                                            |)
                                                                                                                                                                          |)
                                                                                                                                                                        ]
                                                                                                                                                                      |)
                                                                                                                                                                    |)) in
                                                                                                                                                                let
                                                                                                                                                                      _ :=
                                                                                                                                                                  M.is_constant_or_break_match (|
                                                                                                                                                                    M.read (|
                                                                                                                                                                      γ
                                                                                                                                                                    |),
                                                                                                                                                                    Value.Bool
                                                                                                                                                                      true
                                                                                                                                                                  |) in
                                                                                                                                                                a));
                                                                                                                                                            fun
                                                                                                                                                                γ =>
                                                                                                                                                              ltac:(M.monadic
                                                                                                                                                                (M.alloc (|
                                                                                                                                                                  M.call_closure (|
                                                                                                                                                                    M.get_trait_method (|
                                                                                                                                                                      "core::ops::arith::Mul",
                                                                                                                                                                      F,
                                                                                                                                                                      [
                                                                                                                                                                        F
                                                                                                                                                                      ],
                                                                                                                                                                      "mul",
                                                                                                                                                                      []
                                                                                                                                                                    |),
                                                                                                                                                                    [
                                                                                                                                                                      M.read (|
                                                                                                                                                                        a
                                                                                                                                                                      |);
                                                                                                                                                                      M.call_closure (|
                                                                                                                                                                        M.get_trait_method (|
                                                                                                                                                                          "core::ops::function::Fn",
                                                                                                                                                                          Ty.dyn
                                                                                                                                                                            [
                                                                                                                                                                              ("core::ops::function::Fn::Trait",
                                                                                                                                                                                [])
                                                                                                                                                                            ],
                                                                                                                                                                          [
                                                                                                                                                                            Ty.tuple
                                                                                                                                                                              []
                                                                                                                                                                          ],
                                                                                                                                                                          "call",
                                                                                                                                                                          []
                                                                                                                                                                        |),
                                                                                                                                                                        [
                                                                                                                                                                          M.read (|
                                                                                                                                                                            b
                                                                                                                                                                          |);
                                                                                                                                                                          Value.Tuple
                                                                                                                                                                            []
                                                                                                                                                                        ]
                                                                                                                                                                      |)
                                                                                                                                                                    ]
                                                                                                                                                                  |)
                                                                                                                                                                |)))
                                                                                                                                                          ]
                                                                                                                                                        |)
                                                                                                                                                      |)))
                                                                                                                                                ]
                                                                                                                                              |)))
                                                                                                                                        ]
                                                                                                                                      |)
                                                                                                                                    | _ =>
                                                                                                                                      M.impossible (||)
                                                                                                                                    end))
                                                                                                                            |);
                                                                                                                            M.alloc (|
                                                                                                                              M.closure
                                                                                                                                (fun
                                                                                                                                    γ =>
                                                                                                                                  ltac:(M.monadic
                                                                                                                                    match
                                                                                                                                      γ
                                                                                                                                    with
                                                                                                                                    | [
                                                                                                                                          α0;
                                                                                                                                          α1
                                                                                                                                        ] =>
                                                                                                                                      M.match_operator (|
                                                                                                                                        M.alloc (|
                                                                                                                                          α0
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          fun
                                                                                                                                              γ =>
                                                                                                                                            ltac:(M.monadic
                                                                                                                                              (let
                                                                                                                                                    a :=
                                                                                                                                                M.copy (|
                                                                                                                                                  γ
                                                                                                                                                |) in
                                                                                                                                              M.match_operator (|
                                                                                                                                                M.alloc (|
                                                                                                                                                  α1
                                                                                                                                                |),
                                                                                                                                                [
                                                                                                                                                  fun
                                                                                                                                                      γ =>
                                                                                                                                                    ltac:(M.monadic
                                                                                                                                                      (let
                                                                                                                                                            scalar :=
                                                                                                                                                        M.copy (|
                                                                                                                                                          γ
                                                                                                                                                        |) in
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        M.get_trait_method (|
                                                                                                                                                          "core::ops::arith::Mul",
                                                                                                                                                          F,
                                                                                                                                                          [
                                                                                                                                                            F
                                                                                                                                                          ],
                                                                                                                                                          "mul",
                                                                                                                                                          []
                                                                                                                                                        |),
                                                                                                                                                        [
                                                                                                                                                          M.read (|
                                                                                                                                                            a
                                                                                                                                                          |);
                                                                                                                                                          M.read (|
                                                                                                                                                            scalar
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                      |)))
                                                                                                                                                ]
                                                                                                                                              |)))
                                                                                                                                        ]
                                                                                                                                      |)
                                                                                                                                    | _ =>
                                                                                                                                      M.impossible (||)
                                                                                                                                    end))
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  |) in
                                                                                                                M.alloc (|
                                                                                                                  Value.Tuple
                                                                                                                    []
                                                                                                                |)))
                                                                                                          ]
                                                                                                        |) in
                                                                                                      M.alloc (|
                                                                                                        Value.Tuple
                                                                                                          []
                                                                                                      |)))
                                                                                                  |)))
                                                                                            ]
                                                                                          |))))
                                                                                  ]
                                                                                |) in
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |)))
                                                                          |)))
                                                                    ]
                                                                  |))
                                                              |)))
                                                        ]
                                                      |)))
                                                ]
                                              |)
                                            | _ => M.impossible (||)
                                            end))
                                    ]
                                  |)
                                |) in
                              M.return_ (| M.read (| values |) |)
                            |)
                          |)
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
  End evaluation.
End plonk.
