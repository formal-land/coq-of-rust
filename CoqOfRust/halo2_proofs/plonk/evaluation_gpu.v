(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module plonk.
  Module evaluation_gpu.
    (*
    Enum ProveExpressionUnit
    {
      ty_params := [];
      variants :=
        [
          {
            name := "Fixed";
            item :=
              StructRecord
                [
                  ("column_index", Ty.path "usize");
                  ("rotation", Ty.path "halo2_proofs::poly::Rotation")
                ];
            discriminant := None;
          };
          {
            name := "Advice";
            item :=
              StructRecord
                [
                  ("column_index", Ty.path "usize");
                  ("rotation", Ty.path "halo2_proofs::poly::Rotation")
                ];
            discriminant := None;
          };
          {
            name := "Instance";
            item :=
              StructRecord
                [
                  ("column_index", Ty.path "usize");
                  ("rotation", Ty.path "halo2_proofs::poly::Rotation")
                ];
            discriminant := None;
          }
        ];
    }
    *)
    
    Module Impl_core_clone_Clone_for_halo2_proofs_plonk_evaluation_gpu_ProveExpressionUnit.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Fixed",
                          "column_index"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Fixed",
                          "rotation"
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        Value.StructRecord
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Fixed"
                          [
                            ("column_index",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.path "usize",
                                  [],
                                  "clone",
                                  []
                                |),
                                [ M.read (| __self_0 |) ]
                              |));
                            ("rotation",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.path "halo2_proofs::poly::Rotation",
                                  [],
                                  "clone",
                                  []
                                |),
                                [ M.read (| __self_1 |) ]
                              |))
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Advice",
                          "column_index"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Advice",
                          "rotation"
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        Value.StructRecord
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Advice"
                          [
                            ("column_index",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.path "usize",
                                  [],
                                  "clone",
                                  []
                                |),
                                [ M.read (| __self_0 |) ]
                              |));
                            ("rotation",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.path "halo2_proofs::poly::Rotation",
                                  [],
                                  "clone",
                                  []
                                |),
                                [ M.read (| __self_1 |) ]
                              |))
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Instance",
                          "column_index"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Instance",
                          "rotation"
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        Value.StructRecord
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Instance"
                          [
                            ("column_index",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.path "usize",
                                  [],
                                  "clone",
                                  []
                                |),
                                [ M.read (| __self_0 |) ]
                              |));
                            ("rotation",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.path "halo2_proofs::poly::Rotation",
                                  [],
                                  "clone",
                                  []
                                |),
                                [ M.read (| __self_1 |) ]
                              |))
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_halo2_proofs_plonk_evaluation_gpu_ProveExpressionUnit.
    
    Module Impl_core_fmt_Debug_for_halo2_proofs_plonk_evaluation_gpu_ProveExpressionUnit.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Fixed",
                          "column_index"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Fixed",
                          "rotation"
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_struct_field2_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Fixed" |);
                            M.read (| Value.String "column_index" |);
                            (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                            M.read (| Value.String "rotation" |);
                            (* Unsize *) M.pointer_coercion __self_1
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Advice",
                          "column_index"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Advice",
                          "rotation"
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_struct_field2_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Advice" |);
                            M.read (| Value.String "column_index" |);
                            (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                            M.read (| Value.String "rotation" |);
                            (* Unsize *) M.pointer_coercion __self_1
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Instance",
                          "column_index"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Instance",
                          "rotation"
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_struct_field2_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Instance" |);
                            M.read (| Value.String "column_index" |);
                            (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                            M.read (| Value.String "rotation" |);
                            (* Unsize *) M.pointer_coercion __self_1
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_halo2_proofs_plonk_evaluation_gpu_ProveExpressionUnit.
    
    Module Impl_core_marker_StructuralEq_for_halo2_proofs_plonk_evaluation_gpu_ProveExpressionUnit.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralEq_for_halo2_proofs_plonk_evaluation_gpu_ProveExpressionUnit.
    
    Module Impl_core_cmp_Eq_for_halo2_proofs_plonk_evaluation_gpu_ProveExpressionUnit.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit".
      
      (* Eq *)
      Definition assert_receiver_is_total_eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Eq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
    End Impl_core_cmp_Eq_for_halo2_proofs_plonk_evaluation_gpu_ProveExpressionUnit.
    
    Module Impl_core_cmp_Ord_for_halo2_proofs_plonk_evaluation_gpu_ProveExpressionUnit.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit".
      
      (* Ord *)
      Definition cmp (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let __self_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit" ]
                    |),
                    [ M.read (| self |) ]
                  |)
                |) in
              let __arg1_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit" ]
                    |),
                    [ M.read (| other |) ]
                  |)
                |) in
              M.match_operator (|
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (| "core::cmp::Ord", Ty.path "isize", [], "cmp", [] |),
                    [ __self_tag; __arg1_tag ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Fixed",
                                  "column_index"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Fixed",
                                  "rotation"
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let __self_1 := M.alloc (| γ2_1 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Fixed",
                                  "column_index"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Fixed",
                                  "rotation"
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              let __arg1_1 := M.alloc (| γ2_1 |) in
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::Ord",
                                      Ty.path "usize",
                                      [],
                                      "cmp",
                                      []
                                    |),
                                    [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::cmp::Ord",
                                            Ty.path "halo2_proofs::poly::Rotation",
                                            [],
                                            "cmp",
                                            []
                                          |),
                                          [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let cmp := M.copy (| γ |) in
                                      cmp))
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Advice",
                                  "column_index"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Advice",
                                  "rotation"
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let __self_1 := M.alloc (| γ2_1 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Advice",
                                  "column_index"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Advice",
                                  "rotation"
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              let __arg1_1 := M.alloc (| γ2_1 |) in
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::Ord",
                                      Ty.path "usize",
                                      [],
                                      "cmp",
                                      []
                                    |),
                                    [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::cmp::Ord",
                                            Ty.path "halo2_proofs::poly::Rotation",
                                            [],
                                            "cmp",
                                            []
                                          |),
                                          [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let cmp := M.copy (| γ |) in
                                      cmp))
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Instance",
                                  "column_index"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Instance",
                                  "rotation"
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let __self_1 := M.alloc (| γ2_1 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Instance",
                                  "column_index"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Instance",
                                  "rotation"
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              let __arg1_1 := M.alloc (| γ2_1 |) in
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::Ord",
                                      Ty.path "usize",
                                      [],
                                      "cmp",
                                      []
                                    |),
                                    [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::cmp::Ord",
                                            Ty.path "halo2_proofs::poly::Rotation",
                                            [],
                                            "cmp",
                                            []
                                          |),
                                          [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let cmp := M.copy (| γ |) in
                                      cmp))
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.call_closure (|
                                    M.get_function (| "core::intrinsics::unreachable", [] |),
                                    []
                                  |)
                                |)
                              |)))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let cmp := M.copy (| γ |) in
                      cmp))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::Ord"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("cmp", InstanceField.Method cmp) ].
    End Impl_core_cmp_Ord_for_halo2_proofs_plonk_evaluation_gpu_ProveExpressionUnit.
    
    Module Impl_core_marker_StructuralPartialEq_for_halo2_proofs_plonk_evaluation_gpu_ProveExpressionUnit.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_halo2_proofs_plonk_evaluation_gpu_ProveExpressionUnit.
    
    Module Impl_core_cmp_PartialEq_for_halo2_proofs_plonk_evaluation_gpu_ProveExpressionUnit.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit".
      
      (* PartialEq *)
      Definition eq (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let __self_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit" ]
                    |),
                    [ M.read (| self |) ]
                  |)
                |) in
              let __arg1_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit" ]
                    |),
                    [ M.read (| other |) ]
                  |)
                |) in
              M.alloc (|
                LogicalOp.and (|
                  BinOp.Pure.eq (M.read (| __self_tag |)) (M.read (| __arg1_tag |)),
                  ltac:(M.monadic
                    (M.read (|
                      M.match_operator (|
                        M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Fixed",
                                  "column_index"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Fixed",
                                  "rotation"
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let __self_1 := M.alloc (| γ2_1 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Fixed",
                                  "column_index"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Fixed",
                                  "rotation"
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              let __arg1_1 := M.alloc (| γ2_1 |) in
                              M.alloc (|
                                LogicalOp.and (|
                                  BinOp.Pure.eq
                                    (M.read (| M.read (| __self_0 |) |))
                                    (M.read (| M.read (| __arg1_0 |) |)),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.path "halo2_proofs::poly::Rotation",
                                        [ Ty.path "halo2_proofs::poly::Rotation" ],
                                        "eq",
                                        []
                                      |),
                                      [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                    |)))
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Advice",
                                  "column_index"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Advice",
                                  "rotation"
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let __self_1 := M.alloc (| γ2_1 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Advice",
                                  "column_index"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Advice",
                                  "rotation"
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              let __arg1_1 := M.alloc (| γ2_1 |) in
                              M.alloc (|
                                LogicalOp.and (|
                                  BinOp.Pure.eq
                                    (M.read (| M.read (| __self_0 |) |))
                                    (M.read (| M.read (| __arg1_0 |) |)),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.path "halo2_proofs::poly::Rotation",
                                        [ Ty.path "halo2_proofs::poly::Rotation" ],
                                        "eq",
                                        []
                                      |),
                                      [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                    |)))
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.read (| γ0_0 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Instance",
                                  "column_index"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Instance",
                                  "rotation"
                                |) in
                              let __self_0 := M.alloc (| γ2_0 |) in
                              let __self_1 := M.alloc (| γ2_1 |) in
                              let γ0_1 := M.read (| γ0_1 |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Instance",
                                  "column_index"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Instance",
                                  "rotation"
                                |) in
                              let __arg1_0 := M.alloc (| γ2_0 |) in
                              let __arg1_1 := M.alloc (| γ2_1 |) in
                              M.alloc (|
                                LogicalOp.and (|
                                  BinOp.Pure.eq
                                    (M.read (| M.read (| __self_0 |) |))
                                    (M.read (| M.read (| __arg1_0 |) |)),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.path "halo2_proofs::poly::Rotation",
                                        [ Ty.path "halo2_proofs::poly::Rotation" ],
                                        "eq",
                                        []
                                      |),
                                      [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                    |)))
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                M.never_to_any (|
                                  M.call_closure (|
                                    M.get_function (| "core::intrinsics::unreachable", [] |),
                                    []
                                  |)
                                |)
                              |)))
                        ]
                      |)
                    |)))
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialEq"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method eq) ].
    End Impl_core_cmp_PartialEq_for_halo2_proofs_plonk_evaluation_gpu_ProveExpressionUnit.
    
    Module Impl_core_cmp_PartialOrd_for_halo2_proofs_plonk_evaluation_gpu_ProveExpressionUnit.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit".
      
      (* PartialOrd *)
      Definition partial_cmp (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let __self_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit" ]
                    |),
                    [ M.read (| self |) ]
                  |)
                |) in
              let __arg1_tag :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [ Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit" ]
                    |),
                    [ M.read (| other |) ]
                  |)
                |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [ M.read (| self |); M.read (| other |) ] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_0,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Fixed",
                          "column_index"
                        |) in
                      let γ2_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_0,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Fixed",
                          "rotation"
                        |) in
                      let __self_0 := M.alloc (| γ2_0 |) in
                      let __self_1 := M.alloc (| γ2_1 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_1,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Fixed",
                          "column_index"
                        |) in
                      let γ2_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_1,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Fixed",
                          "rotation"
                        |) in
                      let __arg1_0 := M.alloc (| γ2_0 |) in
                      let __arg1_1 := M.alloc (| γ2_1 |) in
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::cmp::PartialOrd",
                              Ty.path "usize",
                              [ Ty.path "usize" ],
                              "partial_cmp",
                              []
                            |),
                            [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    Ty.path "halo2_proofs::poly::Rotation",
                                    [ Ty.path "halo2_proofs::poly::Rotation" ],
                                    "partial_cmp",
                                    []
                                  |),
                                  [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let cmp := M.copy (| γ |) in
                              cmp))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_0,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Advice",
                          "column_index"
                        |) in
                      let γ2_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_0,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Advice",
                          "rotation"
                        |) in
                      let __self_0 := M.alloc (| γ2_0 |) in
                      let __self_1 := M.alloc (| γ2_1 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_1,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Advice",
                          "column_index"
                        |) in
                      let γ2_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_1,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Advice",
                          "rotation"
                        |) in
                      let __arg1_0 := M.alloc (| γ2_0 |) in
                      let __arg1_1 := M.alloc (| γ2_1 |) in
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::cmp::PartialOrd",
                              Ty.path "usize",
                              [ Ty.path "usize" ],
                              "partial_cmp",
                              []
                            |),
                            [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    Ty.path "halo2_proofs::poly::Rotation",
                                    [ Ty.path "halo2_proofs::poly::Rotation" ],
                                    "partial_cmp",
                                    []
                                  |),
                                  [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let cmp := M.copy (| γ |) in
                              cmp))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let γ0_0 := M.read (| γ0_0 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_0,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Instance",
                          "column_index"
                        |) in
                      let γ2_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_0,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Instance",
                          "rotation"
                        |) in
                      let __self_0 := M.alloc (| γ2_0 |) in
                      let __self_1 := M.alloc (| γ2_1 |) in
                      let γ0_1 := M.read (| γ0_1 |) in
                      let γ2_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_1,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Instance",
                          "column_index"
                        |) in
                      let γ2_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ0_1,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Instance",
                          "rotation"
                        |) in
                      let __arg1_0 := M.alloc (| γ2_0 |) in
                      let __arg1_1 := M.alloc (| γ2_1 |) in
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::cmp::PartialOrd",
                              Ty.path "usize",
                              [ Ty.path "usize" ],
                              "partial_cmp",
                              []
                            |),
                            [ M.read (| __self_0 |); M.read (| __arg1_0 |) ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    Ty.path "halo2_proofs::poly::Rotation",
                                    [ Ty.path "halo2_proofs::poly::Rotation" ],
                                    "partial_cmp",
                                    []
                                  |),
                                  [ M.read (| __self_1 |); M.read (| __arg1_1 |) ]
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let cmp := M.copy (| γ |) in
                              cmp))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::cmp::PartialOrd",
                            Ty.path "isize",
                            [ Ty.path "isize" ],
                            "partial_cmp",
                            []
                          |),
                          [ __self_tag; __arg1_tag ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::cmp::PartialOrd"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("partial_cmp", InstanceField.Method partial_cmp) ].
    End Impl_core_cmp_PartialOrd_for_halo2_proofs_plonk_evaluation_gpu_ProveExpressionUnit.
    
    Module Impl_halo2_proofs_plonk_evaluation_gpu_ProveExpressionUnit.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit".
      
      (*
          pub fn get_group(&self) -> usize {
              match self {
                  ProveExpressionUnit::Fixed { column_index, .. } => column_index << 2,
                  ProveExpressionUnit::Advice { column_index, .. } => (column_index << 2) + 1,
                  ProveExpressionUnit::Instance { column_index, .. } => (column_index << 2) + 2,
              }
          }
      *)
      Definition get_group (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Fixed",
                          "column_index"
                        |) in
                      let column_index := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::bit::Shl",
                            Ty.apply (Ty.path "&") [ Ty.path "usize" ],
                            [ Ty.path "i32" ],
                            "shl",
                            []
                          |),
                          [ M.read (| column_index |); Value.Integer 2 ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Advice",
                          "column_index"
                        |) in
                      let column_index := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        BinOp.Panic.add (|
                          Integer.Usize,
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::bit::Shl",
                              Ty.apply (Ty.path "&") [ Ty.path "usize" ],
                              [ Ty.path "i32" ],
                              "shl",
                              []
                            |),
                            [ M.read (| column_index |); Value.Integer 2 ]
                          |),
                          Value.Integer 1
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Instance",
                          "column_index"
                        |) in
                      let column_index := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        BinOp.Panic.add (|
                          Integer.Usize,
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::bit::Shl",
                              Ty.apply (Ty.path "&") [ Ty.path "usize" ],
                              [ Ty.path "i32" ],
                              "shl",
                              []
                            |),
                            [ M.read (| column_index |); Value.Integer 2 ]
                          |),
                          Value.Integer 2
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_get_group : M.IsAssociatedFunction Self "get_group" get_group.
    End Impl_halo2_proofs_plonk_evaluation_gpu_ProveExpressionUnit.
    
    (*
    Enum Bop
    {
      ty_params := [];
      variants :=
        [
          {
            name := "Sum";
            item := StructTuple [];
            discriminant := None;
          };
          {
            name := "Product";
            item := StructTuple [];
            discriminant := None;
          }
        ];
    }
    *)
    
    Module Impl_core_clone_Clone_for_halo2_proofs_plonk_evaluation_gpu_Bop.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation_gpu::Bop".
      
      (* Clone *)
      Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      M.alloc (|
                        Value.StructTuple "halo2_proofs::plonk::evaluation_gpu::Bop::Sum" []
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      M.alloc (|
                        Value.StructTuple "halo2_proofs::plonk::evaluation_gpu::Bop::Product" []
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_halo2_proofs_plonk_evaluation_gpu_Bop.
    
    Module Impl_core_fmt_Debug_for_halo2_proofs_plonk_evaluation_gpu_Bop.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation_gpu::Bop".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (| Ty.path "core::fmt::Formatter", "write_str", [] |),
              [
                M.read (| f |);
                M.read (|
                  M.match_operator (|
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          M.alloc (| M.read (| Value.String "Sum" |) |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.read (| γ |) in
                          M.alloc (| M.read (| Value.String "Product" |) |)))
                    ]
                  |)
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_halo2_proofs_plonk_evaluation_gpu_Bop.
    
    (*
    Enum ProveExpression
    {
      ty_params := [ "F" ];
      variants :=
        [
          {
            name := "Unit";
            item :=
              StructTuple [ Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit" ];
            discriminant := None;
          };
          {
            name := "Op";
            item :=
              StructTuple
                [
                  Ty.apply
                    (Ty.path "alloc::boxed::Box")
                    [
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.apply
                    (Ty.path "alloc::boxed::Box")
                    [
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.path "halo2_proofs::plonk::evaluation_gpu::Bop"
                ];
            discriminant := None;
          };
          {
            name := "Y";
            item :=
              StructTuple
                [
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                    [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                ];
            discriminant := None;
          };
          {
            name := "Scale";
            item :=
              StructTuple
                [
                  Ty.apply
                    (Ty.path "alloc::boxed::Box")
                    [
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                    [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                ];
            discriminant := None;
          }
        ];
    }
    *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_for_halo2_proofs_plonk_evaluation_gpu_ProveExpression_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression") [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Unit",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Unit"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op",
                          1
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op",
                          2
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      let __self_2 := M.alloc (| γ1_2 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |);
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_1 |) ]
                            |);
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "halo2_proofs::plonk::evaluation_gpu::Bop",
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_2 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Y",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Y"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                                  [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Scale",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Scale",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Scale"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |);
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                                  [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_1 |) ]
                            |)
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_for_halo2_proofs_plonk_evaluation_gpu_ProveExpression_F.
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_halo2_proofs_plonk_evaluation_gpu_ProveExpression_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression") [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Unit",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Unit" |);
                            (* Unsize *) M.pointer_coercion __self_0
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op",
                          1
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op",
                          2
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      let __self_2 := M.alloc (| γ1_2 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field3_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Op" |);
                            (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                            (* Unsize *) M.pointer_coercion (M.read (| __self_1 |));
                            (* Unsize *) M.pointer_coercion __self_2
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Y",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Y" |);
                            (* Unsize *) M.pointer_coercion __self_0
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Scale",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Scale",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field2_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Scale" |);
                            (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                            (* Unsize *) M.pointer_coercion __self_1
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_halo2_proofs_plonk_evaluation_gpu_ProveExpression_F.
    
    (*
    Enum LookupProveExpression
    {
      ty_params := [ "F" ];
      variants :=
        [
          {
            name := "Expression";
            item :=
              StructTuple
                [ Ty.apply (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression") [ F ] ];
            discriminant := None;
          };
          {
            name := "LcTheta";
            item :=
              StructTuple
                [
                  Ty.apply
                    (Ty.path "alloc::boxed::Box")
                    [
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.apply
                    (Ty.path "alloc::boxed::Box")
                    [
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ]
                ];
            discriminant := None;
          };
          {
            name := "LcBeta";
            item :=
              StructTuple
                [
                  Ty.apply
                    (Ty.path "alloc::boxed::Box")
                    [
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.apply
                    (Ty.path "alloc::boxed::Box")
                    [
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ]
                ];
            discriminant := None;
          };
          {
            name := "AddGamma";
            item :=
              StructTuple
                [
                  Ty.apply
                    (Ty.path "alloc::boxed::Box")
                    [
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ]
                ];
            discriminant := None;
          }
        ];
    }
    *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_for_halo2_proofs_plonk_evaluation_gpu_LookupProveExpression_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression") [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::Expression",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::Expression"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                  [ F ],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::LcTheta",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::LcTheta",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::LcTheta"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |);
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_1 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::LcBeta",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::LcBeta",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::LcBeta"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |);
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_1 |) ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::AddGamma",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::AddGamma"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression")
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "clone",
                                []
                              |),
                              [ M.read (| __self_0 |) ]
                            |)
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_for_halo2_proofs_plonk_evaluation_gpu_LookupProveExpression_F.
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_halo2_proofs_plonk_evaluation_gpu_LookupProveExpression_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression") [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::Expression",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "Expression" |);
                            (* Unsize *) M.pointer_coercion __self_0
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::LcTheta",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::LcTheta",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field2_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "LcTheta" |);
                            (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                            (* Unsize *) M.pointer_coercion __self_1
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::LcBeta",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::LcBeta",
                          1
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      let __self_1 := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field2_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "LcBeta" |);
                            (* Unsize *) M.pointer_coercion (M.read (| __self_0 |));
                            (* Unsize *) M.pointer_coercion __self_1
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::LookupProveExpression::AddGamma",
                          0
                        |) in
                      let __self_0 := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            []
                          |),
                          [
                            M.read (| f |);
                            M.read (| Value.String "AddGamma" |);
                            (* Unsize *) M.pointer_coercion __self_0
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_halo2_proofs_plonk_evaluation_gpu_LookupProveExpression_F.
    
    (* StructRecord
      {
        name := "ComplexityProfiler";
        ty_params := [];
        fields :=
          [
            ("mul", Ty.path "usize");
            ("sum", Ty.path "usize");
            ("scale", Ty.path "usize");
            ("unit_", Ty.path "usize");
            ("y", Ty.path "usize");
            ("ref_cnt",
              Ty.apply
                (Ty.path "std::collections::hash::map::HashMap")
                [ Ty.path "usize"; Ty.path "u32"; Ty.path "std::hash::random::RandomState" ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_halo2_proofs_plonk_evaluation_gpu_ComplexityProfiler.
      Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler".
      
      (* Debug *)
      Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              let names :=
                M.alloc (|
                  M.alloc (|
                    Value.Array
                      [
                        M.read (| Value.String "mul" |);
                        M.read (| Value.String "sum" |);
                        M.read (| Value.String "scale" |);
                        M.read (| Value.String "unit" |);
                        M.read (| Value.String "y" |);
                        M.read (| Value.String "ref_cnt" |)
                      ]
                  |)
                |) in
              let values :=
                M.alloc (|
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      Value.Array
                        [
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                              "mul"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                              "sum"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                              "scale"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                              "unit"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                              "y"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.alloc (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                                "ref_cnt"
                              |)
                            |))
                        ]
                    |))
                |) in
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_fields_finish",
                    []
                  |),
                  [
                    M.read (| f |);
                    M.read (| Value.String "ComplexityProfiler" |);
                    (* Unsize *) M.pointer_coercion (M.read (| names |));
                    M.read (| values |)
                  ]
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          Self
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_halo2_proofs_plonk_evaluation_gpu_ComplexityProfiler.
    
    Module Impl_halo2_proofs_plonk_evaluation_gpu_ProveExpression_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression") [ F ].
      
      (*
          pub(crate) fn new() -> Self {
              ProveExpression::Y(BTreeMap::from_iter(vec![(0, F::zero())].into_iter()))
          }
      *)
      Definition new (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (Value.StructTuple
              "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Y"
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "core::iter::traits::collect::FromIterator",
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ],
                    [ Ty.tuple [ Ty.path "u32"; F ] ],
                    "from_iter",
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        [ Ty.tuple [ Ty.path "u32"; F ]; Ty.path "alloc::alloc::Global" ]
                    ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.tuple [ Ty.path "u32"; F ]; Ty.path "alloc::alloc::Global" ],
                        [],
                        "into_iter",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [ Ty.tuple [ Ty.path "u32"; F ] ],
                            "into_vec",
                            [ Ty.path "alloc::alloc::Global" ]
                          |),
                          [
                            (* Unsize *)
                            M.pointer_coercion
                              (M.read (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Ty.tuple [ Ty.path "u32"; F ] ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "new",
                                    []
                                  |),
                                  [
                                    M.alloc (|
                                      Value.Array
                                        [
                                          Value.Tuple
                                            [
                                              Value.Integer 0;
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "ff::Field",
                                                  F,
                                                  [],
                                                  "zero",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                        ]
                                    |)
                                  ]
                                |)
                              |))
                          ]
                        |)
                      ]
                    |)
                  ]
                |)
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "new" (new F).
      
      (*
          pub fn from_expr(e: &Expression<F>) -> Self {
              match e {
                  Expression::Constant(x) => {
                      ProveExpression::Y(BTreeMap::from_iter(vec![(0, *x)].into_iter()))
                  }
                  Expression::Selector(_) => unreachable!(),
                  Expression::Fixed {
                      column_index,
                      rotation,
                      ..
                  } => Self::Unit(ProveExpressionUnit::Fixed {
                      column_index: *column_index,
                      rotation: *rotation,
                  }),
                  Expression::Advice {
                      column_index,
                      rotation,
                      ..
                  } => Self::Unit(ProveExpressionUnit::Advice {
                      column_index: *column_index,
                      rotation: *rotation,
                  }),
                  Expression::Instance {
                      column_index,
                      rotation,
                      ..
                  } => Self::Unit(ProveExpressionUnit::Instance {
                      column_index: *column_index,
                      rotation: *rotation,
                  }),
                  Expression::Negated(e) => ProveExpression::Op(
                      Box::new(Self::from_expr(e)),
                      Box::new(ProveExpression::Y(BTreeMap::from_iter(
                          vec![(0, -F::one())].into_iter(),
                      ))),
                      Bop::Product,
                  ),
                  Expression::Sum(l, r) => ProveExpression::Op(
                      Box::new(Self::from_expr(l)),
                      Box::new(Self::from_expr(r)),
                      Bop::Sum,
                  ),
                  Expression::Product(l, r) => ProveExpression::Op(
                      Box::new(Self::from_expr(l)),
                      Box::new(Self::from_expr(r)),
                      Bop::Product,
                  ),
                  Expression::Scaled(l, r) => ProveExpression::Op(
                      Box::new(Self::from_expr(l)),
                      Box::new(ProveExpression::Y(BTreeMap::from_iter(
                          vec![(0, *r)].into_iter(),
                      ))),
                      Bop::Product,
                  ),
              }
          }
      *)
      Definition from_expr (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ e ] =>
          ltac:(M.monadic
            (let e := M.alloc (| e |) in
            M.read (|
              M.match_operator (|
                e,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Constant",
                          0
                        |) in
                      let x := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Y"
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::FromIterator",
                                Ty.apply
                                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                                  [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ],
                                [ Ty.tuple [ Ty.path "u32"; F ] ],
                                "from_iter",
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    [ Ty.tuple [ Ty.path "u32"; F ]; Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::collect::IntoIterator",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.tuple [ Ty.path "u32"; F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "into_iter",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          [ Ty.tuple [ Ty.path "u32"; F ] ],
                                        "into_vec",
                                        [ Ty.path "alloc::alloc::Global" ]
                                      |),
                                      [
                                        (* Unsize *)
                                        M.pointer_coercion
                                          (M.read (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::boxed::Box")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "array")
                                                      [ Ty.tuple [ Ty.path "u32"; F ] ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "new",
                                                []
                                              |),
                                              [
                                                M.alloc (|
                                                  Value.Array
                                                    [
                                                      Value.Tuple
                                                        [
                                                          Value.Integer 0;
                                                          M.read (| M.read (| x |) |)
                                                        ]
                                                    ]
                                                |)
                                              ]
                                            |)
                                          |))
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Selector",
                          0
                        |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            M.get_function (| "core::panicking::panic", [] |),
                            [ M.read (| Value.String "internal error: entered unreachable code" |) ]
                          |)
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Fixed",
                          "column_index"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Fixed",
                          "rotation"
                        |) in
                      let column_index := M.alloc (| γ1_0 |) in
                      let rotation := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Unit"
                          [
                            Value.StructRecord
                              "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Fixed"
                              [
                                ("column_index", M.read (| M.read (| column_index |) |));
                                ("rotation", M.read (| M.read (| rotation |) |))
                              ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Advice",
                          "column_index"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Advice",
                          "rotation"
                        |) in
                      let column_index := M.alloc (| γ1_0 |) in
                      let rotation := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Unit"
                          [
                            Value.StructRecord
                              "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Advice"
                              [
                                ("column_index", M.read (| M.read (| column_index |) |));
                                ("rotation", M.read (| M.read (| rotation |) |))
                              ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Instance",
                          "column_index"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Instance",
                          "rotation"
                        |) in
                      let column_index := M.alloc (| γ1_0 |) in
                      let rotation := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Unit"
                          [
                            Value.StructRecord
                              "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit::Instance"
                              [
                                ("column_index", M.read (| M.read (| column_index |) |));
                                ("rotation", M.read (| M.read (| rotation |) |))
                              ]
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Negated",
                          0
                        |) in
                      let e := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op"
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ],
                                    "from_expr",
                                    []
                                  |),
                                  [ M.read (| M.read (| e |) |) ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                Value.StructTuple
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Y"
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::FromIterator",
                                        Ty.apply
                                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                                          [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ],
                                        [ Ty.tuple [ Ty.path "u32"; F ] ],
                                        "from_iter",
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            [
                                              Ty.tuple [ Ty.path "u32"; F ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::collect::IntoIterator",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.tuple [ Ty.path "u32"; F ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            "into_iter",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  [ Ty.tuple [ Ty.path "u32"; F ] ],
                                                "into_vec",
                                                [ Ty.path "alloc::alloc::Global" ]
                                              |),
                                              [
                                                (* Unsize *)
                                                M.pointer_coercion
                                                  (M.read (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::boxed::Box")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Ty.tuple [ Ty.path "u32"; F ] ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "new",
                                                        []
                                                      |),
                                                      [
                                                        M.alloc (|
                                                          Value.Array
                                                            [
                                                              Value.Tuple
                                                                [
                                                                  Value.Integer 0;
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::arith::Neg",
                                                                      F,
                                                                      [],
                                                                      "neg",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "ff::Field",
                                                                          F,
                                                                          [],
                                                                          "one",
                                                                          []
                                                                        |),
                                                                        []
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                            ]
                                                        |)
                                                      ]
                                                    |)
                                                  |))
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                              ]
                            |);
                            Value.StructTuple "halo2_proofs::plonk::evaluation_gpu::Bop::Product" []
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Sum",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Sum",
                          1
                        |) in
                      let l := M.alloc (| γ1_0 |) in
                      let r := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op"
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ],
                                    "from_expr",
                                    []
                                  |),
                                  [ M.read (| M.read (| l |) |) ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ],
                                    "from_expr",
                                    []
                                  |),
                                  [ M.read (| M.read (| r |) |) ]
                                |)
                              ]
                            |);
                            Value.StructTuple "halo2_proofs::plonk::evaluation_gpu::Bop::Sum" []
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Product",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Product",
                          1
                        |) in
                      let l := M.alloc (| γ1_0 |) in
                      let r := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op"
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ],
                                    "from_expr",
                                    []
                                  |),
                                  [ M.read (| M.read (| l |) |) ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ],
                                    "from_expr",
                                    []
                                  |),
                                  [ M.read (| M.read (| r |) |) ]
                                |)
                              ]
                            |);
                            Value.StructTuple "halo2_proofs::plonk::evaluation_gpu::Bop::Product" []
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Scaled",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::circuit::Expression::Scaled",
                          1
                        |) in
                      let l := M.alloc (| γ1_0 |) in
                      let r := M.alloc (| γ1_1 |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op"
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ],
                                    "from_expr",
                                    []
                                  |),
                                  [ M.read (| M.read (| l |) |) ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                Value.StructTuple
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Y"
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::FromIterator",
                                        Ty.apply
                                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                                          [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ],
                                        [ Ty.tuple [ Ty.path "u32"; F ] ],
                                        "from_iter",
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            [
                                              Ty.tuple [ Ty.path "u32"; F ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::collect::IntoIterator",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.tuple [ Ty.path "u32"; F ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            "into_iter",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  [ Ty.tuple [ Ty.path "u32"; F ] ],
                                                "into_vec",
                                                [ Ty.path "alloc::alloc::Global" ]
                                              |),
                                              [
                                                (* Unsize *)
                                                M.pointer_coercion
                                                  (M.read (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::boxed::Box")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Ty.tuple [ Ty.path "u32"; F ] ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "new",
                                                        []
                                                      |),
                                                      [
                                                        M.alloc (|
                                                          Value.Array
                                                            [
                                                              Value.Tuple
                                                                [
                                                                  Value.Integer 0;
                                                                  M.read (| M.read (| r |) |)
                                                                ]
                                                            ]
                                                        |)
                                                      ]
                                                    |)
                                                  |))
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                              ]
                            |);
                            Value.StructTuple "halo2_proofs::plonk::evaluation_gpu::Bop::Product" []
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_from_expr :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "from_expr" (from_expr F).
      
      (*
          pub(crate) fn add_gate(self, e: &Expression<F>) -> Self {
              Self::Op(
                  Box::new(Self::Op(
                      Box::new(self),
                      Box::new(ProveExpression::Y(BTreeMap::from_iter(
                          vec![(1, F::one())].into_iter(),
                      ))),
                      Bop::Product,
                  )),
                  Box::new(Self::from_expr(e)),
                  Bop::Sum,
              )
          }
      *)
      Definition add_gate (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; e ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let e := M.alloc (| e |) in
            Value.StructTuple
              "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op"
              [
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::boxed::Box")
                      [
                        Ty.apply
                          (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    []
                  |),
                  [
                    Value.StructTuple
                      "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op"
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          [ M.read (| self |) ]
                        |);
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::boxed::Box")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          [
                            Value.StructTuple
                              "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Y"
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::collect::FromIterator",
                                    Ty.apply
                                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                                      [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ],
                                    [ Ty.tuple [ Ty.path "u32"; F ] ],
                                    "from_iter",
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                        [
                                          Ty.tuple [ Ty.path "u32"; F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.tuple [ Ty.path "u32"; F ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "into_iter",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [ Ty.tuple [ Ty.path "u32"; F ] ],
                                            "into_vec",
                                            [ Ty.path "alloc::alloc::Global" ]
                                          |),
                                          [
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.read (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::boxed::Box")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Ty.tuple [ Ty.path "u32"; F ] ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  [
                                                    M.alloc (|
                                                      Value.Array
                                                        [
                                                          Value.Tuple
                                                            [
                                                              Value.Integer 1;
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "ff::Field",
                                                                  F,
                                                                  [],
                                                                  "one",
                                                                  []
                                                                |),
                                                                []
                                                              |)
                                                            ]
                                                        ]
                                                    |)
                                                  ]
                                                |)
                                              |))
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                          ]
                        |);
                        Value.StructTuple "halo2_proofs::plonk::evaluation_gpu::Bop::Product" []
                      ]
                  ]
                |);
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::boxed::Box")
                      [
                        Ty.apply
                          (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    []
                  |),
                  [
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                          [ F ],
                        "from_expr",
                        []
                      |),
                      [ M.read (| e |) ]
                    |)
                  ]
                |);
                Value.StructTuple "halo2_proofs::plonk::evaluation_gpu::Bop::Sum" []
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_add_gate :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "add_gate" (add_gate F).
      
      (*
          fn reconstruct_coeff(coeff: BTreeMap<u32, F>) -> Self {
              ProveExpression::Y(coeff)
          }
      *)
      Definition reconstruct_coeff (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ coeff ] =>
          ltac:(M.monadic
            (let coeff := M.alloc (| coeff |) in
            Value.StructTuple
              "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Y"
              [ M.read (| coeff |) ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_reconstruct_coeff :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "reconstruct_coeff" (reconstruct_coeff F).
      
      (*
          fn reconstruct_unit(u: ProveExpressionUnit, c: u32) -> Self {
              if c >= 3 {
                  println!("find large c {}", c);
              }
      
              if c == 1 {
                  Self::Unit(u)
              } else {
                  Self::Op(
                      Box::new(Self::reconstruct_unit(u.clone(), c - 1)),
                      Box::new(Self::Unit(u)),
                      Bop::Product,
                  )
              }
          }
      *)
      Definition reconstruct_unit (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ u; c ] =>
          ltac:(M.monadic
            (let u := M.alloc (| u |) in
            let c := M.alloc (| c |) in
            M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use (M.alloc (| BinOp.Pure.ge (M.read (| c |)) (Value.Integer 3) |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let _ :=
                          let _ :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_function (| "std::io::stdio::_print", [] |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::Arguments",
                                      "new_v1",
                                      []
                                    |),
                                    [
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [
                                              M.read (| Value.String "find large c " |);
                                              M.read (| Value.String "
" |)
                                            ]
                                        |));
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.alloc (|
                                          Value.Array
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  "new_display",
                                                  [ Ty.path "u32" ]
                                                |),
                                                [ c ]
                                              |)
                                            ]
                                        |))
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          M.alloc (| Value.Tuple [] |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use (M.alloc (| BinOp.Pure.eq (M.read (| c |)) (Value.Integer 1) |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Unit"
                          [ M.read (| u |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.alloc (|
                        Value.StructTuple
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op"
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ],
                                    "reconstruct_unit",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::clone::Clone",
                                        Ty.path
                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit",
                                        [],
                                        "clone",
                                        []
                                      |),
                                      [ u ]
                                    |);
                                    BinOp.Panic.sub (|
                                      Integer.U32,
                                      M.read (| c |),
                                      Value.Integer 1
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                Value.StructTuple
                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Unit"
                                  [ M.read (| u |) ]
                              ]
                            |);
                            Value.StructTuple "halo2_proofs::plonk::evaluation_gpu::Bop::Product" []
                          ]
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_reconstruct_unit :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "reconstruct_unit" (reconstruct_unit F).
      
      (*
          fn reconstruct_units(mut us: BTreeMap<ProveExpressionUnit, u32>) -> Self {
              let u = us.pop_first().unwrap();
      
              let mut l = Self::reconstruct_unit(u.0, u.1);
      
              for (u, c) in us {
                  for _ in 0..c {
                      l = Self::Op(Box::new(l), Box::new(Self::Unit(u.clone())), Bop::Product);
                  }
              }
      
              l
          }
      *)
      Definition reconstruct_units (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ us ] =>
          ltac:(M.monadic
            (let us := M.alloc (| us |) in
            M.read (|
              let u :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        [
                          Ty.tuple
                            [
                              Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                              Ty.path "u32"
                            ]
                        ],
                      "unwrap",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                            [
                              Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                              Ty.path "u32";
                              Ty.path "alloc::alloc::Global"
                            ],
                          "pop_first",
                          []
                        |),
                        [ us ]
                      |)
                    ]
                  |)
                |) in
              let l :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                        [ F ],
                      "reconstruct_unit",
                      []
                    |),
                    [
                      M.read (| M.SubPointer.get_tuple_field (| u, 0 |) |);
                      M.read (| M.SubPointer.get_tuple_field (| u, 1 |) |)
                    ]
                  |)
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                            [
                              Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                              Ty.path "u32";
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          "into_iter",
                          []
                        |),
                        [ M.read (| us |) ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "alloc::collections::btree::map::IntoIter")
                                          [
                                            Ty.path
                                              "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                            Ty.path "u32";
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                        let u := M.copy (| γ1_0 |) in
                                        let c := M.copy (| γ1_1 |) in
                                        M.use
                                          (M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    [ Ty.path "u32" ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [
                                                  Value.StructRecord
                                                    "core::ops::range::Range"
                                                    [
                                                      ("start", Value.Integer 0);
                                                      ("end_", M.read (| c |))
                                                    ]
                                                ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let iter := M.copy (| γ |) in
                                                  M.loop (|
                                                    ltac:(M.monadic
                                                      (let _ :=
                                                        M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::ops::range::Range")
                                                                  [ Ty.path "u32" ],
                                                                [],
                                                                "next",
                                                                []
                                                              |),
                                                              [ iter ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (| M.break (||) |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::option::Option::Some",
                                                                    0
                                                                  |) in
                                                                let _ :=
                                                                  M.write (|
                                                                    l,
                                                                    Value.StructTuple
                                                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op"
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::boxed::Box")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                                                  [ F ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            "new",
                                                                            []
                                                                          |),
                                                                          [ M.read (| l |) ]
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::boxed::Box")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                                                  [ F ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            "new",
                                                                            []
                                                                          |),
                                                                          [
                                                                            Value.StructTuple
                                                                              "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Unit"
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::clone::Clone",
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit",
                                                                                    [],
                                                                                    "clone",
                                                                                    []
                                                                                  |),
                                                                                  [ u ]
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |);
                                                                        Value.StructTuple
                                                                          "halo2_proofs::plonk::evaluation_gpu::Bop::Product"
                                                                          []
                                                                      ]
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                  |)))
                                            ]
                                          |))))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              l
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_reconstruct_units :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "reconstruct_units" (reconstruct_units F).
      
      (*
          fn reconstruct_units_coeff(
              us: BTreeMap<ProveExpressionUnit, u32>,
              coeff: BTreeMap<u32, F>,
          ) -> Self {
              let res = if us.len() == 0 {
                  Self::reconstruct_coeff(coeff)
              } else {
                  Self::Scale(Box::new(Self::reconstruct_units(us)), coeff)
              };
      
              assert!(res.get_r_deep() <= 1);
              res
          }
      *)
      Definition reconstruct_units_coeff (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ us; coeff ] =>
          ltac:(M.monadic
            (let us := M.alloc (| us |) in
            let coeff := M.alloc (| coeff |) in
            M.read (|
              let res :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.Pure.eq
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                                        [
                                          Ty.path
                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                          Ty.path "u32";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "len",
                                      []
                                    |),
                                    [ us ]
                                  |))
                                  (Value.Integer 0)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                  [ F ],
                                "reconstruct_coeff",
                                []
                              |),
                              [ M.read (| coeff |) ]
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.StructTuple
                              "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Scale"
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "new",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                          [ F ],
                                        "reconstruct_units",
                                        []
                                      |),
                                      [ M.read (| us |) ]
                                    |)
                                  ]
                                |);
                                M.read (| coeff |)
                              ]
                          |)))
                    ]
                  |)
                |) in
              let _ :=
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.Pure.not
                                (BinOp.Pure.le
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                        [ F ],
                                      "get_r_deep",
                                      []
                                    |),
                                    [ res ]
                                  |))
                                  (Value.Integer 1))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              M.get_function (| "core::panicking::panic", [] |),
                              [ M.read (| Value.String "assertion failed: res.get_r_deep() <= 1" |)
                              ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              res
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_reconstruct_units_coeff :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "reconstruct_units_coeff" (reconstruct_units_coeff F).
      
      (*
          fn reconstruct_tree(
              mut tree: Vec<(BTreeMap<ProveExpressionUnit, u32>, BTreeMap<u32, F>)>,
              r_deep_limit: u32,
          ) -> Self {
              if tree.len() == 1 {
                  let u = tree.pop().unwrap();
                  return Self::reconstruct_units_coeff(u.0, u.1);
              }
      
              if r_deep_limit > 2 {
                  // find max
                  let mut map = BTreeMap::new();
      
                  for (us, _) in tree.iter() {
                      for (u, _) in us {
                          if let Some(c) = map.get_mut(u) {
                              *c = *c + 1;
                          } else {
                              map.insert(u, 1);
                          }
                      }
                  }
      
                  let mut max_u = ( *map.first_entry().unwrap().key()).clone();
                  let mut max_c = 0;
      
                  for (u, c) in map {
                      if c > max_c {
                          max_c = c;
                          max_u = u.clone();
                      }
                  }
      
                  if max_c > 1 {
                      let mut picked = vec![];
                      let mut other = vec![];
      
                      for (mut k, v) in tree {
                          let c = k.remove(&max_u);
                          match c {
                              Some(1) => {
                                  picked.push((k, v));
                              }
                              Some(c) => {
                                  k.insert(max_u.clone(), c - 1);
                                  picked.push((k, v));
                              }
                              None => {
                                  other.push((k, v));
                              }
                          }
                      }
      
                      let picked = Self::reconstruct_tree(picked, r_deep_limit - 1);
                      let mut r = Self::Op(Box::new(picked), Box::new(Self::Unit(max_u)), Bop::Product);
      
                      if other.len() > 0 {
                          r = Self::Op(
                              Box::new(Self::reconstruct_tree(other, r_deep_limit)),
                              Box::new(r),
                              Bop::Sum,
                          );
                      }
      
                      return r;
                  }
              }
      
              return tree
                  .into_iter()
                  .map(|(k, ys)| Self::reconstruct_units_coeff(k, ys))
                  .reduce(|acc, x| Self::Op(Box::new(acc), Box::new(x), Bop::Sum))
                  .unwrap();
          }
      *)
      Definition reconstruct_tree (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ tree; r_deep_limit ] =>
          ltac:(M.monadic
            (let tree := M.alloc (| tree |) in
            let r_deep_limit := M.alloc (| r_deep_limit |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.never_to_any (|
                  M.read (|
                    let _ :=
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    BinOp.Pure.eq
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "alloc::collections::btree::map::BTreeMap")
                                                    [
                                                      Ty.path
                                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                      Ty.path "u32";
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "alloc::collections::btree::map::BTreeMap")
                                                    [
                                                      Ty.path "u32";
                                                      F;
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "len",
                                          []
                                        |),
                                        [ tree ]
                                      |))
                                      (Value.Integer 1)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    let u :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "alloc::collections::btree::map::BTreeMap")
                                                      [
                                                        Ty.path
                                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                        Ty.path "u32";
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "alloc::collections::btree::map::BTreeMap")
                                                      [
                                                        Ty.path "u32";
                                                        F;
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ],
                                            "unwrap",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::collections::btree::map::BTreeMap")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                            Ty.path "u32";
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::collections::btree::map::BTreeMap")
                                                          [
                                                            Ty.path "u32";
                                                            F;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "pop",
                                                []
                                              |),
                                              [ tree ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                            [ F ],
                                          "reconstruct_units_coeff",
                                          []
                                        |),
                                        [
                                          M.read (| M.SubPointer.get_tuple_field (| u, 0 |) |);
                                          M.read (| M.SubPointer.get_tuple_field (| u, 1 |) |)
                                        ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let _ :=
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    BinOp.Pure.gt (M.read (| r_deep_limit |)) (Value.Integer 2)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              let map :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.path
                                                "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit"
                                            ];
                                          Ty.path "i32";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "new",
                                      []
                                    |),
                                    []
                                  |)
                                |) in
                              let _ :=
                                M.use
                                  (M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::collect::IntoIterator",
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "alloc::collections::btree::map::BTreeMap")
                                                    [
                                                      Ty.path
                                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                      Ty.path "u32";
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "alloc::collections::btree::map::BTreeMap")
                                                    [
                                                      Ty.path "u32";
                                                      F;
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ]
                                            ],
                                          [],
                                          "into_iter",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "slice")
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloc::collections::btree::map::BTreeMap")
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                          Ty.path "u32";
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloc::collections::btree::map::BTreeMap")
                                                        [
                                                          Ty.path "u32";
                                                          F;
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ],
                                              "iter",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloc::collections::btree::map::BTreeMap")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                              Ty.path "u32";
                                                              Ty.path "alloc::alloc::Global"
                                                            ];
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloc::collections::btree::map::BTreeMap")
                                                            [
                                                              Ty.path "u32";
                                                              F;
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [ tree ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let iter := M.copy (| γ |) in
                                          M.loop (|
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloc::collections::btree::map::BTreeMap")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                    Ty.path "u32";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloc::collections::btree::map::BTreeMap")
                                                                  [
                                                                    Ty.path "u32";
                                                                    F;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                          ],
                                                        [],
                                                        "next",
                                                        []
                                                      |),
                                                      [ iter ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (| M.break (||) |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::option::Option::Some",
                                                            0
                                                          |) in
                                                        let γ0_0 := M.read (| γ0_0 |) in
                                                        let γ2_0 :=
                                                          M.SubPointer.get_tuple_field (|
                                                            γ0_0,
                                                            0
                                                          |) in
                                                        let γ2_1 :=
                                                          M.SubPointer.get_tuple_field (|
                                                            γ0_0,
                                                            1
                                                          |) in
                                                        let us := M.alloc (| γ2_0 |) in
                                                        M.use
                                                          (M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::collect::IntoIterator",
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::collections::btree::map::BTreeMap")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                          Ty.path "u32";
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ],
                                                                  [],
                                                                  "into_iter",
                                                                  []
                                                                |),
                                                                [ M.read (| us |) ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let iter := M.copy (| γ |) in
                                                                  M.loop (|
                                                                    ltac:(M.monadic
                                                                      (let _ :=
                                                                        M.match_operator (|
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::iter::traits::iterator::Iterator",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::collections::btree::map::Iter")
                                                                                  [
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                    Ty.path "u32"
                                                                                  ],
                                                                                [],
                                                                                "next",
                                                                                []
                                                                              |),
                                                                              [ iter ]
                                                                            |)
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (M.alloc (|
                                                                                  M.never_to_any (|
                                                                                    M.read (|
                                                                                      M.break (||)
                                                                                    |)
                                                                                  |)
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ0_0 :=
                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                    γ,
                                                                                    "core::option::Option::Some",
                                                                                    0
                                                                                  |) in
                                                                                let γ1_0 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ0_0,
                                                                                    0
                                                                                  |) in
                                                                                let γ1_1 :=
                                                                                  M.SubPointer.get_tuple_field (|
                                                                                    γ0_0,
                                                                                    1
                                                                                  |) in
                                                                                let u :=
                                                                                  M.copy (|
                                                                                    γ1_0
                                                                                  |) in
                                                                                M.match_operator (|
                                                                                  M.alloc (|
                                                                                    Value.Tuple []
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ :=
                                                                                          M.alloc (|
                                                                                            M.call_closure (|
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::collections::btree::map::BTreeMap")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit"
                                                                                                      ];
                                                                                                    Ty.path
                                                                                                      "i32";
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ],
                                                                                                "get_mut",
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit"
                                                                                                ]
                                                                                              |),
                                                                                              [
                                                                                                map;
                                                                                                M.read (|
                                                                                                  u
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |) in
                                                                                        let γ0_0 :=
                                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                                            γ,
                                                                                            "core::option::Option::Some",
                                                                                            0
                                                                                          |) in
                                                                                        let c :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        let _ :=
                                                                                          M.write (|
                                                                                            M.read (|
                                                                                              c
                                                                                            |),
                                                                                            BinOp.Panic.add (|
                                                                                              Integer.I32,
                                                                                              M.read (|
                                                                                                M.read (|
                                                                                                  c
                                                                                                |)
                                                                                              |),
                                                                                              Value.Integer
                                                                                                1
                                                                                            |)
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          Value.Tuple
                                                                                            []
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let _ :=
                                                                                          M.alloc (|
                                                                                            M.call_closure (|
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::collections::btree::map::BTreeMap")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit"
                                                                                                      ];
                                                                                                    Ty.path
                                                                                                      "i32";
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ],
                                                                                                "insert",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                map;
                                                                                                M.read (|
                                                                                                  u
                                                                                                |);
                                                                                                Value.Integer
                                                                                                  1
                                                                                              ]
                                                                                            |)
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          Value.Tuple
                                                                                            []
                                                                                        |)))
                                                                                  ]
                                                                                |)))
                                                                          ]
                                                                        |) in
                                                                      M.alloc (| Value.Tuple [] |)))
                                                                  |)))
                                                            ]
                                                          |))))
                                                  ]
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                          |)))
                                    ]
                                  |)) in
                              let max_u :=
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit",
                                      [],
                                      "clone",
                                      []
                                    |),
                                    [
                                      M.read (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "alloc::collections::btree::map::entry::OccupiedEntry")
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.path
                                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit"
                                                  ];
                                                Ty.path "i32";
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "key",
                                            []
                                          |),
                                          [
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloc::collections::btree::map::entry::OccupiedEntry")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit"
                                                            ];
                                                          Ty.path "i32";
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  "unwrap",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloc::collections::btree::map::BTreeMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit"
                                                            ];
                                                          Ty.path "i32";
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "first_entry",
                                                      []
                                                    |),
                                                    [ map ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    ]
                                  |)
                                |) in
                              let max_c := M.alloc (| Value.Integer 0 |) in
                              let _ :=
                                M.use
                                  (M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::collect::IntoIterator",
                                          Ty.apply
                                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.path
                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit"
                                                ];
                                              Ty.path "i32";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "into_iter",
                                          []
                                        |),
                                        [ M.read (| map |) ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let iter := M.copy (| γ |) in
                                          M.loop (|
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::collections::btree::map::IntoIter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit"
                                                              ];
                                                            Ty.path "i32";
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        "next",
                                                        []
                                                      |),
                                                      [ iter ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (| M.break (||) |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::option::Option::Some",
                                                            0
                                                          |) in
                                                        let γ1_0 :=
                                                          M.SubPointer.get_tuple_field (|
                                                            γ0_0,
                                                            0
                                                          |) in
                                                        let γ1_1 :=
                                                          M.SubPointer.get_tuple_field (|
                                                            γ0_0,
                                                            1
                                                          |) in
                                                        let u := M.copy (| γ1_0 |) in
                                                        let c := M.copy (| γ1_1 |) in
                                                        M.match_operator (|
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      BinOp.Pure.gt
                                                                        (M.read (| c |))
                                                                        (M.read (| max_c |))
                                                                    |)) in
                                                                let _ :=
                                                                  M.is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                let _ :=
                                                                  M.write (|
                                                                    max_c,
                                                                    M.read (| c |)
                                                                  |) in
                                                                let _ :=
                                                                  M.write (|
                                                                    max_u,
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::clone::Clone",
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit",
                                                                        [],
                                                                        "clone",
                                                                        []
                                                                      |),
                                                                      [ M.read (| u |) ]
                                                                    |)
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |)))
                                                  ]
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                          |)))
                                    ]
                                  |)) in
                              M.match_operator (|
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            BinOp.Pure.gt (M.read (| max_c |)) (Value.Integer 1)
                                          |)) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            let picked :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloc::collections::btree::map::BTreeMap")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                Ty.path "u32";
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloc::collections::btree::map::BTreeMap")
                                                              [
                                                                Ty.path "u32";
                                                                F;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |) in
                                            let other :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloc::collections::btree::map::BTreeMap")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                Ty.path "u32";
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloc::collections::btree::map::BTreeMap")
                                                              [
                                                                Ty.path "u32";
                                                                F;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |) in
                                            let _ :=
                                              M.use
                                                (M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::collect::IntoIterator",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloc::collections::btree::map::BTreeMap")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                    Ty.path "u32";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloc::collections::btree::map::BTreeMap")
                                                                  [
                                                                    Ty.path "u32";
                                                                    F;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        "into_iter",
                                                        []
                                                      |),
                                                      [ M.read (| tree |) ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let iter := M.copy (| γ |) in
                                                        M.loop (|
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.match_operator (|
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::vec::into_iter::IntoIter")
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::collections::btree::map::BTreeMap")
                                                                                [
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                  Ty.path "u32";
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ];
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::collections::btree::map::BTreeMap")
                                                                                [
                                                                                  Ty.path "u32";
                                                                                  F;
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      "next",
                                                                      []
                                                                    |),
                                                                    [ iter ]
                                                                  |)
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.alloc (|
                                                                        M.never_to_any (|
                                                                          M.read (| M.break (||) |)
                                                                        |)
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                          γ,
                                                                          "core::option::Option::Some",
                                                                          0
                                                                        |) in
                                                                      let γ1_0 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ0_0,
                                                                          0
                                                                        |) in
                                                                      let γ1_1 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ0_0,
                                                                          1
                                                                        |) in
                                                                      let k := M.copy (| γ1_0 |) in
                                                                      let v := M.copy (| γ1_1 |) in
                                                                      let c :=
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_associated_function (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::collections::btree::map::BTreeMap")
                                                                                [
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                  Ty.path "u32";
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              "remove",
                                                                              [
                                                                                Ty.path
                                                                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit"
                                                                              ]
                                                                            |),
                                                                            [ k; max_u ]
                                                                          |)
                                                                        |) in
                                                                      M.match_operator (|
                                                                        c,
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ0_0 :=
                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                  γ,
                                                                                  "core::option::Option::Some",
                                                                                  0
                                                                                |) in
                                                                              let _ :=
                                                                                M.is_constant_or_break_match (|
                                                                                  M.read (| γ0_0 |),
                                                                                  Value.Integer 1
                                                                                |) in
                                                                              let _ :=
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::collections::btree::map::BTreeMap")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                                  Ty.path
                                                                                                    "u32";
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ];
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::collections::btree::map::BTreeMap")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "u32";
                                                                                                  F;
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ]
                                                                                            ];
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      "push",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      picked;
                                                                                      Value.Tuple
                                                                                        [
                                                                                          M.read (|
                                                                                            k
                                                                                          |);
                                                                                          M.read (|
                                                                                            v
                                                                                          |)
                                                                                        ]
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ0_0 :=
                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                  γ,
                                                                                  "core::option::Option::Some",
                                                                                  0
                                                                                |) in
                                                                              let c :=
                                                                                M.copy (| γ0_0 |) in
                                                                              let _ :=
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::collections::btree::map::BTreeMap")
                                                                                        [
                                                                                          Ty.path
                                                                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                          Ty.path
                                                                                            "u32";
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      "insert",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      k;
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::clone::Clone",
                                                                                          Ty.path
                                                                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit",
                                                                                          [],
                                                                                          "clone",
                                                                                          []
                                                                                        |),
                                                                                        [ max_u ]
                                                                                      |);
                                                                                      BinOp.Panic.sub (|
                                                                                        Integer.U32,
                                                                                        M.read (|
                                                                                          c
                                                                                        |),
                                                                                        Value.Integer
                                                                                          1
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              let _ :=
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::collections::btree::map::BTreeMap")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                                  Ty.path
                                                                                                    "u32";
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ];
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::collections::btree::map::BTreeMap")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "u32";
                                                                                                  F;
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ]
                                                                                            ];
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      "push",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      picked;
                                                                                      Value.Tuple
                                                                                        [
                                                                                          M.read (|
                                                                                            k
                                                                                          |);
                                                                                          M.read (|
                                                                                            v
                                                                                          |)
                                                                                        ]
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let _ :=
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::collections::btree::map::BTreeMap")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                                  Ty.path
                                                                                                    "u32";
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ];
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::collections::btree::map::BTreeMap")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "u32";
                                                                                                  F;
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ]
                                                                                            ];
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      "push",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      other;
                                                                                      Value.Tuple
                                                                                        [
                                                                                          M.read (|
                                                                                            k
                                                                                          |);
                                                                                          M.read (|
                                                                                            v
                                                                                          |)
                                                                                        ]
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |)))
                                                                        ]
                                                                      |)))
                                                                ]
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                        |)))
                                                  ]
                                                |)) in
                                            let picked :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                      [ F ],
                                                    "reconstruct_tree",
                                                    []
                                                  |),
                                                  [
                                                    M.read (| picked |);
                                                    BinOp.Panic.sub (|
                                                      Integer.U32,
                                                      M.read (| r_deep_limit |),
                                                      Value.Integer 1
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let r :=
                                              M.alloc (|
                                                Value.StructTuple
                                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op"
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::boxed::Box")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                              [ F ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "new",
                                                        []
                                                      |),
                                                      [ M.read (| picked |) ]
                                                    |);
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::boxed::Box")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                              [ F ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "new",
                                                        []
                                                      |),
                                                      [
                                                        Value.StructTuple
                                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Unit"
                                                          [ M.read (| max_u |) ]
                                                      ]
                                                    |);
                                                    Value.StructTuple
                                                      "halo2_proofs::plonk::evaluation_gpu::Bop::Product"
                                                      []
                                                  ]
                                              |) in
                                            let _ :=
                                              M.match_operator (|
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            BinOp.Pure.gt
                                                              (M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::collections::btree::map::BTreeMap")
                                                                            [
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                              Ty.path "u32";
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::collections::btree::map::BTreeMap")
                                                                            [
                                                                              Ty.path "u32";
                                                                              F;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  "len",
                                                                  []
                                                                |),
                                                                [ other ]
                                                              |))
                                                              (Value.Integer 0)
                                                          |)) in
                                                      let _ :=
                                                        M.is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      let _ :=
                                                        M.write (|
                                                          r,
                                                          Value.StructTuple
                                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op"
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                                        [ F ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  "new",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                                        [ F ],
                                                                      "reconstruct_tree",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| other |);
                                                                      M.read (| r_deep_limit |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                                        [ F ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  "new",
                                                                  []
                                                                |),
                                                                [ M.read (| r |) ]
                                                              |);
                                                              Value.StructTuple
                                                                "halo2_proofs::plonk::evaluation_gpu::Bop::Sum"
                                                                []
                                                            ]
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)));
                                                  fun γ =>
                                                    ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            M.return_ (| M.read (| r |) |)
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    M.return_ (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                [ F ]
                            ],
                          "unwrap",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                                            [
                                              Ty.path
                                                "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                              Ty.path "u32";
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.apply
                                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                                            [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                                [
                                                  Ty.path
                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                  Ty.path "u32";
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.apply
                                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                                [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ])
                                ],
                              [],
                              "reduce",
                              [
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                          [ F ];
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                          [ F ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                    [ F ])
                              ]
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                                            [
                                              Ty.path
                                                "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                              Ty.path "u32";
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.apply
                                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                                            [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "map",
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                      [ F ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "alloc::collections::btree::map::BTreeMap")
                                                  [
                                                    Ty.path
                                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                    Ty.path "u32";
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.apply
                                                  (Ty.path
                                                    "alloc::collections::btree::map::BTreeMap")
                                                  [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path
                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                        [ F ])
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::collect::IntoIterator",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                                [
                                                  Ty.path
                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                  Ty.path "u32";
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.apply
                                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                                [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      "into_iter",
                                      []
                                    |),
                                    [ M.read (| tree |) ]
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                  let γ0_1 :=
                                                    M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                  let k := M.copy (| γ0_0 |) in
                                                  let ys := M.copy (| γ0_1 |) in
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                        [ F ],
                                                      "reconstruct_units_coeff",
                                                      []
                                                    |),
                                                    [ M.read (| k |); M.read (| ys |) ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0; α1 ] =>
                                      M.match_operator (|
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let acc := M.copy (| γ |) in
                                              M.match_operator (|
                                                M.alloc (| α1 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let x := M.copy (| γ |) in
                                                      Value.StructTuple
                                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op"
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                                    [ F ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [ M.read (| acc |) ]
                                                          |);
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::boxed::Box")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                                    [ F ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "new",
                                                              []
                                                            |),
                                                            [ M.read (| x |) ]
                                                          |);
                                                          Value.StructTuple
                                                            "halo2_proofs::plonk::evaluation_gpu::Bop::Sum"
                                                            []
                                                        ]))
                                                ]
                                              |)))
                                        ]
                                      |)
                                    | _ => M.impossible (||)
                                    end))
                            ]
                          |)
                        ]
                      |)
                    |)
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_reconstruct_tree :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "reconstruct_tree" (reconstruct_tree F).
      
      (*
          pub(crate) fn reconstruct(tree: &[(Vec<ProveExpressionUnit>, BTreeMap<u32, F>)]) -> Self {
              let tree = tree
                  .into_iter()
                  .map(|(us, v)| {
                      let mut map = BTreeMap::new();
                      for u in us {
                          if let Some(c) = map.get_mut(u) {
                              *c = *c + 1;
                          } else {
                              map.insert(u.clone(), 1);
                          }
                      }
                      (map, v.clone())
                  })
                  .collect();
      
              let r_deep = std::env::var("HALO2_PROOF_GPU_EVAL_R_DEEP").unwrap_or("6".to_owned());
              let r_deep = u32::from_str_radix(&r_deep, 10).expect("Invalid HALO2_PROOF_GPU_EVAL_R_DEEP");
              Self::reconstruct_tree(tree, r_deep)
          }
      *)
      Definition reconstruct (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ tree ] =>
          ltac:(M.monadic
            (let tree := M.alloc (| tree |) in
            M.read (|
              let tree :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.apply
                                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                                    [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                                ]
                            ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.path
                                                "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.apply
                                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                                            [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                                        ]
                                    ]
                                ]
                            ]
                            (Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                                  [
                                    Ty.path
                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                    Ty.path "u32";
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.apply
                                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                                  [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                              ])
                        ],
                      [],
                      "collect",
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                                  [
                                    Ty.path
                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                    Ty.path "u32";
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.apply
                                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                                  [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.apply
                                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                                    [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                                ]
                            ],
                          [],
                          "map",
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                                  [
                                    Ty.path
                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                    Ty.path "u32";
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.apply
                                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                                  [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path
                                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.apply
                                              (Ty.path "alloc::collections::btree::map::BTreeMap")
                                              [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                                          ]
                                      ]
                                  ]
                              ]
                              (Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                                    [
                                      Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                      Ty.path "u32";
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.apply
                                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                                    [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                                ])
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "&")
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.path
                                                "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.apply
                                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                                            [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                                        ]
                                    ]
                                ],
                              [],
                              "into_iter",
                              []
                            |),
                            [ M.read (| tree |) ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ := M.read (| γ |) in
                                          let γ1_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ1_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let us := M.alloc (| γ1_0 |) in
                                          let v := M.alloc (| γ1_1 |) in
                                          M.read (|
                                            let map :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "alloc::collections::btree::map::BTreeMap")
                                                      [
                                                        Ty.path
                                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                        Ty.path "u32";
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |) in
                                            let _ :=
                                              M.use
                                                (M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::collect::IntoIterator",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ],
                                                        [],
                                                        "into_iter",
                                                        []
                                                      |),
                                                      [ M.read (| us |) ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let iter := M.copy (| γ |) in
                                                        M.loop (|
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.match_operator (|
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit"
                                                                        ],
                                                                      [],
                                                                      "next",
                                                                      []
                                                                    |),
                                                                    [ iter ]
                                                                  |)
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.alloc (|
                                                                        M.never_to_any (|
                                                                          M.read (| M.break (||) |)
                                                                        |)
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                          γ,
                                                                          "core::option::Option::Some",
                                                                          0
                                                                        |) in
                                                                      let u := M.copy (| γ0_0 |) in
                                                                      M.match_operator (|
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ :=
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::collections::btree::map::BTreeMap")
                                                                                        [
                                                                                          Ty.path
                                                                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                          Ty.path
                                                                                            "u32";
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      "get_mut",
                                                                                      [
                                                                                        Ty.path
                                                                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit"
                                                                                      ]
                                                                                    |),
                                                                                    [
                                                                                      map;
                                                                                      M.read (| u |)
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              let γ0_0 :=
                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                  γ,
                                                                                  "core::option::Option::Some",
                                                                                  0
                                                                                |) in
                                                                              let c :=
                                                                                M.copy (| γ0_0 |) in
                                                                              let _ :=
                                                                                M.write (|
                                                                                  M.read (| c |),
                                                                                  BinOp.Panic.add (|
                                                                                    Integer.U32,
                                                                                    M.read (|
                                                                                      M.read (| c |)
                                                                                    |),
                                                                                    Value.Integer 1
                                                                                  |)
                                                                                |) in
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let _ :=
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::collections::btree::map::BTreeMap")
                                                                                        [
                                                                                          Ty.path
                                                                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                          Ty.path
                                                                                            "u32";
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      "insert",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      map;
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::clone::Clone",
                                                                                          Ty.path
                                                                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit",
                                                                                          [],
                                                                                          "clone",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            u
                                                                                          |)
                                                                                        ]
                                                                                      |);
                                                                                      Value.Integer
                                                                                        1
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |)))
                                                                        ]
                                                                      |)))
                                                                ]
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                        |)))
                                                  ]
                                                |)) in
                                            M.alloc (|
                                              Value.Tuple
                                                [
                                                  M.read (| map |);
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::clone::Clone",
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloc::collections::btree::map::BTreeMap")
                                                        [
                                                          Ty.path "u32";
                                                          F;
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      "clone",
                                                      []
                                                    |),
                                                    [ M.read (| v |) ]
                                                  |)
                                                ]
                                            |)
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    ]
                  |)
                |) in
              let r_deep :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [ Ty.path "alloc::string::String"; Ty.path "std::env::VarError" ],
                      "unwrap_or",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_function (|
                          "std::env::var",
                          [ Ty.apply (Ty.path "&") [ Ty.path "str" ] ]
                        |),
                        [ M.read (| Value.String "HALO2_PROOF_GPU_EVAL_R_DEEP" |) ]
                      |);
                      M.call_closure (|
                        M.get_trait_method (|
                          "alloc::borrow::ToOwned",
                          Ty.path "str",
                          [],
                          "to_owned",
                          []
                        |),
                        [ M.read (| Value.String "6" |) ]
                      |)
                    ]
                  |)
                |) in
              let r_deep :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [ Ty.path "u32"; Ty.path "core::num::error::ParseIntError" ],
                      "expect",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (| Ty.path "u32", "from_str_radix", [] |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.path "alloc::string::String",
                              [],
                              "deref",
                              []
                            |),
                            [ r_deep ]
                          |);
                          Value.Integer 10
                        ]
                      |);
                      M.read (| Value.String "Invalid HALO2_PROOF_GPU_EVAL_R_DEEP" |)
                    ]
                  |)
                |) in
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression") [ F ],
                    "reconstruct_tree",
                    []
                  |),
                  [ M.read (| tree |); M.read (| r_deep |) ]
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_reconstruct :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "reconstruct" (reconstruct F).
      
      (*
          pub(crate) fn get_complexity(&self) -> ComplexityProfiler {
              match self {
                  ProveExpression::Unit(u) => ComplexityProfiler {
                      mul: 0,
                      sum: 0,
                      scale: 0,
                      unit: 1,
                      y: 0,
                      ref_cnt: HashMap::from_iter(vec![(u.get_group(), 1)]),
                  },
                  ProveExpression::Op(l, r, op) => {
                      let mut l = l.get_complexity();
                      let r = r.get_complexity();
                      for (k, v) in r.ref_cnt {
                          if let Some(lv) = l.ref_cnt.get_mut(&k) {
                              *lv += v;
                          } else {
                              l.ref_cnt.insert(k, v);
                          }
                      }
                      l.scale += r.scale;
                      l.mul += r.mul;
                      l.sum += r.sum;
                      l.y += r.y;
                      l.unit += r.unit;
                      match op {
                          Bop::Sum => l.sum += 1,
                          Bop::Product => l.mul += 1,
                      };
                      l
                  }
                  ProveExpression::Y(_) => ComplexityProfiler {
                      mul: 0,
                      sum: 0,
                      scale: 0,
                      unit: 0,
                      y: 1,
                      ref_cnt: HashMap::from_iter(vec![]),
                  },
                  ProveExpression::Scale(l, _) => {
                      let mut l = l.get_complexity();
                      l.scale += 1;
                      l
                  }
              }
          }
      *)
      Definition get_complexity (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Unit",
                          0
                        |) in
                      let u := M.alloc (| γ1_0 |) in
                      M.alloc (|
                        Value.StructRecord
                          "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler"
                          [
                            ("mul", Value.Integer 0);
                            ("sum", Value.Integer 0);
                            ("scale", Value.Integer 0);
                            ("unit_", Value.Integer 1);
                            ("y", Value.Integer 0);
                            ("ref_cnt",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::FromIterator",
                                  Ty.apply
                                    (Ty.path "std::collections::hash::map::HashMap")
                                    [
                                      Ty.path "usize";
                                      Ty.path "u32";
                                      Ty.path "std::hash::random::RandomState"
                                    ],
                                  [ Ty.tuple [ Ty.path "usize"; Ty.path "u32" ] ],
                                  "from_iter",
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.tuple [ Ty.path "usize"; Ty.path "u32" ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        [ Ty.tuple [ Ty.path "usize"; Ty.path "u32" ] ],
                                      "into_vec",
                                      [ Ty.path "alloc::alloc::Global" ]
                                    |),
                                    [
                                      (* Unsize *)
                                      M.pointer_coercion
                                        (M.read (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::boxed::Box")
                                                [
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Ty.tuple [ Ty.path "usize"; Ty.path "u32" ] ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "new",
                                              []
                                            |),
                                            [
                                              M.alloc (|
                                                Value.Array
                                                  [
                                                    Value.Tuple
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.path
                                                              "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit",
                                                            "get_group",
                                                            []
                                                          |),
                                                          [ M.read (| u |) ]
                                                        |);
                                                        Value.Integer 1
                                                      ]
                                                  ]
                                              |)
                                            ]
                                          |)
                                        |))
                                    ]
                                  |)
                                ]
                              |))
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op",
                          1
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op",
                          2
                        |) in
                      let l := M.alloc (| γ1_0 |) in
                      let r := M.alloc (| γ1_1 |) in
                      let op := M.alloc (| γ1_2 |) in
                      let l :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                [ F ],
                              "get_complexity",
                              []
                            |),
                            [ M.read (| M.read (| l |) |) ]
                          |)
                        |) in
                      let r :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                [ F ],
                              "get_complexity",
                              []
                            |),
                            [ M.read (| M.read (| r |) |) ]
                          |)
                        |) in
                      let _ :=
                        M.use
                          (M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "std::collections::hash::map::HashMap")
                                    [
                                      Ty.path "usize";
                                      Ty.path "u32";
                                      Ty.path "std::hash::random::RandomState"
                                    ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      r,
                                      "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                                      "ref_cnt"
                                    |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "std::collections::hash::map::IntoIter")
                                                  [ Ty.path "usize"; Ty.path "u32" ],
                                                [],
                                                "next",
                                                []
                                              |),
                                              [ iter ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                let k := M.copy (| γ1_0 |) in
                                                let v := M.copy (| γ1_1 |) in
                                                M.match_operator (|
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "std::collections::hash::map::HashMap")
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.path "u32";
                                                                    Ty.path
                                                                      "std::hash::random::RandomState"
                                                                  ],
                                                                "get_mut",
                                                                [ Ty.path "usize" ]
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  l,
                                                                  "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                                                                  "ref_cnt"
                                                                |);
                                                                k
                                                              ]
                                                            |)
                                                          |) in
                                                        let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::option::Option::Some",
                                                            0
                                                          |) in
                                                        let lv := M.copy (| γ0_0 |) in
                                                        let _ :=
                                                          let β := M.read (| lv |) in
                                                          M.write (|
                                                            β,
                                                            BinOp.Panic.add (|
                                                              Integer.U32,
                                                              M.read (| β |),
                                                              M.read (| v |)
                                                            |)
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let _ :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "std::collections::hash::map::HashMap")
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.path "u32";
                                                                    Ty.path
                                                                      "std::hash::random::RandomState"
                                                                  ],
                                                                "insert",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  l,
                                                                  "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                                                                  "ref_cnt"
                                                                |);
                                                                M.read (| k |);
                                                                M.read (| v |)
                                                              ]
                                                            |)
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      let _ :=
                        let β :=
                          M.SubPointer.get_struct_record_field (|
                            l,
                            "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                            "scale"
                          |) in
                        M.write (|
                          β,
                          BinOp.Panic.add (|
                            Integer.Usize,
                            M.read (| β |),
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                r,
                                "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                                "scale"
                              |)
                            |)
                          |)
                        |) in
                      let _ :=
                        let β :=
                          M.SubPointer.get_struct_record_field (|
                            l,
                            "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                            "mul"
                          |) in
                        M.write (|
                          β,
                          BinOp.Panic.add (|
                            Integer.Usize,
                            M.read (| β |),
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                r,
                                "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                                "mul"
                              |)
                            |)
                          |)
                        |) in
                      let _ :=
                        let β :=
                          M.SubPointer.get_struct_record_field (|
                            l,
                            "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                            "sum"
                          |) in
                        M.write (|
                          β,
                          BinOp.Panic.add (|
                            Integer.Usize,
                            M.read (| β |),
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                r,
                                "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                                "sum"
                              |)
                            |)
                          |)
                        |) in
                      let _ :=
                        let β :=
                          M.SubPointer.get_struct_record_field (|
                            l,
                            "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                            "y"
                          |) in
                        M.write (|
                          β,
                          BinOp.Panic.add (|
                            Integer.Usize,
                            M.read (| β |),
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                r,
                                "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                                "y"
                              |)
                            |)
                          |)
                        |) in
                      let _ :=
                        let β :=
                          M.SubPointer.get_struct_record_field (|
                            l,
                            "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                            "unit"
                          |) in
                        M.write (|
                          β,
                          BinOp.Panic.add (|
                            Integer.Usize,
                            M.read (| β |),
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                r,
                                "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                                "unit"
                              |)
                            |)
                          |)
                        |) in
                      let _ :=
                        M.match_operator (|
                          op,
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.read (| γ |) in
                                let β :=
                                  M.SubPointer.get_struct_record_field (|
                                    l,
                                    "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                                    "sum"
                                  |) in
                                M.write (|
                                  β,
                                  BinOp.Panic.add (|
                                    Integer.Usize,
                                    M.read (| β |),
                                    Value.Integer 1
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.read (| γ |) in
                                let β :=
                                  M.SubPointer.get_struct_record_field (|
                                    l,
                                    "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                                    "mul"
                                  |) in
                                M.write (|
                                  β,
                                  BinOp.Panic.add (|
                                    Integer.Usize,
                                    M.read (| β |),
                                    Value.Integer 1
                                  |)
                                |)))
                          ]
                        |) in
                      l));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Y",
                          0
                        |) in
                      M.alloc (|
                        Value.StructRecord
                          "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler"
                          [
                            ("mul", Value.Integer 0);
                            ("sum", Value.Integer 0);
                            ("scale", Value.Integer 0);
                            ("unit_", Value.Integer 0);
                            ("y", Value.Integer 1);
                            ("ref_cnt",
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::FromIterator",
                                  Ty.apply
                                    (Ty.path "std::collections::hash::map::HashMap")
                                    [
                                      Ty.path "usize";
                                      Ty.path "u32";
                                      Ty.path "std::hash::random::RandomState"
                                    ],
                                  [ Ty.tuple [ Ty.path "usize"; Ty.path "u32" ] ],
                                  "from_iter",
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.tuple [ Ty.path "usize"; Ty.path "u32" ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.tuple [ Ty.path "usize"; Ty.path "u32" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "new",
                                      []
                                    |),
                                    []
                                  |)
                                ]
                              |))
                          ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Scale",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Scale",
                          1
                        |) in
                      let l := M.alloc (| γ1_0 |) in
                      let l :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                [ F ],
                              "get_complexity",
                              []
                            |),
                            [ M.read (| M.read (| l |) |) ]
                          |)
                        |) in
                      let _ :=
                        let β :=
                          M.SubPointer.get_struct_record_field (|
                            l,
                            "halo2_proofs::plonk::evaluation_gpu::ComplexityProfiler",
                            "scale"
                          |) in
                        M.write (|
                          β,
                          BinOp.Panic.add (| Integer.Usize, M.read (| β |), Value.Integer 1 |)
                        |) in
                      l))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_get_complexity :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "get_complexity" (get_complexity F).
      
      (*
          pub(crate) fn get_r_deep(&self) -> u32 {
              match self {
                  ProveExpression::Unit(_) => 0,
                  ProveExpression::Op(l, r, _) => {
                      let l = l.get_r_deep();
                      let r = r.get_r_deep();
                      u32::max(l, r + 1)
                  }
                  ProveExpression::Y(_) => 0,
                  ProveExpression::Scale(l, _) => {
                      let l = l.get_r_deep();
                      u32::max(l, 1)
                  }
              }
          }
      *)
      Definition get_r_deep (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Unit",
                          0
                        |) in
                      M.alloc (| Value.Integer 0 |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op",
                          1
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op",
                          2
                        |) in
                      let l := M.alloc (| γ1_0 |) in
                      let r := M.alloc (| γ1_1 |) in
                      let l :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                [ F ],
                              "get_r_deep",
                              []
                            |),
                            [ M.read (| M.read (| l |) |) ]
                          |)
                        |) in
                      let r :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                [ F ],
                              "get_r_deep",
                              []
                            |),
                            [ M.read (| M.read (| r |) |) ]
                          |)
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (| "core::cmp::Ord", Ty.path "u32", [], "max", [] |),
                          [
                            M.read (| l |);
                            BinOp.Panic.add (| Integer.U32, M.read (| r |), Value.Integer 1 |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Y",
                          0
                        |) in
                      M.alloc (| Value.Integer 0 |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.read (| γ |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Scale",
                          0
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Scale",
                          1
                        |) in
                      let l := M.alloc (| γ1_0 |) in
                      let l :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                [ F ],
                              "get_r_deep",
                              []
                            |),
                            [ M.read (| M.read (| l |) |) ]
                          |)
                        |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (| "core::cmp::Ord", Ty.path "u32", [], "max", [] |),
                          [ M.read (| l |); Value.Integer 1 ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_get_r_deep :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "get_r_deep" (get_r_deep F).
      
      (*
          fn ys_add_assign(l: &mut BTreeMap<u32, F>, r: BTreeMap<u32, F>) {
              for r in r {
                  if let Some(f) = l.get_mut(&r.0) {
                      *f = r.1 + &*f;
                  } else {
                      l.insert(r.0, r.1);
                  }
              }
          }
      *)
      Definition ys_add_assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ l; r ] =>
          ltac:(M.monadic
            (let l := M.alloc (| l |) in
            let r := M.alloc (| r |) in
            M.read (|
              M.use
                (M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ],
                        [],
                        "into_iter",
                        []
                      |),
                      [ M.read (| r |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          ltac:(M.monadic
                            (let _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "alloc::collections::btree::map::IntoIter")
                                        [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ],
                                      [],
                                      "next",
                                      []
                                    |),
                                    [ iter ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let r := M.copy (| γ0_0 |) in
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloc::collections::btree::map::BTreeMap")
                                                        [
                                                          Ty.path "u32";
                                                          F;
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "get_mut",
                                                      [ Ty.path "u32" ]
                                                    |),
                                                    [
                                                      M.read (| l |);
                                                      M.SubPointer.get_tuple_field (| r, 0 |)
                                                    ]
                                                  |)
                                                |) in
                                              let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let f := M.copy (| γ0_0 |) in
                                              let _ :=
                                                M.write (|
                                                  M.read (| f |),
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Add",
                                                      F,
                                                      [ Ty.apply (Ty.path "&") [ F ] ],
                                                      "add",
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        M.SubPointer.get_tuple_field (| r, 1 |)
                                                      |);
                                                      M.read (| f |)
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloc::collections::btree::map::BTreeMap")
                                                        [
                                                          Ty.path "u32";
                                                          F;
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "insert",
                                                      []
                                                    |),
                                                    [
                                                      M.read (| l |);
                                                      M.read (|
                                                        M.SubPointer.get_tuple_field (| r, 0 |)
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_tuple_field (| r, 1 |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_ys_add_assign :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "ys_add_assign" (ys_add_assign F).
      
      (*
          fn ys_mul(l: &BTreeMap<u32, F>, r: &BTreeMap<u32, F>) -> BTreeMap<u32, F> {
              let mut res = BTreeMap::new();
      
              for l in l {
                  for r in r {
                      let order = l.0 + r.0;
                      let f = *l.1 * r.1;
                      if let Some(origin_f) = res.get_mut(&order) {
                          *origin_f = f + &*origin_f;
                      } else {
                          res.insert(order, f);
                      }
                  }
              }
      
              res
          }
      *)
      Definition ys_mul (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ l; r ] =>
          ltac:(M.monadic
            (let l := M.alloc (| l |) in
            let r := M.alloc (| r |) in
            M.read (|
              let res :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "&")
                            [
                              Ty.apply
                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                            ],
                          [],
                          "into_iter",
                          []
                        |),
                        [ M.read (| l |) ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "alloc::collections::btree::map::Iter")
                                          [ Ty.path "u32"; F ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let l := M.copy (| γ0_0 |) in
                                        M.use
                                          (M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloc::collections::btree::map::BTreeMap")
                                                        [
                                                          Ty.path "u32";
                                                          F;
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [ M.read (| r |) ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let iter := M.copy (| γ |) in
                                                  M.loop (|
                                                    ltac:(M.monadic
                                                      (let _ :=
                                                        M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloc::collections::btree::map::Iter")
                                                                  [ Ty.path "u32"; F ],
                                                                [],
                                                                "next",
                                                                []
                                                              |),
                                                              [ iter ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (|
                                                                  M.never_to_any (|
                                                                    M.read (| M.break (||) |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::option::Option::Some",
                                                                    0
                                                                  |) in
                                                                let r := M.copy (| γ0_0 |) in
                                                                let order :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Add",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [ Ty.path "u32" ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [ Ty.path "u32" ]
                                                                        ],
                                                                        "add",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (|
                                                                          M.SubPointer.get_tuple_field (|
                                                                            l,
                                                                            0
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.SubPointer.get_tuple_field (|
                                                                            r,
                                                                            0
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                let f :=
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Mul",
                                                                        F,
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [ F ]
                                                                        ],
                                                                        "mul",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (|
                                                                          M.read (|
                                                                            M.SubPointer.get_tuple_field (|
                                                                              l,
                                                                              1
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.SubPointer.get_tuple_field (|
                                                                            r,
                                                                            1
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |) in
                                                                M.match_operator (|
                                                                  M.alloc (| Value.Tuple [] |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::collections::btree::map::BTreeMap")
                                                                                  [
                                                                                    Ty.path "u32";
                                                                                    F;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                "get_mut",
                                                                                [ Ty.path "u32" ]
                                                                              |),
                                                                              [ res; order ]
                                                                            |)
                                                                          |) in
                                                                        let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::option::Option::Some",
                                                                            0
                                                                          |) in
                                                                        let origin_f :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let _ :=
                                                                          M.write (|
                                                                            M.read (| origin_f |),
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Add",
                                                                                F,
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [ F ]
                                                                                ],
                                                                                "add",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| f |);
                                                                                M.read (|
                                                                                  origin_f
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let _ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::collections::btree::map::BTreeMap")
                                                                                  [
                                                                                    Ty.path "u32";
                                                                                    F;
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                "insert",
                                                                                []
                                                                              |),
                                                                              [
                                                                                res;
                                                                                M.read (| order |);
                                                                                M.read (| f |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |)))
                                                          ]
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                  |)))
                                            ]
                                          |))))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              res
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_ys_mul :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "ys_mul" (ys_mul F).
      
      (*
          pub fn flatten(self) -> BTreeMap<Vec<ProveExpressionUnit>, BTreeMap<u32, F>> {
              match self {
                  ProveExpression::Unit(u) => BTreeMap::from_iter(
                      vec![(
                          vec![u],
                          BTreeMap::from_iter(vec![(0, F::one())].into_iter()),
                      )]
                      .into_iter(),
                  ),
                  ProveExpression::Op(l, r, Bop::Sum) => {
                      let mut l = l.flatten();
                      let r = r.flatten();
      
                      for (rk, rys) in r.into_iter() {
                          if let Some(lys) = l.get_mut(&rk) {
                              Self::ys_add_assign(lys, rys);
                          } else {
                              l.insert(rk, rys);
                          }
                      }
                      l
                  }
                  ProveExpression::Op(l, r, Bop::Product) => {
                      let l = l.flatten();
                      let r = r.flatten();
      
                      let mut res = BTreeMap::new();
      
                      for (lk, lys) in l.into_iter() {
                          for (rk, rys) in r.clone().into_iter() {
                              let mut k = vec![lk.clone(), rk.clone()].concat();
                              k.sort();
                              let ys = Self::ys_mul(&lys, &rys);
                              if let Some(origin_ys) = res.get_mut(&k) {
                                  Self::ys_add_assign(origin_ys, ys);
                              } else {
                                  res.insert(k, ys);
                              }
                          }
                      }
                      res
                  }
                  ProveExpression::Y(ys) => BTreeMap::from_iter(vec![(vec![], ys)].into_iter()),
                  ProveExpression::Scale(x, ys) => {
                      // as Product
                      ProveExpression::Op(x, Box::new(ProveExpression::Y(ys)), Bop::Product).flatten()
                  }
              }
          }
      *)
      Definition flatten (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Unit",
                          0
                        |) in
                      let u := M.copy (| γ0_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::FromIterator",
                            Ty.apply
                              (Ty.path "alloc::collections::btree::map::BTreeMap")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path
                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.apply
                                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                                  [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.apply
                                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                                    [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                                ]
                            ],
                            "from_iter",
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.path
                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.apply
                                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                                        [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.path
                                              "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.apply
                                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                                          [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path
                                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.apply
                                              (Ty.path "alloc::collections::btree::map::BTreeMap")
                                              [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                                          ]
                                      ],
                                    "into_vec",
                                    [ Ty.path "alloc::alloc::Global" ]
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.read (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::boxed::Box")
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::collections::btree::map::BTreeMap")
                                                          [
                                                            Ty.path "u32";
                                                            F;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "new",
                                            []
                                          |),
                                          [
                                            M.alloc (|
                                              Value.Array
                                                [
                                                  Value.Tuple
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit"
                                                            ],
                                                          "into_vec",
                                                          [ Ty.path "alloc::alloc::Global" ]
                                                        |),
                                                        [
                                                          (* Unsize *)
                                                          M.pointer_coercion
                                                            (M.read (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  "new",
                                                                  []
                                                                |),
                                                                [
                                                                  M.alloc (|
                                                                    Value.Array [ M.read (| u |) ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |))
                                                        ]
                                                      |);
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::FromIterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloc::collections::btree::map::BTreeMap")
                                                            [
                                                              Ty.path "u32";
                                                              F;
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [ Ty.tuple [ Ty.path "u32"; F ] ],
                                                          "from_iter",
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloc::vec::into_iter::IntoIter")
                                                              [
                                                                Ty.tuple [ Ty.path "u32"; F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::collect::IntoIterator",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.tuple [ Ty.path "u32"; F ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              "into_iter",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [ Ty.tuple [ Ty.path "u32"; F ]
                                                                    ],
                                                                  "into_vec",
                                                                  [ Ty.path "alloc::alloc::Global" ]
                                                                |),
                                                                [
                                                                  (* Unsize *)
                                                                  M.pointer_coercion
                                                                    (M.read (|
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::boxed::Box")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "array")
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.path "u32";
                                                                                      F
                                                                                    ]
                                                                                ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          "new",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.alloc (|
                                                                            Value.Array
                                                                              [
                                                                                Value.Tuple
                                                                                  [
                                                                                    Value.Integer 0;
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "ff::Field",
                                                                                        F,
                                                                                        [],
                                                                                        "one",
                                                                                        []
                                                                                      |),
                                                                                      []
                                                                                    |)
                                                                                  ]
                                                                              ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |))
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                ]
                                            |)
                                          ]
                                        |)
                                      |))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op",
                          0
                        |) in
                      let γ0_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op",
                          1
                        |) in
                      let γ0_2 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op",
                          2
                        |) in
                      let l := M.copy (| γ0_0 |) in
                      let r := M.copy (| γ0_1 |) in
                      let l :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                [ F ],
                              "flatten",
                              []
                            |),
                            [ M.read (| M.read (| l |) |) ]
                          |)
                        |) in
                      let r :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                [ F ],
                              "flatten",
                              []
                            |),
                            [ M.read (| M.read (| r |) |) ]
                          |)
                        |) in
                      let _ :=
                        M.use
                          (M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "alloc::collections::btree::map::IntoIter")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.path
                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.apply
                                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                                        [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::collect::IntoIterator",
                                      Ty.apply
                                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.path
                                                "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.apply
                                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                                            [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      "into_iter",
                                      []
                                    |),
                                    [ M.read (| r |) ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path
                                                    "alloc::collections::btree::map::IntoIter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path
                                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "alloc::collections::btree::map::BTreeMap")
                                                      [
                                                        Ty.path "u32";
                                                        F;
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "next",
                                                []
                                              |),
                                              [ iter ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                let rk := M.copy (| γ1_0 |) in
                                                let rys := M.copy (| γ1_1 |) in
                                                M.match_operator (|
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloc::collections::btree::map::BTreeMap")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "alloc::collections::btree::map::BTreeMap")
                                                                      [
                                                                        Ty.path "u32";
                                                                        F;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                "get_mut",
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ]
                                                              |),
                                                              [ l; rk ]
                                                            |)
                                                          |) in
                                                        let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::option::Option::Some",
                                                            0
                                                          |) in
                                                        let lys := M.copy (| γ0_0 |) in
                                                        let _ :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                                  [ F ],
                                                                "ys_add_assign",
                                                                []
                                                              |),
                                                              [ M.read (| lys |); M.read (| rys |) ]
                                                            |)
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let _ :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloc::collections::btree::map::BTreeMap")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "alloc::collections::btree::map::BTreeMap")
                                                                      [
                                                                        Ty.path "u32";
                                                                        F;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                "insert",
                                                                []
                                                              |),
                                                              [ l; M.read (| rk |); M.read (| rys |)
                                                              ]
                                                            |)
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      l));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op",
                          0
                        |) in
                      let γ0_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op",
                          1
                        |) in
                      let γ0_2 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op",
                          2
                        |) in
                      let l := M.copy (| γ0_0 |) in
                      let r := M.copy (| γ0_1 |) in
                      let l :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                [ F ],
                              "flatten",
                              []
                            |),
                            [ M.read (| M.read (| l |) |) ]
                          |)
                        |) in
                      let r :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                [ F ],
                              "flatten",
                              []
                            |),
                            [ M.read (| M.read (| r |) |) ]
                          |)
                        |) in
                      let res :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.apply
                                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                                    [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              []
                            |),
                            []
                          |)
                        |) in
                      let _ :=
                        M.use
                          (M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "alloc::collections::btree::map::IntoIter")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.path
                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.apply
                                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                                        [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::collect::IntoIterator",
                                      Ty.apply
                                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.path
                                                "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.apply
                                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                                            [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      "into_iter",
                                      []
                                    |),
                                    [ M.read (| l |) ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let iter := M.copy (| γ |) in
                                  M.loop (|
                                    ltac:(M.monadic
                                      (let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path
                                                    "alloc::collections::btree::map::IntoIter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.path
                                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "alloc::collections::btree::map::BTreeMap")
                                                      [
                                                        Ty.path "u32";
                                                        F;
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "next",
                                                []
                                              |),
                                              [ iter ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.alloc (|
                                                  M.never_to_any (| M.read (| M.break (||) |) |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                let lk := M.copy (| γ1_0 |) in
                                                let lys := M.copy (| γ1_1 |) in
                                                M.use
                                                  (M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::IntoIterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloc::collections::btree::map::IntoIter")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.apply
                                                                (Ty.path
                                                                  "alloc::collections::btree::map::BTreeMap")
                                                                [
                                                                  Ty.path "u32";
                                                                  F;
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [],
                                                          "into_iter",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::collect::IntoIterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "alloc::collections::btree::map::BTreeMap")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "alloc::collections::btree::map::BTreeMap")
                                                                    [
                                                                      Ty.path "u32";
                                                                      F;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              "into_iter",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::clone::Clone",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "alloc::collections::btree::map::BTreeMap")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::collections::btree::map::BTreeMap")
                                                                        [
                                                                          Ty.path "u32";
                                                                          F;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "clone",
                                                                  []
                                                                |),
                                                                [ r ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let iter := M.copy (| γ |) in
                                                          M.loop (|
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::collections::btree::map::IntoIter")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              [
                                                                                Ty.path
                                                                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::collections::btree::map::BTreeMap")
                                                                              [
                                                                                Ty.path "u32";
                                                                                F;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [],
                                                                        "next",
                                                                        []
                                                                      |),
                                                                      [ iter ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (M.alloc (|
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.break (||)
                                                                            |)
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::option::Option::Some",
                                                                            0
                                                                          |) in
                                                                        let γ1_0 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ0_0,
                                                                            0
                                                                          |) in
                                                                        let γ1_1 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ0_0,
                                                                            1
                                                                          |) in
                                                                        let rk :=
                                                                          M.copy (| γ1_0 |) in
                                                                        let rys :=
                                                                          M.copy (| γ1_1 |) in
                                                                        let k :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      [
                                                                                        Ty.path
                                                                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ]
                                                                                  ],
                                                                                "concat",
                                                                                [
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit"
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::deref::Deref",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          [
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ];
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    [],
                                                                                    "deref",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "slice")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ]
                                                                                            ],
                                                                                          "into_vec",
                                                                                          [
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ]
                                                                                        |),
                                                                                        [
                                                                                          (* Unsize *)
                                                                                          M.pointer_coercion
                                                                                            (M.read (|
                                                                                              M.call_closure (|
                                                                                                M.get_associated_function (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::boxed::Box")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "array")
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "alloc::vec::Vec")
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                                              Ty.path
                                                                                                                "alloc::alloc::Global"
                                                                                                            ]
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  "new",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.alloc (|
                                                                                                    Value.Array
                                                                                                      [
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "core::clone::Clone",
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ],
                                                                                                            [],
                                                                                                            "clone",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            lk
                                                                                                          ]
                                                                                                        |);
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "core::clone::Clone",
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ],
                                                                                                            [],
                                                                                                            "clone",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            rk
                                                                                                          ]
                                                                                                        |)
                                                                                                      ]
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |))
                                                                                        ]
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        let _ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  [
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit"
                                                                                  ],
                                                                                "sort",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::deref::DerefMut",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      [
                                                                                        Ty.path
                                                                                          "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    [],
                                                                                    "deref_mut",
                                                                                    []
                                                                                  |),
                                                                                  [ k ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        let ys :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                                                  [ F ],
                                                                                "ys_mul",
                                                                                []
                                                                              |),
                                                                              [ lys; rys ]
                                                                            |)
                                                                          |) in
                                                                        M.match_operator (|
                                                                          M.alloc (|
                                                                            Value.Tuple []
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ :=
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::collections::btree::map::BTreeMap")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ];
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::collections::btree::map::BTreeMap")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "u32";
                                                                                                F;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ];
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        "get_mut",
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            [
                                                                                              Ty.path
                                                                                                "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ]
                                                                                        ]
                                                                                      |),
                                                                                      [ res; k ]
                                                                                    |)
                                                                                  |) in
                                                                                let γ0_0 :=
                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                    γ,
                                                                                    "core::option::Option::Some",
                                                                                    0
                                                                                  |) in
                                                                                let origin_ys :=
                                                                                  M.copy (|
                                                                                    γ0_0
                                                                                  |) in
                                                                                let _ :=
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                                                                          [ F ],
                                                                                        "ys_add_assign",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          origin_ys
                                                                                        |);
                                                                                        M.read (|
                                                                                          ys
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let _ :=
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::collections::btree::map::BTreeMap")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ];
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::collections::btree::map::BTreeMap")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "u32";
                                                                                                F;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ];
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        "insert",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        res;
                                                                                        M.read (|
                                                                                          k
                                                                                        |);
                                                                                        M.read (|
                                                                                          ys
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)))
                                                                          ]
                                                                        |)))
                                                                  ]
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                          |)))
                                                    ]
                                                  |))))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                  |)))
                            ]
                          |)) in
                      res));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Y",
                          0
                        |) in
                      let ys := M.copy (| γ0_0 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::FromIterator",
                            Ty.apply
                              (Ty.path "alloc::collections::btree::map::BTreeMap")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.path
                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.apply
                                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                                  [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.path
                                        "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.apply
                                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                                    [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                                ]
                            ],
                            "from_iter",
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.path
                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.apply
                                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                                        [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.path
                                              "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.apply
                                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                                          [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.path
                                                  "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.apply
                                              (Ty.path "alloc::collections::btree::map::BTreeMap")
                                              [ Ty.path "u32"; F; Ty.path "alloc::alloc::Global" ]
                                          ]
                                      ],
                                    "into_vec",
                                    [ Ty.path "alloc::alloc::Global" ]
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.read (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::boxed::Box")
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                            Ty.path "alloc::alloc::Global"
                                                          ];
                                                        Ty.apply
                                                          (Ty.path
                                                            "alloc::collections::btree::map::BTreeMap")
                                                          [
                                                            Ty.path "u32";
                                                            F;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "new",
                                            []
                                          |),
                                          [
                                            M.alloc (|
                                              Value.Array
                                                [
                                                  Value.Tuple
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::evaluation_gpu::ProveExpressionUnit";
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          "new",
                                                          []
                                                        |),
                                                        []
                                                      |);
                                                      M.read (| ys |)
                                                    ]
                                                ]
                                            |)
                                          ]
                                        |)
                                      |))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Scale",
                          0
                        |) in
                      let γ0_1 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Scale",
                          1
                        |) in
                      let x := M.copy (| γ0_0 |) in
                      let ys := M.copy (| γ0_1 |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                              [ F ],
                            "flatten",
                            []
                          |),
                          [
                            Value.StructTuple
                              "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Op"
                              [
                                M.read (| x |);
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::boxed::Box")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::plonk::evaluation_gpu::ProveExpression")
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "new",
                                    []
                                  |),
                                  [
                                    Value.StructTuple
                                      "halo2_proofs::plonk::evaluation_gpu::ProveExpression::Y"
                                      [ M.read (| ys |) ]
                                  ]
                                |);
                                Value.StructTuple
                                  "halo2_proofs::plonk::evaluation_gpu::Bop::Product"
                                  []
                              ]
                          ]
                        |)
                      |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_flatten :
        forall (F : Ty.t),
        M.IsAssociatedFunction (Self F) "flatten" (flatten F).
    End Impl_halo2_proofs_plonk_evaluation_gpu_ProveExpression_F.
  End evaluation_gpu.
End plonk.
