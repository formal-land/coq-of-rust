(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module plonk.
  Module keygen.
    (*
    pub(crate) fn create_domain<C, ConcreteCircuit>(
        params: &Params<C>,
    ) -> (
        EvaluationDomain<C::Scalar>,
        ConstraintSystem<C::Scalar>,
        ConcreteCircuit::Config,
    )
    where
        C: CurveAffine,
        ConcreteCircuit: Circuit<C::Scalar>,
    {
        let mut cs = ConstraintSystem::default();
        let config = ConcreteCircuit::configure(&mut cs);
    
        let degree = cs.degree();
    
        let domain = EvaluationDomain::new(degree as u32, params.k);
    
        (domain, cs, config)
    }
    *)
    Definition create_domain (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ C; ConcreteCircuit ], [ params ] =>
        ltac:(M.monadic
          (let params := M.alloc (| params |) in
          M.read (|
            let cs :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                      [ Ty.associated ],
                    [],
                    "default",
                    []
                  |),
                  []
                |)
              |) in
            let config :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "halo2_proofs::plonk::circuit::Circuit",
                    ConcreteCircuit,
                    [ Ty.associated ],
                    "configure",
                    []
                  |),
                  [ cs ]
                |)
              |) in
            let degree :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                      [ Ty.associated ],
                    "degree",
                    []
                  |),
                  [ cs ]
                |)
              |) in
            let domain :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                      [ Ty.associated ],
                    "new",
                    []
                  |),
                  [
                    M.rust_cast (M.read (| degree |));
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| params |),
                        "halo2_proofs::poly::commitment::Params",
                        "k"
                      |)
                    |)
                  ]
                |)
              |) in
            M.alloc (| Value.Tuple [ M.read (| domain |); M.read (| cs |); M.read (| config |) ] |)
          |)))
      | _, _ => M.impossible
      end.
    
    (* StructRecord
      {
        name := "Assembly";
        ty_params := [ "F" ];
        fields :=
          [
            ("k", Ty.path "u32");
            ("fixed",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.apply
                    (Ty.path "halo2_proofs::poly::Polynomial")
                    [
                      Ty.apply (Ty.path "halo2_proofs::plonk::assigned::Assigned") [ F ];
                      Ty.path "halo2_proofs::poly::LagrangeCoeff"
                    ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("permutation", Ty.path "halo2_proofs::plonk::permutation::keygen::Assembly");
            ("selectors",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("usable_rows", Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ]);
            ("_marker", Ty.apply (Ty.path "core::marker::PhantomData") [ F ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_ff_Field_F_for_halo2_proofs_plonk_keygen_Assembly_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::keygen::Assembly") [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              let names :=
                M.alloc (|
                  M.alloc (|
                    Value.Array
                      [
                        M.read (| Value.String "k" |);
                        M.read (| Value.String "fixed" |);
                        M.read (| Value.String "permutation" |);
                        M.read (| Value.String "selectors" |);
                        M.read (| Value.String "usable_rows" |);
                        M.read (| Value.String "_marker" |)
                      ]
                  |)
                |) in
              let values :=
                M.alloc (|
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      Value.Array
                        [
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::keygen::Assembly",
                              "k"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::keygen::Assembly",
                              "fixed"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::keygen::Assembly",
                              "permutation"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::keygen::Assembly",
                              "selectors"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::keygen::Assembly",
                              "usable_rows"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.alloc (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::plonk::keygen::Assembly",
                                "_marker"
                              |)
                            |))
                        ]
                    |))
                |) in
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_fields_finish",
                    []
                  |),
                  [
                    M.read (| f |);
                    M.read (| Value.String "Assembly" |);
                    (* Unsize *) M.pointer_coercion (M.read (| names |));
                    M.read (| values |)
                  ]
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_ff_Field_F_for_halo2_proofs_plonk_keygen_Assembly_F.
    
    (* StructRecord
      {
        name := "AssemblyAssigner";
        ty_params := [ "F" ];
        fields :=
          [
            ("k", Ty.path "u32");
            ("fixed",
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                [
                  Ty.apply
                    (Ty.path "std::sync::mutex::Mutex")
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.apply
                            (Ty.path "halo2_proofs::poly::Polynomial")
                            [
                              Ty.apply (Ty.path "halo2_proofs::plonk::assigned::Assigned") [ F ];
                              Ty.path "halo2_proofs::poly::LagrangeCoeff"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("permutation",
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                [
                  Ty.apply
                    (Ty.path "std::sync::mutex::Mutex")
                    [ Ty.path "halo2_proofs::plonk::permutation::keygen::ParallelAssembly" ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("selectors",
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                [
                  Ty.apply
                    (Ty.path "std::sync::mutex::Mutex")
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("usable_rows", Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ]);
            ("_marker", Ty.apply (Ty.path "core::marker::PhantomData") [ F ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_ff_Field_F_for_halo2_proofs_plonk_keygen_AssemblyAssigner_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::keygen::AssemblyAssigner") [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "halo2_proofs::plonk::keygen::AssemblyAssigner"
              [
                ("k",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.path "u32", [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::plonk::keygen::AssemblyAssigner",
                        "k"
                      |)
                    ]
                  |));
                ("fixed",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [
                          Ty.apply
                            (Ty.path "std::sync::mutex::Mutex")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                        [ F ];
                                      Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::plonk::keygen::AssemblyAssigner",
                        "fixed"
                      |)
                    ]
                  |));
                ("permutation",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [
                          Ty.apply
                            (Ty.path "std::sync::mutex::Mutex")
                            [ Ty.path "halo2_proofs::plonk::permutation::keygen::ParallelAssembly"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::plonk::keygen::AssemblyAssigner",
                        "permutation"
                      |)
                    ]
                  |));
                ("selectors",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        [
                          Ty.apply
                            (Ty.path "std::sync::mutex::Mutex")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::plonk::keygen::AssemblyAssigner",
                        "selectors"
                      |)
                    ]
                  |));
                ("usable_rows",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::plonk::keygen::AssemblyAssigner",
                        "usable_rows"
                      |)
                    ]
                  |));
                ("_marker",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "core::marker::PhantomData") [ F ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::plonk::keygen::AssemblyAssigner",
                        "_marker"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_where_ff_Field_F_for_halo2_proofs_plonk_keygen_AssemblyAssigner_F.
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_ff_Field_F_for_halo2_proofs_plonk_keygen_AssemblyAssigner_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::keygen::AssemblyAssigner") [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              let names :=
                M.alloc (|
                  M.alloc (|
                    Value.Array
                      [
                        M.read (| Value.String "k" |);
                        M.read (| Value.String "fixed" |);
                        M.read (| Value.String "permutation" |);
                        M.read (| Value.String "selectors" |);
                        M.read (| Value.String "usable_rows" |);
                        M.read (| Value.String "_marker" |)
                      ]
                  |)
                |) in
              let values :=
                M.alloc (|
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      Value.Array
                        [
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::keygen::AssemblyAssigner",
                              "k"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::keygen::AssemblyAssigner",
                              "fixed"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::keygen::AssemblyAssigner",
                              "permutation"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::keygen::AssemblyAssigner",
                              "selectors"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::plonk::keygen::AssemblyAssigner",
                              "usable_rows"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.alloc (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                "_marker"
                              |)
                            |))
                        ]
                    |))
                |) in
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_fields_finish",
                    []
                  |),
                  [
                    M.read (| f |);
                    M.read (| Value.String "AssemblyAssigner" |);
                    (* Unsize *) M.pointer_coercion (M.read (| names |));
                    M.read (| values |)
                  ]
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_ff_Field_F_for_halo2_proofs_plonk_keygen_AssemblyAssigner_F.
    
    Module Impl_core_convert_Into_where_pairing_bn256_arithmetic_fields_FieldExt_F_halo2_proofs_plonk_keygen_Assembly_F_for_halo2_proofs_plonk_keygen_AssemblyAssigner_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::keygen::AssemblyAssigner") [ F ].
      
      (*
          fn into(self) -> Assembly<F> {
              Assembly {
                  k: self.k,
                  fixed: Arc::try_unwrap(self.fixed).unwrap().into_inner().unwrap(),
                  permutation: permutation::keygen::Assembly::from(
                      Arc::try_unwrap(self.permutation)
                          .unwrap()
                          .into_inner()
                          .unwrap(),
                  ),
                  selectors: Arc::try_unwrap(self.selectors)
                      .unwrap()
                      .into_inner()
                      .unwrap(),
                  usable_rows: self.usable_rows,
                  _marker: PhantomData,
              }
          }
      *)
      Definition into (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "halo2_proofs::plonk::keygen::Assembly"
              [
                ("k",
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "halo2_proofs::plonk::keygen::AssemblyAssigner",
                      "k"
                    |)
                  |));
                ("fixed",
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::poly::Polynomial")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                    [ F ];
                                  Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.apply
                            (Ty.path "std::sync::poison::PoisonError")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                        [ F ];
                                      Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                        ],
                      "unwrap",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "std::sync::mutex::Mutex")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                        [ F ];
                                      Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          "into_inner",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::Mutex")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                                [ F ];
                                              Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::Mutex")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::assigned::Assigned")
                                                    [ F ];
                                                  Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              "unwrap",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::Mutex")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::assigned::Assigned")
                                                    [ F ];
                                                  Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "try_unwrap",
                                  []
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      self,
                                      "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                      "fixed"
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |));
                ("permutation",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.path "halo2_proofs::plonk::permutation::keygen::Assembly",
                      [ Ty.path "halo2_proofs::plonk::permutation::keygen::ParallelAssembly" ],
                      "from",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.path "halo2_proofs::plonk::permutation::keygen::ParallelAssembly";
                              Ty.apply
                                (Ty.path "std::sync::poison::PoisonError")
                                [
                                  Ty.path
                                    "halo2_proofs::plonk::permutation::keygen::ParallelAssembly"
                                ]
                            ],
                          "unwrap",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "std::sync::mutex::Mutex")
                                [
                                  Ty.path
                                    "halo2_proofs::plonk::permutation::keygen::ParallelAssembly"
                                ],
                              "into_inner",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::Mutex")
                                        [
                                          Ty.path
                                            "halo2_proofs::plonk::permutation::keygen::ParallelAssembly"
                                        ];
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            [
                                              Ty.path
                                                "halo2_proofs::plonk::permutation::keygen::ParallelAssembly"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  "unwrap",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            [
                                              Ty.path
                                                "halo2_proofs::plonk::permutation::keygen::ParallelAssembly"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "try_unwrap",
                                      []
                                    |),
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          self,
                                          "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                          "permutation"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |));
                ("selectors",
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.apply
                            (Ty.path "std::sync::poison::PoisonError")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                        ],
                      "unwrap",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "std::sync::mutex::Mutex")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          "into_inner",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::Mutex")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::Mutex")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              "unwrap",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::Mutex")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "try_unwrap",
                                  []
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      self,
                                      "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                      "selectors"
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |));
                ("usable_rows",
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      self,
                      "halo2_proofs::plonk::keygen::AssemblyAssigner",
                      "usable_rows"
                    |)
                  |));
                ("_marker", Value.StructTuple "core::marker::PhantomData" [])
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::convert::Into"
          (Self F)
          (* Trait polymorphic types *)
          [ (* T *) Ty.apply (Ty.path "halo2_proofs::plonk::keygen::Assembly") [ F ] ]
          (* Instance *) [ ("into", InstanceField.Method (into F)) ].
    End Impl_core_convert_Into_where_pairing_bn256_arithmetic_fields_FieldExt_F_halo2_proofs_plonk_keygen_Assembly_F_for_halo2_proofs_plonk_keygen_AssemblyAssigner_F.
    
    Module Impl_halo2_proofs_plonk_circuit_Assignment_where_ff_Field_F_F_for_halo2_proofs_plonk_keygen_AssemblyAssigner_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::keygen::AssemblyAssigner") [ F ].
      
      (*
          fn is_in_prove_mode(&self) -> bool {
              false
          }
      *)
      Definition is_in_prove_mode (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.Bool false))
        | _, _ => M.impossible
        end.
      
      (*
          fn enter_region<NR, N>(&self, _: N)
          where
              NR: Into<String>,
              N: FnOnce() -> NR,
          {
              // Do nothing; we don't care about regions in this context.
          }
      *)
      Definition enter_region (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [ NR; N ], [ self; β1 ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let β1 := M.alloc (| β1 |) in
            M.match_operator (| β1, [ fun γ => ltac:(M.monadic (Value.Tuple [])) ] |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn exit_region(&self) {
              // Do nothing; we don't care about regions in this context.
          }
      *)
      Definition exit_region (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.Tuple []))
        | _, _ => M.impossible
        end.
      
      (*
          fn enable_selector<A, AR>(&self, _: A, selector: &Selector, row: usize) -> Result<(), Error>
          where
              A: FnOnce() -> AR,
              AR: Into<String>,
          {
              if !self.usable_rows.contains(&row) {
                  return Err(Error::not_enough_rows_available(self.k));
              }
      
              let mut selectors = self.selectors.lock().unwrap();
              selectors[selector.0][row] = true;
      
              Ok(())
          }
      *)
      Definition enable_selector (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [ A; AR ], [ self; β1; selector; row ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let β1 := M.alloc (| β1 |) in
            let selector := M.alloc (| selector |) in
            let row := M.alloc (| row |) in
            M.match_operator (|
              β1,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.catch_return (|
                      ltac:(M.monadic
                        (M.read (|
                          let _ :=
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          UnOp.Pure.not
                                            (M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  [ Ty.path "usize" ],
                                                "contains",
                                                [ Ty.path "usize" ]
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| self |),
                                                  "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                                  "usable_rows"
                                                |);
                                                row
                                              ]
                                            |))
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            Value.StructTuple
                                              "core::result::Result::Err"
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "halo2_proofs::plonk::error::Error",
                                                    "not_enough_rows_available",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                                        "k"
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          let selectors :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::MutexGuard")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "std::sync::poison::PoisonError")
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::MutexGuard")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "bool"; Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                    ],
                                  "unwrap",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::Mutex")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      "lock",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.apply
                                                (Ty.path "std::sync::mutex::Mutex")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "bool";
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                            "selectors"
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.write (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::index::IndexMut",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ],
                                  [ Ty.path "usize" ],
                                  "index_mut",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::index::IndexMut",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [ Ty.path "usize" ],
                                      "index_mut",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::DerefMut",
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::MutexGuard")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "bool"; Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          [],
                                          "deref_mut",
                                          []
                                        |),
                                        [ selectors ]
                                      |);
                                      M.read (|
                                        M.SubPointer.get_struct_tuple_field (|
                                          M.read (| selector |),
                                          "halo2_proofs::plonk::circuit::Selector",
                                          0
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.read (| row |)
                                ]
                              |),
                              Value.Bool true
                            |) in
                          M.alloc (|
                            Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                          |)
                        |)))
                    |)))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn query_instance(&self, _: Column<Instance>, row: usize) -> Result<Option<F>, Error> {
              if !self.usable_rows.contains(&row) {
                  return Err(Error::not_enough_rows_available(self.k));
              }
      
              // There is no instance in this context.
              Ok(None)
          }
      *)
      Definition query_instance (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; β1; row ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let β1 := M.alloc (| β1 |) in
            let row := M.alloc (| row |) in
            M.match_operator (|
              β1,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.catch_return (|
                      ltac:(M.monadic
                        (M.read (|
                          let _ :=
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          UnOp.Pure.not
                                            (M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  [ Ty.path "usize" ],
                                                "contains",
                                                [ Ty.path "usize" ]
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| self |),
                                                  "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                                  "usable_rows"
                                                |);
                                                row
                                              ]
                                            |))
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            Value.StructTuple
                                              "core::result::Result::Err"
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "halo2_proofs::plonk::error::Error",
                                                    "not_enough_rows_available",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                                        "k"
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Ok"
                              [ Value.StructTuple "core::option::Option::None" [] ]
                          |)
                        |)))
                    |)))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn assign_advice<V, VR, A, AR>(
              &self,
              _: A,
              _: Column<Advice>,
              _: usize,
              _: V,
          ) -> Result<(), Error>
          where
              V: FnOnce() -> Result<VR, Error>,
              VR: Into<Assigned<F>>,
              A: FnOnce() -> AR,
              AR: Into<String>,
          {
              // We only care about fixed columns here
              Ok(())
          }
      *)
      Definition assign_advice (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [ V; VR; A; AR ], [ self; β1; β2; β3; β4 ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let β1 := M.alloc (| β1 |) in
            let β2 := M.alloc (| β2 |) in
            let β3 := M.alloc (| β3 |) in
            let β4 := M.alloc (| β4 |) in
            M.match_operator (|
              β1,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      β2,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              β3,
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      β4,
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (Value.StructTuple
                                              "core::result::Result::Ok"
                                              [ Value.Tuple [] ]))
                                      ]
                                    |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn assign_fixed<V, VR, A, AR>(
              &self,
              _: A,
              column: Column<Fixed>,
              row: usize,
              to: V,
          ) -> Result<(), Error>
          where
              V: FnOnce() -> Result<VR, Error>,
              VR: Into<Assigned<F>>,
              A: FnOnce() -> AR,
              AR: Into<String>,
          {
              if !self.usable_rows.contains(&row) {
                  return Err(Error::not_enough_rows_available(self.k));
              }
      
              let mut fixed = self.fixed.lock().unwrap();
              *fixed
                  .get_mut(column.index())
                  .and_then(|v| v.get_mut(row))
                  .ok_or(Error::BoundsFailure)? = to()?.into();
      
              Ok(())
          }
      *)
      Definition assign_fixed (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [ V; VR; A; AR ], [ self; β1; column; row; to ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let β1 := M.alloc (| β1 |) in
            let column := M.alloc (| column |) in
            let row := M.alloc (| row |) in
            let to := M.alloc (| to |) in
            M.match_operator (|
              β1,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.catch_return (|
                      ltac:(M.monadic
                        (M.read (|
                          let _ :=
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          UnOp.Pure.not
                                            (M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  [ Ty.path "usize" ],
                                                "contains",
                                                [ Ty.path "usize" ]
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| self |),
                                                  "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                                  "usable_rows"
                                                |);
                                                row
                                              ]
                                            |))
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.read (|
                                          M.return_ (|
                                            Value.StructTuple
                                              "core::result::Result::Err"
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.path "halo2_proofs::plonk::error::Error",
                                                    "not_enough_rows_available",
                                                    []
                                                  |),
                                                  [
                                                    M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| self |),
                                                        "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                                        "k"
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          let fixed :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::MutexGuard")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::assigned::Assigned")
                                                    [ F ];
                                                  Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "std::sync::poison::PoisonError")
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::MutexGuard")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::assigned::Assigned")
                                                        [ F ];
                                                      Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                    ],
                                  "unwrap",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::Mutex")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::assigned::Assigned")
                                                    [ F ];
                                                  Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      "lock",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            [
                                              Ty.apply
                                                (Ty.path "std::sync::mutex::Mutex")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::assigned::Assigned")
                                                            [ F ];
                                                          Ty.path
                                                            "halo2_proofs::poly::LagrangeCoeff"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                            "fixed"
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |) in
                          let _ :=
                            M.write (|
                              M.read (|
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "&mut")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::assigned::Assigned")
                                                  [ F ]
                                              ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [],
                                        "branch",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::assigned::Assigned")
                                                      [ F ]
                                                  ]
                                              ],
                                            "ok_or",
                                            [ Ty.path "halo2_proofs::plonk::error::Error" ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::assigned::Assigned")
                                                              [ F ];
                                                            Ty.path
                                                              "halo2_proofs::poly::LagrangeCoeff"
                                                          ]
                                                      ]
                                                  ],
                                                "and_then",
                                                [
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::assigned::Assigned")
                                                        [ F ]
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::poly::Polynomial")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::assigned::Assigned")
                                                                    [ F ];
                                                                  Ty.path
                                                                    "halo2_proofs::poly::LagrangeCoeff"
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::assigned::Assigned")
                                                              [ F ]
                                                          ]
                                                      ])
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::assigned::Assigned")
                                                              [ F ];
                                                            Ty.path
                                                              "halo2_proofs::poly::LagrangeCoeff"
                                                          ]
                                                      ],
                                                    "get_mut",
                                                    [ Ty.path "usize" ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::deref::DerefMut",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::Polynomial")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::assigned::Assigned")
                                                                  [ F ];
                                                                Ty.path
                                                                  "halo2_proofs::poly::LagrangeCoeff"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        "deref_mut",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::DerefMut",
                                                            Ty.apply
                                                              (Ty.path
                                                                "std::sync::mutex::MutexGuard")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::poly::Polynomial")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::assigned::Assigned")
                                                                          [ F ];
                                                                        Ty.path
                                                                          "halo2_proofs::poly::LagrangeCoeff"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ],
                                                            [],
                                                            "deref_mut",
                                                            []
                                                          |),
                                                          [ fixed ]
                                                        |)
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Column")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::Fixed"
                                                          ],
                                                        "index",
                                                        []
                                                      |),
                                                      [ column ]
                                                    |)
                                                  ]
                                                |);
                                                M.closure
                                                  (fun γ =>
                                                    ltac:(M.monadic
                                                      match γ with
                                                      | [ α0 ] =>
                                                        M.match_operator (|
                                                          M.alloc (| α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let v := M.copy (| γ |) in
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::assigned::Assigned")
                                                                          [ F ]
                                                                      ],
                                                                    "get_mut",
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::deref::DerefMut",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::poly::Polynomial")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::assigned::Assigned")
                                                                              [ F ];
                                                                            Ty.path
                                                                              "halo2_proofs::poly::LagrangeCoeff"
                                                                          ],
                                                                        [],
                                                                        "deref_mut",
                                                                        []
                                                                      |),
                                                                      [ M.read (| v |) ]
                                                                    |);
                                                                    M.read (| row |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)
                                                      | _ => M.impossible (||)
                                                      end))
                                              ]
                                            |);
                                            Value.StructTuple
                                              "halo2_proofs::plonk::error::Error::BoundsFailure"
                                              []
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual := M.copy (| γ0_0 |) in
                                        M.alloc (|
                                          M.never_to_any (|
                                            M.read (|
                                              M.return_ (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::FromResidual",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path "halo2_proofs::plonk::error::Error"
                                                      ],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.path "core::convert::Infallible";
                                                          Ty.path
                                                            "halo2_proofs::plonk::error::Error"
                                                        ]
                                                    ],
                                                    "from_residual",
                                                    []
                                                  |),
                                                  [ M.read (| residual |) ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| γ0_0 |) in
                                        val))
                                  ]
                                |)
                              |),
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::convert::Into",
                                  VR,
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                      [ F ]
                                  ],
                                  "into",
                                  []
                                |),
                                [
                                  M.read (|
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::Try",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ VR; Ty.path "halo2_proofs::plonk::error::Error" ],
                                            [],
                                            "branch",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::function::FnOnce",
                                                V,
                                                [ Ty.tuple [] ],
                                                "call_once",
                                                []
                                              |),
                                              [ M.read (| to |); Value.Tuple [] ]
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::ops::control_flow::ControlFlow::Break",
                                                0
                                              |) in
                                            let residual := M.copy (| γ0_0 |) in
                                            M.alloc (|
                                              M.never_to_any (|
                                                M.read (|
                                                  M.return_ (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::FromResidual",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.tuple [];
                                                            Ty.path
                                                              "halo2_proofs::plonk::error::Error"
                                                          ],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.path "core::convert::Infallible";
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ]
                                                        ],
                                                        "from_residual",
                                                        []
                                                      |),
                                                      [ M.read (| residual |) ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::ops::control_flow::ControlFlow::Continue",
                                                0
                                              |) in
                                            let val := M.copy (| γ0_0 |) in
                                            val))
                                      ]
                                    |)
                                  |)
                                ]
                              |)
                            |) in
                          M.alloc (|
                            Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                          |)
                        |)))
                    |)))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn copy(
              &self,
              left_column: Column<Any>,
              left_row: usize,
              right_column: Column<Any>,
              right_row: usize,
          ) -> Result<(), Error> {
              if !self.usable_rows.contains(&left_row) || !self.usable_rows.contains(&right_row) {
                  return Err(Error::not_enough_rows_available(self.k));
              }
      
              let mut permutation = self.permutation.lock().unwrap();
              permutation.copy(left_column, left_row, right_column, right_row)
          }
      *)
      Definition copy (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; left_column; left_row; right_column; right_row ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let left_column := M.alloc (| left_column |) in
            let left_row := M.alloc (| left_row |) in
            let right_column := M.alloc (| right_column |) in
            let right_row := M.alloc (| right_row |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  LogicalOp.or (|
                                    UnOp.Pure.not
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            [ Ty.path "usize" ],
                                          "contains",
                                          [ Ty.path "usize" ]
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                            "usable_rows"
                                          |);
                                          left_row
                                        ]
                                      |)),
                                    ltac:(M.monadic
                                      (UnOp.Pure.not
                                        (M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              [ Ty.path "usize" ],
                                            "contains",
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                              "usable_rows"
                                            |);
                                            right_row
                                          ]
                                        |))))
                                  |)
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    Value.StructTuple
                                      "core::result::Result::Err"
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "halo2_proofs::plonk::error::Error",
                                            "not_enough_rows_available",
                                            []
                                          |),
                                          [
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                                "k"
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let permutation :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.apply
                                (Ty.path "std::sync::mutex::MutexGuard")
                                [
                                  Ty.path
                                    "halo2_proofs::plonk::permutation::keygen::ParallelAssembly"
                                ];
                              Ty.apply
                                (Ty.path "std::sync::poison::PoisonError")
                                [
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::MutexGuard")
                                    [
                                      Ty.path
                                        "halo2_proofs::plonk::permutation::keygen::ParallelAssembly"
                                    ]
                                ]
                            ],
                          "unwrap",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "std::sync::mutex::Mutex")
                                [
                                  Ty.path
                                    "halo2_proofs::plonk::permutation::keygen::ParallelAssembly"
                                ],
                              "lock",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::Mutex")
                                        [
                                          Ty.path
                                            "halo2_proofs::plonk::permutation::keygen::ParallelAssembly"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                    "permutation"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.path "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                        "copy",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::deref::DerefMut",
                            Ty.apply
                              (Ty.path "std::sync::mutex::MutexGuard")
                              [ Ty.path "halo2_proofs::plonk::permutation::keygen::ParallelAssembly"
                              ],
                            [],
                            "deref_mut",
                            []
                          |),
                          [ permutation ]
                        |);
                        M.read (| left_column |);
                        M.read (| left_row |);
                        M.read (| right_column |);
                        M.read (| right_row |)
                      ]
                    |)
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn fill_from_row(
              &self,
              column: Column<Fixed>,
              from_row: usize,
              to: Option<Assigned<F>>,
          ) -> Result<(), Error> {
              if !self.usable_rows.contains(&from_row) {
                  return Err(Error::not_enough_rows_available(self.k));
              }
      
              let mut fixed = self.fixed.lock().unwrap();
              let col = fixed.get_mut(column.index()).ok_or(Error::BoundsFailure)?;
      
              for row in self.usable_rows.clone().skip(from_row) {
                  col[row] = to.ok_or(Error::Synthesis)?;
              }
      
              Ok(())
          }
      *)
      Definition fill_from_row (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; column; from_row; to ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let column := M.alloc (| column |) in
            let from_row := M.alloc (| from_row |) in
            let to := M.alloc (| to |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.Pure.not
                                    (M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          [ Ty.path "usize" ],
                                        "contains",
                                        [ Ty.path "usize" ]
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                          "usable_rows"
                                        |);
                                        from_row
                                      ]
                                    |))
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    Value.StructTuple
                                      "core::result::Result::Err"
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "halo2_proofs::plonk::error::Error",
                                            "not_enough_rows_available",
                                            []
                                          |),
                                          [
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                                "k"
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let fixed :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [
                              Ty.apply
                                (Ty.path "std::sync::mutex::MutexGuard")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                            [ F ];
                                          Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "std::sync::poison::PoisonError")
                                [
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::MutexGuard")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                                [ F ];
                                              Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ]
                            ],
                          "unwrap",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "std::sync::mutex::Mutex")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                            [ F ];
                                          Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              "lock",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::Mutex")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::assigned::Assigned")
                                                    [ F ];
                                                  Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                    "fixed"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let col :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                            [ F ];
                                          Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                        ]
                                    ];
                                  Ty.path "halo2_proofs::plonk::error::Error"
                                ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                                [ F ];
                                              Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                            ]
                                        ]
                                    ],
                                  "ok_or",
                                  [ Ty.path "halo2_proofs::plonk::error::Error" ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                                [ F ];
                                              Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                            ]
                                        ],
                                      "get_mut",
                                      [ Ty.path "usize" ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::DerefMut",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::assigned::Assigned")
                                                    [ F ];
                                                  Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "deref_mut",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::DerefMut",
                                              Ty.apply
                                                (Ty.path "std::sync::mutex::MutexGuard")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::assigned::Assigned")
                                                            [ F ];
                                                          Ty.path
                                                            "halo2_proofs::poly::LagrangeCoeff"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ],
                                              [],
                                              "deref_mut",
                                              []
                                            |),
                                            [ fixed ]
                                          |)
                                        ]
                                      |);
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                                            [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ],
                                          "index",
                                          []
                                        |),
                                        [ column ]
                                      |)
                                    ]
                                  |);
                                  Value.StructTuple
                                    "halo2_proofs::plonk::error::Error::BoundsFailure"
                                    []
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.tuple [];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let _ :=
                    M.use
                      (M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::skip::Skip")
                                [ Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ]
                                ],
                              [],
                              "into_iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                                  [],
                                  "skip",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        [ Ty.path "usize" ],
                                      [],
                                      "clone",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "halo2_proofs::plonk::keygen::AssemblyAssigner",
                                        "usable_rows"
                                      |)
                                    ]
                                  |);
                                  M.read (| from_row |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                ltac:(M.monadic
                                  (let _ :=
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::skip::Skip")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  [ Ty.path "usize" ]
                                              ],
                                            [],
                                            "next",
                                            []
                                          |),
                                          [ iter ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let row := M.copy (| γ0_0 |) in
                                            let _ :=
                                              M.write (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::index::IndexMut",
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::assigned::Assigned")
                                                          [ F ];
                                                        Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                      ],
                                                    [ Ty.path "usize" ],
                                                    "index_mut",
                                                    []
                                                  |),
                                                  [ M.read (| col |); M.read (| row |) ]
                                                |),
                                                M.read (|
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::assigned::Assigned")
                                                                [ F ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::assigned::Assigned")
                                                                    [ F ]
                                                                ],
                                                              "ok_or",
                                                              [
                                                                Ty.path
                                                                  "halo2_proofs::plonk::error::Error"
                                                              ]
                                                            |),
                                                            [
                                                              M.read (| to |);
                                                              Value.StructTuple
                                                                "halo2_proofs::plonk::error::Error::Synthesis"
                                                                []
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::error::Error"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::error::Error"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |)
                                                |)
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn push_namespace<NR, N>(&self, _: N)
          where
              NR: Into<String>,
              N: FnOnce() -> NR,
          {
              // Do nothing; we don't care about namespaces in this context.
          }
      *)
      Definition push_namespace (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [ NR; N ], [ self; β1 ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let β1 := M.alloc (| β1 |) in
            M.match_operator (| β1, [ fun γ => ltac:(M.monadic (Value.Tuple [])) ] |)))
        | _, _ => M.impossible
        end.
      
      (*
          fn pop_namespace(&self, _: Option<String>) {
              // Do nothing; we don't care about namespaces in this context.
          }
      *)
      Definition pop_namespace (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; β1 ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let β1 := M.alloc (| β1 |) in
            M.match_operator (| β1, [ fun γ => ltac:(M.monadic (Value.Tuple [])) ] |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "halo2_proofs::plonk::circuit::Assignment"
          (Self F)
          (* Trait polymorphic types *) [ (* F *) F ]
          (* Instance *)
          [
            ("is_in_prove_mode", InstanceField.Method (is_in_prove_mode F));
            ("enter_region", InstanceField.Method (enter_region F));
            ("exit_region", InstanceField.Method (exit_region F));
            ("enable_selector", InstanceField.Method (enable_selector F));
            ("query_instance", InstanceField.Method (query_instance F));
            ("assign_advice", InstanceField.Method (assign_advice F));
            ("assign_fixed", InstanceField.Method (assign_fixed F));
            ("copy", InstanceField.Method (copy F));
            ("fill_from_row", InstanceField.Method (fill_from_row F));
            ("push_namespace", InstanceField.Method (push_namespace F));
            ("pop_namespace", InstanceField.Method (pop_namespace F))
          ].
    End Impl_halo2_proofs_plonk_circuit_Assignment_where_ff_Field_F_F_for_halo2_proofs_plonk_keygen_AssemblyAssigner_F.
    
    (*
    pub fn keygen_vk<C, ConcreteCircuit>(
        params: &Params<C>,
        circuit: &ConcreteCircuit,
    ) -> Result<VerifyingKey<C>, Error>
    where
        C: CurveAffine,
        ConcreteCircuit: Circuit<C::Scalar>,
    {
        let (domain, cs, config) = create_domain::<C, ConcreteCircuit>(params);
    
        if (params.n as usize) < cs.minimum_rows() {
            return Err(Error::not_enough_rows_available(params.k));
        }
    
        let mut assembly: AssemblyAssigner<C::Scalar> = AssemblyAssigner {
            k: params.k,
            fixed: Arc::new(Mutex::new(vec![
                domain.empty_lagrange_assigned();
                cs.num_fixed_columns
            ])),
            permutation: Arc::new(Mutex::new(permutation::keygen::ParallelAssembly::new(
                params.n as usize,
                &cs.permutation,
            ))),
            selectors: Arc::new(Mutex::new(vec![
                vec![false; params.n as usize];
                cs.num_selectors
            ])),
            usable_rows: 0..params.n as usize - (cs.blinding_factors() + 1),
            _marker: PhantomData,
        };
    
        // Synthesize the circuit to obtain URS
        ConcreteCircuit::FloorPlanner::synthesize(
            &mut assembly,
            circuit,
            config,
            cs.constants.clone(),
        )?;
    
        let assembly: Assembly<C::Scalar> = assembly.into();
    
        let mut fixed = batch_invert_assigned(assembly.fixed);
        let (cs, selector_polys) = cs.compress_selectors(assembly.selectors);
        fixed.extend(
            selector_polys
                .into_iter()
                .map(|poly| domain.lagrange_from_vec(poly)),
        );
    
        let permutation_vk = assembly
            .permutation
            .build_vk(params, &domain, &cs.permutation);
    
        let fixed_commitments = fixed
            .iter()
            .map(|poly| params.commit_lagrange(poly).to_affine())
            .collect();
    
        Ok(VerifyingKey {
            domain,
            fixed_commitments,
            permutation: permutation_vk,
            cs,
        })
    }
    *)
    Definition keygen_vk (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ C; ConcreteCircuit ], [ params; circuit ] =>
        ltac:(M.monadic
          (let params := M.alloc (| params |) in
          let circuit := M.alloc (| circuit |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "halo2_proofs::plonk::keygen::create_domain",
                        [ C; ConcreteCircuit ]
                      |),
                      [ M.read (| params |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                        let domain := M.copy (| γ0_0 |) in
                        let cs := M.copy (| γ0_1 |) in
                        let config := M.copy (| γ0_2 |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        BinOp.Pure.lt
                                          (M.rust_cast
                                            (M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| params |),
                                                "halo2_proofs::poly::commitment::Params",
                                                "n"
                                              |)
                                            |)))
                                          (M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                [ Ty.associated ],
                                              "minimum_rows",
                                              []
                                            |),
                                            [ cs ]
                                          |))
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          Value.StructTuple
                                            "core::result::Result::Err"
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::plonk::error::Error",
                                                  "not_enough_rows_available",
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| params |),
                                                      "halo2_proofs::poly::commitment::Params",
                                                      "k"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |) in
                        let assembly :=
                          M.alloc (|
                            Value.StructRecord
                              "halo2_proofs::plonk::keygen::AssemblyAssigner"
                              [
                                ("k",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| params |),
                                      "halo2_proofs::poly::commitment::Params",
                                      "k"
                                    |)
                                  |));
                                ("fixed",
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::assigned::Assigned")
                                                        [ Ty.associated ];
                                                      Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "new",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::assigned::Assigned")
                                                        [ Ty.associated ];
                                                      Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          "new",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_function (|
                                              "alloc::vec::from_elem",
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::assigned::Assigned")
                                                      [ Ty.associated ];
                                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                  ]
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::poly::domain::EvaluationDomain")
                                                    [ Ty.associated ],
                                                  "empty_lagrange_assigned",
                                                  []
                                                |),
                                                [ domain ]
                                              |);
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  cs,
                                                  "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                  "num_fixed_columns"
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |));
                                ("permutation",
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            [
                                              Ty.path
                                                "halo2_proofs::plonk::permutation::keygen::ParallelAssembly"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "new",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            [
                                              Ty.path
                                                "halo2_proofs::plonk::permutation::keygen::ParallelAssembly"
                                            ],
                                          "new",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.path
                                                "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                                              "new",
                                              []
                                            |),
                                            [
                                              M.rust_cast
                                                (M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| params |),
                                                    "halo2_proofs::poly::commitment::Params",
                                                    "n"
                                                  |)
                                                |));
                                              M.SubPointer.get_struct_record_field (|
                                                cs,
                                                "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                "permutation"
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |));
                                ("selectors",
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "bool"; Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "new",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.path "bool"; Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          "new",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_function (|
                                              "alloc::vec::from_elem",
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ]
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_function (|
                                                  "alloc::vec::from_elem",
                                                  [ Ty.path "bool" ]
                                                |),
                                                [
                                                  Value.Bool false;
                                                  M.rust_cast
                                                    (M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| params |),
                                                        "halo2_proofs::poly::commitment::Params",
                                                        "n"
                                                      |)
                                                    |))
                                                ]
                                              |);
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  cs,
                                                  "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                  "num_selectors"
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |));
                                ("usable_rows",
                                  Value.StructRecord
                                    "core::ops::range::Range"
                                    [
                                      ("start", Value.Integer 0);
                                      ("end_",
                                        BinOp.Panic.sub (|
                                          Integer.Usize,
                                          M.rust_cast
                                            (M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| params |),
                                                "halo2_proofs::poly::commitment::Params",
                                                "n"
                                              |)
                                            |)),
                                          BinOp.Panic.add (|
                                            Integer.Usize,
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                  [ Ty.associated ],
                                                "blinding_factors",
                                                []
                                              |),
                                              [ cs ]
                                            |),
                                            Value.Integer 1
                                          |)
                                        |))
                                    ]);
                                ("_marker", Value.StructTuple "core::marker::PhantomData" [])
                              ]
                          |) in
                        let _ :=
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error" ],
                                  [],
                                  "branch",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "halo2_proofs::plonk::circuit::FloorPlanner",
                                      Ty.associated,
                                      [],
                                      "synthesize",
                                      [
                                        Ty.associated;
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::keygen::AssemblyAssigner")
                                          [ Ty.associated ];
                                        ConcreteCircuit
                                      ]
                                    |),
                                    [
                                      assembly;
                                      M.read (| circuit |);
                                      M.read (| config |);
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "clone",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            cs,
                                            "halo2_proofs::plonk::circuit::ConstraintSystem",
                                            "constants"
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual := M.copy (| γ0_0 |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::plonk::VerifyingKey")
                                                    [ C ];
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  [
                                                    Ty.path "core::convert::Infallible";
                                                    Ty.path "halo2_proofs::plonk::error::Error"
                                                  ]
                                              ],
                                              "from_residual",
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| γ0_0 |) in
                                  val))
                            ]
                          |) in
                        let assembly :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::convert::Into",
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::keygen::AssemblyAssigner")
                                  [ Ty.associated ],
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::keygen::Assembly")
                                    [ Ty.associated ]
                                ],
                                "into",
                                []
                              |),
                              [ M.read (| assembly |) ]
                            |)
                          |) in
                        let fixed :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_function (|
                                "halo2_proofs::poly::batch_invert_assigned",
                                [ Ty.associated ]
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    assembly,
                                    "halo2_proofs::plonk::keygen::Assembly",
                                    "fixed"
                                  |)
                                |)
                              ]
                            |)
                          |) in
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                                  [ Ty.associated ],
                                "compress_selectors",
                                []
                              |),
                              [
                                M.read (| cs |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    assembly,
                                    "halo2_proofs::plonk::keygen::Assembly",
                                    "selectors"
                                  |)
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let cs := M.copy (| γ0_0 |) in
                                let selector_polys := M.copy (| γ0_1 |) in
                                let _ :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::Extend",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [
                                                Ty.associated;
                                                Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [
                                              Ty.associated;
                                              Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                            ]
                                        ],
                                        "extend",
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::map::Map")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.associated; Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.associated;
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                  ])
                                            ]
                                        ]
                                      |),
                                      [
                                        fixed;
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            "map",
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [
                                                  Ty.associated;
                                                  Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.associated;
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                  ])
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::collect::IntoIterator",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "into_iter",
                                                []
                                              |),
                                              [ M.read (| selector_polys |) ]
                                            |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let poly := M.copy (| γ |) in
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::domain::EvaluationDomain")
                                                                  [ Ty.associated ],
                                                                "lagrange_from_vec",
                                                                []
                                                              |),
                                                              [ domain; M.read (| poly |) ]
                                                            |)))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      ]
                                    |)
                                  |) in
                                let permutation_vk :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path
                                          "halo2_proofs::plonk::permutation::keygen::Assembly",
                                        "build_vk",
                                        [ C ]
                                      |),
                                      [
                                        M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            assembly,
                                            "halo2_proofs::plonk::keygen::Assembly",
                                            "permutation"
                                          |)
                                        |);
                                        M.read (| params |);
                                        domain;
                                        M.SubPointer.get_struct_record_field (|
                                          cs,
                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                          "permutation"
                                        |)
                                      ]
                                    |)
                                  |) in
                                let fixed_commitments :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::map::Map")
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                  ]
                                              ];
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path
                                                              "halo2_proofs::poly::LagrangeCoeff"
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                              C
                                          ],
                                        [],
                                        "collect",
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ C; Ty.path "alloc::alloc::Global" ]
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                  ]
                                              ],
                                            [],
                                            "map",
                                            [
                                              C;
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::Polynomial")
                                                            [
                                                              Ty.associated;
                                                              Ty.path
                                                                "halo2_proofs::poly::LagrangeCoeff"
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                C
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                      ]
                                                  ],
                                                "iter",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path
                                                              "halo2_proofs::poly::LagrangeCoeff"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [ fixed ]
                                                |)
                                              ]
                                            |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let poly := M.copy (| γ |) in
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "group::Curve",
                                                                Ty.associated,
                                                                [],
                                                                "to_affine",
                                                                []
                                                              |),
                                                              [
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::poly::commitment::Params")
                                                                        [ C ],
                                                                      "commit_lagrange",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.read (| params |);
                                                                      M.read (| poly |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              ]
                                                            |)))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      ]
                                    |)
                                  |) in
                                M.alloc (|
                                  Value.StructTuple
                                    "core::result::Result::Ok"
                                    [
                                      Value.StructRecord
                                        "halo2_proofs::plonk::VerifyingKey"
                                        [
                                          ("domain", M.read (| domain |));
                                          ("fixed_commitments", M.read (| fixed_commitments |));
                                          ("permutation", M.read (| permutation_vk |));
                                          ("cs", M.read (| cs |))
                                        ]
                                    ]
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
    pub fn keygen_pk<C, ConcreteCircuit>(
        params: &Params<C>,
        vk: VerifyingKey<C>,
        circuit: &ConcreteCircuit,
    ) -> Result<ProvingKey<C>, Error>
    where
        C: CurveAffine,
        ConcreteCircuit: Circuit<C::Scalar>,
    {
        let mut cs = ConstraintSystem::default();
        let config = ConcreteCircuit::configure(&mut cs);
    
        let cs = cs;
    
        if (params.n as usize) < cs.minimum_rows() {
            return Err(Error::not_enough_rows_available(params.k));
        }
    
        let mut assembly: AssemblyAssigner<C::Scalar> = AssemblyAssigner {
            k: params.k,
            fixed: Arc::new(Mutex::new(vec![
                vk.domain.empty_lagrange_assigned();
                cs.num_fixed_columns
            ])),
            permutation: Arc::new(Mutex::new(permutation::keygen::ParallelAssembly::new(
                params.n as usize,
                &cs.permutation,
            ))),
            selectors: Arc::new(Mutex::new(vec![
                vec![false; params.n as usize];
                cs.num_selectors
            ])),
            usable_rows: 0..params.n as usize - (cs.blinding_factors() + 1),
            _marker: std::marker::PhantomData,
        };
    
        // Synthesize the circuit to obtain URS
        ConcreteCircuit::FloorPlanner::synthesize(
            &mut assembly,
            circuit,
            config,
            cs.constants.clone(),
        )?;
    
        let assembly: Assembly<C::Scalar> = assembly.into();
    
        let timer = start_timer!(|| "unnecessary part");
        let (cs, fixed) = if false {
            let mut fixed = batch_invert_assigned(assembly.fixed);
            let (cs, selector_polys) = cs.compress_selectors(assembly.selectors);
            fixed.extend(
                selector_polys
                    .into_iter()
                    .map(|poly| vk.domain.lagrange_from_vec(poly)),
            );
            (cs, fixed)
        } else {
            assert!(assembly.selectors.len() == 0);
            (
                cs,
                assembly
                    .fixed
                    .into_par_iter()
                    .map(|x| Polynomial {
                        values: x
                            .into_iter()
                            .map(|x| {
                                assert!(x.denominator().is_none());
                                x.numerator()
                            })
                            .collect(),
                        _marker: std::marker::PhantomData,
                    })
                    .collect::<Vec<_>>(),
            )
        };
        end_timer!(timer);
    
        let timer = start_timer!(|| "fix poly");
        let fixed_polys: Vec<_> = fixed
            .par_iter()
            .map(|poly| vk.domain.lagrange_to_coeff_st(poly.clone()))
            .collect();
        end_timer!(timer);
    
        #[cfg(not(feature = "cuda"))]
        let fixed_cosets = fixed_polys
            .iter()
            .map(|poly| vk.domain.coeff_to_extended(poly.clone()))
            .collect();
    
        let timer = start_timer!(|| "assembly build pkey");
        let permutation_pk = assembly
            .permutation
            .build_pk(params, &vk.domain, &cs.permutation);
        end_timer!(timer);
    
        let timer = start_timer!(|| "l poly");
        // Compute l_0(X)
        // TODO: this can be done more efficiently
        let mut l0 = vk.domain.empty_lagrange();
        l0[0] = C::Scalar::one();
        let l0 = vk.domain.lagrange_to_coeff(l0);
        #[cfg(not(feature = "cuda"))]
        let l0 = vk.domain.coeff_to_extended(l0);
    
        // Compute l_blind(X) which evaluates to 1 for each blinding factor row
        // and 0 otherwise over the domain.
        let mut l_blind = vk.domain.empty_lagrange();
        for evaluation in l_blind[..].iter_mut().rev().take(cs.blinding_factors()) {
            *evaluation = C::Scalar::one();
        }
        let l_blind = vk.domain.lagrange_to_coeff(l_blind);
        let l_blind_extended = vk.domain.coeff_to_extended(l_blind);
    
        // Compute l_last(X) which evaluates to 1 on the first inactive row (just
        // before the blinding factors) and 0 otherwise over the domain
        let mut l_last = vk.domain.empty_lagrange();
        l_last[params.n as usize - cs.blinding_factors() - 1] = C::Scalar::one();
        let l_last = vk.domain.lagrange_to_coeff(l_last);
        let l_last_extended = vk.domain.coeff_to_extended(l_last.clone());
    
        // Compute l_active_row(X)
        let one = C::Scalar::one();
    
        let mut l_active_row = vk.domain.empty_extended();
        parallelize(&mut l_active_row, |values, start| {
            for (i, value) in values.iter_mut().enumerate() {
                let idx = i + start;
                *value = one - (l_last_extended[idx] + l_blind_extended[idx]);
            }
        });
        end_timer!(timer);
    
        let timer = start_timer!(|| "prepare ev");
        // Compute the optimized evaluation data structure
        let ev = Evaluator::new(&vk.cs);
        end_timer!(timer);
    
        #[cfg(not(feature = "cuda"))]
        let l_last = l_last_extended;
    
        Ok(ProvingKey {
            vk,
            l0,
            l_last,
            l_active_row,
            fixed_values: fixed,
            fixed_polys,
    
            #[cfg(not(feature = "cuda"))]
            fixed_cosets,
            permutation: permutation_pk,
            ev,
        })
    }
    *)
    Definition keygen_pk (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ C; ConcreteCircuit ], [ params; vk; circuit ] =>
        ltac:(M.monadic
          (let params := M.alloc (| params |) in
          let vk := M.alloc (| vk |) in
          let circuit := M.alloc (| circuit |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let cs :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.apply
                          (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                          [ Ty.associated ],
                        [],
                        "default",
                        []
                      |),
                      []
                    |)
                  |) in
                let config :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "halo2_proofs::plonk::circuit::Circuit",
                        ConcreteCircuit,
                        [ Ty.associated ],
                        "configure",
                        []
                      |),
                      [ cs ]
                    |)
                  |) in
                let cs := M.copy (| cs |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.Pure.lt
                                  (M.rust_cast
                                    (M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| params |),
                                        "halo2_proofs::poly::commitment::Params",
                                        "n"
                                      |)
                                    |)))
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                                        [ Ty.associated ],
                                      "minimum_rows",
                                      []
                                    |),
                                    [ cs ]
                                  |))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "halo2_proofs::plonk::error::Error",
                                          "not_enough_rows_available",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| params |),
                                              "halo2_proofs::poly::commitment::Params",
                                              "k"
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let assembly :=
                  M.alloc (|
                    Value.StructRecord
                      "halo2_proofs::plonk::keygen::AssemblyAssigner"
                      [
                        ("k",
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| params |),
                              "halo2_proofs::poly::commitment::Params",
                              "k"
                            |)
                          |));
                        ("fixed",
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                [
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::Mutex")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                                [ Ty.associated ];
                                              Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::Mutex")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                                [ Ty.associated ];
                                              Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_function (|
                                      "alloc::vec::from_elem",
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                              [ Ty.associated ];
                                            Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                          ]
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                                            [ Ty.associated ],
                                          "empty_lagrange_assigned",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            vk,
                                            "halo2_proofs::plonk::VerifyingKey",
                                            "domain"
                                          |)
                                        ]
                                      |);
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          cs,
                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                          "num_fixed_columns"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |));
                        ("permutation",
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                [
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::Mutex")
                                    [
                                      Ty.path
                                        "halo2_proofs::plonk::permutation::keygen::ParallelAssembly"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::Mutex")
                                    [
                                      Ty.path
                                        "halo2_proofs::plonk::permutation::keygen::ParallelAssembly"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path
                                        "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                                      "new",
                                      []
                                    |),
                                    [
                                      M.rust_cast
                                        (M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| params |),
                                            "halo2_proofs::poly::commitment::Params",
                                            "n"
                                          |)
                                        |));
                                      M.SubPointer.get_struct_record_field (|
                                        cs,
                                        "halo2_proofs::plonk::circuit::ConstraintSystem",
                                        "permutation"
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |));
                        ("selectors",
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                [
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::Mutex")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::Mutex")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_function (|
                                      "alloc::vec::from_elem",
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ]
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_function (|
                                          "alloc::vec::from_elem",
                                          [ Ty.path "bool" ]
                                        |),
                                        [
                                          Value.Bool false;
                                          M.rust_cast
                                            (M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| params |),
                                                "halo2_proofs::poly::commitment::Params",
                                                "n"
                                              |)
                                            |))
                                        ]
                                      |);
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          cs,
                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                          "num_selectors"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |));
                        ("usable_rows",
                          Value.StructRecord
                            "core::ops::range::Range"
                            [
                              ("start", Value.Integer 0);
                              ("end_",
                                BinOp.Panic.sub (|
                                  Integer.Usize,
                                  M.rust_cast
                                    (M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| params |),
                                        "halo2_proofs::poly::commitment::Params",
                                        "n"
                                      |)
                                    |)),
                                  BinOp.Panic.add (|
                                    Integer.Usize,
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                                          [ Ty.associated ],
                                        "blinding_factors",
                                        []
                                      |),
                                      [ cs ]
                                    |),
                                    Value.Integer 1
                                  |)
                                |))
                            ]);
                        ("_marker", Value.StructTuple "core::marker::PhantomData" [])
                      ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "halo2_proofs::plonk::circuit::FloorPlanner",
                              Ty.associated,
                              [],
                              "synthesize",
                              [
                                Ty.associated;
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::keygen::AssemblyAssigner")
                                  [ Ty.associated ];
                                ConcreteCircuit
                              ]
                            |),
                            [
                              assembly;
                              M.read (| circuit |);
                              M.read (| config |);
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "clone",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    cs,
                                    "halo2_proofs::plonk::circuit::ConstraintSystem",
                                    "constants"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::ProvingKey")
                                            [ C ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let assembly :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::convert::Into",
                        Ty.apply
                          (Ty.path "halo2_proofs::plonk::keygen::AssemblyAssigner")
                          [ Ty.associated ],
                        [
                          Ty.apply
                            (Ty.path "halo2_proofs::plonk::keygen::Assembly")
                            [ Ty.associated ]
                        ],
                        "into",
                        []
                      |),
                      [ M.read (| assembly |) ]
                    |)
                  |) in
                let timer :=
                  M.alloc (| Value.StructTuple "ark_std::perf_trace::inner::TimerInfo" [] |) in
                M.match_operator (|
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Value.Bool false |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          let fixed :=
                            M.alloc (|
                              M.call_closure (|
                                M.get_function (|
                                  "halo2_proofs::poly::batch_invert_assigned",
                                  [ Ty.associated ]
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      assembly,
                                      "halo2_proofs::plonk::keygen::Assembly",
                                      "fixed"
                                    |)
                                  |)
                                ]
                              |)
                            |) in
                          M.match_operator (|
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                                    [ Ty.associated ],
                                  "compress_selectors",
                                  []
                                |),
                                [
                                  M.read (| cs |);
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      assembly,
                                      "halo2_proofs::plonk::keygen::Assembly",
                                      "selectors"
                                    |)
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let cs := M.copy (| γ0_0 |) in
                                  let selector_polys := M.copy (| γ0_1 |) in
                                  let _ :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::collect::Extend",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [
                                                  Ty.associated;
                                                  Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [
                                                Ty.associated;
                                                Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                              ]
                                          ],
                                          "extend",
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.associated;
                                                      Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                    ])
                                              ]
                                          ]
                                        |),
                                        [
                                          fixed;
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.associated; Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "map",
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.associated;
                                                      Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                    ])
                                              ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::collect::IntoIterator",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.associated;
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "into_iter",
                                                  []
                                                |),
                                                [ M.read (| selector_polys |) ]
                                              |);
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      M.match_operator (|
                                                        M.alloc (| α0 |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let poly := M.copy (| γ |) in
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::poly::domain::EvaluationDomain")
                                                                    [ Ty.associated ],
                                                                  "lagrange_from_vec",
                                                                  []
                                                                |),
                                                                [
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    vk,
                                                                    "halo2_proofs::plonk::VerifyingKey",
                                                                    "domain"
                                                                  |);
                                                                  M.read (| poly |)
                                                                ]
                                                              |)))
                                                        ]
                                                      |)
                                                    | _ => M.impossible (||)
                                                    end))
                                            ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  M.alloc (|
                                    Value.Tuple [ M.read (| cs |); M.read (| fixed |) ]
                                  |)))
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            M.match_operator (|
                              M.alloc (| Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          UnOp.Pure.not
                                            (BinOp.Pure.eq
                                              (M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.path "bool";
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "len",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    assembly,
                                                    "halo2_proofs::plonk::keygen::Assembly",
                                                    "selectors"
                                                  |)
                                                ]
                                              |))
                                              (Value.Integer 0))
                                        |)) in
                                    let _ :=
                                      M.is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.alloc (|
                                      M.never_to_any (|
                                        M.call_closure (|
                                          M.get_function (| "core::panicking::panic", [] |),
                                          [
                                            M.read (|
                                              Value.String
                                                "assertion failed: assembly.selectors.len() == 0"
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                              ]
                            |) in
                          M.alloc (|
                            Value.Tuple
                              [
                                M.read (| cs |);
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "rayon::iter::ParallelIterator",
                                    Ty.apply
                                      (Ty.path "rayon::iter::map::Map")
                                      [
                                        Ty.apply
                                          (Ty.path "rayon::vec::IntoIter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::assigned::Assigned")
                                                  [ Ty.associated ];
                                                Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                              ]
                                          ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::assigned::Assigned")
                                                      [ Ty.associated ];
                                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                  ]
                                              ]
                                          ]
                                          (Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [
                                              Ty.associated;
                                              Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                            ])
                                      ],
                                    [],
                                    "collect",
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [
                                              Ty.associated;
                                              Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "rayon::iter::ParallelIterator",
                                        Ty.apply
                                          (Ty.path "rayon::vec::IntoIter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::assigned::Assigned")
                                                  [ Ty.associated ];
                                                Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                              ]
                                          ],
                                        [],
                                        "map",
                                        [
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::assigned::Assigned")
                                                        [ Ty.associated ];
                                                      Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                    ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [
                                                Ty.associated;
                                                Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                              ]);
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [
                                              Ty.associated;
                                              Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                            ]
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "rayon::iter::IntoParallelIterator",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::assigned::Assigned")
                                                      [ Ty.associated ];
                                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            "into_par_iter",
                                            []
                                          |),
                                          [
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                assembly,
                                                "halo2_proofs::plonk::keygen::Assembly",
                                                "fixed"
                                              |)
                                            |)
                                          ]
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                M.match_operator (|
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let x := M.copy (| γ |) in
                                                        Value.StructRecord
                                                          "halo2_proofs::poly::Polynomial"
                                                          [
                                                            ("values",
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::map::Map")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::assigned::Assigned")
                                                                            [ Ty.associated ]
                                                                        ];
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::assigned::Assigned")
                                                                                    [ Ty.associated
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                        Ty.associated
                                                                    ],
                                                                  [],
                                                                  "collect",
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.associated;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::assigned::Assigned")
                                                                            [ Ty.associated ]
                                                                        ],
                                                                      [],
                                                                      "map",
                                                                      [
                                                                        Ty.associated;
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::assigned::Assigned")
                                                                                      [
                                                                                        Ty.associated
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          Ty.associated
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::collect::IntoIterator",
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::assigned::Assigned")
                                                                                    [ Ty.associated
                                                                                    ]
                                                                                ]
                                                                            ],
                                                                          [],
                                                                          "into_iter",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::deref::Deref",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::poly::Polynomial")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::assigned::Assigned")
                                                                                    [ Ty.associated
                                                                                    ];
                                                                                  Ty.path
                                                                                    "halo2_proofs::poly::LagrangeCoeff"
                                                                                ],
                                                                              [],
                                                                              "deref",
                                                                              []
                                                                            |),
                                                                            [ x ]
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      M.closure
                                                                        (fun γ =>
                                                                          ltac:(M.monadic
                                                                            match γ with
                                                                            | [ α0 ] =>
                                                                              M.match_operator (|
                                                                                M.alloc (| α0 |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let x :=
                                                                                        M.copy (|
                                                                                          γ
                                                                                        |) in
                                                                                      M.read (|
                                                                                        let _ :=
                                                                                          M.match_operator (|
                                                                                            M.alloc (|
                                                                                              Value.Tuple
                                                                                                []
                                                                                            |),
                                                                                            [
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (let
                                                                                                        γ :=
                                                                                                    M.use
                                                                                                      (M.alloc (|
                                                                                                        UnOp.Pure.not
                                                                                                          (M.call_closure (|
                                                                                                            M.get_associated_function (|
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "core::option::Option")
                                                                                                                [
                                                                                                                  Ty.associated
                                                                                                                ],
                                                                                                              "is_none",
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.alloc (|
                                                                                                                M.call_closure (|
                                                                                                                  M.get_associated_function (|
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "halo2_proofs::plonk::assigned::Assigned")
                                                                                                                      [
                                                                                                                        Ty.associated
                                                                                                                      ],
                                                                                                                    "denominator",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.read (|
                                                                                                                      x
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)
                                                                                                              |)
                                                                                                            ]
                                                                                                          |))
                                                                                                      |)) in
                                                                                                  let
                                                                                                        _ :=
                                                                                                    M.is_constant_or_break_match (|
                                                                                                      M.read (|
                                                                                                        γ
                                                                                                      |),
                                                                                                      Value.Bool
                                                                                                        true
                                                                                                    |) in
                                                                                                  M.alloc (|
                                                                                                    M.never_to_any (|
                                                                                                      M.call_closure (|
                                                                                                        M.get_function (|
                                                                                                          "core::panicking::panic",
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.read (|
                                                                                                            Value.String
                                                                                                              "assertion failed: x.denominator().is_none()"
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)));
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (M.alloc (|
                                                                                                    Value.Tuple
                                                                                                      []
                                                                                                  |)))
                                                                                            ]
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          M.call_closure (|
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::assigned::Assigned")
                                                                                                [
                                                                                                  Ty.associated
                                                                                                ],
                                                                                              "numerator",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                x
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      |)))
                                                                                ]
                                                                              |)
                                                                            | _ => M.impossible (||)
                                                                            end))
                                                                    ]
                                                                  |)
                                                                ]
                                                              |));
                                                            ("_marker",
                                                              Value.StructTuple
                                                                "core::marker::PhantomData"
                                                                [])
                                                          ]))
                                                  ]
                                                |)
                                              | _ => M.impossible (||)
                                              end))
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                          |)))
                    ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let cs := M.copy (| γ0_0 |) in
                        let fixed := M.copy (| γ0_1 |) in
                        M.match_operator (|
                          timer,
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let timer :=
                                  M.alloc (|
                                    Value.StructTuple "ark_std::perf_trace::inner::TimerInfo" []
                                  |) in
                                let fixed_polys :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "rayon::iter::ParallelIterator",
                                        Ty.apply
                                          (Ty.path "rayon::iter::map::Map")
                                          [
                                            Ty.apply
                                              (Ty.path "rayon::slice::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                  ]
                                              ];
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path
                                                              "halo2_proofs::poly::LagrangeCoeff"
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff"
                                                ])
                                          ],
                                        [],
                                        "collect",
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "rayon::iter::ParallelIterator",
                                            Ty.apply
                                              (Ty.path "rayon::slice::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                  ]
                                              ],
                                            [],
                                            "map",
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::Polynomial")
                                                            [
                                                              Ty.associated;
                                                              Ty.path
                                                                "halo2_proofs::poly::LagrangeCoeff"
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::Coeff"
                                                  ]);
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "rayon::iter::IntoParallelRefIterator",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "par_iter",
                                                []
                                              |),
                                              [ fixed ]
                                            |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let poly := M.copy (| γ |) in
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::domain::EvaluationDomain")
                                                                  [ Ty.associated ],
                                                                "lagrange_to_coeff_st",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  vk,
                                                                  "halo2_proofs::plonk::VerifyingKey",
                                                                  "domain"
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::clone::Clone",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::poly::Polynomial")
                                                                      [
                                                                        Ty.associated;
                                                                        Ty.path
                                                                          "halo2_proofs::poly::LagrangeCoeff"
                                                                      ],
                                                                    [],
                                                                    "clone",
                                                                    []
                                                                  |),
                                                                  [ M.read (| poly |) ]
                                                                |)
                                                              ]
                                                            |)))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      ]
                                    |)
                                  |) in
                                M.match_operator (|
                                  timer,
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let fixed_cosets :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::map::Map")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "halo2_proofs::poly::Coeff"
                                                          ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::Polynomial")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Coeff"
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.associated;
                                                          Ty.path
                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                        ])
                                                  ],
                                                [],
                                                "collect",
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.associated;
                                                          Ty.path
                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "halo2_proofs::poly::Coeff"
                                                          ]
                                                      ],
                                                    [],
                                                    "map",
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.associated;
                                                          Ty.path
                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::poly::Polynomial")
                                                                    [
                                                                      Ty.associated;
                                                                      Ty.path
                                                                        "halo2_proofs::poly::Coeff"
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path
                                                              "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                          ])
                                                    ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::Polynomial")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "halo2_proofs::poly::Coeff"
                                                              ]
                                                          ],
                                                        "iter",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::Polynomial")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Coeff"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            "deref",
                                                            []
                                                          |),
                                                          [ fixed_polys ]
                                                        |)
                                                      ]
                                                    |);
                                                    M.closure
                                                      (fun γ =>
                                                        ltac:(M.monadic
                                                          match γ with
                                                          | [ α0 ] =>
                                                            M.match_operator (|
                                                              M.alloc (| α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let poly := M.copy (| γ |) in
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::poly::domain::EvaluationDomain")
                                                                          [ Ty.associated ],
                                                                        "coeff_to_extended",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          vk,
                                                                          "halo2_proofs::plonk::VerifyingKey",
                                                                          "domain"
                                                                        |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::clone::Clone",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::poly::Polynomial")
                                                                              [
                                                                                Ty.associated;
                                                                                Ty.path
                                                                                  "halo2_proofs::poly::Coeff"
                                                                              ],
                                                                            [],
                                                                            "clone",
                                                                            []
                                                                          |),
                                                                          [ M.read (| poly |) ]
                                                                        |)
                                                                      ]
                                                                    |)))
                                                              ]
                                                            |)
                                                          | _ => M.impossible (||)
                                                          end))
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        let timer :=
                                          M.alloc (|
                                            Value.StructTuple
                                              "ark_std::perf_trace::inner::TimerInfo"
                                              []
                                          |) in
                                        let permutation_pk :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path
                                                  "halo2_proofs::plonk::permutation::keygen::Assembly",
                                                "build_pk",
                                                [ C ]
                                              |),
                                              [
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    assembly,
                                                    "halo2_proofs::plonk::keygen::Assembly",
                                                    "permutation"
                                                  |)
                                                |);
                                                M.read (| params |);
                                                M.SubPointer.get_struct_record_field (|
                                                  vk,
                                                  "halo2_proofs::plonk::VerifyingKey",
                                                  "domain"
                                                |);
                                                M.SubPointer.get_struct_record_field (|
                                                  cs,
                                                  "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                  "permutation"
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.match_operator (|
                                          timer,
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let timer :=
                                                  M.alloc (|
                                                    Value.StructTuple
                                                      "ark_std::perf_trace::inner::TimerInfo"
                                                      []
                                                  |) in
                                                let l0 :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::domain::EvaluationDomain")
                                                          [ Ty.associated ],
                                                        "empty_lagrange",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          vk,
                                                          "halo2_proofs::plonk::VerifyingKey",
                                                          "domain"
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.write (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::index::IndexMut",
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path
                                                              "halo2_proofs::poly::LagrangeCoeff"
                                                          ],
                                                        [ Ty.path "usize" ],
                                                        "index_mut",
                                                        []
                                                      |),
                                                      [ l0; Value.Integer 0 ]
                                                    |),
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "ff::Field",
                                                        Ty.associated,
                                                        [],
                                                        "one",
                                                        []
                                                      |),
                                                      []
                                                    |)
                                                  |) in
                                                let l0 :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::domain::EvaluationDomain")
                                                          [ Ty.associated ],
                                                        "lagrange_to_coeff",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          vk,
                                                          "halo2_proofs::plonk::VerifyingKey",
                                                          "domain"
                                                        |);
                                                        M.read (| l0 |)
                                                      ]
                                                    |)
                                                  |) in
                                                let l0 :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::domain::EvaluationDomain")
                                                          [ Ty.associated ],
                                                        "coeff_to_extended",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          vk,
                                                          "halo2_proofs::plonk::VerifyingKey",
                                                          "domain"
                                                        |);
                                                        M.read (| l0 |)
                                                      ]
                                                    |)
                                                  |) in
                                                let l_blind :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::domain::EvaluationDomain")
                                                          [ Ty.associated ],
                                                        "empty_lagrange",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          vk,
                                                          "halo2_proofs::plonk::VerifyingKey",
                                                          "domain"
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.use
                                                    (M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::collect::IntoIterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::take::Take")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::rev::Rev")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::IterMut")
                                                                      [ Ty.associated ]
                                                                  ]
                                                              ],
                                                            [],
                                                            "into_iter",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::rev::Rev")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::IterMut")
                                                                      [ Ty.associated ]
                                                                  ],
                                                                [],
                                                                "take",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::IterMut")
                                                                      [ Ty.associated ],
                                                                    [],
                                                                    "rev",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [ Ty.associated ],
                                                                        "iter_mut",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::index::IndexMut",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::poly::Polynomial")
                                                                              [
                                                                                Ty.associated;
                                                                                Ty.path
                                                                                  "halo2_proofs::poly::LagrangeCoeff"
                                                                              ],
                                                                            [
                                                                              Ty.path
                                                                                "core::ops::range::RangeFull"
                                                                            ],
                                                                            "index_mut",
                                                                            []
                                                                          |),
                                                                          [
                                                                            l_blind;
                                                                            Value.StructTuple
                                                                              "core::ops::range::RangeFull"
                                                                              []
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                                      [ Ty.associated ],
                                                                    "blinding_factors",
                                                                    []
                                                                  |),
                                                                  [ cs ]
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let iter := M.copy (| γ |) in
                                                            M.loop (|
                                                              ltac:(M.monadic
                                                                (let _ :=
                                                                  M.match_operator (|
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::iter::traits::iterator::Iterator",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::iter::adapters::take::Take")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::iter::adapters::rev::Rev")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::IterMut")
                                                                                    [ Ty.associated
                                                                                    ]
                                                                                ]
                                                                            ],
                                                                          [],
                                                                          "next",
                                                                          []
                                                                        |),
                                                                        [ iter ]
                                                                      |)
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (M.alloc (|
                                                                            M.never_to_any (|
                                                                              M.read (|
                                                                                M.break (||)
                                                                              |)
                                                                            |)
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ0_0 :=
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              γ,
                                                                              "core::option::Option::Some",
                                                                              0
                                                                            |) in
                                                                          let evaluation :=
                                                                            M.copy (| γ0_0 |) in
                                                                          let _ :=
                                                                            M.write (|
                                                                              M.read (|
                                                                                evaluation
                                                                              |),
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "ff::Field",
                                                                                  Ty.associated,
                                                                                  [],
                                                                                  "one",
                                                                                  []
                                                                                |),
                                                                                []
                                                                              |)
                                                                            |) in
                                                                          M.alloc (|
                                                                            Value.Tuple []
                                                                          |)))
                                                                    ]
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)))
                                                            |)))
                                                      ]
                                                    |)) in
                                                let l_blind :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::domain::EvaluationDomain")
                                                          [ Ty.associated ],
                                                        "lagrange_to_coeff",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          vk,
                                                          "halo2_proofs::plonk::VerifyingKey",
                                                          "domain"
                                                        |);
                                                        M.read (| l_blind |)
                                                      ]
                                                    |)
                                                  |) in
                                                let l_blind_extended :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::domain::EvaluationDomain")
                                                          [ Ty.associated ],
                                                        "coeff_to_extended",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          vk,
                                                          "halo2_proofs::plonk::VerifyingKey",
                                                          "domain"
                                                        |);
                                                        M.read (| l_blind |)
                                                      ]
                                                    |)
                                                  |) in
                                                let l_last :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::domain::EvaluationDomain")
                                                          [ Ty.associated ],
                                                        "empty_lagrange",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          vk,
                                                          "halo2_proofs::plonk::VerifyingKey",
                                                          "domain"
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.write (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::index::IndexMut",
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path
                                                              "halo2_proofs::poly::LagrangeCoeff"
                                                          ],
                                                        [ Ty.path "usize" ],
                                                        "index_mut",
                                                        []
                                                      |),
                                                      [
                                                        l_last;
                                                        BinOp.Panic.sub (|
                                                          Integer.Usize,
                                                          BinOp.Panic.sub (|
                                                            Integer.Usize,
                                                            M.rust_cast
                                                              (M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| params |),
                                                                  "halo2_proofs::poly::commitment::Params",
                                                                  "n"
                                                                |)
                                                              |)),
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                                  [ Ty.associated ],
                                                                "blinding_factors",
                                                                []
                                                              |),
                                                              [ cs ]
                                                            |)
                                                          |),
                                                          Value.Integer 1
                                                        |)
                                                      ]
                                                    |),
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "ff::Field",
                                                        Ty.associated,
                                                        [],
                                                        "one",
                                                        []
                                                      |),
                                                      []
                                                    |)
                                                  |) in
                                                let l_last :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::domain::EvaluationDomain")
                                                          [ Ty.associated ],
                                                        "lagrange_to_coeff",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          vk,
                                                          "halo2_proofs::plonk::VerifyingKey",
                                                          "domain"
                                                        |);
                                                        M.read (| l_last |)
                                                      ]
                                                    |)
                                                  |) in
                                                let l_last_extended :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::domain::EvaluationDomain")
                                                          [ Ty.associated ],
                                                        "coeff_to_extended",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          vk,
                                                          "halo2_proofs::plonk::VerifyingKey",
                                                          "domain"
                                                        |);
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::clone::Clone",
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::Polynomial")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "halo2_proofs::poly::Coeff"
                                                              ],
                                                            [],
                                                            "clone",
                                                            []
                                                          |),
                                                          [ l_last ]
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                let one :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "ff::Field",
                                                        Ty.associated,
                                                        [],
                                                        "one",
                                                        []
                                                      |),
                                                      []
                                                    |)
                                                  |) in
                                                let l_active_row :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::domain::EvaluationDomain")
                                                          [ Ty.associated ],
                                                        "empty_extended",
                                                        []
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          vk,
                                                          "halo2_proofs::plonk::VerifyingKey",
                                                          "domain"
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_function (|
                                                        "halo2_proofs::arithmetic::parallelize",
                                                        [
                                                          Ty.associated;
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        [ Ty.associated ]
                                                                    ];
                                                                  Ty.path "usize"
                                                                ]
                                                            ]
                                                            (Ty.tuple [])
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::DerefMut",
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::Polynomial")
                                                              [
                                                                Ty.associated;
                                                                Ty.path
                                                                  "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                              ],
                                                            [],
                                                            "deref_mut",
                                                            []
                                                          |),
                                                          [ l_active_row ]
                                                        |);
                                                        M.closure
                                                          (fun γ =>
                                                            ltac:(M.monadic
                                                              match γ with
                                                              | [ α0; α1 ] =>
                                                                M.match_operator (|
                                                                  M.alloc (| α0 |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let values :=
                                                                          M.copy (| γ |) in
                                                                        M.match_operator (|
                                                                          M.alloc (| α1 |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let start :=
                                                                                  M.copy (| γ |) in
                                                                                M.read (|
                                                                                  M.use
                                                                                    (M.match_operator (|
                                                                                      M.alloc (|
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::iter::traits::collect::IntoIterator",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::iter::adapters::enumerate::Enumerate")
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::slice::iter::IterMut")
                                                                                                  [
                                                                                                    Ty.associated
                                                                                                  ]
                                                                                              ],
                                                                                            [],
                                                                                            "into_iter",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "core::iter::traits::iterator::Iterator",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::slice::iter::IterMut")
                                                                                                  [
                                                                                                    Ty.associated
                                                                                                  ],
                                                                                                [],
                                                                                                "enumerate",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "slice")
                                                                                                      [
                                                                                                        Ty.associated
                                                                                                      ],
                                                                                                    "iter_mut",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      values
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  iter :=
                                                                                              M.copy (|
                                                                                                γ
                                                                                              |) in
                                                                                            M.loop (|
                                                                                              ltac:(M.monadic
                                                                                                (let
                                                                                                      _ :=
                                                                                                  M.match_operator (|
                                                                                                    M.alloc (|
                                                                                                      M.call_closure (|
                                                                                                        M.get_trait_method (|
                                                                                                          "core::iter::traits::iterator::Iterator",
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::iter::adapters::enumerate::Enumerate")
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "core::slice::iter::IterMut")
                                                                                                                [
                                                                                                                  Ty.associated
                                                                                                                ]
                                                                                                            ],
                                                                                                          [],
                                                                                                          "next",
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          iter
                                                                                                        ]
                                                                                                      |)
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (M.alloc (|
                                                                                                            M.never_to_any (|
                                                                                                              M.read (|
                                                                                                                M.break (||)
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)));
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (let
                                                                                                                γ0_0 :=
                                                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                                                              γ,
                                                                                                              "core::option::Option::Some",
                                                                                                              0
                                                                                                            |) in
                                                                                                          let
                                                                                                                γ1_0 :=
                                                                                                            M.SubPointer.get_tuple_field (|
                                                                                                              γ0_0,
                                                                                                              0
                                                                                                            |) in
                                                                                                          let
                                                                                                                γ1_1 :=
                                                                                                            M.SubPointer.get_tuple_field (|
                                                                                                              γ0_0,
                                                                                                              1
                                                                                                            |) in
                                                                                                          let
                                                                                                                i :=
                                                                                                            M.copy (|
                                                                                                              γ1_0
                                                                                                            |) in
                                                                                                          let
                                                                                                                value :=
                                                                                                            M.copy (|
                                                                                                              γ1_1
                                                                                                            |) in
                                                                                                          let
                                                                                                                idx :=
                                                                                                            M.alloc (|
                                                                                                              BinOp.Panic.add (|
                                                                                                                Integer.Usize,
                                                                                                                M.read (|
                                                                                                                  i
                                                                                                                |),
                                                                                                                M.read (|
                                                                                                                  start
                                                                                                                |)
                                                                                                              |)
                                                                                                            |) in
                                                                                                          let
                                                                                                                _ :=
                                                                                                            M.write (|
                                                                                                              M.read (|
                                                                                                                value
                                                                                                              |),
                                                                                                              M.call_closure (|
                                                                                                                M.get_trait_method (|
                                                                                                                  "core::ops::arith::Sub",
                                                                                                                  Ty.associated,
                                                                                                                  [
                                                                                                                    Ty.associated
                                                                                                                  ],
                                                                                                                  "sub",
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.read (|
                                                                                                                    one
                                                                                                                  |);
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::ops::arith::Add",
                                                                                                                      Ty.associated,
                                                                                                                      [
                                                                                                                        Ty.associated
                                                                                                                      ],
                                                                                                                      "add",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.read (|
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::ops::index::Index",
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "halo2_proofs::poly::Polynomial")
                                                                                                                              [
                                                                                                                                Ty.associated;
                                                                                                                                Ty.path
                                                                                                                                  "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                              ],
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "usize"
                                                                                                                            ],
                                                                                                                            "index",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            l_last_extended;
                                                                                                                            M.read (|
                                                                                                                              idx
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |);
                                                                                                                      M.read (|
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::ops::index::Index",
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "halo2_proofs::poly::Polynomial")
                                                                                                                              [
                                                                                                                                Ty.associated;
                                                                                                                                Ty.path
                                                                                                                                  "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                              ],
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "usize"
                                                                                                                            ],
                                                                                                                            "index",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            l_blind_extended;
                                                                                                                            M.read (|
                                                                                                                              idx
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |)
                                                                                                            |) in
                                                                                                          M.alloc (|
                                                                                                            Value.Tuple
                                                                                                              []
                                                                                                          |)))
                                                                                                    ]
                                                                                                  |) in
                                                                                                M.alloc (|
                                                                                                  Value.Tuple
                                                                                                    []
                                                                                                |)))
                                                                                            |)))
                                                                                      ]
                                                                                    |))
                                                                                |)))
                                                                          ]
                                                                        |)))
                                                                  ]
                                                                |)
                                                              | _ => M.impossible (||)
                                                              end))
                                                      ]
                                                    |)
                                                  |) in
                                                M.match_operator (|
                                                  timer,
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let timer :=
                                                          M.alloc (|
                                                            Value.StructTuple
                                                              "ark_std::perf_trace::inner::TimerInfo"
                                                              []
                                                          |) in
                                                        let ev :=
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::evaluation::Evaluator")
                                                                  [ C ],
                                                                "new",
                                                                []
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  vk,
                                                                  "halo2_proofs::plonk::VerifyingKey",
                                                                  "cs"
                                                                |)
                                                              ]
                                                            |)
                                                          |) in
                                                        M.match_operator (|
                                                          timer,
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let l_last :=
                                                                  M.copy (| l_last_extended |) in
                                                                M.alloc (|
                                                                  Value.StructTuple
                                                                    "core::result::Result::Ok"
                                                                    [
                                                                      Value.StructRecord
                                                                        "halo2_proofs::plonk::ProvingKey"
                                                                        [
                                                                          ("vk", M.read (| vk |));
                                                                          ("l0", M.read (| l0 |));
                                                                          ("l_last",
                                                                            M.read (| l_last |));
                                                                          ("l_active_row",
                                                                            M.read (|
                                                                              l_active_row
                                                                            |));
                                                                          ("fixed_values",
                                                                            M.read (| fixed |));
                                                                          ("fixed_polys",
                                                                            M.read (|
                                                                              fixed_polys
                                                                            |));
                                                                          ("fixed_cosets",
                                                                            M.read (|
                                                                              fixed_cosets
                                                                            |));
                                                                          ("permutation",
                                                                            M.read (|
                                                                              permutation_pk
                                                                            |));
                                                                          ("ev", M.read (| ev |))
                                                                        ]
                                                                    ]
                                                                |)))
                                                          ]
                                                        |)))
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
    pub(crate) fn keygen_pk_from_info<C>(
        params: &Params<C>,
        vk: &VerifyingKey<C>,
        fixed: Vec<Polynomial<C::Scalar, LagrangeCoeff>>,
        permutation: permutation::keygen::Assembly,
    ) -> Result<ProvingKey<C>, Error>
    where
        C: CurveAffine,
    {
        let cs = vk.cs.clone();
        assert!(cs.num_selectors == 0);
        //We do not support the case when selectors exists
        //let selectors = vec![vec![false; params.n as usize]; cs.num_selectors];
        let selectors = vec![];
        use ark_std::{end_timer, start_timer};
    
        let timer = start_timer!(|| "compress selectors ...");
        let (cs, _) = cs.compress_selectors(selectors);
        end_timer!(timer);
        let timer = start_timer!(|| "fixed polys ...");
    
        let fixed_polys: Vec<_> = fixed
            .iter()
            .map(|poly| vk.domain.lagrange_to_coeff_st(poly.clone()))
            .collect();
        end_timer!(timer);
    
        #[cfg(not(feature = "cuda"))]
        let fixed_cosets = fixed_polys
            .iter()
            .map(|poly| vk.domain.coeff_to_extended(poly.clone()))
            .collect();
    
        let timer = start_timer!(|| "build pk time...");
        let permutation_pk = permutation.build_pk(params, &vk.domain, &cs.permutation);
        end_timer!(timer);
    
        let timer = start_timer!(|| "l poly");
        // Compute l_0(X)
        // TODO: this can be done more efficiently
        let mut l0 = vk.domain.empty_lagrange();
        l0[0] = C::Scalar::one();
        let l0 = vk.domain.lagrange_to_coeff(l0);
        #[cfg(not(feature = "cuda"))]
        let l0 = vk.domain.coeff_to_extended(l0);
    
        // Compute l_blind(X) which evaluates to 1 for each blinding factor row
        // and 0 otherwise over the domain.
        let mut l_blind = vk.domain.empty_lagrange();
        for evaluation in l_blind[..].iter_mut().rev().take(cs.blinding_factors()) {
            *evaluation = C::Scalar::one();
        }
        let l_blind = vk.domain.lagrange_to_coeff(l_blind);
        let l_blind_extended = vk.domain.coeff_to_extended(l_blind);
    
        // Compute l_last(X) which evaluates to 1 on the first inactive row (just
        // before the blinding factors) and 0 otherwise over the domain
        let mut l_last = vk.domain.empty_lagrange();
        l_last[params.n as usize - cs.blinding_factors() - 1] = C::Scalar::one();
        let l_last = vk.domain.lagrange_to_coeff(l_last);
        let l_last_extended = vk.domain.coeff_to_extended(l_last.clone());
    
        // Compute l_active_row(X)
        let one = C::Scalar::one();
    
        let mut l_active_row = vk.domain.empty_extended();
        parallelize(&mut l_active_row, |values, start| {
            for (i, value) in values.iter_mut().enumerate() {
                let idx = i + start;
                *value = one - (l_last_extended[idx] + l_blind_extended[idx]);
            }
        });
        end_timer!(timer);
    
        let timer = start_timer!(|| "prepare ev");
        // Compute the optimized evaluation data structure
        let ev = Evaluator::new(&vk.cs);
        end_timer!(timer);
    
        #[cfg(not(feature = "cuda"))]
        let l_last = l_last_extended;
    
        Ok(ProvingKey {
            vk: vk.clone(),
            l0,
            l_last,
            l_active_row,
            fixed_values: fixed,
            fixed_polys,
    
            #[cfg(not(feature = "cuda"))]
            fixed_cosets,
            permutation: permutation_pk,
            ev,
        })
    }
    *)
    Definition keygen_pk_from_info (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ C ], [ params; vk; fixed; permutation ] =>
        ltac:(M.monadic
          (let params := M.alloc (| params |) in
          let vk := M.alloc (| vk |) in
          let fixed := M.alloc (| fixed |) in
          let permutation := M.alloc (| permutation |) in
          M.read (|
            let cs :=
              M.alloc (|
                M.call_closure (|
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                      [ Ty.associated ],
                    [],
                    "clone",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| vk |),
                      "halo2_proofs::plonk::VerifyingKey",
                      "cs"
                    |)
                  ]
                |)
              |) in
            let _ :=
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.Pure.not
                              (BinOp.Pure.eq
                                (M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    cs,
                                    "halo2_proofs::plonk::circuit::ConstraintSystem",
                                    "num_selectors"
                                  |)
                                |))
                                (Value.Integer 0))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.never_to_any (|
                          M.call_closure (|
                            M.get_function (| "core::panicking::panic", [] |),
                            [ M.read (| Value.String "assertion failed: cs.num_selectors == 0" |) ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |) in
            let selectors :=
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    []
                  |),
                  []
                |)
              |) in
            let timer :=
              M.alloc (| Value.StructTuple "ark_std::perf_trace::inner::TimerInfo" [] |) in
            M.match_operator (|
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                      [ Ty.associated ],
                    "compress_selectors",
                    []
                  |),
                  [ M.read (| cs |); M.read (| selectors |) ]
                |)
              |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                    let cs := M.copy (| γ0_0 |) in
                    M.match_operator (|
                      timer,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let timer :=
                              M.alloc (|
                                Value.StructTuple "ark_std::perf_trace::inner::TimerInfo" []
                              |) in
                            let fixed_polys :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::map::Map")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [
                                                Ty.associated;
                                                Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                              ]
                                          ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                      ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ])
                                      ],
                                    [],
                                    "collect",
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [
                                                Ty.associated;
                                                Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                              ]
                                          ],
                                        [],
                                        "map",
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ];
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.associated;
                                                          Ty.path
                                                            "halo2_proofs::poly::LagrangeCoeff"
                                                        ]
                                                    ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff"
                                              ])
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                  ]
                                              ],
                                            "iter",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [ fixed ]
                                            |)
                                          ]
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                M.match_operator (|
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let poly := M.copy (| γ |) in
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::domain::EvaluationDomain")
                                                              [ Ty.associated ],
                                                            "lagrange_to_coeff_st",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| vk |),
                                                              "halo2_proofs::plonk::VerifyingKey",
                                                              "domain"
                                                            |);
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::clone::Clone",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::Polynomial")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path
                                                                      "halo2_proofs::poly::LagrangeCoeff"
                                                                  ],
                                                                [],
                                                                "clone",
                                                                []
                                                              |),
                                                              [ M.read (| poly |) ]
                                                            |)
                                                          ]
                                                        |)))
                                                  ]
                                                |)
                                              | _ => M.impossible (||)
                                              end))
                                      ]
                                    |)
                                  ]
                                |)
                              |) in
                            M.match_operator (|
                              timer,
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let fixed_cosets :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "halo2_proofs::poly::Coeff"
                                                      ]
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::Polynomial")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "halo2_proofs::poly::Coeff"
                                                              ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.associated;
                                                      Ty.path
                                                        "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                    ])
                                              ],
                                            [],
                                            "collect",
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.associated;
                                                      Ty.path
                                                        "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "halo2_proofs::poly::Coeff"
                                                      ]
                                                  ],
                                                [],
                                                "map",
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.associated;
                                                      Ty.path
                                                        "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::poly::Polynomial")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path
                                                                    "halo2_proofs::poly::Coeff"
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                                      [
                                                        Ty.associated;
                                                        Ty.path
                                                          "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                      ])
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "halo2_proofs::poly::Coeff"
                                                          ]
                                                      ],
                                                    "iter",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::deref::Deref",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::Polynomial")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "halo2_proofs::poly::Coeff"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        "deref",
                                                        []
                                                      |),
                                                      [ fixed_polys ]
                                                    |)
                                                  ]
                                                |);
                                                M.closure
                                                  (fun γ =>
                                                    ltac:(M.monadic
                                                      match γ with
                                                      | [ α0 ] =>
                                                        M.match_operator (|
                                                          M.alloc (| α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let poly := M.copy (| γ |) in
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::poly::domain::EvaluationDomain")
                                                                      [ Ty.associated ],
                                                                    "coeff_to_extended",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.read (| vk |),
                                                                      "halo2_proofs::plonk::VerifyingKey",
                                                                      "domain"
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::clone::Clone",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::poly::Polynomial")
                                                                          [
                                                                            Ty.associated;
                                                                            Ty.path
                                                                              "halo2_proofs::poly::Coeff"
                                                                          ],
                                                                        [],
                                                                        "clone",
                                                                        []
                                                                      |),
                                                                      [ M.read (| poly |) ]
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)
                                                      | _ => M.impossible (||)
                                                      end))
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let timer :=
                                      M.alloc (|
                                        Value.StructTuple "ark_std::perf_trace::inner::TimerInfo" []
                                      |) in
                                    let permutation_pk :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path
                                              "halo2_proofs::plonk::permutation::keygen::Assembly",
                                            "build_pk",
                                            [ C ]
                                          |),
                                          [
                                            M.read (| permutation |);
                                            M.read (| params |);
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| vk |),
                                              "halo2_proofs::plonk::VerifyingKey",
                                              "domain"
                                            |);
                                            M.SubPointer.get_struct_record_field (|
                                              cs,
                                              "halo2_proofs::plonk::circuit::ConstraintSystem",
                                              "permutation"
                                            |)
                                          ]
                                        |)
                                      |) in
                                    M.match_operator (|
                                      timer,
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let timer :=
                                              M.alloc (|
                                                Value.StructTuple
                                                  "ark_std::perf_trace::inner::TimerInfo"
                                                  []
                                              |) in
                                            let l0 :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::domain::EvaluationDomain")
                                                      [ Ty.associated ],
                                                    "empty_lagrange",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| vk |),
                                                      "halo2_proofs::plonk::VerifyingKey",
                                                      "domain"
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let _ :=
                                              M.write (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::index::IndexMut",
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                      ],
                                                    [ Ty.path "usize" ],
                                                    "index_mut",
                                                    []
                                                  |),
                                                  [ l0; Value.Integer 0 ]
                                                |),
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "ff::Field",
                                                    Ty.associated,
                                                    [],
                                                    "one",
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |) in
                                            let l0 :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::domain::EvaluationDomain")
                                                      [ Ty.associated ],
                                                    "lagrange_to_coeff",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| vk |),
                                                      "halo2_proofs::plonk::VerifyingKey",
                                                      "domain"
                                                    |);
                                                    M.read (| l0 |)
                                                  ]
                                                |)
                                              |) in
                                            let l0 :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::domain::EvaluationDomain")
                                                      [ Ty.associated ],
                                                    "coeff_to_extended",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| vk |),
                                                      "halo2_proofs::plonk::VerifyingKey",
                                                      "domain"
                                                    |);
                                                    M.read (| l0 |)
                                                  ]
                                                |)
                                              |) in
                                            let l_blind :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::domain::EvaluationDomain")
                                                      [ Ty.associated ],
                                                    "empty_lagrange",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| vk |),
                                                      "halo2_proofs::plonk::VerifyingKey",
                                                      "domain"
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let _ :=
                                              M.use
                                                (M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::collect::IntoIterator",
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::take::Take")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::rev::Rev")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::IterMut")
                                                                  [ Ty.associated ]
                                                              ]
                                                          ],
                                                        [],
                                                        "into_iter",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::rev::Rev")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::IterMut")
                                                                  [ Ty.associated ]
                                                              ],
                                                            [],
                                                            "take",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::IterMut")
                                                                  [ Ty.associated ],
                                                                [],
                                                                "rev",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      [ Ty.associated ],
                                                                    "iter_mut",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::index::IndexMut",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::poly::Polynomial")
                                                                          [
                                                                            Ty.associated;
                                                                            Ty.path
                                                                              "halo2_proofs::poly::LagrangeCoeff"
                                                                          ],
                                                                        [
                                                                          Ty.path
                                                                            "core::ops::range::RangeFull"
                                                                        ],
                                                                        "index_mut",
                                                                        []
                                                                      |),
                                                                      [
                                                                        l_blind;
                                                                        Value.StructTuple
                                                                          "core::ops::range::RangeFull"
                                                                          []
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                                  [ Ty.associated ],
                                                                "blinding_factors",
                                                                []
                                                              |),
                                                              [ cs ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let iter := M.copy (| γ |) in
                                                        M.loop (|
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.match_operator (|
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::take::Take")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::iter::adapters::rev::Rev")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::IterMut")
                                                                                [ Ty.associated ]
                                                                            ]
                                                                        ],
                                                                      [],
                                                                      "next",
                                                                      []
                                                                    |),
                                                                    [ iter ]
                                                                  |)
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.alloc (|
                                                                        M.never_to_any (|
                                                                          M.read (| M.break (||) |)
                                                                        |)
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                          γ,
                                                                          "core::option::Option::Some",
                                                                          0
                                                                        |) in
                                                                      let evaluation :=
                                                                        M.copy (| γ0_0 |) in
                                                                      let _ :=
                                                                        M.write (|
                                                                          M.read (| evaluation |),
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "ff::Field",
                                                                              Ty.associated,
                                                                              [],
                                                                              "one",
                                                                              []
                                                                            |),
                                                                            []
                                                                          |)
                                                                        |) in
                                                                      M.alloc (| Value.Tuple [] |)))
                                                                ]
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                        |)))
                                                  ]
                                                |)) in
                                            let l_blind :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::domain::EvaluationDomain")
                                                      [ Ty.associated ],
                                                    "lagrange_to_coeff",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| vk |),
                                                      "halo2_proofs::plonk::VerifyingKey",
                                                      "domain"
                                                    |);
                                                    M.read (| l_blind |)
                                                  ]
                                                |)
                                              |) in
                                            let l_blind_extended :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::domain::EvaluationDomain")
                                                      [ Ty.associated ],
                                                    "coeff_to_extended",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| vk |),
                                                      "halo2_proofs::plonk::VerifyingKey",
                                                      "domain"
                                                    |);
                                                    M.read (| l_blind |)
                                                  ]
                                                |)
                                              |) in
                                            let l_last :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::domain::EvaluationDomain")
                                                      [ Ty.associated ],
                                                    "empty_lagrange",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| vk |),
                                                      "halo2_proofs::plonk::VerifyingKey",
                                                      "domain"
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let _ :=
                                              M.write (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::index::IndexMut",
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                      ],
                                                    [ Ty.path "usize" ],
                                                    "index_mut",
                                                    []
                                                  |),
                                                  [
                                                    l_last;
                                                    BinOp.Panic.sub (|
                                                      Integer.Usize,
                                                      BinOp.Panic.sub (|
                                                        Integer.Usize,
                                                        M.rust_cast
                                                          (M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| params |),
                                                              "halo2_proofs::poly::commitment::Params",
                                                              "n"
                                                            |)
                                                          |)),
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                              [ Ty.associated ],
                                                            "blinding_factors",
                                                            []
                                                          |),
                                                          [ cs ]
                                                        |)
                                                      |),
                                                      Value.Integer 1
                                                    |)
                                                  ]
                                                |),
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "ff::Field",
                                                    Ty.associated,
                                                    [],
                                                    "one",
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |) in
                                            let l_last :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::domain::EvaluationDomain")
                                                      [ Ty.associated ],
                                                    "lagrange_to_coeff",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| vk |),
                                                      "halo2_proofs::plonk::VerifyingKey",
                                                      "domain"
                                                    |);
                                                    M.read (| l_last |)
                                                  ]
                                                |)
                                              |) in
                                            let l_last_extended :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::domain::EvaluationDomain")
                                                      [ Ty.associated ],
                                                    "coeff_to_extended",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| vk |),
                                                      "halo2_proofs::plonk::VerifyingKey",
                                                      "domain"
                                                    |);
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::clone::Clone",
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "halo2_proofs::poly::Coeff"
                                                          ],
                                                        [],
                                                        "clone",
                                                        []
                                                      |),
                                                      [ l_last ]
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let one :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "ff::Field",
                                                    Ty.associated,
                                                    [],
                                                    "one",
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |) in
                                            let l_active_row :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::domain::EvaluationDomain")
                                                      [ Ty.associated ],
                                                    "empty_extended",
                                                    []
                                                  |),
                                                  [
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| vk |),
                                                      "halo2_proofs::plonk::VerifyingKey",
                                                      "domain"
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let _ :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_function (|
                                                    "halo2_proofs::arithmetic::parallelize",
                                                    [
                                                      Ty.associated;
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&mut")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [ Ty.associated ]
                                                                ];
                                                              Ty.path "usize"
                                                            ]
                                                        ]
                                                        (Ty.tuple [])
                                                    ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::deref::DerefMut",
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path
                                                              "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                          ],
                                                        [],
                                                        "deref_mut",
                                                        []
                                                      |),
                                                      [ l_active_row ]
                                                    |);
                                                    M.closure
                                                      (fun γ =>
                                                        ltac:(M.monadic
                                                          match γ with
                                                          | [ α0; α1 ] =>
                                                            M.match_operator (|
                                                              M.alloc (| α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let values := M.copy (| γ |) in
                                                                    M.match_operator (|
                                                                      M.alloc (| α1 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let start :=
                                                                              M.copy (| γ |) in
                                                                            M.read (|
                                                                              M.use
                                                                                (M.match_operator (|
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::iter::traits::collect::IntoIterator",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::IterMut")
                                                                                              [
                                                                                                Ty.associated
                                                                                              ]
                                                                                          ],
                                                                                        [],
                                                                                        "into_iter",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::IterMut")
                                                                                              [
                                                                                                Ty.associated
                                                                                              ],
                                                                                            [],
                                                                                            "enumerate",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "slice")
                                                                                                  [
                                                                                                    Ty.associated
                                                                                                  ],
                                                                                                "iter_mut",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  values
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let iter :=
                                                                                          M.copy (|
                                                                                            γ
                                                                                          |) in
                                                                                        M.loop (|
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  _ :=
                                                                                              M.match_operator (|
                                                                                                M.alloc (|
                                                                                                  M.call_closure (|
                                                                                                    M.get_trait_method (|
                                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::iter::adapters::enumerate::Enumerate")
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::slice::iter::IterMut")
                                                                                                            [
                                                                                                              Ty.associated
                                                                                                            ]
                                                                                                        ],
                                                                                                      [],
                                                                                                      "next",
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      iter
                                                                                                    ]
                                                                                                  |)
                                                                                                |),
                                                                                                [
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (M.alloc (|
                                                                                                        M.never_to_any (|
                                                                                                          M.read (|
                                                                                                            M.break (||)
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)));
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (let
                                                                                                            γ0_0 :=
                                                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                                                          γ,
                                                                                                          "core::option::Option::Some",
                                                                                                          0
                                                                                                        |) in
                                                                                                      let
                                                                                                            γ1_0 :=
                                                                                                        M.SubPointer.get_tuple_field (|
                                                                                                          γ0_0,
                                                                                                          0
                                                                                                        |) in
                                                                                                      let
                                                                                                            γ1_1 :=
                                                                                                        M.SubPointer.get_tuple_field (|
                                                                                                          γ0_0,
                                                                                                          1
                                                                                                        |) in
                                                                                                      let
                                                                                                            i :=
                                                                                                        M.copy (|
                                                                                                          γ1_0
                                                                                                        |) in
                                                                                                      let
                                                                                                            value :=
                                                                                                        M.copy (|
                                                                                                          γ1_1
                                                                                                        |) in
                                                                                                      let
                                                                                                            idx :=
                                                                                                        M.alloc (|
                                                                                                          BinOp.Panic.add (|
                                                                                                            Integer.Usize,
                                                                                                            M.read (|
                                                                                                              i
                                                                                                            |),
                                                                                                            M.read (|
                                                                                                              start
                                                                                                            |)
                                                                                                          |)
                                                                                                        |) in
                                                                                                      let
                                                                                                            _ :=
                                                                                                        M.write (|
                                                                                                          M.read (|
                                                                                                            value
                                                                                                          |),
                                                                                                          M.call_closure (|
                                                                                                            M.get_trait_method (|
                                                                                                              "core::ops::arith::Sub",
                                                                                                              Ty.associated,
                                                                                                              [
                                                                                                                Ty.associated
                                                                                                              ],
                                                                                                              "sub",
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.read (|
                                                                                                                one
                                                                                                              |);
                                                                                                              M.call_closure (|
                                                                                                                M.get_trait_method (|
                                                                                                                  "core::ops::arith::Add",
                                                                                                                  Ty.associated,
                                                                                                                  [
                                                                                                                    Ty.associated
                                                                                                                  ],
                                                                                                                  "add",
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.read (|
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::ops::index::Index",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "halo2_proofs::poly::Polynomial")
                                                                                                                          [
                                                                                                                            Ty.associated;
                                                                                                                            Ty.path
                                                                                                                              "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                          ],
                                                                                                                        [
                                                                                                                          Ty.path
                                                                                                                            "usize"
                                                                                                                        ],
                                                                                                                        "index",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        l_last_extended;
                                                                                                                        M.read (|
                                                                                                                          idx
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  |);
                                                                                                                  M.read (|
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::ops::index::Index",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "halo2_proofs::poly::Polynomial")
                                                                                                                          [
                                                                                                                            Ty.associated;
                                                                                                                            Ty.path
                                                                                                                              "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                                                                                          ],
                                                                                                                        [
                                                                                                                          Ty.path
                                                                                                                            "usize"
                                                                                                                        ],
                                                                                                                        "index",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        l_blind_extended;
                                                                                                                        M.read (|
                                                                                                                          idx
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        |) in
                                                                                                      M.alloc (|
                                                                                                        Value.Tuple
                                                                                                          []
                                                                                                      |)))
                                                                                                ]
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              Value.Tuple
                                                                                                []
                                                                                            |)))
                                                                                        |)))
                                                                                  ]
                                                                                |))
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                              ]
                                                            |)
                                                          | _ => M.impossible (||)
                                                          end))
                                                  ]
                                                |)
                                              |) in
                                            M.match_operator (|
                                              timer,
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let timer :=
                                                      M.alloc (|
                                                        Value.StructTuple
                                                          "ark_std::perf_trace::inner::TimerInfo"
                                                          []
                                                      |) in
                                                    let ev :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::evaluation::Evaluator")
                                                              [ C ],
                                                            "new",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| vk |),
                                                              "halo2_proofs::plonk::VerifyingKey",
                                                              "cs"
                                                            |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.match_operator (|
                                                      timer,
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let l_last :=
                                                              M.copy (| l_last_extended |) in
                                                            M.alloc (|
                                                              Value.StructTuple
                                                                "core::result::Result::Ok"
                                                                [
                                                                  Value.StructRecord
                                                                    "halo2_proofs::plonk::ProvingKey"
                                                                    [
                                                                      ("vk",
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::clone::Clone",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::VerifyingKey")
                                                                              [ C ],
                                                                            [],
                                                                            "clone",
                                                                            []
                                                                          |),
                                                                          [ M.read (| vk |) ]
                                                                        |));
                                                                      ("l0", M.read (| l0 |));
                                                                      ("l_last",
                                                                        M.read (| l_last |));
                                                                      ("l_active_row",
                                                                        M.read (| l_active_row |));
                                                                      ("fixed_values",
                                                                        M.read (| fixed |));
                                                                      ("fixed_polys",
                                                                        M.read (| fixed_polys |));
                                                                      ("fixed_cosets",
                                                                        M.read (| fixed_cosets |));
                                                                      ("permutation",
                                                                        M.read (|
                                                                          permutation_pk
                                                                        |));
                                                                      ("ev", M.read (| ev |))
                                                                    ]
                                                                ]
                                                            |)))
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)))
                              ]
                            |)))
                      ]
                    |)))
              ]
            |)
          |)))
      | _, _ => M.impossible
      end.
    
    (*
    pub(crate) fn generate_pk_info<C, ConcreteCircuit>(
        params: &Params<C>,
        vk: &VerifyingKey<C>,
        circuit: &ConcreteCircuit,
    ) -> Result<
        (
            Vec<Polynomial<C::Scalar, LagrangeCoeff>>,
            permutation::keygen::Assembly,
        ),
        Error,
    >
    where
        C: CurveAffine,
        ConcreteCircuit: Circuit<C::Scalar>,
    {
        let mut cs = ConstraintSystem::default();
        let config = ConcreteCircuit::configure(&mut cs);
    
        if (params.n as usize) < cs.minimum_rows() {
            return Err(Error::not_enough_rows_available(params.k));
        }
    
        let mut assembly: AssemblyAssigner<C::Scalar> = AssemblyAssigner {
            k: params.k,
            fixed: Arc::new(Mutex::new(vec![
                vk.domain.empty_lagrange_assigned();
                cs.num_fixed_columns
            ])),
            permutation: Arc::new(Mutex::new(permutation::keygen::ParallelAssembly::new(
                params.n as usize,
                &cs.permutation,
            ))),
            selectors: Arc::new(Mutex::new(vec![
                vec![false; params.n as usize];
                cs.num_selectors
            ])),
            usable_rows: 0..params.n as usize - (cs.blinding_factors() + 1),
            _marker: std::marker::PhantomData,
        };
    
        // Synthesize the circuit to obtain URS
        ConcreteCircuit::FloorPlanner::synthesize(
            &mut assembly,
            circuit,
            config,
            cs.constants.clone(),
        )?;
    
        let assembly: Assembly<C::Scalar> = assembly.into();
    
        let fixed = batch_invert_assigned(assembly.fixed);
        Ok((fixed, assembly.permutation))
    }
    *)
    Definition generate_pk_info (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ C; ConcreteCircuit ], [ params; vk; circuit ] =>
        ltac:(M.monadic
          (let params := M.alloc (| params |) in
          let vk := M.alloc (| vk |) in
          let circuit := M.alloc (| circuit |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let cs :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.apply
                          (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                          [ Ty.associated ],
                        [],
                        "default",
                        []
                      |),
                      []
                    |)
                  |) in
                let config :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "halo2_proofs::plonk::circuit::Circuit",
                        ConcreteCircuit,
                        [ Ty.associated ],
                        "configure",
                        []
                      |),
                      [ cs ]
                    |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                BinOp.Pure.lt
                                  (M.rust_cast
                                    (M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| params |),
                                        "halo2_proofs::poly::commitment::Params",
                                        "n"
                                      |)
                                    |)))
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                                        [ Ty.associated ],
                                      "minimum_rows",
                                      []
                                    |),
                                    [ cs ]
                                  |))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "halo2_proofs::plonk::error::Error",
                                          "not_enough_rows_available",
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| params |),
                                              "halo2_proofs::poly::commitment::Params",
                                              "k"
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                |)
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let assembly :=
                  M.alloc (|
                    Value.StructRecord
                      "halo2_proofs::plonk::keygen::AssemblyAssigner"
                      [
                        ("k",
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| params |),
                              "halo2_proofs::poly::commitment::Params",
                              "k"
                            |)
                          |));
                        ("fixed",
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                [
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::Mutex")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                                [ Ty.associated ];
                                              Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::Mutex")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                                [ Ty.associated ];
                                              Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_function (|
                                      "alloc::vec::from_elem",
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::assigned::Assigned")
                                              [ Ty.associated ];
                                            Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                          ]
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                                            [ Ty.associated ],
                                          "empty_lagrange_assigned",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| vk |),
                                            "halo2_proofs::plonk::VerifyingKey",
                                            "domain"
                                          |)
                                        ]
                                      |);
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          cs,
                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                          "num_fixed_columns"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |));
                        ("permutation",
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                [
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::Mutex")
                                    [
                                      Ty.path
                                        "halo2_proofs::plonk::permutation::keygen::ParallelAssembly"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::Mutex")
                                    [
                                      Ty.path
                                        "halo2_proofs::plonk::permutation::keygen::ParallelAssembly"
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.path
                                        "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                                      "new",
                                      []
                                    |),
                                    [
                                      M.rust_cast
                                        (M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| params |),
                                            "halo2_proofs::poly::commitment::Params",
                                            "n"
                                          |)
                                        |));
                                      M.SubPointer.get_struct_record_field (|
                                        cs,
                                        "halo2_proofs::plonk::circuit::ConstraintSystem",
                                        "permutation"
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |));
                        ("selectors",
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                [
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::Mutex")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::Mutex")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  "new",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_function (|
                                      "alloc::vec::from_elem",
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.path "bool"; Ty.path "alloc::alloc::Global" ]
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_function (|
                                          "alloc::vec::from_elem",
                                          [ Ty.path "bool" ]
                                        |),
                                        [
                                          Value.Bool false;
                                          M.rust_cast
                                            (M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| params |),
                                                "halo2_proofs::poly::commitment::Params",
                                                "n"
                                              |)
                                            |))
                                        ]
                                      |);
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          cs,
                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                          "num_selectors"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |));
                        ("usable_rows",
                          Value.StructRecord
                            "core::ops::range::Range"
                            [
                              ("start", Value.Integer 0);
                              ("end_",
                                BinOp.Panic.sub (|
                                  Integer.Usize,
                                  M.rust_cast
                                    (M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| params |),
                                        "halo2_proofs::poly::commitment::Params",
                                        "n"
                                      |)
                                    |)),
                                  BinOp.Panic.add (|
                                    Integer.Usize,
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                                          [ Ty.associated ],
                                        "blinding_factors",
                                        []
                                      |),
                                      [ cs ]
                                    |),
                                    Value.Integer 1
                                  |)
                                |))
                            ]);
                        ("_marker", Value.StructTuple "core::marker::PhantomData" [])
                      ]
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "halo2_proofs::plonk::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "halo2_proofs::plonk::circuit::FloorPlanner",
                              Ty.associated,
                              [],
                              "synthesize",
                              [
                                Ty.associated;
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::keygen::AssemblyAssigner")
                                  [ Ty.associated ];
                                ConcreteCircuit
                              ]
                            |),
                            [
                              assembly;
                              M.read (| circuit |);
                              M.read (| config |);
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::plonk::circuit::Column")
                                        [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "clone",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    cs,
                                    "halo2_proofs::plonk::circuit::ConstraintSystem",
                                    "constants"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.associated;
                                                      Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.path
                                                "halo2_proofs::plonk::permutation::keygen::Assembly"
                                            ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let assembly :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::convert::Into",
                        Ty.apply
                          (Ty.path "halo2_proofs::plonk::keygen::AssemblyAssigner")
                          [ Ty.associated ],
                        [
                          Ty.apply
                            (Ty.path "halo2_proofs::plonk::keygen::Assembly")
                            [ Ty.associated ]
                        ],
                        "into",
                        []
                      |),
                      [ M.read (| assembly |) ]
                    |)
                  |) in
                let fixed :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "halo2_proofs::poly::batch_invert_assigned",
                        [ Ty.associated ]
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            assembly,
                            "halo2_proofs::plonk::keygen::Assembly",
                            "fixed"
                          |)
                        |)
                      ]
                    |)
                  |) in
                M.alloc (|
                  Value.StructTuple
                    "core::result::Result::Ok"
                    [
                      Value.Tuple
                        [
                          M.read (| fixed |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              assembly,
                              "halo2_proofs::plonk::keygen::Assembly",
                              "permutation"
                            |)
                          |)
                        ]
                    ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
  End keygen.
End plonk.
