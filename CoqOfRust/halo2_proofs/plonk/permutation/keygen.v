(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module plonk.
  Module permutation.
    Module keygen.
      (* StructRecord
        {
          name := "ParallelAssembly";
          ty_params := [];
          fields :=
            [
              ("n", Ty.path "usize");
              ("columns",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply
                      (Ty.path "halo2_proofs::plonk::circuit::Column")
                      [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("aux",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [
                        Ty.apply
                          (Ty.path "core::option::Option")
                          [
                            Ty.apply
                              (Ty.path "alloc::rc::Rc")
                              [
                                Ty.apply
                                  (Ty.path "core::cell::RefCell")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("cycles",
                Ty.apply
                  (Ty.path "alloc::collections::btree::set::BTreeSet")
                  [
                    Ty.apply
                      (Ty.path "alloc::rc::Rc")
                      [
                        Ty.apply
                          (Ty.path "core::cell::RefCell")
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ];
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      Module Impl_core_fmt_Debug_for_halo2_proofs_plonk_permutation_keygen_ParallelAssembly.
        Definition Self : Ty.t :=
          Ty.path "halo2_proofs::plonk::permutation::keygen::ParallelAssembly".
        
        (* Debug *)
        Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field4_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "ParallelAssembly" |);
                  M.read (| Value.String "n" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                      "n"
                    |));
                  M.read (| Value.String "columns" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                      "columns"
                    |));
                  M.read (| Value.String "aux" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                      "aux"
                    |));
                  M.read (| Value.String "cycles" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                        "cycles"
                      |)
                    |))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_halo2_proofs_plonk_permutation_keygen_ParallelAssembly.
      
      Module Impl_halo2_proofs_plonk_permutation_keygen_ParallelAssembly.
        Definition Self : Ty.t :=
          Ty.path "halo2_proofs::plonk::permutation::keygen::ParallelAssembly".
        
        (*
            pub(crate) fn new(n: usize, p: &Argument) -> Self {
                Self {
                    n,
                    columns: p.columns.clone(),
                    aux: vec![vec![None; n]; p.columns.len()],
                    cycles: BTreeSet::default(),
                }
            }
        *)
        Definition new (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ n; p ] =>
            ltac:(M.monadic
              (let n := M.alloc (| n |) in
              let p := M.alloc (| p |) in
              Value.StructRecord
                "halo2_proofs::plonk::permutation::keygen::ParallelAssembly"
                [
                  ("n", M.read (| n |));
                  ("columns",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                              [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| p |),
                          "halo2_proofs::plonk::permutation::Argument",
                          "columns"
                        |)
                      ]
                    |));
                  ("aux",
                    M.call_closure (|
                      M.get_function (|
                        "alloc::vec::from_elem",
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::rc::Rc")
                                    [
                                      Ty.apply
                                        (Ty.path "core::cell::RefCell")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_function (|
                            "alloc::vec::from_elem",
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::rc::Rc")
                                    [
                                      Ty.apply
                                        (Ty.path "core::cell::RefCell")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                            ]
                          |),
                          [ Value.StructTuple "core::option::Option::None" []; M.read (| n |) ]
                        |);
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                  [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "len",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| p |),
                              "halo2_proofs::plonk::permutation::Argument",
                              "columns"
                            |)
                          ]
                        |)
                      ]
                    |));
                  ("cycles",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.apply
                          (Ty.path "alloc::collections::btree::set::BTreeSet")
                          [
                            Ty.apply
                              (Ty.path "alloc::rc::Rc")
                              [
                                Ty.apply
                                  (Ty.path "core::cell::RefCell")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "default",
                        []
                      |),
                      []
                    |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_new : M.IsAssociatedFunction Self "new" new.
        
        (*
            pub(crate) fn copy(
                &mut self,
                left_column: Column<Any>,
                left_row: usize,
                right_column: Column<Any>,
                right_row: usize,
            ) -> Result<(), Error> {
                let left_column = self
                    .columns
                    .iter()
                    .position(|c| c == &left_column)
                    .ok_or(Error::ColumnNotInPermutation(left_column))?;
                let right_column = self
                    .columns
                    .iter()
                    .position(|c| c == &right_column)
                    .ok_or(Error::ColumnNotInPermutation(right_column))?;
        
                // Check bounds
                if left_row >= self.n || right_row >= self.n {
                    return Err(Error::BoundsFailure);
                }
        
                let left_cycle = self.aux[left_column][left_row].clone();
                let right_cycle = self.aux[right_column][right_row].clone();
        
                // If left and right are in the same cycle, do nothing.
                if left_cycle.is_some() && right_cycle.is_some() {
                    if Rc::ptr_eq(left_cycle.as_ref().unwrap(), right_cycle.as_ref().unwrap()) {
                        return Ok(());
                    }
                }
        
                let left_cycle = left_cycle.unwrap_or_else(|| {
                    let cycle = Rc::new(RefCell::new(vec![(left_column as u32, left_row as u32)]));
        
                    self.aux[left_column][left_row] = Some(cycle.clone());
                    cycle
                });
                let right_cycle = right_cycle.unwrap_or_else(|| {
                    let cycle = Rc::new(RefCell::new(vec![(right_column as u32, right_row as u32)]));
        
                    self.aux[right_column][right_row] = Some(cycle.clone());
                    cycle
                });
        
                let (small_cycle, big_cycle) =
                    if left_cycle.borrow().len() <= right_cycle.borrow_mut().len() {
                        (left_cycle, right_cycle)
                    } else {
                        (right_cycle, left_cycle)
                    };
        
                // merge small cycle into big cycle
                self.cycles.remove(&small_cycle);
                self.cycles.insert(big_cycle.clone());
        
                for (col, row) in small_cycle.borrow().iter() {
                    self.aux[*col as usize][*row as usize] = Some(big_cycle.clone());
                }
        
                let mut small_cycle = Rc::try_unwrap(small_cycle).unwrap().into_inner();
                big_cycle.borrow_mut().append(&mut small_cycle);
        
                Ok(())
            }
        *)
        Definition copy (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; left_column; left_row; right_column; right_row ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let left_column := M.alloc (| left_column |) in
              let left_row := M.alloc (| left_row |) in
              let right_column := M.alloc (| right_column |) in
              let right_row := M.alloc (| right_row |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let left_column :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [ Ty.path "usize"; Ty.path "halo2_proofs::plonk::error::Error" ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "core::option::Option") [ Ty.path "usize" ],
                                    "ok_or",
                                    [ Ty.path "halo2_proofs::plonk::error::Error" ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                                              [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                          ],
                                        [],
                                        "position",
                                        [
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Column")
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::plonk::circuit::Any"
                                                        ]
                                                    ]
                                                ]
                                            ]
                                            (Ty.path "bool")
                                        ]
                                      |),
                                      [
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "slice")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                    [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                                ],
                                              "iter",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Column")
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::plonk::circuit::Any"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| self |),
                                                    "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                                                    "columns"
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                M.match_operator (|
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let c := M.copy (| γ |) in
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialEq",
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::Any"
                                                                  ]
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::Any"
                                                                    ]
                                                                ]
                                                            ],
                                                            "eq",
                                                            []
                                                          |),
                                                          [ c; M.alloc (| left_column |) ]
                                                        |)))
                                                  ]
                                                |)
                                              | _ => M.impossible (||)
                                              end))
                                      ]
                                    |);
                                    Value.StructTuple
                                      "halo2_proofs::plonk::error::Error::ColumnNotInPermutation"
                                      [ M.read (| left_column |) ]
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.tuple [];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let right_column :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [ Ty.path "usize"; Ty.path "halo2_proofs::plonk::error::Error" ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "core::option::Option") [ Ty.path "usize" ],
                                    "ok_or",
                                    [ Ty.path "halo2_proofs::plonk::error::Error" ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                                              [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                          ],
                                        [],
                                        "position",
                                        [
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Column")
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::plonk::circuit::Any"
                                                        ]
                                                    ]
                                                ]
                                            ]
                                            (Ty.path "bool")
                                        ]
                                      |),
                                      [
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "slice")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                    [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                                ],
                                              "iter",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Column")
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::plonk::circuit::Any"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| self |),
                                                    "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                                                    "columns"
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                M.match_operator (|
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let c := M.copy (| γ |) in
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialEq",
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::Any"
                                                                  ]
                                                              ],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::Any"
                                                                    ]
                                                                ]
                                                            ],
                                                            "eq",
                                                            []
                                                          |),
                                                          [ c; M.alloc (| right_column |) ]
                                                        |)))
                                                  ]
                                                |)
                                              | _ => M.impossible (||)
                                              end))
                                      ]
                                    |);
                                    Value.StructTuple
                                      "halo2_proofs::plonk::error::Error::ColumnNotInPermutation"
                                      [ M.read (| right_column |) ]
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.tuple [];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "halo2_proofs::plonk::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    LogicalOp.or (|
                                      BinOp.Pure.ge
                                        (M.read (| left_row |))
                                        (M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                                            "n"
                                          |)
                                        |)),
                                      ltac:(M.monadic
                                        (BinOp.Pure.ge
                                          (M.read (| right_row |))
                                          (M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                                              "n"
                                            |)
                                          |))))
                                    |)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      Value.StructTuple
                                        "core::result::Result::Err"
                                        [
                                          Value.StructTuple
                                            "halo2_proofs::plonk::error::Error::BoundsFailure"
                                            []
                                        ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let left_cycle :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.apply
                              (Ty.path "core::option::Option")
                              [
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  [
                                    Ty.apply
                                      (Ty.path "core::cell::RefCell")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            [],
                            "clone",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::index::Index",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::rc::Rc")
                                          [
                                            Ty.apply
                                              (Ty.path "core::cell::RefCell")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [ Ty.path "usize" ],
                                "index",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::index::Index",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::rc::Rc")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::cell::RefCell")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.tuple
                                                              [ Ty.path "u32"; Ty.path "u32" ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [ Ty.path "usize" ],
                                    "index",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                                      "aux"
                                    |);
                                    M.read (| left_column |)
                                  ]
                                |);
                                M.read (| left_row |)
                              ]
                            |)
                          ]
                        |)
                      |) in
                    let right_cycle :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.apply
                              (Ty.path "core::option::Option")
                              [
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  [
                                    Ty.apply
                                      (Ty.path "core::cell::RefCell")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            [],
                            "clone",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::index::Index",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::rc::Rc")
                                          [
                                            Ty.apply
                                              (Ty.path "core::cell::RefCell")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [ Ty.path "usize" ],
                                "index",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::index::Index",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::rc::Rc")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::cell::RefCell")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.tuple
                                                              [ Ty.path "u32"; Ty.path "u32" ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [ Ty.path "usize" ],
                                    "index",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                                      "aux"
                                    |);
                                    M.read (| right_column |)
                                  ]
                                |);
                                M.read (| right_row |)
                              ]
                            |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    LogicalOp.and (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::rc::Rc")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::cell::RefCell")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          "is_some",
                                          []
                                        |),
                                        [ left_cycle ]
                                      |),
                                      ltac:(M.monadic
                                        (M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::rc::Rc")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::cell::RefCell")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.tuple
                                                              [ Ty.path "u32"; Ty.path "u32" ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ],
                                            "is_some",
                                            []
                                          |),
                                          [ right_cycle ]
                                        |)))
                                    |)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.match_operator (|
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "alloc::rc::Rc")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::cell::RefCell")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.tuple
                                                              [ Ty.path "u32"; Ty.path "u32" ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                "ptr_eq",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::rc::Rc")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::cell::RefCell")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.path "u32";
                                                                            Ty.path "u32"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ],
                                                    "unwrap",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::rc::Rc")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::cell::RefCell")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.path "u32";
                                                                            Ty.path "u32"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ],
                                                        "as_ref",
                                                        []
                                                      |),
                                                      [ left_cycle ]
                                                    |)
                                                  ]
                                                |);
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::rc::Rc")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::cell::RefCell")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.path "u32";
                                                                            Ty.path "u32"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ],
                                                    "unwrap",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::rc::Rc")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::cell::RefCell")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.path "u32";
                                                                            Ty.path "u32"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ],
                                                        "as_ref",
                                                        []
                                                      |),
                                                      [ right_cycle ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |)) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              Value.StructTuple
                                                "core::result::Result::Ok"
                                                [ Value.Tuple [] ]
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |) in
                    let left_cycle :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              [
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  [
                                    Ty.apply
                                      (Ty.path "core::cell::RefCell")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            "unwrap_or_else",
                            [
                              Ty.function
                                [ Ty.tuple [] ]
                                (Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  [
                                    Ty.apply
                                      (Ty.path "core::cell::RefCell")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ])
                            ]
                          |),
                          [
                            M.read (| left_cycle |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.read (|
                                              let cycle :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::rc::Rc")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::cell::RefCell")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.tuple
                                                                    [ Ty.path "u32"; Ty.path "u32"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "new",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::cell::RefCell")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.tuple
                                                                    [ Ty.path "u32"; Ty.path "u32"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ],
                                                          "new",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                [
                                                                  Ty.tuple
                                                                    [ Ty.path "u32"; Ty.path "u32" ]
                                                                ],
                                                              "into_vec",
                                                              [ Ty.path "alloc::alloc::Global" ]
                                                            |),
                                                            [
                                                              (* Unsize *)
                                                              M.pointer_coercion
                                                                (M.read (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::boxed::Box")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.path "u32";
                                                                                  Ty.path "u32"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      "new",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.alloc (|
                                                                        Value.Array
                                                                          [
                                                                            Value.Tuple
                                                                              [
                                                                                M.rust_cast
                                                                                  (M.read (|
                                                                                    left_column
                                                                                  |));
                                                                                M.rust_cast
                                                                                  (M.read (|
                                                                                    left_row
                                                                                  |))
                                                                              ]
                                                                          ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |))
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.write (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::index::IndexMut",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::rc::Rc")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::cell::RefCell")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.path "u32";
                                                                              Ty.path "u32"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [ Ty.path "usize" ],
                                                      "index_mut",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::index::IndexMut",
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::rc::Rc")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::cell::RefCell")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.path "u32";
                                                                                      Ty.path "u32"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [ Ty.path "usize" ],
                                                          "index_mut",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| self |),
                                                            "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                                                            "aux"
                                                          |);
                                                          M.read (| left_column |)
                                                        ]
                                                      |);
                                                      M.read (| left_row |)
                                                    ]
                                                  |),
                                                  Value.StructTuple
                                                    "core::option::Option::Some"
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::clone::Clone",
                                                          Ty.apply
                                                            (Ty.path "alloc::rc::Rc")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::cell::RefCell")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.path "u32";
                                                                          Ty.path "u32"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [],
                                                          "clone",
                                                          []
                                                        |),
                                                        [ cycle ]
                                                      |)
                                                    ]
                                                |) in
                                              cycle
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let right_cycle :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              [
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  [
                                    Ty.apply
                                      (Ty.path "core::cell::RefCell")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            "unwrap_or_else",
                            [
                              Ty.function
                                [ Ty.tuple [] ]
                                (Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  [
                                    Ty.apply
                                      (Ty.path "core::cell::RefCell")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ])
                            ]
                          |),
                          [
                            M.read (| right_cycle |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.read (|
                                              let cycle :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::rc::Rc")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::cell::RefCell")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.tuple
                                                                    [ Ty.path "u32"; Ty.path "u32"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "new",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::cell::RefCell")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.tuple
                                                                    [ Ty.path "u32"; Ty.path "u32"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ],
                                                          "new",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                [
                                                                  Ty.tuple
                                                                    [ Ty.path "u32"; Ty.path "u32" ]
                                                                ],
                                                              "into_vec",
                                                              [ Ty.path "alloc::alloc::Global" ]
                                                            |),
                                                            [
                                                              (* Unsize *)
                                                              M.pointer_coercion
                                                                (M.read (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::boxed::Box")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.path "u32";
                                                                                  Ty.path "u32"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      "new",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.alloc (|
                                                                        Value.Array
                                                                          [
                                                                            Value.Tuple
                                                                              [
                                                                                M.rust_cast
                                                                                  (M.read (|
                                                                                    right_column
                                                                                  |));
                                                                                M.rust_cast
                                                                                  (M.read (|
                                                                                    right_row
                                                                                  |))
                                                                              ]
                                                                          ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |))
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.write (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::index::IndexMut",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::rc::Rc")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::cell::RefCell")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.path "u32";
                                                                              Ty.path "u32"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [ Ty.path "usize" ],
                                                      "index_mut",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::index::IndexMut",
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::rc::Rc")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::cell::RefCell")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.path "u32";
                                                                                      Ty.path "u32"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [ Ty.path "usize" ],
                                                          "index_mut",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| self |),
                                                            "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                                                            "aux"
                                                          |);
                                                          M.read (| right_column |)
                                                        ]
                                                      |);
                                                      M.read (| right_row |)
                                                    ]
                                                  |),
                                                  Value.StructTuple
                                                    "core::option::Option::Some"
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::clone::Clone",
                                                          Ty.apply
                                                            (Ty.path "alloc::rc::Rc")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::cell::RefCell")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.path "u32";
                                                                          Ty.path "u32"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [],
                                                          "clone",
                                                          []
                                                        |),
                                                        [ cycle ]
                                                      |)
                                                    ]
                                                |) in
                                              cycle
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    M.match_operator (|
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    BinOp.Pure.le
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "len",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "core::cell::Ref")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::cell::RefCell")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.tuple
                                                              [ Ty.path "u32"; Ty.path "u32" ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ],
                                                    "borrow",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::deref::Deref",
                                                        Ty.apply
                                                          (Ty.path "alloc::rc::Rc")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::cell::RefCell")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.tuple
                                                                      [ Ty.path "u32"; Ty.path "u32"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        "deref",
                                                        []
                                                      |),
                                                      [ left_cycle ]
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |))
                                      (M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "len",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "core::cell::RefMut")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::cell::RefCell")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.tuple
                                                              [ Ty.path "u32"; Ty.path "u32" ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ],
                                                    "borrow_mut",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::deref::Deref",
                                                        Ty.apply
                                                          (Ty.path "alloc::rc::Rc")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::cell::RefCell")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.tuple
                                                                      [ Ty.path "u32"; Ty.path "u32"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        "deref",
                                                        []
                                                      |),
                                                      [ right_cycle ]
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |))
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (|
                                Value.Tuple [ M.read (| left_cycle |); M.read (| right_cycle |) ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.alloc (|
                                Value.Tuple [ M.read (| right_cycle |); M.read (| left_cycle |) ]
                              |)))
                        ]
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let small_cycle := M.copy (| γ0_0 |) in
                            let big_cycle := M.copy (| γ0_1 |) in
                            let _ :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::collections::btree::set::BTreeSet")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::rc::Rc")
                                          [
                                            Ty.apply
                                              (Ty.path "core::cell::RefCell")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "remove",
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::rc::Rc")
                                        [
                                          Ty.apply
                                            (Ty.path "core::cell::RefCell")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                                      "cycles"
                                    |);
                                    small_cycle
                                  ]
                                |)
                              |) in
                            let _ :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::collections::btree::set::BTreeSet")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::rc::Rc")
                                          [
                                            Ty.apply
                                              (Ty.path "core::cell::RefCell")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "insert",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                                      "cycles"
                                    |);
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::clone::Clone",
                                        Ty.apply
                                          (Ty.path "alloc::rc::Rc")
                                          [
                                            Ty.apply
                                              (Ty.path "core::cell::RefCell")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "clone",
                                        []
                                      |),
                                      [ big_cycle ]
                                    |)
                                  ]
                                |)
                              |) in
                            let _ :=
                              M.use
                                (M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ],
                                        [],
                                        "into_iter",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ],
                                            "iter",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path "core::cell::Ref")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.tuple
                                                              [ Ty.path "u32"; Ty.path "u32" ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ],
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::cell::RefCell")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.tuple
                                                                    [ Ty.path "u32"; Ty.path "u32"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ],
                                                          "borrow",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path "alloc::rc::Rc")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::cell::RefCell")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.path "u32";
                                                                              Ty.path "u32"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              "deref",
                                                              []
                                                            |),
                                                            [ small_cycle ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let iter := M.copy (| γ |) in
                                        M.loop (|
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]
                                                        ],
                                                      [],
                                                      "next",
                                                      []
                                                    |),
                                                    [ iter ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (| M.break (||) |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::option::Option::Some",
                                                          0
                                                        |) in
                                                      let γ0_0 := M.read (| γ0_0 |) in
                                                      let γ2_0 :=
                                                        M.SubPointer.get_tuple_field (|
                                                          γ0_0,
                                                          0
                                                        |) in
                                                      let γ2_1 :=
                                                        M.SubPointer.get_tuple_field (|
                                                          γ0_0,
                                                          1
                                                        |) in
                                                      let col := M.alloc (| γ2_0 |) in
                                                      let row := M.alloc (| γ2_1 |) in
                                                      let _ :=
                                                        M.write (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::index::IndexMut",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::rc::Rc")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::cell::RefCell")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.path "u32";
                                                                                      Ty.path "u32"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [ Ty.path "usize" ],
                                                              "index_mut",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::index::IndexMut",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::rc::Rc")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::cell::RefCell")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.path
                                                                                                "u32";
                                                                                              Ty.path
                                                                                                "u32"
                                                                                            ];
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ]
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [ Ty.path "usize" ],
                                                                  "index_mut",
                                                                  []
                                                                |),
                                                                [
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (| self |),
                                                                    "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                                                                    "aux"
                                                                  |);
                                                                  M.rust_cast
                                                                    (M.read (| M.read (| col |) |))
                                                                ]
                                                              |);
                                                              M.rust_cast
                                                                (M.read (| M.read (| row |) |))
                                                            ]
                                                          |),
                                                          Value.StructTuple
                                                            "core::option::Option::Some"
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::clone::Clone",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::rc::Rc")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::cell::RefCell")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.path "u32";
                                                                                  Ty.path "u32"
                                                                                ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ]
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "clone",
                                                                  []
                                                                |),
                                                                [ big_cycle ]
                                                              |)
                                                            ]
                                                        |) in
                                                      M.alloc (| Value.Tuple [] |)))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                        |)))
                                  ]
                                |)) in
                            let small_cycle :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::cell::RefCell")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    "into_inner",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "core::cell::RefCell")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path "alloc::rc::Rc")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::cell::RefCell")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ],
                                        "unwrap",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::rc::Rc")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::cell::RefCell")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "try_unwrap",
                                            []
                                          |),
                                          [ M.read (| small_cycle |) ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |) in
                            let _ :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "append",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::DerefMut",
                                        Ty.apply
                                          (Ty.path "core::cell::RefMut")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ],
                                        [],
                                        "deref_mut",
                                        []
                                      |),
                                      [
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::cell::RefCell")
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ],
                                              "borrow_mut",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::rc::Rc")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::cell::RefCell")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.tuple
                                                                [ Ty.path "u32"; Ty.path "u32" ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [ big_cycle ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      ]
                                    |);
                                    small_cycle
                                  ]
                                |)
                              |) in
                            M.alloc (|
                              Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                            |)))
                      ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_copy : M.IsAssociatedFunction Self "copy" copy.
      End Impl_halo2_proofs_plonk_permutation_keygen_ParallelAssembly.
      
      (* StructRecord
        {
          name := "Assembly";
          ty_params := [];
          fields :=
            [
              ("mapping",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; Ty.path "alloc::alloc::Global" ];
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      Module Impl_core_fmt_Debug_for_halo2_proofs_plonk_permutation_keygen_Assembly.
        Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::permutation::keygen::Assembly".
        
        (* Debug *)
        Definition fmt (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field1_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "Assembly" |);
                  M.read (| Value.String "mapping" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::plonk::permutation::keygen::Assembly",
                        "mapping"
                      |)
                    |))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_halo2_proofs_plonk_permutation_keygen_Assembly.
      
      Module Impl_core_clone_Clone_for_halo2_proofs_plonk_permutation_keygen_Assembly.
        Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::permutation::keygen::Assembly".
        
        (* Clone *)
        Definition clone (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "halo2_proofs::plonk::permutation::keygen::Assembly"
                [
                  ("mapping",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        "clone",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::plonk::permutation::keygen::Assembly",
                          "mapping"
                        |)
                      ]
                    |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            Self
            (* Trait polymorphic types *) []
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_halo2_proofs_plonk_permutation_keygen_Assembly.
      
      Module Impl_core_convert_From_halo2_proofs_plonk_permutation_keygen_ParallelAssembly_for_halo2_proofs_plonk_permutation_keygen_Assembly.
        Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::permutation::keygen::Assembly".
        
        (*
            fn from(assembly: ParallelAssembly) -> Self {
                let mut mapping: Vec<Vec<(u32, u32)>> = vec![];
        
                for i in 0..assembly.columns.len() {
                    // Computes [(i, 0), (i, 1), ..., (i, n - 1)]
                    mapping.push((0..assembly.n).map(|j| (i as u32, j as u32)).collect());
                }
        
                for cycle in assembly.cycles {
                    let mut first = None;
        
                    let mut cycle = cycle.borrow_mut();
                    cycle.sort();
        
                    let mut iter = cycle.iter().peekable();
                    while let Some(origin) = iter.next() {
                        if first.is_none() {
                            first = Some( *origin);
                        }
        
                        if let Some(permuted) = iter.peek() {
                            mapping[origin.0 as usize][origin.1 as usize] = **permuted;
                        } else {
                            // It's last element
                            mapping[origin.0 as usize][origin.1 as usize] = first.unwrap();
                        }
                    }
                }
        
                Self { mapping }
            }
        *)
        Definition from (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [], [ assembly ] =>
            ltac:(M.monadic
              (let assembly := M.alloc (| assembly |) in
              M.read (|
                let mapping :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "new",
                        []
                      |),
                      []
                    |)
                  |) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [
                                ("start", Value.Integer 0);
                                ("end_",
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                                            [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "len",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        assembly,
                                        "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                                        "columns"
                                      |)
                                    ]
                                  |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            [ Ty.path "usize" ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let i := M.copy (| γ0_0 |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "push",
                                                  []
                                                |),
                                                [
                                                  mapping;
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::map::Map")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            [ Ty.path "usize" ];
                                                          Ty.function
                                                            [ Ty.tuple [ Ty.path "usize" ] ]
                                                            (Ty.tuple
                                                              [ Ty.path "u32"; Ty.path "u32" ])
                                                        ],
                                                      [],
                                                      "collect",
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.tuple
                                                              [ Ty.path "u32"; Ty.path "u32" ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path "core::ops::range::Range")
                                                            [ Ty.path "usize" ],
                                                          [],
                                                          "map",
                                                          [
                                                            Ty.tuple
                                                              [ Ty.path "u32"; Ty.path "u32" ];
                                                            Ty.function
                                                              [ Ty.tuple [ Ty.path "usize" ] ]
                                                              (Ty.tuple
                                                                [ Ty.path "u32"; Ty.path "u32" ])
                                                          ]
                                                        |),
                                                        [
                                                          Value.StructRecord
                                                            "core::ops::range::Range"
                                                            [
                                                              ("start", Value.Integer 0);
                                                              ("end_",
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    assembly,
                                                                    "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                                                                    "n"
                                                                  |)
                                                                |))
                                                            ];
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0 ] =>
                                                                  M.match_operator (|
                                                                    M.alloc (| α0 |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let j :=
                                                                            M.copy (| γ |) in
                                                                          Value.Tuple
                                                                            [
                                                                              M.rust_cast
                                                                                (M.read (| i |));
                                                                              M.rust_cast
                                                                                (M.read (| j |))
                                                                            ]))
                                                                    ]
                                                                  |)
                                                                | _ => M.impossible (||)
                                                                end))
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "alloc::collections::btree::set::BTreeSet")
                              [
                                Ty.apply
                                  (Ty.path "alloc::rc::Rc")
                                  [
                                    Ty.apply
                                      (Ty.path "core::cell::RefCell")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                assembly,
                                "halo2_proofs::plonk::permutation::keygen::ParallelAssembly",
                                "cycles"
                              |)
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "alloc::collections::btree::set::IntoIter")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::rc::Rc")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::cell::RefCell")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let cycle := M.copy (| γ0_0 |) in
                                          let first :=
                                            M.alloc (|
                                              Value.StructTuple "core::option::Option::None" []
                                            |) in
                                          let cycle :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::cell::RefCell")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  "borrow_mut",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::rc::Rc")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::cell::RefCell")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.tuple
                                                                    [ Ty.path "u32"; Ty.path "u32"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      "deref",
                                                      []
                                                    |),
                                                    [ cycle ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ],
                                                  "sort",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::deref::DerefMut",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      "deref_mut",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::deref::DerefMut",
                                                          Ty.apply
                                                            (Ty.path "core::cell::RefMut")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.tuple
                                                                    [ Ty.path "u32"; Ty.path "u32"
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ],
                                                          [],
                                                          "deref_mut",
                                                          []
                                                        |),
                                                        [ cycle ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let iter :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ],
                                                  [],
                                                  "peekable",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]
                                                        ],
                                                      "iter",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::deref::Deref",
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.tuple
                                                                [ Ty.path "u32"; Ty.path "u32" ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [],
                                                          "deref",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path "core::cell::RefMut")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.path "u32";
                                                                          Ty.path "u32"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ],
                                                              [],
                                                              "deref",
                                                              []
                                                            |),
                                                            [ cycle ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.loop (|
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                M.alloc (| Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::peekable::Peekable")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.path "u32";
                                                                          Ty.path "u32"
                                                                        ]
                                                                    ]
                                                                ],
                                                              [],
                                                              "next",
                                                              []
                                                            |),
                                                            [ iter ]
                                                          |)
                                                        |) in
                                                      let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::option::Option::Some",
                                                          0
                                                        |) in
                                                      let origin := M.copy (| γ0_0 |) in
                                                      let _ :=
                                                        M.match_operator (|
                                                          M.alloc (| Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.path "u32";
                                                                                  Ty.path "u32"
                                                                                ]
                                                                            ],
                                                                          "is_none",
                                                                          []
                                                                        |),
                                                                        [ first ]
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  M.is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                let _ :=
                                                                  M.write (|
                                                                    first,
                                                                    Value.StructTuple
                                                                      "core::option::Option::Some"
                                                                      [
                                                                        M.read (|
                                                                          M.read (| origin |)
                                                                        |)
                                                                      ]
                                                                  |) in
                                                                M.alloc (| Value.Tuple [] |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.alloc (| Value.Tuple [] |)))
                                                          ]
                                                        |) in
                                                      M.match_operator (|
                                                        M.alloc (| Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::peekable::Peekable")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.path "u32";
                                                                                  Ty.path "u32"
                                                                                ]
                                                                            ]
                                                                        ],
                                                                      "peek",
                                                                      []
                                                                    |),
                                                                    [ iter ]
                                                                  |)
                                                                |) in
                                                              let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::option::Option::Some",
                                                                  0
                                                                |) in
                                                              let permuted := M.copy (| γ0_0 |) in
                                                              let _ :=
                                                                M.write (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::index::IndexMut",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.path "u32";
                                                                              Ty.path "u32"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [ Ty.path "usize" ],
                                                                      "index_mut",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::index::IndexMut",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.path "u32";
                                                                                      Ty.path "u32"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [ Ty.path "usize" ],
                                                                          "index_mut",
                                                                          []
                                                                        |),
                                                                        [
                                                                          mapping;
                                                                          M.rust_cast
                                                                            (M.read (|
                                                                              M.SubPointer.get_tuple_field (|
                                                                                M.read (| origin |),
                                                                                0
                                                                              |)
                                                                            |))
                                                                        ]
                                                                      |);
                                                                      M.rust_cast
                                                                        (M.read (|
                                                                          M.SubPointer.get_tuple_field (|
                                                                            M.read (| origin |),
                                                                            1
                                                                          |)
                                                                        |))
                                                                    ]
                                                                  |),
                                                                  M.read (|
                                                                    M.read (|
                                                                      M.read (| permuted |)
                                                                    |)
                                                                  |)
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.write (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::index::IndexMut",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.path "u32";
                                                                              Ty.path "u32"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [ Ty.path "usize" ],
                                                                      "index_mut",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::index::IndexMut",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.path "u32";
                                                                                      Ty.path "u32"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [ Ty.path "usize" ],
                                                                          "index_mut",
                                                                          []
                                                                        |),
                                                                        [
                                                                          mapping;
                                                                          M.rust_cast
                                                                            (M.read (|
                                                                              M.SubPointer.get_tuple_field (|
                                                                                M.read (| origin |),
                                                                                0
                                                                              |)
                                                                            |))
                                                                        ]
                                                                      |);
                                                                      M.rust_cast
                                                                        (M.read (|
                                                                          M.SubPointer.get_tuple_field (|
                                                                            M.read (| origin |),
                                                                            1
                                                                          |)
                                                                        |))
                                                                    ]
                                                                  |),
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.path "u32";
                                                                              Ty.path "u32"
                                                                            ]
                                                                        ],
                                                                      "unwrap",
                                                                      []
                                                                    |),
                                                                    [ M.read (| first |) ]
                                                                  |)
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                        ]
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            let _ :=
                                                              M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (| M.break (||) |)
                                                                |)
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)
                                                          |)
                                                        |)
                                                      |)))
                                                ]
                                              |)))
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                M.alloc (|
                  Value.StructRecord
                    "halo2_proofs::plonk::permutation::keygen::Assembly"
                    [ ("mapping", M.read (| mapping |)) ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::convert::From"
            Self
            (* Trait polymorphic types *)
            [ (* T *) Ty.path "halo2_proofs::plonk::permutation::keygen::ParallelAssembly" ]
            (* Instance *) [ ("from", InstanceField.Method from) ].
      End Impl_core_convert_From_halo2_proofs_plonk_permutation_keygen_ParallelAssembly_for_halo2_proofs_plonk_permutation_keygen_Assembly.
      
      Module Impl_halo2_proofs_plonk_permutation_keygen_Assembly.
        Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::permutation::keygen::Assembly".
        
        (*
            pub(crate) fn build_vk<C: CurveAffine>(
                self,
                params: &Params<C>,
                domain: &EvaluationDomain<C::Scalar>,
                p: &Argument,
            ) -> VerifyingKey<C> {
                // Compute [omega^0, omega^1, ..., omega^{params.n - 1}]
                let mut omega_powers = Vec::with_capacity(params.n as usize);
                {
                    let mut cur = C::Scalar::one();
                    for _ in 0..params.n {
                        omega_powers.push(cur);
                        cur *= &domain.get_omega();
                    }
                }
        
                // Compute [omega_powers * \delta^0, omega_powers * \delta^1, ..., omega_powers * \delta^m]
                let mut delta_omegas = Vec::with_capacity(p.columns.len());
                {
                    let mut cur = C::Scalar::one();
                    for _ in 0..p.columns.len() {
                        let mut omega_powers = omega_powers.clone();
                        for o in &mut omega_powers {
                            *o *= &cur;
                        }
        
                        delta_omegas.push(omega_powers);
        
                        cur *= &C::Scalar::DELTA;
                    }
                }
        
                // Pre-compute commitments for the URS.
                let mut commitments = vec![];
                for i in 0..p.columns.len() {
                    // Computes the permutation polynomial based on the permutation
                    // description in the assembly.
                    let mut permutation_poly = domain.empty_lagrange();
                    for (j, p) in permutation_poly.iter_mut().enumerate() {
                        let (permuted_i, permuted_j) = self.mapping[i][j];
                        *p = delta_omegas[permuted_i as usize][permuted_j as usize];
                    }
        
                    // Compute commitment to permutation polynomial
                    commitments.push(params.commit_lagrange(&permutation_poly).to_affine());
                }
                VerifyingKey { commitments }
            }
        *)
        Definition build_vk (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ C ], [ self; params; domain; p ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let params := M.alloc (| params |) in
              let domain := M.alloc (| domain |) in
              let p := M.alloc (| p |) in
              M.read (|
                let omega_powers :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                        "with_capacity",
                        []
                      |),
                      [
                        M.rust_cast
                          (M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| params |),
                              "halo2_proofs::poly::commitment::Params",
                              "n"
                            |)
                          |))
                      ]
                    |)
                  |) in
                let _ :=
                  let cur :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (| "ff::Field", Ty.associated, [], "one", [] |),
                        []
                      |)
                    |) in
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u64" ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [
                                ("start", Value.Integer 0);
                                ("end_",
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| params |),
                                      "halo2_proofs::poly::commitment::Params",
                                      "n"
                                    |)
                                  |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            [ Ty.path "u64" ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.associated; Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "push",
                                                  []
                                                |),
                                                [ omega_powers; M.read (| cur |) ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::arith::MulAssign",
                                                  Ty.associated,
                                                  [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                                                  "mul_assign",
                                                  []
                                                |),
                                                [
                                                  cur;
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::domain::EvaluationDomain")
                                                          [ Ty.associated ],
                                                        "get_omega",
                                                        []
                                                      |),
                                                      [ M.read (| domain |) ]
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let delta_omegas :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "with_capacity",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                  [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "len",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| p |),
                              "halo2_proofs::plonk::permutation::Argument",
                              "columns"
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  let cur :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (| "ff::Field", Ty.associated, [], "one", [] |),
                        []
                      |)
                    |) in
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [
                                ("start", Value.Integer 0);
                                ("end_",
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                                            [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "len",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| p |),
                                        "halo2_proofs::plonk::permutation::Argument",
                                        "columns"
                                      |)
                                    ]
                                  |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            [ Ty.path "usize" ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let omega_powers :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::clone::Clone",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.associated; Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "clone",
                                                  []
                                                |),
                                                [ omega_powers ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.use
                                              (M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::collect::IntoIterator",
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.associated;
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ],
                                                      [],
                                                      "into_iter",
                                                      []
                                                    |),
                                                    [ omega_powers ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let iter := M.copy (| γ |) in
                                                      M.loop (|
                                                        ltac:(M.monadic
                                                          (let _ :=
                                                            M.match_operator (|
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::IterMut")
                                                                      [ Ty.associated ],
                                                                    [],
                                                                    "next",
                                                                    []
                                                                  |),
                                                                  [ iter ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (| M.break (||) |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::option::Option::Some",
                                                                        0
                                                                      |) in
                                                                    let o := M.copy (| γ0_0 |) in
                                                                    let _ :=
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::MulAssign",
                                                                            Ty.associated,
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [ Ty.associated ]
                                                                            ],
                                                                            "mul_assign",
                                                                            []
                                                                          |),
                                                                          [ M.read (| o |); cur ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)))
                                                      |)))
                                                ]
                                              |)) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.associated;
                                                          Ty.path "alloc::alloc::Global"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "push",
                                                  []
                                                |),
                                                [ delta_omegas; M.read (| omega_powers |) ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::arith::MulAssign",
                                                  Ty.associated,
                                                  [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                                                  "mul_assign",
                                                  []
                                                |),
                                                [
                                                  cur;
                                                  M.get_constant (|
                                                    "pairing_bn256::arithmetic::fields::FieldExt::DELTA"
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let commitments :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "alloc::vec::Vec") [ C; Ty.path "alloc::alloc::Global" ],
                        "new",
                        []
                      |),
                      []
                    |)
                  |) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [
                                ("start", Value.Integer 0);
                                ("end_",
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                                            [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "len",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| p |),
                                        "halo2_proofs::plonk::permutation::Argument",
                                        "columns"
                                      |)
                                    ]
                                  |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            [ Ty.path "usize" ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let i := M.copy (| γ0_0 |) in
                                          let permutation_poly :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::poly::domain::EvaluationDomain")
                                                    [ Ty.associated ],
                                                  "empty_lagrange",
                                                  []
                                                |),
                                                [ M.read (| domain |) ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.use
                                              (M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::collect::IntoIterator",
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        [ Ty.associated ],
                                                      [],
                                                      "into_iter",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.associated,
                                                          [],
                                                          "enumerate",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::poly::Polynomial")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path
                                                                    "halo2_proofs::poly::LagrangeCoeff"
                                                                ],
                                                              "iter_mut",
                                                              []
                                                            |),
                                                            [ permutation_poly ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let iter := M.copy (| γ |) in
                                                      M.loop (|
                                                        ltac:(M.monadic
                                                          (let _ :=
                                                            M.match_operator (|
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                      [ Ty.associated ],
                                                                    [],
                                                                    "next",
                                                                    []
                                                                  |),
                                                                  [ iter ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (| M.break (||) |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::option::Option::Some",
                                                                        0
                                                                      |) in
                                                                    let γ1_0 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ0_0,
                                                                        0
                                                                      |) in
                                                                    let γ1_1 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ0_0,
                                                                        1
                                                                      |) in
                                                                    let j := M.copy (| γ1_0 |) in
                                                                    let p := M.copy (| γ1_1 |) in
                                                                    M.match_operator (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::index::Index",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.path "u32";
                                                                                  Ty.path "u32"
                                                                                ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [ Ty.path "usize" ],
                                                                          "index",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::index::Index",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.path
                                                                                            "u32";
                                                                                          Ty.path
                                                                                            "u32"
                                                                                        ];
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [ Ty.path "usize" ],
                                                                              "index",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                self,
                                                                                "halo2_proofs::plonk::permutation::keygen::Assembly",
                                                                                "mapping"
                                                                              |);
                                                                              M.read (| i |)
                                                                            ]
                                                                          |);
                                                                          M.read (| j |)
                                                                        ]
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                0
                                                                              |) in
                                                                            let γ0_1 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                1
                                                                              |) in
                                                                            let permuted_i :=
                                                                              M.copy (| γ0_0 |) in
                                                                            let permuted_j :=
                                                                              M.copy (| γ0_1 |) in
                                                                            let _ :=
                                                                              M.write (|
                                                                                M.read (| p |),
                                                                                M.read (|
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::index::Index",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "alloc::vec::Vec")
                                                                                        [
                                                                                          Ty.associated;
                                                                                          Ty.path
                                                                                            "alloc::alloc::Global"
                                                                                        ],
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ],
                                                                                      "index",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::index::Index",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                [
                                                                                                  Ty.associated;
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ];
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ],
                                                                                          "index",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          delta_omegas;
                                                                                          M.rust_cast
                                                                                            (M.read (|
                                                                                              permuted_i
                                                                                            |))
                                                                                        ]
                                                                                      |);
                                                                                      M.rust_cast
                                                                                        (M.read (|
                                                                                          permuted_j
                                                                                        |))
                                                                                    ]
                                                                                  |)
                                                                                |)
                                                                              |) in
                                                                            M.alloc (|
                                                                              Value.Tuple []
                                                                            |)))
                                                                      ]
                                                                    |)))
                                                              ]
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)))
                                                      |)))
                                                ]
                                              |)) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ C; Ty.path "alloc::alloc::Global" ],
                                                  "push",
                                                  []
                                                |),
                                                [
                                                  commitments;
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "group::Curve",
                                                      Ty.associated,
                                                      [],
                                                      "to_affine",
                                                      []
                                                    |),
                                                    [
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::commitment::Params")
                                                              [ C ],
                                                            "commit_lagrange",
                                                            []
                                                          |),
                                                          [ M.read (| params |); permutation_poly ]
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                M.alloc (|
                  Value.StructRecord
                    "halo2_proofs::plonk::permutation::VerifyingKey"
                    [ ("commitments", M.read (| commitments |)) ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_build_vk : M.IsAssociatedFunction Self "build_vk" build_vk.
        
        (*
            pub(crate) fn build_pk<C: CurveAffine>(
                self,
                params: &Params<C>,
                domain: &EvaluationDomain<C::Scalar>,
                p: &Argument,
            ) -> ProvingKey<C> {
                // Compute [omega^0, omega^1, ..., omega^{params.n - 1}]
                let timer = start_timer!(|| "prepare delta_omegas");
                let mut deltas = vec![C::Scalar::one()];
                for _ in 1..p.columns.len() {
                    deltas.push(C::Scalar::DELTA * deltas.last().unwrap());
                }
        
                let mut delta_omegas = vec![vec![]; p.columns.len()];
                let omega = domain.get_omega();
                delta_omegas.par_iter_mut().enumerate().for_each(|(i, x)| {
                    x.push(deltas[i]);
                    for _ in 1..params.n {
                        x.push(omega * x.last().unwrap())
                    }
                });
                end_timer!(timer);
        
                let timer = start_timer!(|| "prepare permutations");
                // Compute permutation polynomials, convert to coset form.
                let mut permutations = vec![];
                for i in 0..p.columns.len() {
                    // Computes the permutation polynomial based on the permutation
                    // description in the assembly.
                    let mut permutation_poly = domain.empty_lagrange();
        
                    parallelize(&mut permutation_poly, |permutation_poly, start| {
                        permutation_poly.iter_mut().enumerate().for_each(|(j, p)| {
                            let j = start + j;
                            let (permuted_i, permuted_j) = self.mapping[i][j];
                            *p = delta_omegas[permuted_i as usize][permuted_j as usize];
                        });
                    });
        
                    // Store permutation polynomial and precompute its coset evaluation
                    permutations.push(permutation_poly.clone());
                }
                end_timer!(timer);
        
                let timer = start_timer!(|| "prepare poly");
                let polys: Vec<_> = permutations
                    .par_iter()
                    .map(|permutation_poly| domain.lagrange_to_coeff_st(permutation_poly.clone()))
                    .collect();
                end_timer!(timer);
        
                #[cfg(not(feature = "cuda"))]
                let cosets = polys
                    .par_iter()
                    .map(|poly| domain.coeff_to_extended(poly.clone()))
                    .collect();
        
                ProvingKey {
                    permutations,
                    polys,
        
                    #[cfg(not(feature = "cuda"))]
                    cosets,
                }
            }
        *)
        Definition build_pk (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ C ], [ self; params; domain; p ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let params := M.alloc (| params |) in
              let domain := M.alloc (| domain |) in
              let p := M.alloc (| p |) in
              M.read (|
                let timer :=
                  M.alloc (| Value.StructTuple "ark_std::perf_trace::inner::TimerInfo" [] |) in
                let deltas :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [ Ty.associated ],
                        "into_vec",
                        [ Ty.path "alloc::alloc::Global" ]
                      |),
                      [
                        (* Unsize *)
                        M.pointer_coercion
                          (M.read (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  [
                                    Ty.apply (Ty.path "array") [ Ty.associated ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              [
                                M.alloc (|
                                  Value.Array
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "ff::Field",
                                          Ty.associated,
                                          [],
                                          "one",
                                          []
                                        |),
                                        []
                                      |)
                                    ]
                                |)
                              ]
                            |)
                          |))
                      ]
                    |)
                  |) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            Value.StructRecord
                              "core::ops::range::Range"
                              [
                                ("start", Value.Integer 1);
                                ("end_",
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                                            [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      "len",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| p |),
                                        "halo2_proofs::plonk::permutation::Argument",
                                        "columns"
                                      |)
                                    ]
                                  |))
                              ]
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::ops::range::Range")
                                            [ Ty.path "usize" ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.associated; Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "push",
                                                  []
                                                |),
                                                [
                                                  deltas;
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Mul",
                                                      Ty.associated,
                                                      [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                                                      "mul",
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        M.get_constant (|
                                                          "pairing_bn256::arithmetic::fields::FieldExt::DELTA"
                                                        |)
                                                      |);
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.associated ]
                                                            ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                [ Ty.associated ],
                                                              "last",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.associated;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "deref",
                                                                  []
                                                                |),
                                                                [ deltas ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let delta_omegas :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "alloc::vec::from_elem",
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                            "new",
                            []
                          |),
                          []
                        |);
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                  [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "len",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| p |),
                              "halo2_proofs::plonk::permutation::Argument",
                              "columns"
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                let omega :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                          [ Ty.associated ],
                        "get_omega",
                        []
                      |),
                      [ M.read (| domain |) ]
                    |)
                  |) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "rayon::iter::ParallelIterator",
                        Ty.apply
                          (Ty.path "rayon::iter::enumerate::Enumerate")
                          [
                            Ty.apply
                              (Ty.path "rayon::slice::IterMut")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                              ]
                          ],
                        [],
                        "for_each",
                        [
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.tuple
                                    [
                                      Ty.path "usize";
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                                        ]
                                    ]
                                ]
                            ]
                            (Ty.tuple [])
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "rayon::iter::IndexedParallelIterator",
                            Ty.apply
                              (Ty.path "rayon::slice::IterMut")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                              ],
                            [],
                            "enumerate",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "rayon::iter::IntoParallelRefMutIterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "par_iter_mut",
                                []
                              |),
                              [ delta_omegas ]
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let i := M.copy (| γ0_0 |) in
                                        let x := M.copy (| γ0_1 |) in
                                        M.read (|
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.associated; Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "push",
                                                  []
                                                |),
                                                [
                                                  M.read (| x |);
                                                  M.read (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::index::Index",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [ Ty.path "usize" ],
                                                        "index",
                                                        []
                                                      |),
                                                      [ deltas; M.read (| i |) ]
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.use
                                            (M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    Ty.apply
                                                      (Ty.path "core::ops::range::Range")
                                                      [ Ty.path "u64" ],
                                                    [],
                                                    "into_iter",
                                                    []
                                                  |),
                                                  [
                                                    Value.StructRecord
                                                      "core::ops::range::Range"
                                                      [
                                                        ("start", Value.Integer 1);
                                                        ("end_",
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| params |),
                                                              "halo2_proofs::poly::commitment::Params",
                                                              "n"
                                                            |)
                                                          |))
                                                      ]
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let iter := M.copy (| γ |) in
                                                    M.loop (|
                                                      ltac:(M.monadic
                                                        (let _ :=
                                                          M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    [ Ty.path "u64" ],
                                                                  [],
                                                                  "next",
                                                                  []
                                                                |),
                                                                [ iter ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (| M.break (||) |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.associated;
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "push",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| x |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Mul",
                                                                            Ty.associated,
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [ Ty.associated ]
                                                                            ],
                                                                            "mul",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (| omega |);
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::option::Option")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [
                                                                                        Ty.associated
                                                                                      ]
                                                                                  ],
                                                                                "unwrap",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "slice")
                                                                                      [
                                                                                        Ty.associated
                                                                                      ],
                                                                                    "last",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::deref::Deref",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          [
                                                                                            Ty.associated;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        [],
                                                                                        "deref",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          x
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)))
                                                            ]
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)))
                                                    |)))
                                              ]
                                            |))
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                M.match_operator (|
                  timer,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let timer :=
                          M.alloc (|
                            Value.StructTuple "ark_std::perf_trace::inner::TimerInfo" []
                          |) in
                        let permutations :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                      [ Ty.associated; Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                []
                              |),
                              []
                            |)
                          |) in
                        let _ :=
                          M.use
                            (M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::collect::IntoIterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [ Ty.path "usize" ],
                                    [],
                                    "into_iter",
                                    []
                                  |),
                                  [
                                    Value.StructRecord
                                      "core::ops::range::Range"
                                      [
                                        ("start", Value.Integer 0);
                                        ("end_",
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                    [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "len",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| p |),
                                                "halo2_proofs::plonk::permutation::Argument",
                                                "columns"
                                              |)
                                            ]
                                          |))
                                      ]
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let iter := M.copy (| γ |) in
                                    M.loop (|
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.match_operator (|
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::ops::range::Range")
                                                    [ Ty.path "usize" ],
                                                  [],
                                                  "next",
                                                  []
                                                |),
                                                [ iter ]
                                              |)
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.alloc (|
                                                    M.never_to_any (| M.read (| M.break (||) |) |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_struct_tuple_field (|
                                                      γ,
                                                      "core::option::Option::Some",
                                                      0
                                                    |) in
                                                  let i := M.copy (| γ0_0 |) in
                                                  let permutation_poly :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::domain::EvaluationDomain")
                                                            [ Ty.associated ],
                                                          "empty_lagrange",
                                                          []
                                                        |),
                                                        [ M.read (| domain |) ]
                                                      |)
                                                    |) in
                                                  let _ :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "halo2_proofs::arithmetic::parallelize",
                                                          [
                                                            Ty.associated;
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [ Ty.associated ]
                                                                      ];
                                                                    Ty.path "usize"
                                                                  ]
                                                              ]
                                                              (Ty.tuple [])
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::deref::DerefMut",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::poly::Polynomial")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path
                                                                    "halo2_proofs::poly::LagrangeCoeff"
                                                                ],
                                                              [],
                                                              "deref_mut",
                                                              []
                                                            |),
                                                            [ permutation_poly ]
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0; α1 ] =>
                                                                  M.match_operator (|
                                                                    M.alloc (| α0 |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let permutation_poly :=
                                                                            M.copy (| γ |) in
                                                                          M.match_operator (|
                                                                            M.alloc (| α1 |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let start :=
                                                                                    M.copy (|
                                                                                      γ
                                                                                    |) in
                                                                                  M.read (|
                                                                                    let _ :=
                                                                                      M.alloc (|
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::iter::adapters::enumerate::Enumerate")
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::slice::iter::IterMut")
                                                                                                  [
                                                                                                    Ty.associated
                                                                                                  ]
                                                                                              ],
                                                                                            [],
                                                                                            "for_each",
                                                                                            [
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "usize";
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&mut")
                                                                                                            [
                                                                                                              Ty.associated
                                                                                                            ]
                                                                                                        ]
                                                                                                    ]
                                                                                                ]
                                                                                                (Ty.tuple
                                                                                                  [])
                                                                                            ]
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "core::iter::traits::iterator::Iterator",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::slice::iter::IterMut")
                                                                                                  [
                                                                                                    Ty.associated
                                                                                                  ],
                                                                                                [],
                                                                                                "enumerate",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "slice")
                                                                                                      [
                                                                                                        Ty.associated
                                                                                                      ],
                                                                                                    "iter_mut",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      permutation_poly
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |);
                                                                                            M.closure
                                                                                              (fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  match
                                                                                                    γ
                                                                                                  with
                                                                                                  | [
                                                                                                        α0
                                                                                                      ] =>
                                                                                                    M.match_operator (|
                                                                                                      M.alloc (|
                                                                                                        α0
                                                                                                      |),
                                                                                                      [
                                                                                                        fun
                                                                                                            γ =>
                                                                                                          ltac:(M.monadic
                                                                                                            (let
                                                                                                                  γ0_0 :=
                                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                                γ,
                                                                                                                0
                                                                                                              |) in
                                                                                                            let
                                                                                                                  γ0_1 :=
                                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                                γ,
                                                                                                                1
                                                                                                              |) in
                                                                                                            let
                                                                                                                  j :=
                                                                                                              M.copy (|
                                                                                                                γ0_0
                                                                                                              |) in
                                                                                                            let
                                                                                                                  p :=
                                                                                                              M.copy (|
                                                                                                                γ0_1
                                                                                                              |) in
                                                                                                            M.read (|
                                                                                                              let
                                                                                                                    j :=
                                                                                                                M.alloc (|
                                                                                                                  BinOp.Panic.add (|
                                                                                                                    Integer.Usize,
                                                                                                                    M.read (|
                                                                                                                      start
                                                                                                                    |),
                                                                                                                    M.read (|
                                                                                                                      j
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |) in
                                                                                                              M.match_operator (|
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::ops::index::Index",
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "alloc::vec::Vec")
                                                                                                                      [
                                                                                                                        Ty.tuple
                                                                                                                          [
                                                                                                                            Ty.path
                                                                                                                              "u32";
                                                                                                                            Ty.path
                                                                                                                              "u32"
                                                                                                                          ];
                                                                                                                        Ty.path
                                                                                                                          "alloc::alloc::Global"
                                                                                                                      ],
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "usize"
                                                                                                                    ],
                                                                                                                    "index",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::ops::index::Index",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "alloc::vec::Vec")
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "alloc::vec::Vec")
                                                                                                                              [
                                                                                                                                Ty.tuple
                                                                                                                                  [
                                                                                                                                    Ty.path
                                                                                                                                      "u32";
                                                                                                                                    Ty.path
                                                                                                                                      "u32"
                                                                                                                                  ];
                                                                                                                                Ty.path
                                                                                                                                  "alloc::alloc::Global"
                                                                                                                              ];
                                                                                                                            Ty.path
                                                                                                                              "alloc::alloc::Global"
                                                                                                                          ],
                                                                                                                        [
                                                                                                                          Ty.path
                                                                                                                            "usize"
                                                                                                                        ],
                                                                                                                        "index",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                                          self,
                                                                                                                          "halo2_proofs::plonk::permutation::keygen::Assembly",
                                                                                                                          "mapping"
                                                                                                                        |);
                                                                                                                        M.read (|
                                                                                                                          i
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |);
                                                                                                                    M.read (|
                                                                                                                      j
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |),
                                                                                                                [
                                                                                                                  fun
                                                                                                                      γ =>
                                                                                                                    ltac:(M.monadic
                                                                                                                      (let
                                                                                                                            γ0_0 :=
                                                                                                                        M.SubPointer.get_tuple_field (|
                                                                                                                          γ,
                                                                                                                          0
                                                                                                                        |) in
                                                                                                                      let
                                                                                                                            γ0_1 :=
                                                                                                                        M.SubPointer.get_tuple_field (|
                                                                                                                          γ,
                                                                                                                          1
                                                                                                                        |) in
                                                                                                                      let
                                                                                                                            permuted_i :=
                                                                                                                        M.copy (|
                                                                                                                          γ0_0
                                                                                                                        |) in
                                                                                                                      let
                                                                                                                            permuted_j :=
                                                                                                                        M.copy (|
                                                                                                                          γ0_1
                                                                                                                        |) in
                                                                                                                      let
                                                                                                                            _ :=
                                                                                                                        M.write (|
                                                                                                                          M.read (|
                                                                                                                            p
                                                                                                                          |),
                                                                                                                          M.read (|
                                                                                                                            M.call_closure (|
                                                                                                                              M.get_trait_method (|
                                                                                                                                "core::ops::index::Index",
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                  [
                                                                                                                                    Ty.associated;
                                                                                                                                    Ty.path
                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                  ],
                                                                                                                                [
                                                                                                                                  Ty.path
                                                                                                                                    "usize"
                                                                                                                                ],
                                                                                                                                "index",
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.call_closure (|
                                                                                                                                  M.get_trait_method (|
                                                                                                                                    "core::ops::index::Index",
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "alloc::vec::Vec")
                                                                                                                                      [
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "alloc::vec::Vec")
                                                                                                                                          [
                                                                                                                                            Ty.associated;
                                                                                                                                            Ty.path
                                                                                                                                              "alloc::alloc::Global"
                                                                                                                                          ];
                                                                                                                                        Ty.path
                                                                                                                                          "alloc::alloc::Global"
                                                                                                                                      ],
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "usize"
                                                                                                                                    ],
                                                                                                                                    "index",
                                                                                                                                    []
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    delta_omegas;
                                                                                                                                    M.rust_cast
                                                                                                                                      (M.read (|
                                                                                                                                        permuted_i
                                                                                                                                      |))
                                                                                                                                  ]
                                                                                                                                |);
                                                                                                                                M.rust_cast
                                                                                                                                  (M.read (|
                                                                                                                                    permuted_j
                                                                                                                                  |))
                                                                                                                              ]
                                                                                                                            |)
                                                                                                                          |)
                                                                                                                        |) in
                                                                                                                      M.alloc (|
                                                                                                                        Value.Tuple
                                                                                                                          []
                                                                                                                      |)))
                                                                                                                ]
                                                                                                              |)
                                                                                                            |)))
                                                                                                      ]
                                                                                                    |)
                                                                                                  | _ =>
                                                                                                    M.impossible (||)
                                                                                                  end))
                                                                                          ]
                                                                                        |)
                                                                                      |) in
                                                                                    M.alloc (|
                                                                                      Value.Tuple []
                                                                                    |)
                                                                                  |)))
                                                                            ]
                                                                          |)))
                                                                    ]
                                                                  |)
                                                                | _ => M.impossible (||)
                                                                end))
                                                        ]
                                                      |)
                                                    |) in
                                                  let _ :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::poly::Polynomial")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path
                                                                    "halo2_proofs::poly::LagrangeCoeff"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          "push",
                                                          []
                                                        |),
                                                        [
                                                          permutations;
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::clone::Clone",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::poly::Polynomial")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path
                                                                    "halo2_proofs::poly::LagrangeCoeff"
                                                                ],
                                                              [],
                                                              "clone",
                                                              []
                                                            |),
                                                            [ permutation_poly ]
                                                          |)
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                    |)))
                              ]
                            |)) in
                        M.match_operator (|
                          timer,
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let timer :=
                                  M.alloc (|
                                    Value.StructTuple "ark_std::perf_trace::inner::TimerInfo" []
                                  |) in
                                let polys :=
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "rayon::iter::ParallelIterator",
                                        Ty.apply
                                          (Ty.path "rayon::iter::map::Map")
                                          [
                                            Ty.apply
                                              (Ty.path "rayon::slice::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                  ]
                                              ];
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path
                                                              "halo2_proofs::poly::LagrangeCoeff"
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                              (Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff"
                                                ])
                                          ],
                                        [],
                                        "collect",
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff"
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "rayon::iter::ParallelIterator",
                                            Ty.apply
                                              (Ty.path "rayon::slice::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                  ]
                                              ],
                                            [],
                                            "map",
                                            [
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::Polynomial")
                                                            [
                                                              Ty.associated;
                                                              Ty.path
                                                                "halo2_proofs::poly::LagrangeCoeff"
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::Coeff"
                                                  ]);
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "rayon::iter::IntoParallelRefIterator",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "par_iter",
                                                []
                                              |),
                                              [ permutations ]
                                            |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let permutation_poly :=
                                                              M.copy (| γ |) in
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::domain::EvaluationDomain")
                                                                  [ Ty.associated ],
                                                                "lagrange_to_coeff_st",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| domain |);
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::clone::Clone",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::poly::Polynomial")
                                                                      [
                                                                        Ty.associated;
                                                                        Ty.path
                                                                          "halo2_proofs::poly::LagrangeCoeff"
                                                                      ],
                                                                    [],
                                                                    "clone",
                                                                    []
                                                                  |),
                                                                  [ M.read (| permutation_poly |) ]
                                                                |)
                                                              ]
                                                            |)))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      ]
                                    |)
                                  |) in
                                M.match_operator (|
                                  timer,
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let cosets :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "rayon::iter::ParallelIterator",
                                                Ty.apply
                                                  (Ty.path "rayon::iter::map::Map")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "rayon::slice::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "halo2_proofs::poly::Coeff"
                                                          ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::Polynomial")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Coeff"
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.associated;
                                                          Ty.path
                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                        ])
                                                  ],
                                                [],
                                                "collect",
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.associated;
                                                          Ty.path
                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "rayon::iter::ParallelIterator",
                                                    Ty.apply
                                                      (Ty.path "rayon::slice::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "halo2_proofs::poly::Coeff"
                                                          ]
                                                      ],
                                                    [],
                                                    "map",
                                                    [
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::poly::Polynomial")
                                                                    [
                                                                      Ty.associated;
                                                                      Ty.path
                                                                        "halo2_proofs::poly::Coeff"
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path
                                                              "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                          ]);
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.associated;
                                                          Ty.path
                                                            "halo2_proofs::poly::ExtendedLagrangeCoeff"
                                                        ]
                                                    ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "rayon::iter::IntoParallelRefIterator",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::Polynomial")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "halo2_proofs::poly::Coeff"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        "par_iter",
                                                        []
                                                      |),
                                                      [ polys ]
                                                    |);
                                                    M.closure
                                                      (fun γ =>
                                                        ltac:(M.monadic
                                                          match γ with
                                                          | [ α0 ] =>
                                                            M.match_operator (|
                                                              M.alloc (| α0 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let poly := M.copy (| γ |) in
                                                                    M.call_closure (|
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::poly::domain::EvaluationDomain")
                                                                          [ Ty.associated ],
                                                                        "coeff_to_extended",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.read (| domain |);
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::clone::Clone",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::poly::Polynomial")
                                                                              [
                                                                                Ty.associated;
                                                                                Ty.path
                                                                                  "halo2_proofs::poly::Coeff"
                                                                              ],
                                                                            [],
                                                                            "clone",
                                                                            []
                                                                          |),
                                                                          [ M.read (| poly |) ]
                                                                        |)
                                                                      ]
                                                                    |)))
                                                              ]
                                                            |)
                                                          | _ => M.impossible (||)
                                                          end))
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (|
                                          Value.StructRecord
                                            "halo2_proofs::plonk::permutation::ProvingKey"
                                            [
                                              ("permutations", M.read (| permutations |));
                                              ("polys", M.read (| polys |));
                                              ("cosets", M.read (| cosets |))
                                            ]
                                        |)))
                                  ]
                                |)))
                          ]
                        |)))
                  ]
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_build_pk : M.IsAssociatedFunction Self "build_pk" build_pk.
      End Impl_halo2_proofs_plonk_permutation_keygen_Assembly.
    End keygen.
  End permutation.
End plonk.
