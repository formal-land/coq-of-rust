(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module plonk.
  Module permutation.
    Module prover.
      (* StructRecord
        {
          name := "CommittedSet";
          ty_params := [ "C" ];
          fields :=
            [
              ("permutation_product_poly",
                Ty.apply
                  (Ty.path "halo2_proofs::poly::Polynomial")
                  [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]);
              ("permutation_product_coset",
                Ty.apply
                  (Ty.path "halo2_proofs::poly::Polynomial")
                  [ Ty.associated; Ty.path "halo2_proofs::poly::ExtendedLagrangeCoeff" ])
            ];
        } *)
      
      (* StructRecord
        {
          name := "Committed";
          ty_params := [ "C" ];
          fields :=
            [
              ("sets",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply
                      (Ty.path "halo2_proofs::plonk::permutation::prover::CommittedSet")
                      [ C ];
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      (* StructRecord
        {
          name := "ConstructedSet";
          ty_params := [ "C" ];
          fields :=
            [
              ("permutation_product_poly",
                Ty.apply
                  (Ty.path "halo2_proofs::poly::Polynomial")
                  [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ])
            ];
        } *)
      
      (* StructRecord
        {
          name := "Constructed";
          ty_params := [ "C" ];
          fields :=
            [
              ("sets",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply
                      (Ty.path "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                      [ C ];
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      (* StructRecord
        {
          name := "Evaluated";
          ty_params := [ "C" ];
          fields :=
            [
              ("constructed",
                Ty.apply (Ty.path "halo2_proofs::plonk::permutation::prover::Constructed") [ C ])
            ];
        } *)
      
      Module Impl_halo2_proofs_plonk_permutation_Argument.
        Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::permutation::Argument".
        
        (*
            pub(in crate::plonk) fn commit<C: CurveAffine, R: RngCore>(
                &self,
                params: &Params<C>,
                pk: &plonk::ProvingKey<C>,
                pkey: &ProvingKey<C>,
                advice: &[Polynomial<C::Scalar, LagrangeCoeff>],
                fixed: &[Polynomial<C::Scalar, LagrangeCoeff>],
                instance: &[Polynomial<C::Scalar, LagrangeCoeff>],
                beta: ChallengeBeta<C>,
                gamma: ChallengeGamma<C>,
                mut rng: R,
            ) -> Result<Vec<Polynomial<C::ScalarExt, LagrangeCoeff>>, Error> {
                let domain = &pk.vk.domain;
        
                // How many columns can be included in a single permutation polynomial?
                // We need to multiply by z(X) and (1 - (l_last(X) + l_blind(X))). This
                // will never underflow because of the requirement of at least a degree
                // 3 circuit for the permutation argument.
                assert!(pk.vk.cs.degree() >= 3);
                let chunk_len = pk.vk.cs.degree() - 2;
                let blinding_factors = pk.vk.cs.blinding_factors();
        
                let mut sets = vec![];
        
                let raw_zs = self
                    .columns
                    .par_chunks(chunk_len)
                    .zip(pkey.permutations.par_chunks(chunk_len))
                    .enumerate()
                    .map(|(i, (columns, permutations))| {
                        // Each column gets its own delta power.
                        let mut delta_omega = C::Scalar::DELTA.pow(&[i as u64 * chunk_len as u64, 0, 0, 0]);
        
                        // Goal is to compute the products of fractions
                        //
                        // (p_j(\omega^i) + \delta^j \omega^i \beta + \gamma) /
                        // (p_j(\omega^i) + \beta s_j(\omega^i) + \gamma)
                        //
                        // where p_j(X) is the jth column in this permutation,
                        // and i is the ith row of the column.
        
                        let mut modified_values = vec![C::Scalar::one(); params.n as usize];
        
                        // Iterate over each column of the permutation
                        for (&column, permuted_column_values) in columns.iter().zip(permutations.iter()) {
                            let values = match column.column_type() {
                                Any::Advice => advice,
                                Any::Fixed => fixed,
                                Any::Instance => instance,
                            };
                            for i in 0..params.n as usize {
                                modified_values[i] *= &( *beta * permuted_column_values[i]
                                    + &*gamma
                                    + values[column.index()][i]);
                            }
                        }
        
                        // Invert to obtain the denominator for the permutation product polynomial
                        modified_values.iter_mut().batch_invert();
        
                        // Iterate over each column again, this time finishing the computation
                        // of the entire fraction by computing the numerators
                        for &column in columns.iter() {
                            let omega = domain.get_omega();
                            let values = match column.column_type() {
                                Any::Advice => advice,
                                Any::Fixed => fixed,
                                Any::Instance => instance,
                            };
                            for i in 0..params.n as usize {
                                modified_values[i] *=
                                    &(delta_omega * &*beta + &*gamma + values[column.index()][i]);
                                delta_omega *= &omega;
                            }
                            delta_omega *= &C::Scalar::DELTA;
                        }
        
                        // The modified_values vector is a vector of products of fractions
                        // of the form
                        //
                        // (p_j(\omega^i) + \delta^j \omega^i \beta + \gamma) /
                        // (p_j(\omega^i) + \beta s_j(\omega^i) + \gamma)
                        //
                        // where i is the index into modified_values, for the jth column in
                        // the permutation
        
                        // Compute the evaluations of the permutation product polynomial
                        // over our domain, starting with z[0] = 1
        
                        let mut z = vec![C::Scalar::zero(); params.n as usize];
                        z.iter_mut().enumerate().for_each(|(i, z)| {
                            if i > 0 {
                                *z = modified_values[i - 1];
                            }
                        });
                        z
                    })
                    .collect::<Vec<_>>();
        
                // Track the "last" value from the previous column set
                let mut last_z = C::Scalar::one();
        
                for mut z in raw_zs.into_iter() {
                    z[0] = last_z;
                    for i in 0..z.len() - 1 {
                        z[i + 1] = z[i] * z[i + 1];
                    }
        
                    let mut z = domain.lagrange_from_vec(z);
                    // Set blinding factors
                    for z in &mut z[params.n as usize - blinding_factors..] {
                        *z = C::Scalar::random(&mut rng);
                    }
                    // Set new last_z
                    last_z = z[params.n as usize - (blinding_factors + 1)];
        
                    sets.push(z);
                }
        
                Ok(sets)
            }
        *)
        Definition commit (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ C; R ], [ self; params; pk; pkey; advice; fixed; instance; beta; gamma; rng ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let params := M.alloc (| params |) in
              let pk := M.alloc (| pk |) in
              let pkey := M.alloc (| pkey |) in
              let advice := M.alloc (| advice |) in
              let fixed := M.alloc (| fixed |) in
              let instance := M.alloc (| instance |) in
              let beta := M.alloc (| beta |) in
              let gamma := M.alloc (| gamma |) in
              let rng := M.alloc (| rng |) in
              M.read (|
                let domain :=
                  M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| pk |),
                        "halo2_proofs::plonk::ProvingKey",
                        "vk"
                      |),
                      "halo2_proofs::plonk::VerifyingKey",
                      "domain"
                    |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                UnOp.Pure.not
                                  (BinOp.Pure.ge
                                    (M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                                          [ Ty.associated ],
                                        "degree",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| pk |),
                                            "halo2_proofs::plonk::ProvingKey",
                                            "vk"
                                          |),
                                          "halo2_proofs::plonk::VerifyingKey",
                                          "cs"
                                        |)
                                      ]
                                    |))
                                    (Value.Integer 3))
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.call_closure (|
                                M.get_function (| "core::panicking::panic", [] |),
                                [
                                  M.read (|
                                    Value.String "assertion failed: pk.vk.cs.degree() >= 3"
                                  |)
                                ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                    ]
                  |) in
                let chunk_len :=
                  M.alloc (|
                    BinOp.Panic.sub (|
                      Integer.Usize,
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                            [ Ty.associated ],
                          "degree",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| pk |),
                              "halo2_proofs::plonk::ProvingKey",
                              "vk"
                            |),
                            "halo2_proofs::plonk::VerifyingKey",
                            "cs"
                          |)
                        ]
                      |),
                      Value.Integer 2
                    |)
                  |) in
                let blinding_factors :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                          [ Ty.associated ],
                        "blinding_factors",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| pk |),
                            "halo2_proofs::plonk::ProvingKey",
                            "vk"
                          |),
                          "halo2_proofs::plonk::VerifyingKey",
                          "cs"
                        |)
                      ]
                    |)
                  |) in
                let sets :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "halo2_proofs::poly::Polynomial")
                              [ Ty.associated; Ty.path "halo2_proofs::poly::LagrangeCoeff" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "new",
                        []
                      |),
                      []
                    |)
                  |) in
                let raw_zs :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "rayon::iter::ParallelIterator",
                        Ty.apply
                          (Ty.path "rayon::iter::map::Map")
                          [
                            Ty.apply
                              (Ty.path "rayon::iter::enumerate::Enumerate")
                              [
                                Ty.apply
                                  (Ty.path "rayon::iter::zip::Zip")
                                  [
                                    Ty.apply
                                      (Ty.path "rayon::slice::chunks::Chunks")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Column")
                                          [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                      ];
                                    Ty.apply
                                      (Ty.path "rayon::slice::chunks::Chunks")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                          [
                                            Ty.associated;
                                            Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                          ]
                                      ]
                                  ]
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.tuple
                                      [
                                        Ty.path "usize";
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Column")
                                                      [ Ty.path "halo2_proofs::plonk::circuit::Any"
                                                      ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                      ]
                                                  ]
                                              ]
                                          ]
                                      ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.associated; Ty.path "alloc::alloc::Global" ])
                          ],
                        [],
                        "collect",
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "rayon::iter::ParallelIterator",
                            Ty.apply
                              (Ty.path "rayon::iter::enumerate::Enumerate")
                              [
                                Ty.apply
                                  (Ty.path "rayon::iter::zip::Zip")
                                  [
                                    Ty.apply
                                      (Ty.path "rayon::slice::chunks::Chunks")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Column")
                                          [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                      ];
                                    Ty.apply
                                      (Ty.path "rayon::slice::chunks::Chunks")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                          [
                                            Ty.associated;
                                            Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                          ]
                                      ]
                                  ]
                              ],
                            [],
                            "map",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.tuple
                                        [
                                          Ty.path "usize";
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Column")
                                                        [
                                                          Ty.path
                                                            "halo2_proofs::plonk::circuit::Any"
                                                        ]
                                                    ]
                                                ];
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.associated;
                                                          Ty.path
                                                            "halo2_proofs::poly::LagrangeCoeff"
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ]);
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "rayon::iter::IndexedParallelIterator",
                                Ty.apply
                                  (Ty.path "rayon::iter::zip::Zip")
                                  [
                                    Ty.apply
                                      (Ty.path "rayon::slice::chunks::Chunks")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Column")
                                          [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                      ];
                                    Ty.apply
                                      (Ty.path "rayon::slice::chunks::Chunks")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                          [
                                            Ty.associated;
                                            Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                          ]
                                      ]
                                  ],
                                [],
                                "enumerate",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "rayon::iter::IndexedParallelIterator",
                                    Ty.apply
                                      (Ty.path "rayon::slice::chunks::Chunks")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::plonk::circuit::Column")
                                          [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                      ],
                                    [],
                                    "zip",
                                    [
                                      Ty.apply
                                        (Ty.path "rayon::slice::chunks::Chunks")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [
                                              Ty.associated;
                                              Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                            ]
                                        ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "rayon::slice::ParallelSlice",
                                        Ty.apply
                                          (Ty.path "slice")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                                              [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                                            [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                        ],
                                        "par_chunks",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                  [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            "deref",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "halo2_proofs::plonk::permutation::Argument",
                                              "columns"
                                            |)
                                          ]
                                        |);
                                        M.read (| chunk_len |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "rayon::slice::ParallelSlice",
                                        Ty.apply
                                          (Ty.path "slice")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [
                                                Ty.associated;
                                                Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                              ]
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [
                                              Ty.associated;
                                              Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                            ]
                                        ],
                                        "par_chunks",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            "deref",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| pkey |),
                                              "halo2_proofs::plonk::permutation::ProvingKey",
                                              "permutations"
                                            |)
                                          ]
                                        |);
                                        M.read (| chunk_len |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let i := M.copy (| γ0_0 |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_1, 0 |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_1, 1 |) in
                                            let columns := M.copy (| γ1_0 |) in
                                            let permutations := M.copy (| γ1_1 |) in
                                            M.read (|
                                              let delta_omega :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "pairing_bn256::arithmetic::fields::BaseExt",
                                                      Ty.associated,
                                                      [],
                                                      "pow",
                                                      []
                                                    |),
                                                    [
                                                      M.get_constant (|
                                                        "pairing_bn256::arithmetic::fields::FieldExt::DELTA"
                                                      |);
                                                      M.alloc (|
                                                        Value.Array
                                                          [
                                                            BinOp.Panic.mul (|
                                                              Integer.U64,
                                                              M.rust_cast (M.read (| i |)),
                                                              M.rust_cast (M.read (| chunk_len |))
                                                            |);
                                                            Value.Integer 0;
                                                            Value.Integer 0;
                                                            Value.Integer 0
                                                          ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let modified_values :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "alloc::vec::from_elem",
                                                      [ Ty.associated ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "ff::Field",
                                                          Ty.associated,
                                                          [],
                                                          "one",
                                                          []
                                                        |),
                                                        []
                                                      |);
                                                      M.rust_cast
                                                        (M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| params |),
                                                            "halo2_proofs::poly::commitment::Params",
                                                            "n"
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.use
                                                  (M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::IntoIterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::zip::Zip")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::Any"
                                                                    ]
                                                                ];
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::poly::Polynomial")
                                                                    [
                                                                      Ty.associated;
                                                                      Ty.path
                                                                        "halo2_proofs::poly::LagrangeCoeff"
                                                                    ]
                                                                ]
                                                            ],
                                                          [],
                                                          "into_iter",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::Any"
                                                                    ]
                                                                ],
                                                              [],
                                                              "zip",
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::poly::Polynomial")
                                                                      [
                                                                        Ty.associated;
                                                                        Ty.path
                                                                          "halo2_proofs::poly::LagrangeCoeff"
                                                                      ]
                                                                  ]
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::Any"
                                                                        ]
                                                                    ],
                                                                  "iter",
                                                                  []
                                                                |),
                                                                [ M.read (| columns |) ]
                                                              |);
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::poly::Polynomial")
                                                                        [
                                                                          Ty.associated;
                                                                          Ty.path
                                                                            "halo2_proofs::poly::LagrangeCoeff"
                                                                        ]
                                                                    ],
                                                                  "iter",
                                                                  []
                                                                |),
                                                                [ M.read (| permutations |) ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let iter := M.copy (| γ |) in
                                                          M.loop (|
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::zip::Zip")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                                  [
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Any"
                                                                                  ]
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::poly::Polynomial")
                                                                                  [
                                                                                    Ty.associated;
                                                                                    Ty.path
                                                                                      "halo2_proofs::poly::LagrangeCoeff"
                                                                                  ]
                                                                              ]
                                                                          ],
                                                                        [],
                                                                        "next",
                                                                        []
                                                                      |),
                                                                      [ iter ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (M.alloc (|
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.break (||)
                                                                            |)
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::option::Option::Some",
                                                                            0
                                                                          |) in
                                                                        let γ1_0 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ0_0,
                                                                            0
                                                                          |) in
                                                                        let γ1_1 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ0_0,
                                                                            1
                                                                          |) in
                                                                        let γ1_0 :=
                                                                          M.read (| γ1_0 |) in
                                                                        let column :=
                                                                          M.copy (| γ1_0 |) in
                                                                        let
                                                                              permuted_column_values :=
                                                                          M.copy (| γ1_1 |) in
                                                                        let values :=
                                                                          M.copy (|
                                                                            M.match_operator (|
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                      [
                                                                                        Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Any"
                                                                                      ],
                                                                                    "column_type",
                                                                                    []
                                                                                  |),
                                                                                  [ column ]
                                                                                |)
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ :=
                                                                                      M.read (|
                                                                                        γ
                                                                                      |) in
                                                                                    advice));
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ :=
                                                                                      M.read (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.alloc (|
                                                                                      M.read (|
                                                                                        fixed
                                                                                      |)
                                                                                    |)));
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ :=
                                                                                      M.read (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.alloc (|
                                                                                      M.read (|
                                                                                        instance
                                                                                      |)
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        M.use
                                                                          (M.match_operator (|
                                                                            M.alloc (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::iter::traits::collect::IntoIterator",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::ops::range::Range")
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    ],
                                                                                  [],
                                                                                  "into_iter",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  Value.StructRecord
                                                                                    "core::ops::range::Range"
                                                                                    [
                                                                                      ("start",
                                                                                        Value.Integer
                                                                                          0);
                                                                                      ("end_",
                                                                                        M.rust_cast
                                                                                          (M.read (|
                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                              M.read (|
                                                                                                params
                                                                                              |),
                                                                                              "halo2_proofs::poly::commitment::Params",
                                                                                              "n"
                                                                                            |)
                                                                                          |)))
                                                                                    ]
                                                                                ]
                                                                              |)
                                                                            |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let iter :=
                                                                                    M.copy (|
                                                                                      γ
                                                                                    |) in
                                                                                  M.loop (|
                                                                                    ltac:(M.monadic
                                                                                      (let _ :=
                                                                                        M.match_operator (|
                                                                                          M.alloc (|
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "core::iter::traits::iterator::Iterator",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::ops::range::Range")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ],
                                                                                                [],
                                                                                                "next",
                                                                                                []
                                                                                              |),
                                                                                              [ iter
                                                                                              ]
                                                                                            |)
                                                                                          |),
                                                                                          [
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (M.alloc (|
                                                                                                  M.never_to_any (|
                                                                                                    M.read (|
                                                                                                      M.break (||)
                                                                                                    |)
                                                                                                  |)
                                                                                                |)));
                                                                                            fun γ =>
                                                                                              ltac:(M.monadic
                                                                                                (let
                                                                                                      γ0_0 :=
                                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                                    γ,
                                                                                                    "core::option::Option::Some",
                                                                                                    0
                                                                                                  |) in
                                                                                                let
                                                                                                      i :=
                                                                                                  M.copy (|
                                                                                                    γ0_0
                                                                                                  |) in
                                                                                                let
                                                                                                      _ :=
                                                                                                  M.alloc (|
                                                                                                    M.call_closure (|
                                                                                                      M.get_trait_method (|
                                                                                                        "core::ops::arith::MulAssign",
                                                                                                        Ty.associated,
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            [
                                                                                                              Ty.associated
                                                                                                            ]
                                                                                                        ],
                                                                                                        "mul_assign",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.call_closure (|
                                                                                                          M.get_trait_method (|
                                                                                                            "core::ops::index::IndexMut",
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "alloc::vec::Vec")
                                                                                                              [
                                                                                                                Ty.associated;
                                                                                                                Ty.path
                                                                                                                  "alloc::alloc::Global"
                                                                                                              ],
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "usize"
                                                                                                            ],
                                                                                                            "index_mut",
                                                                                                            []
                                                                                                          |),
                                                                                                          [
                                                                                                            modified_values;
                                                                                                            M.read (|
                                                                                                              i
                                                                                                            |)
                                                                                                          ]
                                                                                                        |);
                                                                                                        M.alloc (|
                                                                                                          M.call_closure (|
                                                                                                            M.get_trait_method (|
                                                                                                              "core::ops::arith::Add",
                                                                                                              Ty.associated,
                                                                                                              [
                                                                                                                Ty.associated
                                                                                                              ],
                                                                                                              "add",
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.call_closure (|
                                                                                                                M.get_trait_method (|
                                                                                                                  "core::ops::arith::Add",
                                                                                                                  Ty.associated,
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "&")
                                                                                                                      [
                                                                                                                        Ty.associated
                                                                                                                      ]
                                                                                                                  ],
                                                                                                                  "add",
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::ops::arith::Mul",
                                                                                                                      Ty.associated,
                                                                                                                      [
                                                                                                                        Ty.associated
                                                                                                                      ],
                                                                                                                      "mul",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.read (|
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::ops::deref::Deref",
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "halo2_proofs::transcript::ChallengeScalar")
                                                                                                                              [
                                                                                                                                C;
                                                                                                                                Ty.path
                                                                                                                                  "halo2_proofs::plonk::Beta"
                                                                                                                              ],
                                                                                                                            [],
                                                                                                                            "deref",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            beta
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |);
                                                                                                                      M.read (|
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::ops::index::Index",
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "halo2_proofs::poly::Polynomial")
                                                                                                                              [
                                                                                                                                Ty.associated;
                                                                                                                                Ty.path
                                                                                                                                  "halo2_proofs::poly::LagrangeCoeff"
                                                                                                                              ],
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "usize"
                                                                                                                            ],
                                                                                                                            "index",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.read (|
                                                                                                                              permuted_column_values
                                                                                                                            |);
                                                                                                                            M.read (|
                                                                                                                              i
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |);
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::ops::deref::Deref",
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "halo2_proofs::transcript::ChallengeScalar")
                                                                                                                        [
                                                                                                                          C;
                                                                                                                          Ty.path
                                                                                                                            "halo2_proofs::plonk::Gamma"
                                                                                                                        ],
                                                                                                                      [],
                                                                                                                      "deref",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      gamma
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |);
                                                                                                              M.read (|
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::ops::index::Index",
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "halo2_proofs::poly::Polynomial")
                                                                                                                      [
                                                                                                                        Ty.associated;
                                                                                                                        Ty.path
                                                                                                                          "halo2_proofs::poly::LagrangeCoeff"
                                                                                                                      ],
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "usize"
                                                                                                                    ],
                                                                                                                    "index",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.SubPointer.get_array_field (|
                                                                                                                      M.read (|
                                                                                                                        values
                                                                                                                      |),
                                                                                                                      M.alloc (|
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_associated_function (|
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                                                                              [
                                                                                                                                Ty.path
                                                                                                                                  "halo2_proofs::plonk::circuit::Any"
                                                                                                                              ],
                                                                                                                            "index",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            column
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    |);
                                                                                                                    M.read (|
                                                                                                                      i
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |)
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  |) in
                                                                                                M.alloc (|
                                                                                                  Value.Tuple
                                                                                                    []
                                                                                                |)))
                                                                                          ]
                                                                                        |) in
                                                                                      M.alloc (|
                                                                                        Value.Tuple
                                                                                          []
                                                                                      |)))
                                                                                  |)))
                                                                            ]
                                                                          |))))
                                                                  ]
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                          |)))
                                                    ]
                                                  |)) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "ff::batch::BatchInvert",
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::IterMut")
                                                        [ Ty.associated ],
                                                      [ Ty.associated ],
                                                      "batch_invert",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            [ Ty.associated ],
                                                          "iter_mut",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::deref::DerefMut",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              "deref_mut",
                                                              []
                                                            |),
                                                            [ modified_values ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.use
                                                  (M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::IntoIterator",
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                [
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::circuit::Any"
                                                                ]
                                                            ],
                                                          [],
                                                          "into_iter",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::Any"
                                                                    ]
                                                                ],
                                                              "iter",
                                                              []
                                                            |),
                                                            [ M.read (| columns |) ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let iter := M.copy (| γ |) in
                                                          M.loop (|
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                              [
                                                                                Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Any"
                                                                              ]
                                                                          ],
                                                                        [],
                                                                        "next",
                                                                        []
                                                                      |),
                                                                      [ iter ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (M.alloc (|
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.break (||)
                                                                            |)
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::option::Option::Some",
                                                                            0
                                                                          |) in
                                                                        let γ0_0 :=
                                                                          M.read (| γ0_0 |) in
                                                                        let column :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let omega :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::poly::domain::EvaluationDomain")
                                                                                  [ Ty.associated ],
                                                                                "get_omega",
                                                                                []
                                                                              |),
                                                                              [ M.read (| domain |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        let values :=
                                                                          M.copy (|
                                                                            M.match_operator (|
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                      [
                                                                                        Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Any"
                                                                                      ],
                                                                                    "column_type",
                                                                                    []
                                                                                  |),
                                                                                  [ column ]
                                                                                |)
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ :=
                                                                                      M.read (|
                                                                                        γ
                                                                                      |) in
                                                                                    advice));
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ :=
                                                                                      M.read (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.alloc (|
                                                                                      M.read (|
                                                                                        fixed
                                                                                      |)
                                                                                    |)));
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ :=
                                                                                      M.read (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.alloc (|
                                                                                      M.read (|
                                                                                        instance
                                                                                      |)
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        let _ :=
                                                                          M.use
                                                                            (M.match_operator (|
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::iter::traits::collect::IntoIterator",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::ops::range::Range")
                                                                                      [
                                                                                        Ty.path
                                                                                          "usize"
                                                                                      ],
                                                                                    [],
                                                                                    "into_iter",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    Value.StructRecord
                                                                                      "core::ops::range::Range"
                                                                                      [
                                                                                        ("start",
                                                                                          Value.Integer
                                                                                            0);
                                                                                        ("end_",
                                                                                          M.rust_cast
                                                                                            (M.read (|
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.read (|
                                                                                                  params
                                                                                                |),
                                                                                                "halo2_proofs::poly::commitment::Params",
                                                                                                "n"
                                                                                              |)
                                                                                            |)))
                                                                                      ]
                                                                                  ]
                                                                                |)
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let iter :=
                                                                                      M.copy (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.loop (|
                                                                                      ltac:(M.monadic
                                                                                        (let _ :=
                                                                                          M.match_operator (|
                                                                                            M.alloc (|
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::ops::range::Range")
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "usize"
                                                                                                    ],
                                                                                                  [],
                                                                                                  "next",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  iter
                                                                                                ]
                                                                                              |)
                                                                                            |),
                                                                                            [
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (M.alloc (|
                                                                                                    M.never_to_any (|
                                                                                                      M.read (|
                                                                                                        M.break (||)
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)));
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (let
                                                                                                        γ0_0 :=
                                                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                                                      γ,
                                                                                                      "core::option::Option::Some",
                                                                                                      0
                                                                                                    |) in
                                                                                                  let
                                                                                                        i :=
                                                                                                    M.copy (|
                                                                                                      γ0_0
                                                                                                    |) in
                                                                                                  let
                                                                                                        _ :=
                                                                                                    M.alloc (|
                                                                                                      M.call_closure (|
                                                                                                        M.get_trait_method (|
                                                                                                          "core::ops::arith::MulAssign",
                                                                                                          Ty.associated,
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              [
                                                                                                                Ty.associated
                                                                                                              ]
                                                                                                          ],
                                                                                                          "mul_assign",
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.call_closure (|
                                                                                                            M.get_trait_method (|
                                                                                                              "core::ops::index::IndexMut",
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "alloc::vec::Vec")
                                                                                                                [
                                                                                                                  Ty.associated;
                                                                                                                  Ty.path
                                                                                                                    "alloc::alloc::Global"
                                                                                                                ],
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "usize"
                                                                                                              ],
                                                                                                              "index_mut",
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              modified_values;
                                                                                                              M.read (|
                                                                                                                i
                                                                                                              |)
                                                                                                            ]
                                                                                                          |);
                                                                                                          M.alloc (|
                                                                                                            M.call_closure (|
                                                                                                              M.get_trait_method (|
                                                                                                                "core::ops::arith::Add",
                                                                                                                Ty.associated,
                                                                                                                [
                                                                                                                  Ty.associated
                                                                                                                ],
                                                                                                                "add",
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                M.call_closure (|
                                                                                                                  M.get_trait_method (|
                                                                                                                    "core::ops::arith::Add",
                                                                                                                    Ty.associated,
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "&")
                                                                                                                        [
                                                                                                                          Ty.associated
                                                                                                                        ]
                                                                                                                    ],
                                                                                                                    "add",
                                                                                                                    []
                                                                                                                  |),
                                                                                                                  [
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::ops::arith::Mul",
                                                                                                                        Ty.associated,
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "&")
                                                                                                                            [
                                                                                                                              Ty.associated
                                                                                                                            ]
                                                                                                                        ],
                                                                                                                        "mul",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.read (|
                                                                                                                          delta_omega
                                                                                                                        |);
                                                                                                                        M.call_closure (|
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::ops::deref::Deref",
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "halo2_proofs::transcript::ChallengeScalar")
                                                                                                                              [
                                                                                                                                C;
                                                                                                                                Ty.path
                                                                                                                                  "halo2_proofs::plonk::Beta"
                                                                                                                              ],
                                                                                                                            [],
                                                                                                                            "deref",
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            beta
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |);
                                                                                                                    M.call_closure (|
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::ops::deref::Deref",
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "halo2_proofs::transcript::ChallengeScalar")
                                                                                                                          [
                                                                                                                            C;
                                                                                                                            Ty.path
                                                                                                                              "halo2_proofs::plonk::Gamma"
                                                                                                                          ],
                                                                                                                        [],
                                                                                                                        "deref",
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        gamma
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  ]
                                                                                                                |);
                                                                                                                M.read (|
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::ops::index::Index",
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "halo2_proofs::poly::Polynomial")
                                                                                                                        [
                                                                                                                          Ty.associated;
                                                                                                                          Ty.path
                                                                                                                            "halo2_proofs::poly::LagrangeCoeff"
                                                                                                                        ],
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "usize"
                                                                                                                      ],
                                                                                                                      "index",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.SubPointer.get_array_field (|
                                                                                                                        M.read (|
                                                                                                                          values
                                                                                                                        |),
                                                                                                                        M.alloc (|
                                                                                                                          M.call_closure (|
                                                                                                                            M.get_associated_function (|
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                                                                                [
                                                                                                                                  Ty.path
                                                                                                                                    "halo2_proofs::plonk::circuit::Any"
                                                                                                                                ],
                                                                                                                              "index",
                                                                                                                              []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              column
                                                                                                                            ]
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      |);
                                                                                                                      M.read (|
                                                                                                                        i
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |) in
                                                                                                  let
                                                                                                        _ :=
                                                                                                    M.alloc (|
                                                                                                      M.call_closure (|
                                                                                                        M.get_trait_method (|
                                                                                                          "core::ops::arith::MulAssign",
                                                                                                          Ty.associated,
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              [
                                                                                                                Ty.associated
                                                                                                              ]
                                                                                                          ],
                                                                                                          "mul_assign",
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          delta_omega;
                                                                                                          omega
                                                                                                        ]
                                                                                                      |)
                                                                                                    |) in
                                                                                                  M.alloc (|
                                                                                                    Value.Tuple
                                                                                                      []
                                                                                                  |)))
                                                                                            ]
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          Value.Tuple
                                                                                            []
                                                                                        |)))
                                                                                    |)))
                                                                              ]
                                                                            |)) in
                                                                        let _ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::MulAssign",
                                                                                Ty.associated,
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [ Ty.associated
                                                                                    ]
                                                                                ],
                                                                                "mul_assign",
                                                                                []
                                                                              |),
                                                                              [
                                                                                delta_omega;
                                                                                M.get_constant (|
                                                                                  "pairing_bn256::arithmetic::fields::FieldExt::DELTA"
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                          |)))
                                                    ]
                                                  |)) in
                                              let z :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "alloc::vec::from_elem",
                                                      [ Ty.associated ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "ff::Field",
                                                          Ty.associated,
                                                          [],
                                                          "zero",
                                                          []
                                                        |),
                                                        []
                                                      |);
                                                      M.rust_cast
                                                        (M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| params |),
                                                            "halo2_proofs::poly::commitment::Params",
                                                            "n"
                                                          |)
                                                        |))
                                                    ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            [ Ty.associated ]
                                                        ],
                                                      [],
                                                      "for_each",
                                                      [
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      [ Ty.associated ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.tuple [])
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            [ Ty.associated ],
                                                          [],
                                                          "enumerate",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                [ Ty.associated ],
                                                              "iter_mut",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::DerefMut",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.associated;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "deref_mut",
                                                                  []
                                                                |),
                                                                [ z ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.closure
                                                        (fun γ =>
                                                          ltac:(M.monadic
                                                            match γ with
                                                            | [ α0 ] =>
                                                              M.match_operator (|
                                                                M.alloc (| α0 |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ,
                                                                          0
                                                                        |) in
                                                                      let γ0_1 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ,
                                                                          1
                                                                        |) in
                                                                      let i := M.copy (| γ0_0 |) in
                                                                      let z := M.copy (| γ0_1 |) in
                                                                      M.read (|
                                                                        M.match_operator (|
                                                                          M.alloc (|
                                                                            Value.Tuple []
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ :=
                                                                                  M.use
                                                                                    (M.alloc (|
                                                                                      BinOp.Pure.gt
                                                                                        (M.read (|
                                                                                          i
                                                                                        |))
                                                                                        (Value.Integer
                                                                                          0)
                                                                                    |)) in
                                                                                let _ :=
                                                                                  M.is_constant_or_break_match (|
                                                                                    M.read (| γ |),
                                                                                    Value.Bool true
                                                                                  |) in
                                                                                let _ :=
                                                                                  M.write (|
                                                                                    M.read (| z |),
                                                                                    M.read (|
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::index::Index",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            [
                                                                                              Ty.associated;
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          [
                                                                                            Ty.path
                                                                                              "usize"
                                                                                          ],
                                                                                          "index",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          modified_values;
                                                                                          BinOp.Panic.sub (|
                                                                                            Integer.Usize,
                                                                                            M.read (|
                                                                                              i
                                                                                            |),
                                                                                            Value.Integer
                                                                                              1
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |)
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)))
                                                                          ]
                                                                        |)
                                                                      |)))
                                                                ]
                                                              |)
                                                            | _ => M.impossible (||)
                                                            end))
                                                    ]
                                                  |)
                                                |) in
                                              z
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      ]
                    |)
                  |) in
                let last_z :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (| "ff::Field", Ty.associated, [], "one", [] |),
                      []
                    |)
                  |) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [ M.read (| raw_zs |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let z := M.copy (| γ0_0 |) in
                                          let _ :=
                                            M.write (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::index::IndexMut",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.associated; Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [ Ty.path "usize" ],
                                                  "index_mut",
                                                  []
                                                |),
                                                [ z; Value.Integer 0 ]
                                              |),
                                              M.read (| last_z |)
                                            |) in
                                          let _ :=
                                            M.use
                                              (M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::collect::IntoIterator",
                                                      Ty.apply
                                                        (Ty.path "core::ops::range::Range")
                                                        [ Ty.path "usize" ],
                                                      [],
                                                      "into_iter",
                                                      []
                                                    |),
                                                    [
                                                      Value.StructRecord
                                                        "core::ops::range::Range"
                                                        [
                                                          ("start", Value.Integer 0);
                                                          ("end_",
                                                            BinOp.Panic.sub (|
                                                              Integer.Usize,
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.associated;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  "len",
                                                                  []
                                                                |),
                                                                [ z ]
                                                              |),
                                                              Value.Integer 1
                                                            |))
                                                        ]
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let iter := M.copy (| γ |) in
                                                      M.loop (|
                                                        ltac:(M.monadic
                                                          (let _ :=
                                                            M.match_operator (|
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::ops::range::Range")
                                                                      [ Ty.path "usize" ],
                                                                    [],
                                                                    "next",
                                                                    []
                                                                  |),
                                                                  [ iter ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (| M.break (||) |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::option::Option::Some",
                                                                        0
                                                                      |) in
                                                                    let i := M.copy (| γ0_0 |) in
                                                                    let _ :=
                                                                      M.write (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::index::IndexMut",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              [
                                                                                Ty.associated;
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [ Ty.path "usize" ],
                                                                            "index_mut",
                                                                            []
                                                                          |),
                                                                          [
                                                                            z;
                                                                            BinOp.Panic.add (|
                                                                              Integer.Usize,
                                                                              M.read (| i |),
                                                                              Value.Integer 1
                                                                            |)
                                                                          ]
                                                                        |),
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Mul",
                                                                            Ty.associated,
                                                                            [ Ty.associated ],
                                                                            "mul",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::index::Index",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    [
                                                                                      Ty.associated;
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [ Ty.path "usize"
                                                                                  ],
                                                                                  "index",
                                                                                  []
                                                                                |),
                                                                                [ z; M.read (| i |)
                                                                                ]
                                                                              |)
                                                                            |);
                                                                            M.read (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::index::Index",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "alloc::vec::Vec")
                                                                                    [
                                                                                      Ty.associated;
                                                                                      Ty.path
                                                                                        "alloc::alloc::Global"
                                                                                    ],
                                                                                  [ Ty.path "usize"
                                                                                  ],
                                                                                  "index",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  z;
                                                                                  BinOp.Panic.add (|
                                                                                    Integer.Usize,
                                                                                    M.read (| i |),
                                                                                    Value.Integer 1
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)))
                                                      |)))
                                                ]
                                              |)) in
                                          let z :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::poly::domain::EvaluationDomain")
                                                    [ Ty.associated ],
                                                  "lagrange_from_vec",
                                                  []
                                                |),
                                                [ M.read (| domain |); M.read (| z |) ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.use
                                              (M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::collect::IntoIterator",
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            [ Ty.associated ]
                                                        ],
                                                      [],
                                                      "into_iter",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::index::IndexMut",
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::Polynomial")
                                                            [
                                                              Ty.associated;
                                                              Ty.path
                                                                "halo2_proofs::poly::LagrangeCoeff"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::ops::range::RangeFrom")
                                                              [ Ty.path "usize" ]
                                                          ],
                                                          "index_mut",
                                                          []
                                                        |),
                                                        [
                                                          z;
                                                          Value.StructRecord
                                                            "core::ops::range::RangeFrom"
                                                            [
                                                              ("start",
                                                                BinOp.Panic.sub (|
                                                                  Integer.Usize,
                                                                  M.rust_cast
                                                                    (M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.read (| params |),
                                                                        "halo2_proofs::poly::commitment::Params",
                                                                        "n"
                                                                      |)
                                                                    |)),
                                                                  M.read (| blinding_factors |)
                                                                |))
                                                            ]
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let iter := M.copy (| γ |) in
                                                      M.loop (|
                                                        ltac:(M.monadic
                                                          (let _ :=
                                                            M.match_operator (|
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::IterMut")
                                                                      [ Ty.associated ],
                                                                    [],
                                                                    "next",
                                                                    []
                                                                  |),
                                                                  [ iter ]
                                                                |)
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.alloc (|
                                                                      M.never_to_any (|
                                                                        M.read (| M.break (||) |)
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_struct_tuple_field (|
                                                                        γ,
                                                                        "core::option::Option::Some",
                                                                        0
                                                                      |) in
                                                                    let z := M.copy (| γ0_0 |) in
                                                                    let _ :=
                                                                      M.write (|
                                                                        M.read (| z |),
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "ff::Field",
                                                                            Ty.associated,
                                                                            [],
                                                                            "random",
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&mut")
                                                                                [ R ]
                                                                            ]
                                                                          |),
                                                                          [ rng ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)))
                                                              ]
                                                            |) in
                                                          M.alloc (| Value.Tuple [] |)))
                                                      |)))
                                                ]
                                              |)) in
                                          let _ :=
                                            M.write (|
                                              last_z,
                                              M.read (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::index::Index",
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "halo2_proofs::poly::LagrangeCoeff"
                                                      ],
                                                    [ Ty.path "usize" ],
                                                    "index",
                                                    []
                                                  |),
                                                  [
                                                    z;
                                                    BinOp.Panic.sub (|
                                                      Integer.Usize,
                                                      M.rust_cast
                                                        (M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| params |),
                                                            "halo2_proofs::poly::commitment::Params",
                                                            "n"
                                                          |)
                                                        |)),
                                                      BinOp.Panic.add (|
                                                        Integer.Usize,
                                                        M.read (| blinding_factors |),
                                                        Value.Integer 1
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.associated;
                                                          Ty.path
                                                            "halo2_proofs::poly::LagrangeCoeff"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "push",
                                                  []
                                                |),
                                                [ sets; M.read (| z |) ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| sets |) ] |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_commit : M.IsAssociatedFunction Self "commit" commit.
      End Impl_halo2_proofs_plonk_permutation_Argument.
      
      Module Impl_halo2_proofs_plonk_permutation_prover_Committed_C.
        Definition Self (C : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "halo2_proofs::plonk::permutation::prover::Committed") [ C ].
        
        (*
            pub(in crate::plonk) fn construct(self) -> Constructed<C> {
                Constructed {
                    sets: self
                        .sets
                        .into_iter()
                        .map(|set| ConstructedSet {
                            permutation_product_poly: set.permutation_product_poly,
                        })
                        .collect(),
                }
            }
        *)
        Definition construct (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self C in
          match τ, α with
          | [], [ self ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              Value.StructRecord
                "halo2_proofs::plonk::permutation::prover::Constructed"
                [
                  ("sets",
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                  [ C ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                      [ C ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                [ C ])
                          ],
                        [],
                        "collect",
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                [ C ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                  [ C ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            "map",
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                [ C ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                        [ C ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path
                                    "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                  [ C ])
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::permutation::prover::CommittedSet")
                                      [ C ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    self,
                                    "halo2_proofs::plonk::permutation::prover::Committed",
                                    "sets"
                                  |)
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let set := M.copy (| γ |) in
                                            Value.StructRecord
                                              "halo2_proofs::plonk::permutation::prover::ConstructedSet"
                                              [
                                                ("permutation_product_poly",
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      set,
                                                      "halo2_proofs::plonk::permutation::prover::CommittedSet",
                                                      "permutation_product_poly"
                                                    |)
                                                  |))
                                              ]))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      ]
                    |))
                ]))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_construct :
          forall (C : Ty.t),
          M.IsAssociatedFunction (Self C) "construct" (construct C).
      End Impl_halo2_proofs_plonk_permutation_prover_Committed_C.
      
      Module Impl_halo2_proofs_plonk_permutation_ProvingKey_C.
        Definition Self (C : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "halo2_proofs::plonk::permutation::ProvingKey") [ C ].
        
        (*
            pub(in crate::plonk) fn open(
                &self,
                x: ChallengeX<C>,
            ) -> impl Iterator<Item = ProverQuery<'_, C>> + Clone {
                self.polys.iter().map(move |poly| ProverQuery {
                    point: *x,
                    rotation: Rotation::cur(),
                    poly,
                })
            }
        *)
        Definition open (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self C in
          match τ, α with
          | [], [ self; x ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let x := M.alloc (| x |) in
              M.call_closure (|
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::slice::iter::Iter")
                    [
                      Ty.apply
                        (Ty.path "halo2_proofs::poly::Polynomial")
                        [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]
                    ],
                  [],
                  "map",
                  [
                    Ty.apply (Ty.path "halo2_proofs::poly::multiopen::ProverQuery") [ C ];
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "&")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                  [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]
                              ]
                          ]
                      ]
                      (Ty.apply (Ty.path "halo2_proofs::poly::multiopen::ProverQuery") [ C ])
                  ]
                |),
                [
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "slice")
                        [
                          Ty.apply
                            (Ty.path "halo2_proofs::poly::Polynomial")
                            [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]
                        ],
                      "iter",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::poly::Polynomial")
                                [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          "deref",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::plonk::permutation::ProvingKey",
                            "polys"
                          |)
                        ]
                      |)
                    ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let poly := M.copy (| γ |) in
                                  Value.StructRecord
                                    "halo2_proofs::poly::multiopen::ProverQuery"
                                    [
                                      ("point",
                                        M.read (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::transcript::ChallengeScalar")
                                                [ C; Ty.path "halo2_proofs::plonk::X" ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [ x ]
                                          |)
                                        |));
                                      ("rotation",
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.path "halo2_proofs::poly::Rotation",
                                            "cur",
                                            []
                                          |),
                                          []
                                        |));
                                      ("poly", M.read (| poly |))
                                    ]))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_open :
          forall (C : Ty.t),
          M.IsAssociatedFunction (Self C) "open" (open C).
        
        (*
            pub(in crate::plonk) fn evaluate<E: EncodedChallenge<C>, T: TranscriptWrite<C, E>>(
                &self,
                x: ChallengeX<C>,
                transcript: &mut T,
            ) -> Result<(), Error> {
                // Hash permutation evals
                for eval in self.polys.iter().map(|poly| eval_polynomial(poly, *x)) {
                    transcript.write_scalar(eval)?;
                }
        
                Ok(())
            }
        *)
        Definition evaluate (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self C in
          match τ, α with
          | [ E; T ], [ self; x; transcript ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let x := M.alloc (| x |) in
              let transcript := M.alloc (| transcript |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let _ :=
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                          [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::Coeff"
                                                  ]
                                              ]
                                          ]
                                      ]
                                      Ty.associated
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                          [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]
                                      ],
                                    [],
                                    "map",
                                    [
                                      Ty.associated;
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.associated;
                                                      Ty.path "halo2_proofs::poly::Coeff"
                                                    ]
                                                ]
                                            ]
                                        ]
                                        Ty.associated
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]
                                          ],
                                        "iter",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::Coeff"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            "deref",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "halo2_proofs::plonk::permutation::ProvingKey",
                                              "polys"
                                            |)
                                          ]
                                        |)
                                      ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let poly := M.copy (| γ |) in
                                                    M.call_closure (|
                                                      M.get_function (|
                                                        "halo2_proofs::arithmetic::eval_polynomial",
                                                        [ Ty.associated ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::Polynomial")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "halo2_proofs::poly::Coeff"
                                                              ],
                                                            [],
                                                            "deref",
                                                            []
                                                          |),
                                                          [ M.read (| poly |) ]
                                                        |);
                                                        M.read (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::transcript::ChallengeScalar")
                                                                [
                                                                  C;
                                                                  Ty.path "halo2_proofs::plonk::X"
                                                                ],
                                                              [],
                                                              "deref",
                                                              []
                                                            |),
                                                            [ x ]
                                                          |)
                                                        |)
                                                      ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::map::Map")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.associated;
                                                          Ty.path "halo2_proofs::poly::Coeff"
                                                        ]
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::poly::Polynomial")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path
                                                                    "halo2_proofs::poly::Coeff"
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                    Ty.associated
                                                ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let eval := M.copy (| γ0_0 |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.tuple [];
                                                            Ty.path "std::io::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "halo2_proofs::transcript::TranscriptWrite",
                                                            T,
                                                            [ C; E ],
                                                            "write_scalar",
                                                            []
                                                          |),
                                                          [
                                                            M.read (| transcript |);
                                                            M.read (| eval |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "std::io::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |)) in
                    M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_evaluate :
          forall (C : Ty.t),
          M.IsAssociatedFunction (Self C) "evaluate" (evaluate C).
      End Impl_halo2_proofs_plonk_permutation_ProvingKey_C.
      
      Module Impl_halo2_proofs_plonk_permutation_prover_Constructed_C.
        Definition Self (C : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "halo2_proofs::plonk::permutation::prover::Constructed") [ C ].
        
        (*
            pub(in crate::plonk) fn evaluate<E: EncodedChallenge<C>, T: TranscriptWrite<C, E>>(
                self,
                pk: &plonk::ProvingKey<C>,
                x: ChallengeX<C>,
                transcript: &mut T,
            ) -> Result<Evaluated<C>, Error> {
                let domain = &pk.vk.domain;
                let blinding_factors = pk.vk.cs.blinding_factors();
        
                {
                    let mut sets = self.sets.iter();
        
                    while let Some(set) = sets.next() {
                        let permutation_product_eval = eval_polynomial(&set.permutation_product_poly, *x);
        
                        let permutation_product_next_eval = eval_polynomial(
                            &set.permutation_product_poly,
                            domain.rotate_omega( *x, Rotation::next()),
                        );
        
                        // Hash permutation product evals
                        for eval in iter::empty()
                            .chain(Some(&permutation_product_eval))
                            .chain(Some(&permutation_product_next_eval))
                        {
                            transcript.write_scalar( *eval)?;
                        }
        
                        // If we have any remaining sets to process, evaluate this set at omega^u
                        // so we can constrain the last value of its running product to equal the
                        // first value of the next set's running product, chaining them together.
                        if sets.len() > 0 {
                            let permutation_product_last_eval = eval_polynomial(
                                &set.permutation_product_poly,
                                domain.rotate_omega( *x, Rotation(-((blinding_factors + 1) as i32))),
                            );
        
                            transcript.write_scalar(permutation_product_last_eval)?;
                        }
                    }
                }
        
                Ok(Evaluated { constructed: self })
            }
        *)
        Definition evaluate (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self C in
          match τ, α with
          | [ E; T ], [ self; pk; x; transcript ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let pk := M.alloc (| pk |) in
              let x := M.alloc (| x |) in
              let transcript := M.alloc (| transcript |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let domain :=
                      M.alloc (|
                        M.SubPointer.get_struct_record_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| pk |),
                            "halo2_proofs::plonk::ProvingKey",
                            "vk"
                          |),
                          "halo2_proofs::plonk::VerifyingKey",
                          "domain"
                        |)
                      |) in
                    let blinding_factors :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                              [ Ty.associated ],
                            "blinding_factors",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| pk |),
                                "halo2_proofs::plonk::ProvingKey",
                                "vk"
                              |),
                              "halo2_proofs::plonk::VerifyingKey",
                              "cs"
                            |)
                          ]
                        |)
                      |) in
                    let _ :=
                      let sets :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                [
                                  Ty.apply
                                    (Ty.path
                                      "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                    [ C ]
                                ],
                              "iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                        [ C ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    self,
                                    "halo2_proofs::plonk::permutation::prover::Constructed",
                                    "sets"
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |) in
                      M.loop (|
                        ltac:(M.monadic
                          (M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                                [ C ]
                                            ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ sets ]
                                      |)
                                    |) in
                                  let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let set := M.copy (| γ0_0 |) in
                                  let permutation_product_eval :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_function (|
                                          "halo2_proofs::arithmetic::eval_polynomial",
                                          [ Ty.associated ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff"
                                                ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| set |),
                                                "halo2_proofs::plonk::permutation::prover::ConstructedSet",
                                                "permutation_product_poly"
                                              |)
                                            ]
                                          |);
                                          M.read (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::transcript::ChallengeScalar")
                                                  [ C; Ty.path "halo2_proofs::plonk::X" ],
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [ x ]
                                            |)
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let permutation_product_next_eval :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_function (|
                                          "halo2_proofs::arithmetic::eval_polynomial",
                                          [ Ty.associated ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff"
                                                ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| set |),
                                                "halo2_proofs::plonk::permutation::prover::ConstructedSet",
                                                "permutation_product_poly"
                                              |)
                                            ]
                                          |);
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::poly::domain::EvaluationDomain")
                                                [ Ty.associated ],
                                              "rotate_omega",
                                              []
                                            |),
                                            [
                                              M.read (| domain |);
                                              M.read (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::transcript::ChallengeScalar")
                                                      [ C; Ty.path "halo2_proofs::plonk::X" ],
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [ x ]
                                                |)
                                              |);
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "halo2_proofs::poly::Rotation",
                                                  "next",
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |) in
                                  let _ :=
                                    M.use
                                      (M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::collect::IntoIterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::chain::Chain")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::chain::Chain")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::sources::empty::Empty")
                                                        [ Ty.apply (Ty.path "&") [ Ty.associated ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "core::option::IntoIter")
                                                        [ Ty.apply (Ty.path "&") [ Ty.associated ] ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "core::option::IntoIter")
                                                    [ Ty.apply (Ty.path "&") [ Ty.associated ] ]
                                                ],
                                              [],
                                              "into_iter",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::chain::Chain")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::sources::empty::Empty")
                                                        [ Ty.apply (Ty.path "&") [ Ty.associated ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "core::option::IntoIter")
                                                        [ Ty.apply (Ty.path "&") [ Ty.associated ] ]
                                                    ],
                                                  [],
                                                  "chain",
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      [ Ty.apply (Ty.path "&") [ Ty.associated ] ]
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::sources::empty::Empty")
                                                        [ Ty.apply (Ty.path "&") [ Ty.associated ]
                                                        ],
                                                      [],
                                                      "chain",
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [ Ty.apply (Ty.path "&") [ Ty.associated ]
                                                          ]
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "core::iter::sources::empty::empty",
                                                          [ Ty.apply (Ty.path "&") [ Ty.associated ]
                                                          ]
                                                        |),
                                                        []
                                                      |);
                                                      Value.StructTuple
                                                        "core::option::Option::Some"
                                                        [ permutation_product_eval ]
                                                    ]
                                                  |);
                                                  Value.StructTuple
                                                    "core::option::Option::Some"
                                                    [ permutation_product_next_eval ]
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let iter := M.copy (| γ |) in
                                              M.loop (|
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    M.match_operator (|
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::chain::Chain")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::chain::Chain")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::sources::empty::Empty")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [ Ty.associated ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::IntoIter")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [ Ty.associated ]
                                                                      ]
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path "core::option::IntoIter")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [ Ty.associated ]
                                                                  ]
                                                              ],
                                                            [],
                                                            "next",
                                                            []
                                                          |),
                                                          [ iter ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.alloc (|
                                                              M.never_to_any (|
                                                                M.read (| M.break (||) |)
                                                              |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::option::Option::Some",
                                                                0
                                                              |) in
                                                            let eval := M.copy (| γ0_0 |) in
                                                            let _ :=
                                                              M.match_operator (|
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::Try",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.tuple [];
                                                                          Ty.path
                                                                            "std::io::error::Error"
                                                                        ],
                                                                      [],
                                                                      "branch",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "halo2_proofs::transcript::TranscriptWrite",
                                                                          T,
                                                                          [ C; E ],
                                                                          "write_scalar",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.read (| transcript |);
                                                                          M.read (|
                                                                            M.read (| eval |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                          γ,
                                                                          "core::ops::control_flow::ControlFlow::Break",
                                                                          0
                                                                        |) in
                                                                      let residual :=
                                                                        M.copy (| γ0_0 |) in
                                                                      M.alloc (|
                                                                        M.never_to_any (|
                                                                          M.read (|
                                                                            M.return_ (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::try_trait::FromResidual",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::result::Result")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::permutation::prover::Evaluated")
                                                                                        [ C ];
                                                                                      Ty.path
                                                                                        "halo2_proofs::plonk::error::Error"
                                                                                    ],
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::result::Result")
                                                                                      [
                                                                                        Ty.path
                                                                                          "core::convert::Infallible";
                                                                                        Ty.path
                                                                                          "std::io::error::Error"
                                                                                      ]
                                                                                  ],
                                                                                  "from_residual",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    residual
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                          γ,
                                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                                          0
                                                                        |) in
                                                                      let val :=
                                                                        M.copy (| γ0_0 |) in
                                                                      val))
                                                                ]
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                      ]
                                                    |) in
                                                  M.alloc (| Value.Tuple [] |)))
                                              |)))
                                        ]
                                      |)) in
                                  M.match_operator (|
                                    M.alloc (| Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                BinOp.Pure.gt
                                                  (M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::exact_size::ExactSizeIterator",
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                                            [ C ]
                                                        ],
                                                      [],
                                                      "len",
                                                      []
                                                    |),
                                                    [ sets ]
                                                  |))
                                                  (Value.Integer 0)
                                              |)) in
                                          let _ :=
                                            M.is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          let permutation_product_last_eval :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_function (|
                                                  "halo2_proofs::arithmetic::eval_polynomial",
                                                  [ Ty.associated ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.associated;
                                                          Ty.path "halo2_proofs::poly::Coeff"
                                                        ],
                                                      [],
                                                      "deref",
                                                      []
                                                    |),
                                                    [
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| set |),
                                                        "halo2_proofs::plonk::permutation::prover::ConstructedSet",
                                                        "permutation_product_poly"
                                                      |)
                                                    ]
                                                  |);
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::poly::domain::EvaluationDomain")
                                                        [ Ty.associated ],
                                                      "rotate_omega",
                                                      []
                                                    |),
                                                    [
                                                      M.read (| domain |);
                                                      M.read (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::transcript::ChallengeScalar")
                                                              [ C; Ty.path "halo2_proofs::plonk::X"
                                                              ],
                                                            [],
                                                            "deref",
                                                            []
                                                          |),
                                                          [ x ]
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "halo2_proofs::poly::Rotation"
                                                        [
                                                          UnOp.Panic.neg (|
                                                            Integer.I32,
                                                            M.rust_cast
                                                              (BinOp.Panic.add (|
                                                                Integer.Usize,
                                                                M.read (| blinding_factors |),
                                                                Value.Integer 1
                                                              |))
                                                          |)
                                                        ]
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::try_trait::Try",
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [ Ty.tuple []; Ty.path "std::io::error::Error"
                                                      ],
                                                    [],
                                                    "branch",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "halo2_proofs::transcript::TranscriptWrite",
                                                        T,
                                                        [ C; E ],
                                                        "write_scalar",
                                                        []
                                                      |),
                                                      [
                                                        M.read (| transcript |);
                                                        M.read (| permutation_product_last_eval |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Break",
                                                        0
                                                      |) in
                                                    let residual := M.copy (| γ0_0 |) in
                                                    M.alloc (|
                                                      M.never_to_any (|
                                                        M.read (|
                                                          M.return_ (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::try_trait::FromResidual",
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::permutation::prover::Evaluated")
                                                                      [ C ];
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.path
                                                                        "core::convert::Infallible";
                                                                      Ty.path
                                                                        "std::io::error::Error"
                                                                    ]
                                                                ],
                                                                "from_residual",
                                                                []
                                                              |),
                                                              [ M.read (| residual |) ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        γ,
                                                        "core::ops::control_flow::ControlFlow::Continue",
                                                        0
                                                      |) in
                                                    let val := M.copy (| γ0_0 |) in
                                                    val))
                                              ]
                                            |) in
                                          M.alloc (| Value.Tuple [] |)));
                                      fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let _ :=
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)
                                      |)
                                    |)
                                  |)))
                            ]
                          |)))
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructRecord
                            "halo2_proofs::plonk::permutation::prover::Evaluated"
                            [ ("constructed", M.read (| self |)) ]
                        ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_evaluate :
          forall (C : Ty.t),
          M.IsAssociatedFunction (Self C) "evaluate" (evaluate C).
      End Impl_halo2_proofs_plonk_permutation_prover_Constructed_C.
      
      Module Impl_halo2_proofs_plonk_permutation_prover_Evaluated_C.
        Definition Self (C : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "halo2_proofs::plonk::permutation::prover::Evaluated") [ C ].
        
        (*
            pub(in crate::plonk) fn open<'a>(
                &'a self,
                pk: &'a plonk::ProvingKey<C>,
                x: ChallengeX<C>,
            ) -> impl Iterator<Item = ProverQuery<'a, C>> + Clone {
                let blinding_factors = pk.vk.cs.blinding_factors();
                let x_next = pk.vk.domain.rotate_omega( *x, Rotation::next());
                let x_last = pk
                    .vk
                    .domain
                    .rotate_omega( *x, Rotation(-((blinding_factors + 1) as i32)));
        
                iter::empty()
                    .chain(self.constructed.sets.iter().flat_map(move |set| {
                        iter::empty()
                            // Open permutation product commitments at x and \omega x
                            .chain(Some(ProverQuery {
                                point: *x,
                                rotation: Rotation::cur(),
                                poly: &set.permutation_product_poly,
                            }))
                            .chain(Some(ProverQuery {
                                point: x_next,
                                rotation: Rotation::next(),
                                poly: &set.permutation_product_poly,
                            }))
                    }))
                    // Open it at \omega^{last} x for all but the last set. This rotation is only
                    // sensical for the first row, but we only use this rotation in a constraint
                    // that is gated on l_0.
                    .chain(
                        self.constructed
                            .sets
                            .iter()
                            .rev()
                            .skip(1)
                            .flat_map(move |set| {
                                Some(ProverQuery {
                                    point: x_last,
                                    rotation: Rotation(-((blinding_factors + 1) as i32)),
                                    poly: &set.permutation_product_poly,
                                })
                            }),
                    )
            }
        *)
        Definition open (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self C in
          match τ, α with
          | [], [ self; pk; x ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let pk := M.alloc (| pk |) in
              let x := M.alloc (| x |) in
              M.read (|
                let blinding_factors :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                          [ Ty.associated ],
                        "blinding_factors",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| pk |),
                            "halo2_proofs::plonk::ProvingKey",
                            "vk"
                          |),
                          "halo2_proofs::plonk::VerifyingKey",
                          "cs"
                        |)
                      ]
                    |)
                  |) in
                let x_next :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                          [ Ty.associated ],
                        "rotate_omega",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| pk |),
                            "halo2_proofs::plonk::ProvingKey",
                            "vk"
                          |),
                          "halo2_proofs::plonk::VerifyingKey",
                          "domain"
                        |);
                        M.read (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "halo2_proofs::transcript::ChallengeScalar")
                                [ C; Ty.path "halo2_proofs::plonk::X" ],
                              [],
                              "deref",
                              []
                            |),
                            [ x ]
                          |)
                        |);
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "halo2_proofs::poly::Rotation",
                            "next",
                            []
                          |),
                          []
                        |)
                      ]
                    |)
                  |) in
                let x_last :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                          [ Ty.associated ],
                        "rotate_omega",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| pk |),
                            "halo2_proofs::plonk::ProvingKey",
                            "vk"
                          |),
                          "halo2_proofs::plonk::VerifyingKey",
                          "domain"
                        |);
                        M.read (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "halo2_proofs::transcript::ChallengeScalar")
                                [ C; Ty.path "halo2_proofs::plonk::X" ],
                              [],
                              "deref",
                              []
                            |),
                            [ x ]
                          |)
                        |);
                        Value.StructTuple
                          "halo2_proofs::poly::Rotation"
                          [
                            UnOp.Panic.neg (|
                              Integer.I32,
                              M.rust_cast
                                (BinOp.Panic.add (|
                                  Integer.Usize,
                                  M.read (| blinding_factors |),
                                  Value.Integer 1
                                |))
                            |)
                          ]
                      ]
                    |)
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::chain::Chain")
                        [
                          Ty.apply
                            (Ty.path "core::iter::sources::empty::Empty")
                            [ Ty.apply (Ty.path "halo2_proofs::poly::multiopen::ProverQuery") [ C ]
                            ];
                          Ty.apply
                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                [
                                  Ty.apply
                                    (Ty.path
                                      "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                    [ C ]
                                ];
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::sources::empty::Empty")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                            [ C ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::option::IntoIter")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                            [ C ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "core::option::IntoIter")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                        [ C ]
                                    ]
                                ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                            [ C ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::chain::Chain")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::sources::empty::Empty")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                              [ C ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::option::IntoIter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                              [ C ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::option::IntoIter")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                          [ C ]
                                      ]
                                  ])
                            ]
                        ],
                      [],
                      "chain",
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::flatten::FlatMap")
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::skip::Skip")
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                          [ C ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "core::option::Option")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                  [ C ]
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                          [ C ]
                                      ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "core::option::Option")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                    [ C ]
                                ])
                          ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::sources::empty::Empty")
                            [ Ty.apply (Ty.path "halo2_proofs::poly::multiopen::ProverQuery") [ C ]
                            ],
                          [],
                          "chain",
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::flatten::FlatMap")
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                      [ C ]
                                  ];
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::chain::Chain")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::sources::empty::Empty")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                              [ C ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::option::IntoIter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                              [ C ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::option::IntoIter")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                          [ C ]
                                      ]
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                              [ C ]
                                          ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::sources::empty::Empty")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::poly::multiopen::ProverQuery")
                                                [ C ]
                                            ];
                                          Ty.apply
                                            (Ty.path "core::option::IntoIter")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::poly::multiopen::ProverQuery")
                                                [ C ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::option::IntoIter")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                            [ C ]
                                        ]
                                    ])
                              ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_function (|
                              "core::iter::sources::empty::empty",
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                  [ C ]
                              ]
                            |),
                            []
                          |);
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                [
                                  Ty.apply
                                    (Ty.path
                                      "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                    [ C ]
                                ],
                              [],
                              "flat_map",
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::chain::Chain")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::sources::empty::Empty")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                              [ C ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::option::IntoIter")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                              [ C ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::option::IntoIter")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                          [ C ]
                                      ]
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                              [ C ]
                                          ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::sources::empty::Empty")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::poly::multiopen::ProverQuery")
                                                [ C ]
                                            ];
                                          Ty.apply
                                            (Ty.path "core::option::IntoIter")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::poly::multiopen::ProverQuery")
                                                [ C ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::option::IntoIter")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                            [ C ]
                                        ]
                                    ])
                              ]
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                        [ C ]
                                    ],
                                  "iter",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                            [ C ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "halo2_proofs::plonk::permutation::prover::Evaluated",
                                          "constructed"
                                        |),
                                        "halo2_proofs::plonk::permutation::prover::Constructed",
                                        "sets"
                                      |)
                                    ]
                                  |)
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      M.match_operator (|
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let set := M.copy (| γ |) in
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::chain::Chain")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::sources::empty::Empty")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::multiopen::ProverQuery")
                                                            [ C ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "core::option::IntoIter")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::multiopen::ProverQuery")
                                                            [ C ]
                                                        ]
                                                    ],
                                                  [],
                                                  "chain",
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::multiopen::ProverQuery")
                                                          [ C ]
                                                      ]
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::sources::empty::Empty")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::multiopen::ProverQuery")
                                                            [ C ]
                                                        ],
                                                      [],
                                                      "chain",
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::multiopen::ProverQuery")
                                                              [ C ]
                                                          ]
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "core::iter::sources::empty::empty",
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::multiopen::ProverQuery")
                                                              [ C ]
                                                          ]
                                                        |),
                                                        []
                                                      |);
                                                      Value.StructTuple
                                                        "core::option::Option::Some"
                                                        [
                                                          Value.StructRecord
                                                            "halo2_proofs::poly::multiopen::ProverQuery"
                                                            [
                                                              ("point",
                                                                M.read (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::Deref",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::transcript::ChallengeScalar")
                                                                        [
                                                                          C;
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::X"
                                                                        ],
                                                                      [],
                                                                      "deref",
                                                                      []
                                                                    |),
                                                                    [ x ]
                                                                  |)
                                                                |));
                                                              ("rotation",
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Rotation",
                                                                    "cur",
                                                                    []
                                                                  |),
                                                                  []
                                                                |));
                                                              ("poly",
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| set |),
                                                                  "halo2_proofs::plonk::permutation::prover::ConstructedSet",
                                                                  "permutation_product_poly"
                                                                |))
                                                            ]
                                                        ]
                                                    ]
                                                  |);
                                                  Value.StructTuple
                                                    "core::option::Option::Some"
                                                    [
                                                      Value.StructRecord
                                                        "halo2_proofs::poly::multiopen::ProverQuery"
                                                        [
                                                          ("point", M.read (| x_next |));
                                                          ("rotation",
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "halo2_proofs::poly::Rotation",
                                                                "next",
                                                                []
                                                              |),
                                                              []
                                                            |));
                                                          ("poly",
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| set |),
                                                              "halo2_proofs::plonk::permutation::prover::ConstructedSet",
                                                              "permutation_product_poly"
                                                            |))
                                                        ]
                                                    ]
                                                ]
                                              |)))
                                        ]
                                      |)
                                    | _ => M.impossible (||)
                                    end))
                            ]
                          |)
                        ]
                      |);
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::skip::Skip")
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::rev::Rev")
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                        [ C ]
                                    ]
                                ]
                            ],
                          [],
                          "flat_map",
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                  [ C ]
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                          [ C ]
                                      ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "core::option::Option")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                    [ C ]
                                ])
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::rev::Rev")
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                        [ C ]
                                    ]
                                ],
                              [],
                              "skip",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                        [ C ]
                                    ],
                                  [],
                                  "rev",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                            [ C ]
                                        ],
                                      "iter",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::permutation::prover::ConstructedSet")
                                                [ C ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "halo2_proofs::plonk::permutation::prover::Evaluated",
                                              "constructed"
                                            |),
                                            "halo2_proofs::plonk::permutation::prover::Constructed",
                                            "sets"
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |);
                              Value.Integer 1
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let set := M.copy (| γ |) in
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            [
                                              Value.StructRecord
                                                "halo2_proofs::poly::multiopen::ProverQuery"
                                                [
                                                  ("point", M.read (| x_last |));
                                                  ("rotation",
                                                    Value.StructTuple
                                                      "halo2_proofs::poly::Rotation"
                                                      [
                                                        UnOp.Panic.neg (|
                                                          Integer.I32,
                                                          M.rust_cast
                                                            (BinOp.Panic.add (|
                                                              Integer.Usize,
                                                              M.read (| blinding_factors |),
                                                              Value.Integer 1
                                                            |))
                                                        |)
                                                      ]);
                                                  ("poly",
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.read (| set |),
                                                      "halo2_proofs::plonk::permutation::prover::ConstructedSet",
                                                      "permutation_product_poly"
                                                    |))
                                                ]
                                            ]))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    ]
                  |)
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_open :
          forall (C : Ty.t),
          M.IsAssociatedFunction (Self C) "open" (open C).
      End Impl_halo2_proofs_plonk_permutation_prover_Evaluated_C.
    End prover.
  End permutation.
End plonk.
