(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module plonk.
  Module permutation.
    Module verifier.
      (* StructRecord
        {
          name := "Committed";
          ty_params := [ "C" ];
          fields :=
            [
              ("permutation_product_commitments",
                Ty.apply (Ty.path "alloc::vec::Vec") [ C; Ty.path "alloc::alloc::Global" ])
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_for_halo2_proofs_plonk_permutation_verifier_Committed_C.
        Definition Self (C : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "halo2_proofs::plonk::permutation::verifier::Committed") [ C ].
        
        (* Debug *)
        Definition fmt (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self C in
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field1_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "Committed" |);
                  M.read (| Value.String "permutation_product_commitments" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::plonk::permutation::verifier::Committed",
                        "permutation_product_commitments"
                      |)
                    |))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (C : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (Self C)
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method (fmt C)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_for_halo2_proofs_plonk_permutation_verifier_Committed_C.
      
      (* StructRecord
        {
          name := "EvaluatedSet";
          ty_params := [ "C" ];
          fields :=
            [
              ("permutation_product_commitment", C);
              ("permutation_product_eval", Ty.associated);
              ("permutation_product_next_eval", Ty.associated);
              ("permutation_product_last_eval",
                Ty.apply (Ty.path "core::option::Option") [ Ty.associated ])
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_plonk_permutation_verifier_EvaluatedSet_C.
        Definition Self (C : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "halo2_proofs::plonk::permutation::verifier::EvaluatedSet") [ C ].
        
        (* Debug *)
        Definition fmt (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self C in
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field4_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "EvaluatedSet" |);
                  M.read (| Value.String "permutation_product_commitment" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::permutation::verifier::EvaluatedSet",
                      "permutation_product_commitment"
                    |));
                  M.read (| Value.String "permutation_product_eval" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::permutation::verifier::EvaluatedSet",
                      "permutation_product_eval"
                    |));
                  M.read (| Value.String "permutation_product_next_eval" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::permutation::verifier::EvaluatedSet",
                      "permutation_product_next_eval"
                    |));
                  M.read (| Value.String "permutation_product_last_eval" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::plonk::permutation::verifier::EvaluatedSet",
                        "permutation_product_last_eval"
                      |)
                    |))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (C : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (Self C)
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method (fmt C)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_plonk_permutation_verifier_EvaluatedSet_C.
      
      (* StructRecord
        {
          name := "CommonEvaluated";
          ty_params := [ "C" ];
          fields :=
            [
              ("permutation_evals",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.associated; Ty.path "alloc::alloc::Global" ])
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_for_halo2_proofs_plonk_permutation_verifier_CommonEvaluated_C.
        Definition Self (C : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "halo2_proofs::plonk::permutation::verifier::CommonEvaluated") [ C ].
        
        (* Debug *)
        Definition fmt (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self C in
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field1_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "CommonEvaluated" |);
                  M.read (| Value.String "permutation_evals" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::plonk::permutation::verifier::CommonEvaluated",
                        "permutation_evals"
                      |)
                    |))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (C : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (Self C)
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method (fmt C)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_for_halo2_proofs_plonk_permutation_verifier_CommonEvaluated_C.
      
      (* StructRecord
        {
          name := "Evaluated";
          ty_params := [ "C" ];
          fields :=
            [
              ("sets",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply
                      (Ty.path "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                      [ C ];
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_for_halo2_proofs_plonk_permutation_verifier_Evaluated_C.
        Definition Self (C : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "halo2_proofs::plonk::permutation::verifier::Evaluated") [ C ].
        
        (* Debug *)
        Definition fmt (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self C in
          match τ, α with
          | [], [ self; f ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let f := M.alloc (| f |) in
              M.call_closure (|
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field1_finish",
                  []
                |),
                [
                  M.read (| f |);
                  M.read (| Value.String "Evaluated" |);
                  M.read (| Value.String "sets" |);
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::plonk::permutation::verifier::Evaluated",
                        "sets"
                      |)
                    |))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom Implements :
          forall (C : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (Self C)
            (* Trait polymorphic types *) []
            (* Instance *) [ ("fmt", InstanceField.Method (fmt C)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_for_halo2_proofs_plonk_permutation_verifier_Evaluated_C.
      
      Module Impl_halo2_proofs_plonk_permutation_Argument.
        Definition Self : Ty.t := Ty.path "halo2_proofs::plonk::permutation::Argument".
        
        (*
            pub fn read_product_commitments<
                C: CurveAffine,
                E: EncodedChallenge<C>,
                T: TranscriptRead<C, E>,
            >(
                &self,
                vk: &plonk::VerifyingKey<C>,
                transcript: &mut T,
            ) -> Result<Committed<C>, Error> {
                let chunk_len = vk.cs.degree() - 2;
        
                let permutation_product_commitments = self
                    .columns
                    .chunks(chunk_len)
                    .map(|_| transcript.read_point())
                    .collect::<Result<Vec<_>, _>>()?;
        
                Ok(Committed {
                    permutation_product_commitments,
                })
            }
        *)
        Definition read_product_commitments (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ C; E; T ], [ self; vk; transcript ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let vk := M.alloc (| vk |) in
              let transcript := M.alloc (| transcript |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let chunk_len :=
                      M.alloc (|
                        BinOp.Panic.sub (|
                          Integer.Usize,
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                                [ Ty.associated ],
                              "degree",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| vk |),
                                "halo2_proofs::plonk::VerifyingKey",
                                "cs"
                              |)
                            ]
                          |),
                          Value.Integer 2
                        |)
                      |) in
                    let permutation_product_commitments :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ C; Ty.path "alloc::alloc::Global" ];
                                    Ty.path "std::io::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::map::Map")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Chunks")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                                              [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                          ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Column")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::Any"
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ C; Ty.path "std::io::error::Error" ])
                                      ],
                                    [],
                                    "collect",
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ C; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Chunks")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                                              [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                          ],
                                        [],
                                        "map",
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ C; Ty.path "std::io::error::Error" ];
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Column")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::Any"
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ C; Ty.path "std::io::error::Error" ])
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                  [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                              ],
                                            "chunks",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Column")
                                                      [ Ty.path "halo2_proofs::plonk::circuit::Any"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| self |),
                                                  "halo2_proofs::plonk::permutation::Argument",
                                                  "columns"
                                                |)
                                              ]
                                            |);
                                            M.read (| chunk_len |)
                                          ]
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                M.match_operator (|
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.call_closure (|
                                                          M.get_trait_method (|
                                                            "halo2_proofs::transcript::TranscriptRead",
                                                            T,
                                                            [ C; E ],
                                                            "read_point",
                                                            []
                                                          |),
                                                          [ M.read (| transcript |) ]
                                                        |)))
                                                  ]
                                                |)
                                              | _ => M.impossible (||)
                                              end))
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::permutation::verifier::Committed")
                                                  [ C ];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "std::io::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructRecord
                            "halo2_proofs::plonk::permutation::verifier::Committed"
                            [
                              ("permutation_product_commitments",
                                M.read (| permutation_product_commitments |))
                            ]
                        ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_read_product_commitments :
          M.IsAssociatedFunction Self "read_product_commitments" read_product_commitments.
      End Impl_halo2_proofs_plonk_permutation_Argument.
      
      Module Impl_halo2_proofs_plonk_permutation_VerifyingKey_C.
        Definition Self (C : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "halo2_proofs::plonk::permutation::VerifyingKey") [ C ].
        
        (*
            pub fn evaluate<E: EncodedChallenge<C>, T: TranscriptRead<C, E>>(
                &self,
                transcript: &mut T,
            ) -> Result<CommonEvaluated<C>, Error> {
                let permutation_evals = self
                    .commitments
                    .iter()
                    .map(|_| transcript.read_scalar())
                    .collect::<Result<Vec<_>, _>>()?;
        
                Ok(CommonEvaluated { permutation_evals })
            }
        *)
        Definition evaluate (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self C in
          match τ, α with
          | [ E; T ], [ self; transcript ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let transcript := M.alloc (| transcript |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let permutation_evals :=
                      M.copy (|
                        M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                    Ty.path "std::io::error::Error"
                                  ],
                                [],
                                "branch",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::map::Map")
                                      [
                                        Ty.apply (Ty.path "core::slice::iter::Iter") [ C ];
                                        Ty.function
                                          [ Ty.tuple [ Ty.apply (Ty.path "&") [ C ] ] ]
                                          (Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.associated; Ty.path "std::io::error::Error" ])
                                      ],
                                    [],
                                    "collect",
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "std::io::error::Error"
                                        ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply (Ty.path "core::slice::iter::Iter") [ C ],
                                        [],
                                        "map",
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.associated; Ty.path "std::io::error::Error" ];
                                          Ty.function
                                            [ Ty.tuple [ Ty.apply (Ty.path "&") [ C ] ] ]
                                            (Ty.apply
                                              (Ty.path "core::result::Result")
                                              [ Ty.associated; Ty.path "std::io::error::Error" ])
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [ C ],
                                            "iter",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [ C; Ty.path "alloc::alloc::Global" ],
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| self |),
                                                  "halo2_proofs::plonk::permutation::VerifyingKey",
                                                  "commitments"
                                                |)
                                              ]
                                            |)
                                          ]
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                M.match_operator (|
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.call_closure (|
                                                          M.get_trait_method (|
                                                            "halo2_proofs::transcript::TranscriptRead",
                                                            T,
                                                            [ C; E ],
                                                            "read_scalar",
                                                            []
                                                          |),
                                                          [ M.read (| transcript |) ]
                                                        |)))
                                                  ]
                                                |)
                                              | _ => M.impossible (||)
                                              end))
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual := M.copy (| γ0_0 |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::permutation::verifier::CommonEvaluated")
                                                  [ C ];
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.path "std::io::error::Error"
                                                ]
                                            ],
                                            "from_residual",
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| γ0_0 |) in
                                val))
                          ]
                        |)
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructRecord
                            "halo2_proofs::plonk::permutation::verifier::CommonEvaluated"
                            [ ("permutation_evals", M.read (| permutation_evals |)) ]
                        ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_evaluate :
          forall (C : Ty.t),
          M.IsAssociatedFunction (Self C) "evaluate" (evaluate C).
      End Impl_halo2_proofs_plonk_permutation_VerifyingKey_C.
      
      Module Impl_halo2_proofs_plonk_permutation_verifier_Committed_C.
        Definition Self (C : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "halo2_proofs::plonk::permutation::verifier::Committed") [ C ].
        
        (*
            pub fn evaluate<E: EncodedChallenge<C>, T: TranscriptRead<C, E>>(
                self,
                transcript: &mut T,
            ) -> Result<Evaluated<C>, Error> {
                let mut sets = vec![];
        
                let mut iter = self.permutation_product_commitments.into_iter();
        
                while let Some(permutation_product_commitment) = iter.next() {
                    let permutation_product_eval = transcript.read_scalar()?;
                    let permutation_product_next_eval = transcript.read_scalar()?;
                    let permutation_product_last_eval = if iter.len() > 0 {
                        Some(transcript.read_scalar()?)
                    } else {
                        None
                    };
        
                    sets.push(EvaluatedSet {
                        permutation_product_commitment,
                        permutation_product_eval,
                        permutation_product_next_eval,
                        permutation_product_last_eval,
                    });
                }
        
                Ok(Evaluated { sets })
            }
        *)
        Definition evaluate (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self C in
          match τ, α with
          | [ E; T ], [ self; transcript ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let transcript := M.alloc (| transcript |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let sets :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [
                                Ty.apply
                                  (Ty.path
                                    "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                  [ C ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            []
                          |),
                          []
                        |)
                      |) in
                    let iter :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ C; Ty.path "alloc::alloc::Global" ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                self,
                                "halo2_proofs::plonk::permutation::verifier::Committed",
                                "permutation_product_commitments"
                              |)
                            |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.loop (|
                        ltac:(M.monadic
                          (M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "alloc::vec::into_iter::IntoIter")
                                            [ C; Ty.path "alloc::alloc::Global" ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |) in
                                  let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::option::Option::Some",
                                      0
                                    |) in
                                  let permutation_product_commitment := M.copy (| γ0_0 |) in
                                  let permutation_product_eval :=
                                    M.copy (|
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.associated; Ty.path "std::io::error::Error" ],
                                              [],
                                              "branch",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "halo2_proofs::transcript::TranscriptRead",
                                                  T,
                                                  [ C; E ],
                                                  "read_scalar",
                                                  []
                                                |),
                                                [ M.read (| transcript |) ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                                [ C ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path "std::io::error::Error"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |)
                                    |) in
                                  let permutation_product_next_eval :=
                                    M.copy (|
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.associated; Ty.path "std::io::error::Error" ],
                                              [],
                                              "branch",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "halo2_proofs::transcript::TranscriptRead",
                                                  T,
                                                  [ C; E ],
                                                  "read_scalar",
                                                  []
                                                |),
                                                [ M.read (| transcript |) ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                                [ C ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path "std::io::error::Error"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |)
                                    |) in
                                  let permutation_product_last_eval :=
                                    M.copy (|
                                      M.match_operator (|
                                        M.alloc (| Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    BinOp.Pure.gt
                                                      (M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::exact_size::ExactSizeIterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "alloc::vec::into_iter::IntoIter")
                                                            [ C; Ty.path "alloc::alloc::Global" ],
                                                          [],
                                                          "len",
                                                          []
                                                        |),
                                                        [ iter ]
                                                      |))
                                                      (Value.Integer 0)
                                                  |)) in
                                              let _ :=
                                                M.is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.alloc (|
                                                Value.StructTuple
                                                  "core::option::Option::Some"
                                                  [
                                                    M.read (|
                                                      M.match_operator (|
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::try_trait::Try",
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path "std::io::error::Error"
                                                                ],
                                                              [],
                                                              "branch",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "halo2_proofs::transcript::TranscriptRead",
                                                                  T,
                                                                  [ C; E ],
                                                                  "read_scalar",
                                                                  []
                                                                |),
                                                                [ M.read (| transcript |) ]
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Break",
                                                                  0
                                                                |) in
                                                              let residual := M.copy (| γ0_0 |) in
                                                              M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (|
                                                                    M.return_ (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::try_trait::FromResidual",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                                                [ C ];
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::error::Error"
                                                                            ],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              [
                                                                                Ty.path
                                                                                  "core::convert::Infallible";
                                                                                Ty.path
                                                                                  "std::io::error::Error"
                                                                              ]
                                                                          ],
                                                                          "from_residual",
                                                                          []
                                                                        |),
                                                                        [ M.read (| residual |) ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                                  0
                                                                |) in
                                                              let val := M.copy (| γ0_0 |) in
                                                              val))
                                                        ]
                                                      |)
                                                    |)
                                                  ]
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                Value.StructTuple "core::option::Option::None" []
                                              |)))
                                        ]
                                      |)
                                    |) in
                                  let _ :=
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                [ C ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          "push",
                                          []
                                        |),
                                        [
                                          sets;
                                          Value.StructRecord
                                            "halo2_proofs::plonk::permutation::verifier::EvaluatedSet"
                                            [
                                              ("permutation_product_commitment",
                                                M.read (| permutation_product_commitment |));
                                              ("permutation_product_eval",
                                                M.read (| permutation_product_eval |));
                                              ("permutation_product_next_eval",
                                                M.read (| permutation_product_next_eval |));
                                              ("permutation_product_last_eval",
                                                M.read (| permutation_product_last_eval |))
                                            ]
                                        ]
                                      |)
                                    |) in
                                  M.alloc (| Value.Tuple [] |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let _ :=
                                          M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)
                                      |)
                                    |)
                                  |)))
                            ]
                          |)))
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructRecord
                            "halo2_proofs::plonk::permutation::verifier::Evaluated"
                            [ ("sets", M.read (| sets |)) ]
                        ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_evaluate :
          forall (C : Ty.t),
          M.IsAssociatedFunction (Self C) "evaluate" (evaluate C).
      End Impl_halo2_proofs_plonk_permutation_verifier_Committed_C.
      
      Module Impl_halo2_proofs_plonk_permutation_verifier_Evaluated_C.
        Definition Self (C : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "halo2_proofs::plonk::permutation::verifier::Evaluated") [ C ].
        
        (*
            pub(in crate::plonk) fn expressions<'a>(
                &'a self,
                vk: &'a plonk::VerifyingKey<C>,
                p: &'a Argument,
                common: &'a CommonEvaluated<C>,
                advice_evals: &'a [C::Scalar],
                fixed_evals: &'a [C::Scalar],
                instance_evals: &'a [C::Scalar],
                l_0: C::Scalar,
                l_last: C::Scalar,
                l_blind: C::Scalar,
                beta: ChallengeBeta<C>,
                gamma: ChallengeGamma<C>,
                x: ChallengeX<C>,
            ) -> impl Iterator<Item = C::Scalar> + 'a {
                let chunk_len = vk.cs.degree() - 2;
                iter::empty()
                    // Enforce only for the first set.
                    // l_0(X) * (1 - z_0(X)) = 0
                    .chain(
                        self.sets.first().map(|first_set| {
                            l_0 * &(C::Scalar::one() - &first_set.permutation_product_eval)
                        }),
                    )
                    // Enforce only for the last set.
                    // l_last(X) * (z_l(X)^2 - z_l(X)) = 0
                    .chain(self.sets.last().map(|last_set| {
                        (last_set.permutation_product_eval.square() - &last_set.permutation_product_eval)
                            * &l_last
                    }))
                    // Except for the first set, enforce.
                    // l_0(X) * (z_i(X) - z_{i-1}(\omega^(last) X)) = 0
                    .chain(
                        self.sets
                            .iter()
                            .skip(1)
                            .zip(self.sets.iter())
                            .map(|(set, last_set)| {
                                (
                                    set.permutation_product_eval,
                                    last_set.permutation_product_last_eval.unwrap(),
                                )
                            })
                            .map(move |(set, prev_last)| (set - &prev_last) * &l_0),
                    )
                    // And for all the sets we enforce:
                    // (1 - (l_last(X) + l_blind(X))) * (
                    //   z_i(\omega X) \prod (p(X) + \beta s_i(X) + \gamma)
                    // - z_i(X) \prod (p(X) + \delta^i \beta X + \gamma)
                    // )
                    .chain(
                        self.sets
                            .iter()
                            .zip(p.columns.chunks(chunk_len))
                            .zip(common.permutation_evals.chunks(chunk_len))
                            .enumerate()
                            .map(move |(chunk_index, ((set, columns), permutation_evals))| {
                                let mut left = set.permutation_product_next_eval;
                                for (eval, permutation_eval) in columns
                                    .iter()
                                    .map(|&column| match column.column_type() {
                                        Any::Advice => {
                                            advice_evals[vk.cs.get_any_query_index(column, Rotation::cur())]
                                        }
                                        Any::Fixed => {
                                            fixed_evals[vk.cs.get_any_query_index(column, Rotation::cur())]
                                        }
                                        Any::Instance => {
                                            instance_evals
                                                [vk.cs.get_any_query_index(column, Rotation::cur())]
                                        }
                                    })
                                    .zip(permutation_evals.iter())
                                {
                                    left *= &(eval + &( *beta * permutation_eval) + &*gamma);
                                }
        
                                let mut right = set.permutation_product_eval;
                                let mut current_delta = ( *beta * &*x)
                                    * &(C::Scalar::DELTA.pow_vartime(&[(chunk_index * chunk_len) as u64]));
                                for eval in columns.iter().map(|&column| match column.column_type() {
                                    Any::Advice => {
                                        advice_evals[vk.cs.get_any_query_index(column, Rotation::cur())]
                                    }
                                    Any::Fixed => {
                                        fixed_evals[vk.cs.get_any_query_index(column, Rotation::cur())]
                                    }
                                    Any::Instance => {
                                        instance_evals[vk.cs.get_any_query_index(column, Rotation::cur())]
                                    }
                                }) {
                                    right *= &(eval + &current_delta + &*gamma);
                                    current_delta *= &C::Scalar::DELTA;
                                }
        
                                (left - &right) * (C::Scalar::one() - &(l_last + &l_blind))
                            }),
                    )
            }
        *)
        Definition expressions (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self C in
          match τ, α with
          | [],
              [
                self;
                vk;
                p;
                common;
                advice_evals;
                fixed_evals;
                instance_evals;
                l_0;
                l_last;
                l_blind;
                beta;
                gamma;
                x
              ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let vk := M.alloc (| vk |) in
              let p := M.alloc (| p |) in
              let common := M.alloc (| common |) in
              let advice_evals := M.alloc (| advice_evals |) in
              let fixed_evals := M.alloc (| fixed_evals |) in
              let instance_evals := M.alloc (| instance_evals |) in
              let l_0 := M.alloc (| l_0 |) in
              let l_last := M.alloc (| l_last |) in
              let l_blind := M.alloc (| l_blind |) in
              let beta := M.alloc (| beta |) in
              let gamma := M.alloc (| gamma |) in
              let x := M.alloc (| x |) in
              M.read (|
                let chunk_len :=
                  M.alloc (|
                    BinOp.Panic.sub (|
                      Integer.Usize,
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                            [ Ty.associated ],
                          "degree",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| vk |),
                            "halo2_proofs::plonk::VerifyingKey",
                            "cs"
                          |)
                        ]
                      |),
                      Value.Integer 2
                    |)
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::chain::Chain")
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::sources::empty::Empty")
                                    [ Ty.associated ];
                                  Ty.apply (Ty.path "core::option::IntoIter") [ Ty.associated ]
                                ];
                              Ty.apply (Ty.path "core::option::IntoIter") [ Ty.associated ]
                            ];
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::skip::Skip")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                [ C ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                            [ C ]
                                        ]
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                    [ C ]
                                                ];
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                    [ C ]
                                                ]
                                            ]
                                        ]
                                    ]
                                    (Ty.tuple [ Ty.associated; Ty.associated ])
                                ];
                              Ty.function
                                [ Ty.tuple [ Ty.tuple [ Ty.associated; Ty.associated ] ] ]
                                Ty.associated
                            ]
                        ],
                      [],
                      "chain",
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::zip::Zip")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                              [ C ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Chunks")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                                              [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                          ]
                                      ];
                                    Ty.apply (Ty.path "core::slice::iter::Chunks") [ Ty.associated ]
                                  ]
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.tuple
                                      [
                                        Ty.path "usize";
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                      [ C ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Column")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::Any"
                                                          ]
                                                      ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path "&")
                                              [ Ty.apply (Ty.path "slice") [ Ty.associated ] ]
                                          ]
                                      ]
                                  ]
                              ]
                              Ty.associated
                          ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::sources::empty::Empty")
                                    [ Ty.associated ];
                                  Ty.apply (Ty.path "core::option::IntoIter") [ Ty.associated ]
                                ];
                              Ty.apply (Ty.path "core::option::IntoIter") [ Ty.associated ]
                            ],
                          [],
                          "chain",
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::skip::Skip")
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                  [ C ]
                                              ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                              [ C ]
                                          ]
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                      [ C ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                      [ C ]
                                                  ]
                                              ]
                                          ]
                                      ]
                                      (Ty.tuple [ Ty.associated; Ty.associated ])
                                  ];
                                Ty.function
                                  [ Ty.tuple [ Ty.tuple [ Ty.associated; Ty.associated ] ] ]
                                  Ty.associated
                              ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::sources::empty::Empty")
                                    [ Ty.associated ];
                                  Ty.apply (Ty.path "core::option::IntoIter") [ Ty.associated ]
                                ],
                              [],
                              "chain",
                              [ Ty.apply (Ty.path "core::option::Option") [ Ty.associated ] ]
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::iter::sources::empty::Empty")
                                    [ Ty.associated ],
                                  [],
                                  "chain",
                                  [ Ty.apply (Ty.path "core::option::Option") [ Ty.associated ] ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_function (|
                                      "core::iter::sources::empty::empty",
                                      [ Ty.associated ]
                                    |),
                                    []
                                  |);
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                [ C ]
                                            ]
                                        ],
                                      "map",
                                      [
                                        Ty.associated;
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                      [ C ]
                                                  ]
                                              ]
                                          ]
                                          Ty.associated
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                [ C ]
                                            ],
                                          "first",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                    [ C ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "halo2_proofs::plonk::permutation::verifier::Evaluated",
                                                "sets"
                                              |)
                                            ]
                                          |)
                                        ]
                                      |);
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              M.match_operator (|
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let first_set := M.copy (| γ |) in
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Mul",
                                                          Ty.associated,
                                                          [ Ty.apply (Ty.path "&") [ Ty.associated ]
                                                          ],
                                                          "mul",
                                                          []
                                                        |),
                                                        [
                                                          M.read (| l_0 |);
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Sub",
                                                                Ty.associated,
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [ Ty.associated ]
                                                                ],
                                                                "sub",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "ff::Field",
                                                                    Ty.associated,
                                                                    [],
                                                                    "one",
                                                                    []
                                                                  |),
                                                                  []
                                                                |);
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| first_set |),
                                                                  "halo2_proofs::plonk::permutation::verifier::EvaluatedSet",
                                                                  "permutation_product_eval"
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        ]
                                                      |)))
                                                ]
                                              |)
                                            | _ => M.impossible (||)
                                            end))
                                    ]
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                            [ C ]
                                        ]
                                    ],
                                  "map",
                                  [
                                    Ty.associated;
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                  [ C ]
                                              ]
                                          ]
                                      ]
                                      Ty.associated
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                            [ C ]
                                        ],
                                      "last",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                [ C ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "halo2_proofs::plonk::permutation::verifier::Evaluated",
                                            "sets"
                                          |)
                                        ]
                                      |)
                                    ]
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let last_set := M.copy (| γ |) in
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Mul",
                                                      Ty.associated,
                                                      [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                                                      "mul",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Sub",
                                                          Ty.associated,
                                                          [ Ty.apply (Ty.path "&") [ Ty.associated ]
                                                          ],
                                                          "sub",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "ff::Field",
                                                              Ty.associated,
                                                              [],
                                                              "square",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| last_set |),
                                                                "halo2_proofs::plonk::permutation::verifier::EvaluatedSet",
                                                                "permutation_product_eval"
                                                              |)
                                                            ]
                                                          |);
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| last_set |),
                                                            "halo2_proofs::plonk::permutation::verifier::EvaluatedSet",
                                                            "permutation_product_eval"
                                                          |)
                                                        ]
                                                      |);
                                                      l_last
                                                    ]
                                                  |)))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |)
                            ]
                          |);
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::skip::Skip")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                [ C ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                            [ C ]
                                        ]
                                    ];
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                    [ C ]
                                                ];
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                    [ C ]
                                                ]
                                            ]
                                        ]
                                    ]
                                    (Ty.tuple [ Ty.associated; Ty.associated ])
                                ],
                              [],
                              "map",
                              [
                                Ty.associated;
                                Ty.function
                                  [ Ty.tuple [ Ty.tuple [ Ty.associated; Ty.associated ] ] ]
                                  Ty.associated
                              ]
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::skip::Skip")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                [ C ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                            [ C ]
                                        ]
                                    ],
                                  [],
                                  "map",
                                  [
                                    Ty.tuple [ Ty.associated; Ty.associated ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                      [ C ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                      [ C ]
                                                  ]
                                              ]
                                          ]
                                      ]
                                      (Ty.tuple [ Ty.associated; Ty.associated ])
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::skip::Skip")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                [ C ]
                                            ]
                                        ],
                                      [],
                                      "zip",
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                              [ C ]
                                          ]
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                [ C ]
                                            ],
                                          [],
                                          "skip",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "slice")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                    [ C ]
                                                ],
                                              "iter",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::Deref",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                        [ C ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "deref",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| self |),
                                                    "halo2_proofs::plonk::permutation::verifier::Evaluated",
                                                    "sets"
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |);
                                          Value.Integer 1
                                        ]
                                      |);
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                [ C ]
                                            ],
                                          "iter",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                    [ C ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "halo2_proofs::plonk::permutation::verifier::Evaluated",
                                                "sets"
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          M.match_operator (|
                                            M.alloc (| α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                  let γ0_1 :=
                                                    M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                  let set := M.copy (| γ0_0 |) in
                                                  let last_set := M.copy (| γ0_1 |) in
                                                  Value.Tuple
                                                    [
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| set |),
                                                          "halo2_proofs::plonk::permutation::verifier::EvaluatedSet",
                                                          "permutation_product_eval"
                                                        |)
                                                      |);
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            [ Ty.associated ],
                                                          "unwrap",
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| last_set |),
                                                              "halo2_proofs::plonk::permutation::verifier::EvaluatedSet",
                                                              "permutation_product_last_eval"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]))
                                            ]
                                          |)
                                        | _ => M.impossible (||)
                                        end))
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      M.match_operator (|
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_tuple_field (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                              let set := M.copy (| γ0_0 |) in
                                              let prev_last := M.copy (| γ0_1 |) in
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::arith::Mul",
                                                  Ty.associated,
                                                  [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                                                  "mul",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Sub",
                                                      Ty.associated,
                                                      [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                                                      "sub",
                                                      []
                                                    |),
                                                    [ M.read (| set |); prev_last ]
                                                  |);
                                                  l_0
                                                ]
                                              |)))
                                        ]
                                      |)
                                    | _ => M.impossible (||)
                                    end))
                            ]
                          |)
                        ]
                      |);
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                            [ C ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Chunks")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                                            [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                        ]
                                    ];
                                  Ty.apply (Ty.path "core::slice::iter::Chunks") [ Ty.associated ]
                                ]
                            ],
                          [],
                          "map",
                          [
                            Ty.associated;
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.tuple
                                      [
                                        Ty.path "usize";
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                      [ C ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Column")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::Any"
                                                          ]
                                                      ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path "&")
                                              [ Ty.apply (Ty.path "slice") [ Ty.associated ] ]
                                          ]
                                      ]
                                  ]
                              ]
                              Ty.associated
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                            [ C ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Chunks")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                                            [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                        ]
                                    ];
                                  Ty.apply (Ty.path "core::slice::iter::Chunks") [ Ty.associated ]
                                ],
                              [],
                              "enumerate",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                            [ C ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Chunks")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::plonk::circuit::Column")
                                            [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                        ]
                                    ],
                                  [],
                                  "zip",
                                  [ Ty.apply (Ty.path "core::slice::iter::Chunks") [ Ty.associated ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                            [ C ]
                                        ],
                                      [],
                                      "zip",
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Chunks")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                                              [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                          ]
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                [ C ]
                                            ],
                                          "iter",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                    [ C ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| self |),
                                                "halo2_proofs::plonk::permutation::verifier::Evaluated",
                                                "sets"
                                              |)
                                            ]
                                          |)
                                        ]
                                      |);
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                [ Ty.path "halo2_proofs::plonk::circuit::Any" ]
                                            ],
                                          "chunks",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                    [ Ty.path "halo2_proofs::plonk::circuit::Any" ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                M.read (| p |),
                                                "halo2_proofs::plonk::permutation::Argument",
                                                "columns"
                                              |)
                                            ]
                                          |);
                                          M.read (| chunk_len |)
                                        ]
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "slice") [ Ty.associated ],
                                      "chunks",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| common |),
                                            "halo2_proofs::plonk::permutation::verifier::CommonEvaluated",
                                            "permutation_evals"
                                          |)
                                        ]
                                      |);
                                      M.read (| chunk_len |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let chunk_index := M.copy (| γ0_0 |) in
                                          let γ1_0 := M.SubPointer.get_tuple_field (| γ0_1, 0 |) in
                                          let γ1_1 := M.SubPointer.get_tuple_field (| γ0_1, 1 |) in
                                          let γ2_0 := M.SubPointer.get_tuple_field (| γ1_0, 0 |) in
                                          let γ2_1 := M.SubPointer.get_tuple_field (| γ1_0, 1 |) in
                                          let set := M.copy (| γ2_0 |) in
                                          let columns := M.copy (| γ2_1 |) in
                                          let permutation_evals := M.copy (| γ1_1 |) in
                                          M.read (|
                                            let left :=
                                              M.copy (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| set |),
                                                  "halo2_proofs::plonk::permutation::verifier::EvaluatedSet",
                                                  "permutation_product_next_eval"
                                                |)
                                              |) in
                                            let _ :=
                                              M.use
                                                (M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::collect::IntoIterator",
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::zip::Zip")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::map::Map")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::Any"
                                                                      ]
                                                                  ];
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                              [
                                                                                Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Any"
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  Ty.associated
                                                              ];
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [ Ty.associated ]
                                                          ],
                                                        [],
                                                        "into_iter",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::map::Map")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::Any"
                                                                      ]
                                                                  ];
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                              [
                                                                                Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Any"
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  Ty.associated
                                                              ],
                                                            [],
                                                            "zip",
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [ Ty.associated ]
                                                            ]
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::Any"
                                                                      ]
                                                                  ],
                                                                [],
                                                                "map",
                                                                [
                                                                  Ty.associated;
                                                                  Ty.function
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                                [
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Any"
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                    Ty.associated
                                                                ]
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Column")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::circuit::Any"
                                                                          ]
                                                                      ],
                                                                    "iter",
                                                                    []
                                                                  |),
                                                                  [ M.read (| columns |) ]
                                                                |);
                                                                M.closure
                                                                  (fun γ =>
                                                                    ltac:(M.monadic
                                                                      match γ with
                                                                      | [ α0 ] =>
                                                                        M.match_operator (|
                                                                          M.alloc (| α0 |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ :=
                                                                                  M.read (| γ |) in
                                                                                let column :=
                                                                                  M.copy (| γ |) in
                                                                                M.read (|
                                                                                  M.match_operator (|
                                                                                    M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                                            [
                                                                                              Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Any"
                                                                                            ],
                                                                                          "column_type",
                                                                                          []
                                                                                        |),
                                                                                        [ column ]
                                                                                      |)
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let γ :=
                                                                                            M.read (|
                                                                                              γ
                                                                                            |) in
                                                                                          M.SubPointer.get_array_field (|
                                                                                            M.read (|
                                                                                              advice_evals
                                                                                            |),
                                                                                            M.alloc (|
                                                                                              M.call_closure (|
                                                                                                M.get_associated_function (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                                                                    [
                                                                                                      Ty.associated
                                                                                                    ],
                                                                                                  "get_any_query_index",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.read (|
                                                                                                      vk
                                                                                                    |),
                                                                                                    "halo2_proofs::plonk::VerifyingKey",
                                                                                                    "cs"
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    column
                                                                                                  |);
                                                                                                  M.call_closure (|
                                                                                                    M.get_associated_function (|
                                                                                                      Ty.path
                                                                                                        "halo2_proofs::poly::Rotation",
                                                                                                      "cur",
                                                                                                      []
                                                                                                    |),
                                                                                                    []
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)));
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let γ :=
                                                                                            M.read (|
                                                                                              γ
                                                                                            |) in
                                                                                          M.SubPointer.get_array_field (|
                                                                                            M.read (|
                                                                                              fixed_evals
                                                                                            |),
                                                                                            M.alloc (|
                                                                                              M.call_closure (|
                                                                                                M.get_associated_function (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                                                                    [
                                                                                                      Ty.associated
                                                                                                    ],
                                                                                                  "get_any_query_index",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.read (|
                                                                                                      vk
                                                                                                    |),
                                                                                                    "halo2_proofs::plonk::VerifyingKey",
                                                                                                    "cs"
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    column
                                                                                                  |);
                                                                                                  M.call_closure (|
                                                                                                    M.get_associated_function (|
                                                                                                      Ty.path
                                                                                                        "halo2_proofs::poly::Rotation",
                                                                                                      "cur",
                                                                                                      []
                                                                                                    |),
                                                                                                    []
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)));
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let γ :=
                                                                                            M.read (|
                                                                                              γ
                                                                                            |) in
                                                                                          M.SubPointer.get_array_field (|
                                                                                            M.read (|
                                                                                              instance_evals
                                                                                            |),
                                                                                            M.alloc (|
                                                                                              M.call_closure (|
                                                                                                M.get_associated_function (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                                                                    [
                                                                                                      Ty.associated
                                                                                                    ],
                                                                                                  "get_any_query_index",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.read (|
                                                                                                      vk
                                                                                                    |),
                                                                                                    "halo2_proofs::plonk::VerifyingKey",
                                                                                                    "cs"
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    column
                                                                                                  |);
                                                                                                  M.call_closure (|
                                                                                                    M.get_associated_function (|
                                                                                                      Ty.path
                                                                                                        "halo2_proofs::poly::Rotation",
                                                                                                      "cur",
                                                                                                      []
                                                                                                    |),
                                                                                                    []
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)))
                                                                                    ]
                                                                                  |)
                                                                                |)))
                                                                          ]
                                                                        |)
                                                                      | _ => M.impossible (||)
                                                                      end))
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [ Ty.associated ],
                                                                "iter",
                                                                []
                                                              |),
                                                              [ M.read (| permutation_evals |) ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let iter := M.copy (| γ |) in
                                                        M.loop (|
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.match_operator (|
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::zip::Zip")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::iter::adapters::map::Map")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::Iter")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                                    [
                                                                                      Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Any"
                                                                                    ]
                                                                                ];
                                                                              Ty.function
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                                            [
                                                                                              Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Any"
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                                Ty.associated
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            [ Ty.associated ]
                                                                        ],
                                                                      [],
                                                                      "next",
                                                                      []
                                                                    |),
                                                                    [ iter ]
                                                                  |)
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.alloc (|
                                                                        M.never_to_any (|
                                                                          M.read (| M.break (||) |)
                                                                        |)
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                          γ,
                                                                          "core::option::Option::Some",
                                                                          0
                                                                        |) in
                                                                      let γ1_0 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ0_0,
                                                                          0
                                                                        |) in
                                                                      let γ1_1 :=
                                                                        M.SubPointer.get_tuple_field (|
                                                                          γ0_0,
                                                                          1
                                                                        |) in
                                                                      let eval :=
                                                                        M.copy (| γ1_0 |) in
                                                                      let permutation_eval :=
                                                                        M.copy (| γ1_1 |) in
                                                                      let _ :=
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::arith::MulAssign",
                                                                              Ty.associated,
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [ Ty.associated ]
                                                                              ],
                                                                              "mul_assign",
                                                                              []
                                                                            |),
                                                                            [
                                                                              left;
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Add",
                                                                                    Ty.associated,
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        [
                                                                                          Ty.associated
                                                                                        ]
                                                                                    ],
                                                                                    "add",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Add",
                                                                                        Ty.associated,
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.associated
                                                                                            ]
                                                                                        ],
                                                                                        "add",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          eval
                                                                                        |);
                                                                                        M.alloc (|
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::arith::Mul",
                                                                                              Ty.associated,
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.associated
                                                                                                  ]
                                                                                              ],
                                                                                              "mul",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                M.call_closure (|
                                                                                                  M.get_trait_method (|
                                                                                                    "core::ops::deref::Deref",
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::transcript::ChallengeScalar")
                                                                                                      [
                                                                                                        C;
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::Beta"
                                                                                                      ],
                                                                                                    [],
                                                                                                    "deref",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    beta
                                                                                                  ]
                                                                                                |)
                                                                                              |);
                                                                                              M.read (|
                                                                                                permutation_eval
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::deref::Deref",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::transcript::ChallengeScalar")
                                                                                          [
                                                                                            C;
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::Gamma"
                                                                                          ],
                                                                                        [],
                                                                                        "deref",
                                                                                        []
                                                                                      |),
                                                                                      [ gamma ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |) in
                                                                      M.alloc (| Value.Tuple [] |)))
                                                                ]
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                        |)))
                                                  ]
                                                |)) in
                                            let right :=
                                              M.copy (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.read (| set |),
                                                  "halo2_proofs::plonk::permutation::verifier::EvaluatedSet",
                                                  "permutation_product_eval"
                                                |)
                                              |) in
                                            let current_delta :=
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::arith::Mul",
                                                    Ty.associated,
                                                    [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                                                    "mul",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::arith::Mul",
                                                        Ty.associated,
                                                        [ Ty.apply (Ty.path "&") [ Ty.associated ]
                                                        ],
                                                        "mul",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::transcript::ChallengeScalar")
                                                                [
                                                                  C;
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::Beta"
                                                                ],
                                                              [],
                                                              "deref",
                                                              []
                                                            |),
                                                            [ beta ]
                                                          |)
                                                        |);
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::transcript::ChallengeScalar")
                                                              [ C; Ty.path "halo2_proofs::plonk::X"
                                                              ],
                                                            [],
                                                            "deref",
                                                            []
                                                          |),
                                                          [ x ]
                                                        |)
                                                      ]
                                                    |);
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "ff::Field",
                                                          Ty.associated,
                                                          [],
                                                          "pow_vartime",
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [ Ty.path "u64" ]
                                                              ]
                                                          ]
                                                        |),
                                                        [
                                                          M.get_constant (|
                                                            "pairing_bn256::arithmetic::fields::FieldExt::DELTA"
                                                          |);
                                                          M.alloc (|
                                                            Value.Array
                                                              [
                                                                M.rust_cast
                                                                  (BinOp.Panic.mul (|
                                                                    Integer.Usize,
                                                                    M.read (| chunk_index |),
                                                                    M.read (| chunk_len |)
                                                                  |))
                                                              ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |) in
                                            let _ :=
                                              M.use
                                                (M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::collect::IntoIterator",
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::map::Map")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::Any"
                                                                  ]
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Column")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::circuit::Any"
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              Ty.associated
                                                          ],
                                                        [],
                                                        "into_iter",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::Any"
                                                                  ]
                                                              ],
                                                            [],
                                                            "map",
                                                            [
                                                              Ty.associated;
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                            [
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::circuit::Any"
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                                Ty.associated
                                                            ]
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::Any"
                                                                      ]
                                                                  ],
                                                                "iter",
                                                                []
                                                              |),
                                                              [ M.read (| columns |) ]
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ :=
                                                                              M.read (| γ |) in
                                                                            let column :=
                                                                              M.copy (| γ |) in
                                                                            M.read (|
                                                                              M.match_operator (|
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                        [
                                                                                          Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Any"
                                                                                        ],
                                                                                      "column_type",
                                                                                      []
                                                                                    |),
                                                                                    [ column ]
                                                                                  |)
                                                                                |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ :=
                                                                                        M.read (|
                                                                                          γ
                                                                                        |) in
                                                                                      M.SubPointer.get_array_field (|
                                                                                        M.read (|
                                                                                          advice_evals
                                                                                        |),
                                                                                        M.alloc (|
                                                                                          M.call_closure (|
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                                                                [
                                                                                                  Ty.associated
                                                                                                ],
                                                                                              "get_any_query_index",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.read (|
                                                                                                  vk
                                                                                                |),
                                                                                                "halo2_proofs::plonk::VerifyingKey",
                                                                                                "cs"
                                                                                              |);
                                                                                              M.read (|
                                                                                                column
                                                                                              |);
                                                                                              M.call_closure (|
                                                                                                M.get_associated_function (|
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::poly::Rotation",
                                                                                                  "cur",
                                                                                                  []
                                                                                                |),
                                                                                                []
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ :=
                                                                                        M.read (|
                                                                                          γ
                                                                                        |) in
                                                                                      M.SubPointer.get_array_field (|
                                                                                        M.read (|
                                                                                          fixed_evals
                                                                                        |),
                                                                                        M.alloc (|
                                                                                          M.call_closure (|
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                                                                [
                                                                                                  Ty.associated
                                                                                                ],
                                                                                              "get_any_query_index",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.read (|
                                                                                                  vk
                                                                                                |),
                                                                                                "halo2_proofs::plonk::VerifyingKey",
                                                                                                "cs"
                                                                                              |);
                                                                                              M.read (|
                                                                                                column
                                                                                              |);
                                                                                              M.call_closure (|
                                                                                                M.get_associated_function (|
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::poly::Rotation",
                                                                                                  "cur",
                                                                                                  []
                                                                                                |),
                                                                                                []
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      |)));
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let γ :=
                                                                                        M.read (|
                                                                                          γ
                                                                                        |) in
                                                                                      M.SubPointer.get_array_field (|
                                                                                        M.read (|
                                                                                          instance_evals
                                                                                        |),
                                                                                        M.alloc (|
                                                                                          M.call_closure (|
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                                                                [
                                                                                                  Ty.associated
                                                                                                ],
                                                                                              "get_any_query_index",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.read (|
                                                                                                  vk
                                                                                                |),
                                                                                                "halo2_proofs::plonk::VerifyingKey",
                                                                                                "cs"
                                                                                              |);
                                                                                              M.read (|
                                                                                                column
                                                                                              |);
                                                                                              M.call_closure (|
                                                                                                M.get_associated_function (|
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::poly::Rotation",
                                                                                                  "cur",
                                                                                                  []
                                                                                                |),
                                                                                                []
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      |)))
                                                                                ]
                                                                              |)
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let iter := M.copy (| γ |) in
                                                        M.loop (|
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.match_operator (|
                                                                M.alloc (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::map::Map")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                                [
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Any"
                                                                                ]
                                                                            ];
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                        [
                                                                                          Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Any"
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            Ty.associated
                                                                        ],
                                                                      [],
                                                                      "next",
                                                                      []
                                                                    |),
                                                                    [ iter ]
                                                                  |)
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (M.alloc (|
                                                                        M.never_to_any (|
                                                                          M.read (| M.break (||) |)
                                                                        |)
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ0_0 :=
                                                                        M.SubPointer.get_struct_tuple_field (|
                                                                          γ,
                                                                          "core::option::Option::Some",
                                                                          0
                                                                        |) in
                                                                      let eval :=
                                                                        M.copy (| γ0_0 |) in
                                                                      let _ :=
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::arith::MulAssign",
                                                                              Ty.associated,
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [ Ty.associated ]
                                                                              ],
                                                                              "mul_assign",
                                                                              []
                                                                            |),
                                                                            [
                                                                              right;
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Add",
                                                                                    Ty.associated,
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        [
                                                                                          Ty.associated
                                                                                        ]
                                                                                    ],
                                                                                    "add",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Add",
                                                                                        Ty.associated,
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.associated
                                                                                            ]
                                                                                        ],
                                                                                        "add",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          eval
                                                                                        |);
                                                                                        current_delta
                                                                                      ]
                                                                                    |);
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::deref::Deref",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::transcript::ChallengeScalar")
                                                                                          [
                                                                                            C;
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::Gamma"
                                                                                          ],
                                                                                        [],
                                                                                        "deref",
                                                                                        []
                                                                                      |),
                                                                                      [ gamma ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |) in
                                                                      let _ :=
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::arith::MulAssign",
                                                                              Ty.associated,
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [ Ty.associated ]
                                                                              ],
                                                                              "mul_assign",
                                                                              []
                                                                            |),
                                                                            [
                                                                              current_delta;
                                                                              M.get_constant (|
                                                                                "pairing_bn256::arithmetic::fields::FieldExt::DELTA"
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |) in
                                                                      M.alloc (| Value.Tuple [] |)))
                                                                ]
                                                              |) in
                                                            M.alloc (| Value.Tuple [] |)))
                                                        |)))
                                                  ]
                                                |)) in
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::arith::Mul",
                                                  Ty.associated,
                                                  [ Ty.associated ],
                                                  "mul",
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Sub",
                                                      Ty.associated,
                                                      [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                                                      "sub",
                                                      []
                                                    |),
                                                    [ M.read (| left |); right ]
                                                  |);
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Sub",
                                                      Ty.associated,
                                                      [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                                                      "sub",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "ff::Field",
                                                          Ty.associated,
                                                          [],
                                                          "one",
                                                          []
                                                        |),
                                                        []
                                                      |);
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Add",
                                                            Ty.associated,
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [ Ty.associated ]
                                                            ],
                                                            "add",
                                                            []
                                                          |),
                                                          [ M.read (| l_last |); l_blind ]
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    ]
                  |)
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_expressions :
          forall (C : Ty.t),
          M.IsAssociatedFunction (Self C) "expressions" (expressions C).
        
        (*
            pub(in crate::plonk) fn queries<'r>(
                &'r self,
                vk: &'r plonk::VerifyingKey<C>,
                x: ChallengeX<C>,
            ) -> impl Iterator<Item = VerifierQuery<'r, C>> + Clone {
                let blinding_factors = vk.cs.blinding_factors();
                let x_next = vk.domain.rotate_omega( *x, Rotation::next());
                let x_last = vk
                    .domain
                    .rotate_omega( *x, Rotation(-((blinding_factors + 1) as i32)));
        
                iter::empty()
                    .chain(self.sets.iter().flat_map(move |set| {
                        iter::empty()
                            // Open permutation product commitments at x and \omega^{-1} x
                            // Open permutation product commitments at x and \omega x
                            .chain(Some(VerifierQuery::new_commitment(
                                &set.permutation_product_commitment,
                                *x,
                                Rotation::cur(),
                                set.permutation_product_eval,
                            )))
                            .chain(Some(VerifierQuery::new_commitment(
                                &set.permutation_product_commitment,
                                x_next,
                                Rotation::next(),
                                set.permutation_product_next_eval,
                            )))
                    }))
                    // Open it at \omega^{last} x for all but the last set
                    .chain(self.sets.iter().rev().skip(1).flat_map(move |set| {
                        Some(VerifierQuery::new_commitment(
                            &set.permutation_product_commitment,
                            x_last,
                            Rotation(-((blinding_factors + 1) as i32)),
                            set.permutation_product_last_eval.unwrap(),
                        ))
                    }))
            }
        *)
        Definition queries (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self C in
          match τ, α with
          | [], [ self; vk; x ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let vk := M.alloc (| vk |) in
              let x := M.alloc (| x |) in
              M.read (|
                let blinding_factors :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                          [ Ty.associated ],
                        "blinding_factors",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| vk |),
                          "halo2_proofs::plonk::VerifyingKey",
                          "cs"
                        |)
                      ]
                    |)
                  |) in
                let x_next :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                          [ Ty.associated ],
                        "rotate_omega",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| vk |),
                          "halo2_proofs::plonk::VerifyingKey",
                          "domain"
                        |);
                        M.read (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "halo2_proofs::transcript::ChallengeScalar")
                                [ C; Ty.path "halo2_proofs::plonk::X" ],
                              [],
                              "deref",
                              []
                            |),
                            [ x ]
                          |)
                        |);
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.path "halo2_proofs::poly::Rotation",
                            "next",
                            []
                          |),
                          []
                        |)
                      ]
                    |)
                  |) in
                let x_last :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                          [ Ty.associated ],
                        "rotate_omega",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| vk |),
                          "halo2_proofs::plonk::VerifyingKey",
                          "domain"
                        |);
                        M.read (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "halo2_proofs::transcript::ChallengeScalar")
                                [ C; Ty.path "halo2_proofs::plonk::X" ],
                              [],
                              "deref",
                              []
                            |),
                            [ x ]
                          |)
                        |);
                        Value.StructTuple
                          "halo2_proofs::poly::Rotation"
                          [
                            UnOp.Panic.neg (|
                              Integer.I32,
                              M.rust_cast
                                (BinOp.Panic.add (|
                                  Integer.Usize,
                                  M.read (| blinding_factors |),
                                  Value.Integer 1
                                |))
                            |)
                          ]
                      ]
                    |)
                  |) in
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::chain::Chain")
                        [
                          Ty.apply
                            (Ty.path "core::iter::sources::empty::Empty")
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                [ C ]
                            ];
                          Ty.apply
                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                [
                                  Ty.apply
                                    (Ty.path
                                      "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                    [ C ]
                                ];
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::sources::empty::Empty")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                            [ C ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::option::IntoIter")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                            [ C ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "core::option::IntoIter")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                        [ C ]
                                    ]
                                ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                            [ C ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::chain::Chain")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::sources::empty::Empty")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                              [ C ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::option::IntoIter")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                              [ C ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::option::IntoIter")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                          [ C ]
                                      ]
                                  ])
                            ]
                        ],
                      [],
                      "chain",
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::flatten::FlatMap")
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::skip::Skip")
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                          [ C ]
                                      ]
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "core::option::Option")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                  [ C ]
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                          [ C ]
                                      ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "core::option::Option")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                    [ C ]
                                ])
                          ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::sources::empty::Empty")
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                [ C ]
                            ],
                          [],
                          "chain",
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::flatten::FlatMap")
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                      [ C ]
                                  ];
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::chain::Chain")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::sources::empty::Empty")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                              [ C ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::option::IntoIter")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                              [ C ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::option::IntoIter")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                          [ C ]
                                      ]
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                              [ C ]
                                          ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::sources::empty::Empty")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::poly::multiopen::VerifierQuery")
                                                [ C ]
                                            ];
                                          Ty.apply
                                            (Ty.path "core::option::IntoIter")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::poly::multiopen::VerifierQuery")
                                                [ C ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::option::IntoIter")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                            [ C ]
                                        ]
                                    ])
                              ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_function (|
                              "core::iter::sources::empty::empty",
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                  [ C ]
                              ]
                            |),
                            []
                          |);
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                [
                                  Ty.apply
                                    (Ty.path
                                      "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                    [ C ]
                                ],
                              [],
                              "flat_map",
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::chain::Chain")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::sources::empty::Empty")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                              [ C ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::option::IntoIter")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                              [ C ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::option::IntoIter")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                          [ C ]
                                      ]
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                              [ C ]
                                          ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::sources::empty::Empty")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::poly::multiopen::VerifierQuery")
                                                [ C ]
                                            ];
                                          Ty.apply
                                            (Ty.path "core::option::IntoIter")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::poly::multiopen::VerifierQuery")
                                                [ C ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::option::IntoIter")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                            [ C ]
                                        ]
                                    ])
                              ]
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "slice")
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                        [ C ]
                                    ],
                                  "iter",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                            [ C ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "halo2_proofs::plonk::permutation::verifier::Evaluated",
                                        "sets"
                                      |)
                                    ]
                                  |)
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      M.match_operator (|
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let set := M.copy (| γ |) in
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::chain::Chain")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::sources::empty::Empty")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                            [ C ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "core::option::IntoIter")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                            [ C ]
                                                        ]
                                                    ],
                                                  [],
                                                  "chain",
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::multiopen::VerifierQuery")
                                                          [ C ]
                                                      ]
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::sources::empty::Empty")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                            [ C ]
                                                        ],
                                                      [],
                                                      "chain",
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                                              [ C ]
                                                          ]
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "core::iter::sources::empty::empty",
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                                              [ C ]
                                                          ]
                                                        |),
                                                        []
                                                      |);
                                                      Value.StructTuple
                                                        "core::option::Option::Some"
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                [ C ],
                                                              "new_commitment",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| set |),
                                                                "halo2_proofs::plonk::permutation::verifier::EvaluatedSet",
                                                                "permutation_product_commitment"
                                                              |);
                                                              M.read (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::deref::Deref",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::transcript::ChallengeScalar")
                                                                      [
                                                                        C;
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::X"
                                                                      ],
                                                                    [],
                                                                    "deref",
                                                                    []
                                                                  |),
                                                                  [ x ]
                                                                |)
                                                              |);
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "halo2_proofs::poly::Rotation",
                                                                  "cur",
                                                                  []
                                                                |),
                                                                []
                                                              |);
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.read (| set |),
                                                                  "halo2_proofs::plonk::permutation::verifier::EvaluatedSet",
                                                                  "permutation_product_eval"
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                    ]
                                                  |);
                                                  Value.StructTuple
                                                    "core::option::Option::Some"
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                            [ C ],
                                                          "new_commitment",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| set |),
                                                            "halo2_proofs::plonk::permutation::verifier::EvaluatedSet",
                                                            "permutation_product_commitment"
                                                          |);
                                                          M.read (| x_next |);
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.path
                                                                "halo2_proofs::poly::Rotation",
                                                              "next",
                                                              []
                                                            |),
                                                            []
                                                          |);
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| set |),
                                                              "halo2_proofs::plonk::permutation::verifier::EvaluatedSet",
                                                              "permutation_product_next_eval"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                ]
                                              |)))
                                        ]
                                      |)
                                    | _ => M.impossible (||)
                                    end))
                            ]
                          |)
                        ]
                      |);
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::skip::Skip")
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::rev::Rev")
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                        [ C ]
                                    ]
                                ]
                            ],
                          [],
                          "flat_map",
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                  [ C ]
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                          [ C ]
                                      ]
                                  ]
                              ]
                              (Ty.apply
                                (Ty.path "core::option::Option")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                    [ C ]
                                ])
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::rev::Rev")
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                        [ C ]
                                    ]
                                ],
                              [],
                              "skip",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                        [ C ]
                                    ],
                                  [],
                                  "rev",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "slice")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                            [ C ]
                                        ],
                                      "iter",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::permutation::verifier::EvaluatedSet")
                                                [ C ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "halo2_proofs::plonk::permutation::verifier::Evaluated",
                                            "sets"
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |);
                              Value.Integer 1
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let set := M.copy (| γ |) in
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            [
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::poly::multiopen::VerifierQuery")
                                                    [ C ],
                                                  "new_commitment",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| set |),
                                                    "halo2_proofs::plonk::permutation::verifier::EvaluatedSet",
                                                    "permutation_product_commitment"
                                                  |);
                                                  M.read (| x_last |);
                                                  Value.StructTuple
                                                    "halo2_proofs::poly::Rotation"
                                                    [
                                                      UnOp.Panic.neg (|
                                                        Integer.I32,
                                                        M.rust_cast
                                                          (BinOp.Panic.add (|
                                                            Integer.Usize,
                                                            M.read (| blinding_factors |),
                                                            Value.Integer 1
                                                          |))
                                                      |)
                                                    ];
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        [ Ty.associated ],
                                                      "unwrap",
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.read (| set |),
                                                          "halo2_proofs::plonk::permutation::verifier::EvaluatedSet",
                                                          "permutation_product_last_eval"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            ]))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    ]
                  |)
                |)
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_queries :
          forall (C : Ty.t),
          M.IsAssociatedFunction (Self C) "queries" (queries C).
      End Impl_halo2_proofs_plonk_permutation_verifier_Evaluated_C.
      
      Module Impl_halo2_proofs_plonk_permutation_verifier_CommonEvaluated_C.
        Definition Self (C : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "halo2_proofs::plonk::permutation::verifier::CommonEvaluated") [ C ].
        
        (*
            pub(in crate::plonk) fn queries<'r>(
                &'r self,
                vkey: &'r VerifyingKey<C>,
                x: ChallengeX<C>,
            ) -> impl Iterator<Item = VerifierQuery<'r, C>> + Clone {
                // Open permutation commitments for each permutation argument at x
                vkey.commitments
                    .iter()
                    .zip(self.permutation_evals.iter())
                    .map(move |(commitment, &eval)| {
                        VerifierQuery::new_commitment(commitment, *x, Rotation::cur(), eval)
                    })
            }
        *)
        Definition queries (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self C in
          match τ, α with
          | [], [ self; vkey; x ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let vkey := M.alloc (| vkey |) in
              let x := M.alloc (| x |) in
              M.call_closure (|
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::zip::Zip")
                    [
                      Ty.apply (Ty.path "core::slice::iter::Iter") [ C ];
                      Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.associated ]
                    ],
                  [],
                  "map",
                  [
                    Ty.apply (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery") [ C ];
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.tuple
                              [
                                Ty.apply (Ty.path "&") [ C ];
                                Ty.apply (Ty.path "&") [ Ty.associated ]
                              ]
                          ]
                      ]
                      (Ty.apply (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery") [ C ])
                  ]
                |),
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::slice::iter::Iter") [ C ],
                      [],
                      "zip",
                      [ Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.associated ] ]
                    |),
                    [
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [ C ],
                          "iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ C; Ty.path "alloc::alloc::Global" ],
                              [],
                              "deref",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| vkey |),
                                "halo2_proofs::plonk::permutation::VerifyingKey",
                                "commitments"
                              |)
                            ]
                          |)
                        ]
                      |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [ Ty.associated ],
                          "iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                              [],
                              "deref",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::plonk::permutation::verifier::CommonEvaluated",
                                "permutation_evals"
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          M.match_operator (|
                            M.alloc (| α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let commitment := M.copy (| γ0_0 |) in
                                  let γ0_1 := M.read (| γ0_1 |) in
                                  let eval := M.copy (| γ0_1 |) in
                                  M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                        [ C ],
                                      "new_commitment",
                                      []
                                    |),
                                    [
                                      M.read (| commitment |);
                                      M.read (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "halo2_proofs::transcript::ChallengeScalar")
                                              [ C; Ty.path "halo2_proofs::plonk::X" ],
                                            [],
                                            "deref",
                                            []
                                          |),
                                          [ x ]
                                        |)
                                      |);
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.path "halo2_proofs::poly::Rotation",
                                          "cur",
                                          []
                                        |),
                                        []
                                      |);
                                      M.read (| eval |)
                                    ]
                                  |)))
                            ]
                          |)
                        | _ => M.impossible (||)
                        end))
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_queries :
          forall (C : Ty.t),
          M.IsAssociatedFunction (Self C) "queries" (queries C).
      End Impl_halo2_proofs_plonk_permutation_verifier_CommonEvaluated_C.
    End verifier.
  End permutation.
End plonk.
