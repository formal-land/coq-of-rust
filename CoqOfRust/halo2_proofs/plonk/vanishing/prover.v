(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module plonk.
  Module vanishing.
    Module prover.
      (* StructRecord
        {
          name := "Committed";
          ty_params := [ "C" ];
          fields :=
            [
              ("random_poly",
                Ty.apply
                  (Ty.path "halo2_proofs::poly::Polynomial")
                  [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ])
            ];
        } *)
      
      (* StructRecord
        {
          name := "Constructed";
          ty_params := [ "C" ];
          fields :=
            [
              ("h_pieces",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [
                    Ty.apply
                      (Ty.path "halo2_proofs::poly::Polynomial")
                      [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("committed",
                Ty.apply (Ty.path "halo2_proofs::plonk::vanishing::prover::Committed") [ C ])
            ];
        } *)
      
      (* StructRecord
        {
          name := "Evaluated";
          ty_params := [ "C" ];
          fields :=
            [
              ("h_poly",
                Ty.apply
                  (Ty.path "halo2_proofs::poly::Polynomial")
                  [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]);
              ("committed",
                Ty.apply (Ty.path "halo2_proofs::plonk::vanishing::prover::Committed") [ C ])
            ];
        } *)
      
      Module Impl_halo2_proofs_plonk_vanishing_Argument_C.
        Definition Self (C : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "halo2_proofs::plonk::vanishing::Argument") [ C ].
        
        (*
            pub(in crate::plonk) fn commit<E: EncodedChallenge<C>, R: RngCore, T: TranscriptWrite<C, E>>(
                params: &Params<C>,
                domain: &EvaluationDomain<C::Scalar>,
                mut rng: R,
                transcript: &mut T,
            ) -> Result<Committed<C>, Error> {
                // Sample a random polynomial of degree n - 1
                let mut random_poly = domain.empty_coeff();
        
                let random = vec![0; domain.k() as usize]
                    .iter()
                    .map(|_| C::ScalarExt::random(&mut rng))
                    .collect::<Vec<_>>();
        
                random_poly.par_iter_mut().for_each(|coeff| {
                    let mut rng = thread_rng();
                    *coeff = (C::ScalarExt::random(&mut rng)
                        + random[rng.next_u64() as usize % domain.k() as usize])
                        * (C::ScalarExt::random(&mut rng)
                            + random[rng.next_u64() as usize % domain.k() as usize])
                });
        
                // Commit
                let c = params.commit(&random_poly).to_affine();
                transcript.write_point(c)?;
        
                Ok(Committed { random_poly })
            }
        *)
        Definition commit (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self C in
          match τ, α with
          | [ E; R; T ], [ params; domain; rng; transcript ] =>
            ltac:(M.monadic
              (let params := M.alloc (| params |) in
              let domain := M.alloc (| domain |) in
              let rng := M.alloc (| rng |) in
              let transcript := M.alloc (| transcript |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let random_poly :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                              [ Ty.associated ],
                            "empty_coeff",
                            []
                          |),
                          [ M.read (| domain |) ]
                        |)
                      |) in
                    let random :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              [
                                Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "i32" ];
                                Ty.function
                                  [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "i32" ] ] ]
                                  Ty.associated
                              ],
                            [],
                            "collect",
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.path "i32" ],
                                [],
                                "map",
                                [
                                  Ty.associated;
                                  Ty.function
                                    [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "i32" ] ] ]
                                    Ty.associated
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [ Ty.path "i32" ],
                                    "iter",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.path "i32"; Ty.path "alloc::alloc::Global" ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_function (|
                                              "alloc::vec::from_elem",
                                              [ Ty.path "i32" ]
                                            |),
                                            [
                                              Value.Integer 0;
                                              M.rust_cast
                                                (M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::domain::EvaluationDomain")
                                                      [ Ty.associated ],
                                                    "k",
                                                    []
                                                  |),
                                                  [ M.read (| domain |) ]
                                                |))
                                            ]
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.call_closure (|
                                                  M.get_trait_method (|
                                                    "ff::Field",
                                                    Ty.associated,
                                                    [],
                                                    "random",
                                                    [ Ty.apply (Ty.path "&mut") [ R ] ]
                                                  |),
                                                  [ rng ]
                                                |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "rayon::iter::ParallelIterator",
                            Ty.apply (Ty.path "rayon::slice::IterMut") [ Ty.associated ],
                            [],
                            "for_each",
                            [
                              Ty.function
                                [ Ty.tuple [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ] ]
                                (Ty.tuple [])
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "rayon::iter::IntoParallelRefMutIterator",
                                Ty.apply (Ty.path "slice") [ Ty.associated ],
                                [],
                                "par_iter_mut",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::DerefMut",
                                    Ty.apply
                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                      [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ],
                                    [],
                                    "deref_mut",
                                    []
                                  |),
                                  [ random_poly ]
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let coeff := M.copy (| γ |) in
                                            M.read (|
                                              let rng :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "rand::rngs::thread::thread_rng",
                                                      []
                                                    |),
                                                    []
                                                  |)
                                                |) in
                                              M.write (|
                                                M.read (| coeff |),
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::arith::Mul",
                                                    Ty.associated,
                                                    [ Ty.associated ],
                                                    "mul",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::arith::Add",
                                                        Ty.associated,
                                                        [ Ty.associated ],
                                                        "add",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "ff::Field",
                                                            Ty.associated,
                                                            [],
                                                            "random",
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&mut")
                                                                [
                                                                  Ty.path
                                                                    "rand::rngs::thread::ThreadRng"
                                                                ]
                                                            ]
                                                          |),
                                                          [ rng ]
                                                        |);
                                                        M.read (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::index::Index",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [ Ty.path "usize" ],
                                                              "index",
                                                              []
                                                            |),
                                                            [
                                                              random;
                                                              BinOp.Panic.rem (|
                                                                Integer.Usize,
                                                                M.rust_cast
                                                                  (M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "rand_core::RngCore",
                                                                      Ty.path
                                                                        "rand::rngs::thread::ThreadRng",
                                                                      [],
                                                                      "next_u64",
                                                                      []
                                                                    |),
                                                                    [ rng ]
                                                                  |)),
                                                                M.rust_cast
                                                                  (M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::poly::domain::EvaluationDomain")
                                                                        [ Ty.associated ],
                                                                      "k",
                                                                      []
                                                                    |),
                                                                    [ M.read (| domain |) ]
                                                                  |))
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::arith::Add",
                                                        Ty.associated,
                                                        [ Ty.associated ],
                                                        "add",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "ff::Field",
                                                            Ty.associated,
                                                            [],
                                                            "random",
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&mut")
                                                                [
                                                                  Ty.path
                                                                    "rand::rngs::thread::ThreadRng"
                                                                ]
                                                            ]
                                                          |),
                                                          [ rng ]
                                                        |);
                                                        M.read (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::index::Index",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [ Ty.path "usize" ],
                                                              "index",
                                                              []
                                                            |),
                                                            [
                                                              random;
                                                              BinOp.Panic.rem (|
                                                                Integer.Usize,
                                                                M.rust_cast
                                                                  (M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "rand_core::RngCore",
                                                                      Ty.path
                                                                        "rand::rngs::thread::ThreadRng",
                                                                      [],
                                                                      "next_u64",
                                                                      []
                                                                    |),
                                                                    [ rng ]
                                                                  |)),
                                                                M.rust_cast
                                                                  (M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::poly::domain::EvaluationDomain")
                                                                        [ Ty.associated ],
                                                                      "k",
                                                                      []
                                                                    |),
                                                                    [ M.read (| domain |) ]
                                                                  |))
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let c :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "group::Curve",
                            Ty.associated,
                            [],
                            "to_affine",
                            []
                          |),
                          [
                            M.alloc (|
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "halo2_proofs::poly::commitment::Params") [ C ],
                                  "commit",
                                  []
                                |),
                                [ M.read (| params |); random_poly ]
                              |)
                            |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "halo2_proofs::transcript::TranscriptWrite",
                                  T,
                                  [ C; E ],
                                  "write_point",
                                  []
                                |),
                                [ M.read (| transcript |); M.read (| c |) ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::vanishing::prover::Committed")
                                                [ C ];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "std::io::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructRecord
                            "halo2_proofs::plonk::vanishing::prover::Committed"
                            [ ("random_poly", M.read (| random_poly |)) ]
                        ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_commit :
          forall (C : Ty.t),
          M.IsAssociatedFunction (Self C) "commit" (commit C).
      End Impl_halo2_proofs_plonk_vanishing_Argument_C.
      
      Module Impl_halo2_proofs_plonk_vanishing_prover_Committed_C.
        Definition Self (C : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "halo2_proofs::plonk::vanishing::prover::Committed") [ C ].
        
        (*
            pub(in crate::plonk) fn construct<E: EncodedChallenge<C>, T: TranscriptWrite<C, E>>(
                self,
                params: &Params<C>,
                domain: &EvaluationDomain<C::Scalar>,
                h_poly: Polynomial<C::Scalar, ExtendedLagrangeCoeff>,
                transcript: &mut T,
            ) -> Result<Constructed<C>, Error> {
                // Divide by t(X) = X^{params.n} - 1.
                let h_poly = domain.divide_by_vanishing_poly(h_poly);
        
                // Obtain final h(X) polynomial
                let h_poly = domain.extended_to_coeff(h_poly);
        
                // Split h(X) up into pieces
                let h_pieces = h_poly
                    .par_chunks_exact(params.n as usize)
                    .map(|v| domain.coeff_from_vec(v.to_vec()))
                    .collect::<Vec<_>>();
                drop(h_poly);
        
                // Compute commitments to each h(X) piece
                let h_commitments_projective: Vec<_> = h_pieces
                    .iter()
                    .map(|h_piece| params.commit(h_piece))
                    .collect();
                let mut h_commitments = vec![C::identity(); h_commitments_projective.len()];
                C::Curve::batch_normalize(&h_commitments_projective, &mut h_commitments);
        
                // Hash each h(X) piece
                for c in h_commitments.iter() {
                    transcript.write_point( *c)?;
                }
        
                Ok(Constructed {
                    h_pieces,
                    committed: self,
                })
            }
        *)
        Definition construct (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self C in
          match τ, α with
          | [ E; T ], [ self; params; domain; h_poly; transcript ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let params := M.alloc (| params |) in
              let domain := M.alloc (| domain |) in
              let h_poly := M.alloc (| h_poly |) in
              let transcript := M.alloc (| transcript |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let h_poly :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                              [ Ty.associated ],
                            "divide_by_vanishing_poly",
                            []
                          |),
                          [ M.read (| domain |); M.read (| h_poly |) ]
                        |)
                      |) in
                    let h_poly :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                              [ Ty.associated ],
                            "extended_to_coeff",
                            []
                          |),
                          [ M.read (| domain |); M.read (| h_poly |) ]
                        |)
                      |) in
                    let h_pieces :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "rayon::iter::ParallelIterator",
                            Ty.apply
                              (Ty.path "rayon::iter::map::Map")
                              [
                                Ty.apply
                                  (Ty.path "rayon::slice::chunks::ChunksExact")
                                  [ Ty.associated ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [ Ty.apply (Ty.path "slice") [ Ty.associated ] ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                    [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ])
                              ],
                            [],
                            "collect",
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                    [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "rayon::iter::ParallelIterator",
                                Ty.apply
                                  (Ty.path "rayon::slice::chunks::ChunksExact")
                                  [ Ty.associated ],
                                [],
                                "map",
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            [ Ty.apply (Ty.path "slice") [ Ty.associated ] ]
                                        ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                      [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]);
                                  Ty.apply
                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                    [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "rayon::slice::ParallelSlice",
                                    Ty.apply (Ty.path "slice") [ Ty.associated ],
                                    [ Ty.associated ],
                                    "par_chunks_exact",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [ h_poly ]
                                    |);
                                    M.rust_cast
                                      (M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| params |),
                                          "halo2_proofs::poly::commitment::Params",
                                          "n"
                                        |)
                                      |))
                                  ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let v := M.copy (| γ |) in
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::domain::EvaluationDomain")
                                                      [ Ty.associated ],
                                                    "coeff_from_vec",
                                                    []
                                                  |),
                                                  [
                                                    M.read (| domain |);
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          [ Ty.associated ],
                                                        "to_vec",
                                                        []
                                                      |),
                                                      [ M.read (| v |) ]
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "core::mem::drop",
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                            ]
                          |),
                          [ M.read (| h_poly |) ]
                        |)
                      |) in
                    let h_commitments_projective :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                      [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]
                                          ]
                                      ]
                                  ]
                                  Ty.associated
                              ],
                            [],
                            "collect",
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                      [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]
                                  ],
                                [],
                                "map",
                                [
                                  Ty.associated;
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff"
                                                ]
                                            ]
                                        ]
                                    ]
                                    Ty.associated
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                          [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]
                                      ],
                                    "iter",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [ h_pieces ]
                                    |)
                                  ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let h_piece := M.copy (| γ |) in
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::commitment::Params")
                                                      [ C ],
                                                    "commit",
                                                    []
                                                  |),
                                                  [ M.read (| params |); M.read (| h_piece |) ]
                                                |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |) in
                    let h_commitments :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (| "alloc::vec::from_elem", [ C ] |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "group::prime::PrimeCurveAffine",
                                C,
                                [],
                                "identity",
                                []
                              |),
                              []
                            |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                "len",
                                []
                              |),
                              [ h_commitments_projective ]
                            |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "group::Curve",
                            Ty.associated,
                            [],
                            "batch_normalize",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                [],
                                "deref",
                                []
                              |),
                              [ h_commitments_projective ]
                            |);
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::DerefMut",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ C; Ty.path "alloc::alloc::Global" ],
                                [],
                                "deref_mut",
                                []
                              |),
                              [ h_commitments ]
                            |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply (Ty.path "core::slice::iter::Iter") [ C ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "slice") [ C ],
                                    "iter",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ C; Ty.path "alloc::alloc::Global" ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [ h_commitments ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply (Ty.path "core::slice::iter::Iter") [ C ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let c := M.copy (| γ0_0 |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.tuple [];
                                                            Ty.path "std::io::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "halo2_proofs::transcript::TranscriptWrite",
                                                            T,
                                                            [ C; E ],
                                                            "write_point",
                                                            []
                                                          |),
                                                          [
                                                            M.read (| transcript |);
                                                            M.read (| M.read (| c |) |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::vanishing::prover::Constructed")
                                                                          [ C ];
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "std::io::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |)) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructRecord
                            "halo2_proofs::plonk::vanishing::prover::Constructed"
                            [ ("h_pieces", M.read (| h_pieces |)); ("committed", M.read (| self |))
                            ]
                        ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_construct :
          forall (C : Ty.t),
          M.IsAssociatedFunction (Self C) "construct" (construct C).
      End Impl_halo2_proofs_plonk_vanishing_prover_Committed_C.
      
      Module Impl_halo2_proofs_plonk_vanishing_prover_Constructed_C.
        Definition Self (C : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "halo2_proofs::plonk::vanishing::prover::Constructed") [ C ].
        
        (*
            pub(in crate::plonk) fn evaluate<E: EncodedChallenge<C>, T: TranscriptWrite<C, E>>(
                self,
                x: ChallengeX<C>,
                xn: C::Scalar,
                domain: &EvaluationDomain<C::Scalar>,
                transcript: &mut T,
            ) -> Result<Evaluated<C>, Error> {
                let h_poly = self
                    .h_pieces
                    .iter()
                    .rev()
                    .fold(domain.empty_coeff(), |acc, eval| acc * xn + eval);
        
                let random_eval = eval_polynomial(&self.committed.random_poly, *x);
                transcript.write_scalar(random_eval)?;
        
                Ok(Evaluated {
                    h_poly,
                    committed: self.committed,
                })
            }
        *)
        Definition evaluate (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self C in
          match τ, α with
          | [ E; T ], [ self; x; xn; domain; transcript ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let x := M.alloc (| x |) in
              let xn := M.alloc (| xn |) in
              let domain := M.alloc (| domain |) in
              let transcript := M.alloc (| transcript |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let h_poly :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::rev::Rev")
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                      [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]
                                  ]
                              ],
                            [],
                            "fold",
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::poly::Polynomial")
                                [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                        [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ];
                                      Ty.apply
                                        (Ty.path "&")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                  [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ])
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                      [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]
                                  ],
                                [],
                                "rev",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                          [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]
                                      ],
                                    "iter",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          self,
                                          "halo2_proofs::plonk::vanishing::prover::Constructed",
                                          "h_pieces"
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                                  [ Ty.associated ],
                                "empty_coeff",
                                []
                              |),
                              [ M.read (| domain |) ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0; α1 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let acc := M.copy (| γ |) in
                                            M.match_operator (|
                                              M.alloc (| α1 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let eval := M.copy (| γ |) in
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::arith::Add",
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "halo2_proofs::poly::Coeff"
                                                          ],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::poly::Polynomial")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path
                                                                    "halo2_proofs::poly::Coeff"
                                                                ]
                                                            ]
                                                        ],
                                                        "add",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Mul",
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::Polynomial")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "halo2_proofs::poly::Coeff"
                                                              ],
                                                            [ Ty.associated ],
                                                            "mul",
                                                            []
                                                          |),
                                                          [ M.read (| acc |); M.read (| xn |) ]
                                                        |);
                                                        M.read (| eval |)
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let random_eval :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "halo2_proofs::arithmetic::eval_polynomial",
                            [ Ty.associated ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                  [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ],
                                [],
                                "deref",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    self,
                                    "halo2_proofs::plonk::vanishing::prover::Constructed",
                                    "committed"
                                  |),
                                  "halo2_proofs::plonk::vanishing::prover::Committed",
                                  "random_poly"
                                |)
                              ]
                            |);
                            M.read (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "halo2_proofs::transcript::ChallengeScalar")
                                    [ C; Ty.path "halo2_proofs::plonk::X" ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [ x ]
                              |)
                            |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "halo2_proofs::transcript::TranscriptWrite",
                                  T,
                                  [ C; E ],
                                  "write_scalar",
                                  []
                                |),
                                [ M.read (| transcript |); M.read (| random_eval |) ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::vanishing::prover::Evaluated")
                                                [ C ];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "std::io::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          Value.StructRecord
                            "halo2_proofs::plonk::vanishing::prover::Evaluated"
                            [
                              ("h_poly", M.read (| h_poly |));
                              ("committed",
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    self,
                                    "halo2_proofs::plonk::vanishing::prover::Constructed",
                                    "committed"
                                  |)
                                |))
                            ]
                        ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_evaluate :
          forall (C : Ty.t),
          M.IsAssociatedFunction (Self C) "evaluate" (evaluate C).
      End Impl_halo2_proofs_plonk_vanishing_prover_Constructed_C.
      
      Module Impl_halo2_proofs_plonk_vanishing_prover_Evaluated_C.
        Definition Self (C : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "halo2_proofs::plonk::vanishing::prover::Evaluated") [ C ].
        
        (*
            pub(in crate::plonk) fn open(
                &self,
                x: ChallengeX<C>,
            ) -> impl Iterator<Item = ProverQuery<'_, C>> + Clone {
                iter::empty()
                    .chain(Some(ProverQuery {
                        point: *x,
                        rotation: Rotation::cur(),
                        poly: &self.h_poly,
                    }))
                    .chain(Some(ProverQuery {
                        point: *x,
                        rotation: Rotation::cur(),
                        poly: &self.committed.random_poly,
                    }))
            }
        *)
        Definition open (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self C in
          match τ, α with
          | [], [ self; x ] =>
            ltac:(M.monadic
              (let self := M.alloc (| self |) in
              let x := M.alloc (| x |) in
              M.call_closure (|
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::chain::Chain")
                    [
                      Ty.apply
                        (Ty.path "core::iter::sources::empty::Empty")
                        [ Ty.apply (Ty.path "halo2_proofs::poly::multiopen::ProverQuery") [ C ] ];
                      Ty.apply
                        (Ty.path "core::option::IntoIter")
                        [ Ty.apply (Ty.path "halo2_proofs::poly::multiopen::ProverQuery") [ C ] ]
                    ],
                  [],
                  "chain",
                  [
                    Ty.apply
                      (Ty.path "core::option::Option")
                      [ Ty.apply (Ty.path "halo2_proofs::poly::multiopen::ProverQuery") [ C ] ]
                  ]
                |),
                [
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::sources::empty::Empty")
                        [ Ty.apply (Ty.path "halo2_proofs::poly::multiopen::ProverQuery") [ C ] ],
                      [],
                      "chain",
                      [
                        Ty.apply
                          (Ty.path "core::option::Option")
                          [ Ty.apply (Ty.path "halo2_proofs::poly::multiopen::ProverQuery") [ C ] ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_function (|
                          "core::iter::sources::empty::empty",
                          [ Ty.apply (Ty.path "halo2_proofs::poly::multiopen::ProverQuery") [ C ] ]
                        |),
                        []
                      |);
                      Value.StructTuple
                        "core::option::Option::Some"
                        [
                          Value.StructRecord
                            "halo2_proofs::poly::multiopen::ProverQuery"
                            [
                              ("point",
                                M.read (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "halo2_proofs::transcript::ChallengeScalar")
                                        [ C; Ty.path "halo2_proofs::plonk::X" ],
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [ x ]
                                  |)
                                |));
                              ("rotation",
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "halo2_proofs::poly::Rotation",
                                    "cur",
                                    []
                                  |),
                                  []
                                |));
                              ("poly",
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::plonk::vanishing::prover::Evaluated",
                                  "h_poly"
                                |))
                            ]
                        ]
                    ]
                  |);
                  Value.StructTuple
                    "core::option::Option::Some"
                    [
                      Value.StructRecord
                        "halo2_proofs::poly::multiopen::ProverQuery"
                        [
                          ("point",
                            M.read (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "halo2_proofs::transcript::ChallengeScalar")
                                    [ C; Ty.path "halo2_proofs::plonk::X" ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [ x ]
                              |)
                            |));
                          ("rotation",
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.path "halo2_proofs::poly::Rotation",
                                "cur",
                                []
                              |),
                              []
                            |));
                          ("poly",
                            M.SubPointer.get_struct_record_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::plonk::vanishing::prover::Evaluated",
                                "committed"
                              |),
                              "halo2_proofs::plonk::vanishing::prover::Committed",
                              "random_poly"
                            |))
                        ]
                    ]
                ]
              |)))
          | _, _ => M.impossible
          end.
        
        Axiom AssociatedFunction_open :
          forall (C : Ty.t),
          M.IsAssociatedFunction (Self C) "open" (open C).
      End Impl_halo2_proofs_plonk_vanishing_prover_Evaluated_C.
    End prover.
  End vanishing.
End plonk.
