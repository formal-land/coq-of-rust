(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module plonk.
  Module verifier.
    (* Trait *)
    (* Empty module 'VerificationStrategy' *)
    
    (* StructRecord
      {
        name := "SingleVerifier";
        ty_params := [ "E" ];
        fields :=
          [
            ("params",
              Ty.apply
                (Ty.path "&")
                [ Ty.apply (Ty.path "halo2_proofs::poly::commitment::ParamsVerifier") [ E ] ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_E_where_pairing_bn256_arithmetic_pairing_MultiMillerLoop_E_for_halo2_proofs_plonk_verifier_SingleVerifier_E.
      Definition Self (E : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::verifier::SingleVerifier") [ E ].
      
      (* Debug *)
      Definition fmt (E : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "SingleVerifier" |);
                M.read (| Value.String "params" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::verifier::SingleVerifier",
                      "params"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (E : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self E)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt E)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_E_where_pairing_bn256_arithmetic_pairing_MultiMillerLoop_E_for_halo2_proofs_plonk_verifier_SingleVerifier_E.
    
    Module Impl_halo2_proofs_plonk_verifier_SingleVerifier_C.
      Definition Self (C : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::verifier::SingleVerifier") [ C ].
      
      (*
          pub fn new(params: &'a ParamsVerifier<C>) -> Self {
              SingleVerifier { params }
          }
      *)
      Definition new (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ params ] =>
          ltac:(M.monadic
            (let params := M.alloc (| params |) in
            Value.StructRecord
              "halo2_proofs::plonk::verifier::SingleVerifier"
              [ ("params", M.read (| params |)) ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "new" (new C).
    End Impl_halo2_proofs_plonk_verifier_SingleVerifier_C.
    
    Module Impl_halo2_proofs_plonk_verifier_VerificationStrategy_where_pairing_bn256_arithmetic_pairing_MultiMillerLoop_C_associated_type_for_halo2_proofs_plonk_verifier_SingleVerifier_C.
      Definition Self (C : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::verifier::SingleVerifier") [ C ].
      
      (*     type Output = (); *)
      Definition _Output (C : Ty.t) : Ty.t := Ty.tuple [].
      
      (*
          fn process(
              self,
              f: impl FnOnce() -> Result<PairMSM<C::G1Affine>, Error>,
          ) -> Result<Self::Output, Error> {
              let guard = f()?;
              if Decider::verify(self.params, guard) {
                  Ok(())
              } else {
                  Err(Error::ConstraintSystemFailure)
              }
          }
      *)
      Definition process (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [ impl_FnOnce___arrow_Result_PairMSM_C_G1Affine___Error_ ], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let guard :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::poly::msm::PairMSM")
                                    [ Ty.associated ];
                                  Ty.path "halo2_proofs::plonk::error::Error"
                                ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::function::FnOnce",
                                  impl_FnOnce___arrow_Result_PairMSM_C_G1Affine___Error_,
                                  [ Ty.tuple [] ],
                                  "call_once",
                                  []
                                |),
                                [ M.read (| f |); Value.Tuple [] ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.tuple [];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "halo2_proofs::poly::multiopen::Decider")
                                      [ C ],
                                    "verify",
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        self,
                                        "halo2_proofs::plonk::verifier::SingleVerifier",
                                        "params"
                                      |)
                                    |);
                                    M.read (| guard |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.StructTuple
                              "core::result::Result::Err"
                              [
                                Value.StructTuple
                                  "halo2_proofs::plonk::error::Error::ConstraintSystemFailure"
                                  []
                              ]
                          |)))
                    ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (C : Ty.t),
        M.IsTraitInstance
          "halo2_proofs::plonk::verifier::VerificationStrategy"
          (Self C)
          (* Trait polymorphic types *) [ (* C *) Ty.associated ]
          (* Instance *)
          [ ("Output", InstanceField.Ty (_Output C)); ("process", InstanceField.Method (process C))
          ].
    End Impl_halo2_proofs_plonk_verifier_VerificationStrategy_where_pairing_bn256_arithmetic_pairing_MultiMillerLoop_C_associated_type_for_halo2_proofs_plonk_verifier_SingleVerifier_C.
    
    (* StructRecord
      {
        name := "BatchVerifier";
        ty_params := [ "E"; "R" ];
        fields :=
          [
            ("params",
              Ty.apply
                (Ty.path "&")
                [ Ty.apply (Ty.path "halo2_proofs::poly::commitment::ParamsVerifier") [ E ] ]);
            ("msm", Ty.apply (Ty.path "halo2_proofs::poly::msm::PairMSM") [ Ty.associated ]);
            ("rng", R)
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_E_where_pairing_bn256_arithmetic_pairing_MultiMillerLoop_E_where_core_fmt_Debug_R_where_rand_core_RngCore_R_where_core_fmt_Debug_associated_type_for_halo2_proofs_plonk_verifier_BatchVerifier_E_R.
      Definition Self (E R : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::verifier::BatchVerifier") [ E; R ].
      
      (* Debug *)
      Definition fmt (E R : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E R in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field3_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "BatchVerifier" |);
                M.read (| Value.String "params" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::plonk::verifier::BatchVerifier",
                    "params"
                  |));
                M.read (| Value.String "msm" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::plonk::verifier::BatchVerifier",
                    "msm"
                  |));
                M.read (| Value.String "rng" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::plonk::verifier::BatchVerifier",
                      "rng"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (E R : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self E R)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt E R)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_E_where_pairing_bn256_arithmetic_pairing_MultiMillerLoop_E_where_core_fmt_Debug_R_where_rand_core_RngCore_R_where_core_fmt_Debug_associated_type_for_halo2_proofs_plonk_verifier_BatchVerifier_E_R.
    
    Module Impl_halo2_proofs_plonk_verifier_BatchVerifier_E_R.
      Definition Self (E R : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::verifier::BatchVerifier") [ E; R ].
      
      (*
          pub fn new(params: &'a ParamsVerifier<E>, rng: R) -> Self {
              BatchVerifier {
                  params,
                  msm: PairMSM::default(),
                  rng,
              }
          }
      *)
      Definition new (E R : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E R in
        match τ, α with
        | [], [ params; rng ] =>
          ltac:(M.monadic
            (let params := M.alloc (| params |) in
            let rng := M.alloc (| rng |) in
            Value.StructRecord
              "halo2_proofs::plonk::verifier::BatchVerifier"
              [
                ("params", M.read (| params |));
                ("msm",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply (Ty.path "halo2_proofs::poly::msm::PairMSM") [ Ty.associated ],
                      [],
                      "default",
                      []
                    |),
                    []
                  |));
                ("rng", M.read (| rng |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new :
        forall (E R : Ty.t),
        M.IsAssociatedFunction (Self E R) "new" (new E R).
      
      (*
          pub fn finalize(self) -> bool {
              Decider::verify(self.params, self.msm)
          }
      *)
      Definition finalize (E R : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E R in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply (Ty.path "halo2_proofs::poly::multiopen::Decider") [ E ],
                "verify",
                []
              |),
              [
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "halo2_proofs::plonk::verifier::BatchVerifier",
                    "params"
                  |)
                |);
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "halo2_proofs::plonk::verifier::BatchVerifier",
                    "msm"
                  |)
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_finalize :
        forall (E R : Ty.t),
        M.IsAssociatedFunction (Self E R) "finalize" (finalize E R).
    End Impl_halo2_proofs_plonk_verifier_BatchVerifier_E_R.
    
    Module Impl_halo2_proofs_plonk_verifier_VerificationStrategy_where_pairing_bn256_arithmetic_pairing_MultiMillerLoop_C_where_rand_core_RngCore_R_associated_type_for_halo2_proofs_plonk_verifier_BatchVerifier_C_R.
      Definition Self (C R : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::verifier::BatchVerifier") [ C; R ].
      
      (*     type Output = Self; *)
      Definition _Output (C R : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::plonk::verifier::BatchVerifier") [ C; R ].
      
      (*
          fn process(
              mut self,
              f: impl FnOnce() -> Result<PairMSM<C::G1Affine>, Error>,
          ) -> Result<Self::Output, Error> {
              // Scale the MSM by a random factor to ensure that if the existing MSM
              // has is_zero() == false then this argument won't be able to interfere
              // with it to make it true, with high probability.
              self.msm.scale(C::Scalar::random(&mut self.rng));
              let to_add = f()?;
              self.msm.add_msm(to_add);
      
              Ok(Self {
                  msm: self.msm,
                  rng: self.rng,
                  params: self.params,
              })
          }
      *)
      Definition process (C R : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C R in
        match τ, α with
        | [ impl_FnOnce___arrow_Result_PairMSM_C_G1Affine___Error_ ], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "halo2_proofs::poly::msm::PairMSM") [ Ty.associated ],
                          "scale",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            self,
                            "halo2_proofs::plonk::verifier::BatchVerifier",
                            "msm"
                          |);
                          M.call_closure (|
                            M.get_trait_method (|
                              "ff::Field",
                              Ty.associated,
                              [],
                              "random",
                              [ Ty.apply (Ty.path "&mut") [ R ] ]
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                self,
                                "halo2_proofs::plonk::verifier::BatchVerifier",
                                "rng"
                              |)
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let to_add :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "halo2_proofs::poly::msm::PairMSM")
                                    [ Ty.associated ];
                                  Ty.path "halo2_proofs::plonk::error::Error"
                                ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::function::FnOnce",
                                  impl_FnOnce___arrow_Result_PairMSM_C_G1Affine___Error_,
                                  [ Ty.tuple [] ],
                                  "call_once",
                                  []
                                |),
                                [ M.read (| f |); Value.Tuple [] ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::verifier::BatchVerifier")
                                                [ C; R ];
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "halo2_proofs::plonk::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "halo2_proofs::poly::msm::PairMSM") [ Ty.associated ],
                          "add_msm",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            self,
                            "halo2_proofs::plonk::verifier::BatchVerifier",
                            "msm"
                          |);
                          M.read (| to_add |)
                        ]
                      |)
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      [
                        Value.StructRecord
                          "halo2_proofs::plonk::verifier::BatchVerifier"
                          [
                            ("msm",
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "halo2_proofs::plonk::verifier::BatchVerifier",
                                  "msm"
                                |)
                              |));
                            ("rng",
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "halo2_proofs::plonk::verifier::BatchVerifier",
                                  "rng"
                                |)
                              |));
                            ("params",
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "halo2_proofs::plonk::verifier::BatchVerifier",
                                  "params"
                                |)
                              |))
                          ]
                      ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (C R : Ty.t),
        M.IsTraitInstance
          "halo2_proofs::plonk::verifier::VerificationStrategy"
          (Self C R)
          (* Trait polymorphic types *) [ (* C *) Ty.associated ]
          (* Instance *)
          [
            ("Output", InstanceField.Ty (_Output C R));
            ("process", InstanceField.Method (process C R))
          ].
    End Impl_halo2_proofs_plonk_verifier_VerificationStrategy_where_pairing_bn256_arithmetic_pairing_MultiMillerLoop_C_where_rand_core_RngCore_R_associated_type_for_halo2_proofs_plonk_verifier_BatchVerifier_C_R.
    
    (*
    pub fn get_advice_commitments_from_transcript<
        'params,
        C: MultiMillerLoop,
        E: EncodedChallenge<C::G1Affine>,
        T: TranscriptRead<C::G1Affine, E>,
    >(
        vk: &VerifyingKey<C::G1Affine>,
        transcript: &mut T,
    ) -> Result<Vec<C::G1Affine>, Error> {
        let res = read_n_points(transcript, vk.cs.num_advice_columns)?;
        Ok(res)
    }
    *)
    Definition get_advice_commitments_from_transcript (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ C; E; T ], [ vk; transcript ] =>
        ltac:(M.monadic
          (let vk := M.alloc (| vk |) in
          let transcript := M.alloc (| transcript |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let res :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                Ty.path "std::io::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (|
                                "halo2_proofs::transcript::read_n_points",
                                [ Ty.associated; E; T ]
                              |),
                              [
                                M.read (| transcript |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| vk |),
                                      "halo2_proofs::plonk::VerifyingKey",
                                      "cs"
                                    |),
                                    "halo2_proofs::plonk::circuit::ConstraintSystem",
                                    "num_advice_columns"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                M.alloc (| Value.StructTuple "core::result::Result::Ok" [ M.read (| res |) ] |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
    pub fn verify_proof_ext<
        'params,
        C: MultiMillerLoop,
        E: EncodedChallenge<C::G1Affine>,
        T: TranscriptRead<C::G1Affine, E>,
        V: VerificationStrategy<C::G1Affine>,
    >(
        params: &'params ParamsVerifier<C>,
        vk: &VerifyingKey<C::G1Affine>,
        strategy: V,
        instances: &[&[&[C::Scalar]]],
        transcript: &mut T,
        use_gwc: bool,
    ) -> Result<V::Output, Error> {
        // Check that instances matches the expected number of instance columns
        for instances in instances.iter() {
            if instances.len() != vk.cs.num_instance_columns {
                return Err(Error::InvalidInstances);
            }
        }
    
        let instance_commitments = instances
            .iter()
            .map(|instance| {
                instance
                    .iter()
                    .map(|instance| {
                        if instance.len() > params.n as usize - (vk.cs.blinding_factors() + 1) {
                            return Err(Error::InstanceTooLarge);
                        }
    
                        Ok(params.commit_lagrange(instance.to_vec()).to_affine())
                    })
                    .collect::<Result<Vec<_>, _>>()
            })
            .collect::<Result<Vec<_>, _>>()?;
    
        let num_proofs = instance_commitments.len();
    
        // Hash verification key into transcript
        vk.hash_into(transcript)?;
    
        for instance_commitments in instance_commitments.iter() {
            // Hash the instance (external) commitments into the transcript
            for commitment in instance_commitments {
                transcript.common_point( *commitment)?
            }
        }
    
        let advice_commitments = (0..num_proofs)
            .map(|_| -> Result<Vec<_>, _> {
                // Hash the prover's advice commitments into the transcript
                read_n_points(transcript, vk.cs.num_advice_columns)
            })
            .collect::<Result<Vec<_>, _>>()?;
    
        // Sample theta challenge for keeping lookup columns linearly independent
        let theta: ChallengeTheta<_> = transcript.squeeze_challenge_scalar();
    
        let lookups_permuted = (0..num_proofs)
            .map(|_| -> Result<Vec<_>, _> {
                // Hash each lookup permuted commitment
                vk.cs
                    .lookups
                    .iter()
                    .map(|argument| argument.read_permuted_commitments(transcript))
                    .collect::<Result<Vec<_>, _>>()
            })
            .collect::<Result<Vec<_>, _>>()?;
    
        // Sample beta challenge
        let beta: ChallengeBeta<_> = transcript.squeeze_challenge_scalar();
    
        // Sample gamma challenge
        let gamma: ChallengeGamma<_> = transcript.squeeze_challenge_scalar();
    
        let permutations_committed = (0..num_proofs)
            .map(|_| {
                // Hash each permutation product commitment
                vk.cs.permutation.read_product_commitments(vk, transcript)
            })
            .collect::<Result<Vec<_>, _>>()?;
    
        let lookups_committed = lookups_permuted
            .into_iter()
            .map(|lookups| {
                // Hash each lookup product commitment
                lookups
                    .into_iter()
                    .map(|lookup| lookup.read_product_commitment(transcript))
                    .collect::<Result<Vec<_>, _>>()
            })
            .collect::<Result<Vec<_>, _>>()?;
    
        let vanishing = vanishing::Argument::read_commitments_before_y(transcript)?;
    
        // Sample y challenge, which keeps the gates linearly independent.
        let y: ChallengeY<_> = transcript.squeeze_challenge_scalar();
    
        let vanishing = vanishing.read_commitments_after_y(vk, transcript)?;
    
        // Sample x challenge, which is used to ensure the circuit is
        // satisfied with high probability.
        let x: ChallengeX<_> = transcript.squeeze_challenge_scalar();
        let instance_evals = (0..num_proofs)
            .map(|_| -> Result<Vec<_>, _> { read_n_scalars(transcript, vk.cs.instance_queries.len()) })
            .collect::<Result<Vec<_>, _>>()?;
    
        let advice_evals = (0..num_proofs)
            .map(|_| -> Result<Vec<_>, _> { read_n_scalars(transcript, vk.cs.advice_queries.len()) })
            .collect::<Result<Vec<_>, _>>()?;
    
        let fixed_evals = read_n_scalars(transcript, vk.cs.fixed_queries.len())?;
    
        let vanishing = vanishing.evaluate_after_x(transcript)?;
    
        let permutations_common = vk.permutation.evaluate(transcript)?;
    
        let permutations_evaluated = permutations_committed
            .into_iter()
            .map(|permutation| permutation.evaluate(transcript))
            .collect::<Result<Vec<_>, _>>()?;
    
        let lookups_evaluated = lookups_committed
            .into_iter()
            .map(|lookups| -> Result<Vec<_>, _> {
                lookups
                    .into_iter()
                    .map(|lookup| lookup.evaluate(transcript))
                    .collect::<Result<Vec<_>, _>>()
            })
            .collect::<Result<Vec<_>, _>>()?;
    
        // This check ensures the circuit is satisfied so long as the polynomial
        // commitments open to the correct values.
        let vanishing = {
            // x^n
            let xn = x.pow(&[params.n as u64, 0, 0, 0]);
    
            let blinding_factors = vk.cs.blinding_factors();
            let l_evals = vk
                .domain
                .l_i_range( *x, xn, (-((blinding_factors + 1) as i32))..=0);
            assert_eq!(l_evals.len(), 2 + blinding_factors);
            let l_last = l_evals[0];
            let l_blind: C::Scalar = l_evals[1..(1 + blinding_factors)]
                .iter()
                .fold(C::Scalar::zero(), |acc, eval| acc + eval);
            let l_0 = l_evals[1 + blinding_factors];
    
            // Compute the expected value of h(x)
            let expressions = advice_evals
                .iter()
                .zip(instance_evals.iter())
                .zip(permutations_evaluated.iter())
                .zip(lookups_evaluated.iter())
                .flat_map(|(((advice_evals, instance_evals), permutation), lookups)| {
                    let fixed_evals = &fixed_evals;
                    std::iter::empty()
                        // Evaluate the circuit using the custom gates provided
                        .chain(vk.cs.gates.iter().flat_map(move |gate| {
                            gate.polynomials().iter().map(move |poly| {
                                poly.evaluate(
                                    &|scalar| scalar,
                                    &|_| panic!("virtual selectors are removed during optimization"),
                                    &|index, _, _| fixed_evals[index],
                                    &|index, _, _| advice_evals[index],
                                    &|index, _, _| instance_evals[index],
                                    &|a| -a,
                                    &|a, b| a + &b,
                                    &|a, b| a() * &b(),
                                    &|a, scalar| a * &scalar,
                                )
                            })
                        }))
                        .chain(permutation.expressions(
                            vk,
                            &vk.cs.permutation,
                            &permutations_common,
                            advice_evals,
                            fixed_evals,
                            instance_evals,
                            l_0,
                            l_last,
                            l_blind,
                            beta,
                            gamma,
                            x,
                        ))
                        .chain(
                            lookups
                                .iter()
                                .zip(vk.cs.lookups.iter())
                                .flat_map(move |(p, argument)| {
                                    p.expressions(
                                        l_0,
                                        l_last,
                                        l_blind,
                                        argument,
                                        theta,
                                        beta,
                                        gamma,
                                        advice_evals,
                                        fixed_evals,
                                        instance_evals,
                                    )
                                })
                                .into_iter(),
                        )
                });
    
            vanishing.verify(expressions, y, xn)
        };
    
        let queries = instance_commitments
            .iter()
            .zip(instance_evals.iter())
            .zip(advice_commitments.iter())
            .zip(advice_evals.iter())
            .zip(permutations_evaluated.iter())
            .zip(lookups_evaluated.iter())
            .flat_map(
                |(
                    (
                        (((instance_commitments, instance_evals), advice_commitments), advice_evals),
                        permutation,
                    ),
                    lookups,
                )| {
                    iter::empty()
                        .chain(vk.cs.instance_queries.iter().enumerate().map(
                            move |(query_index, &(column, at))| {
                                VerifierQuery::new_commitment(
                                    &instance_commitments[column.index()],
                                    vk.domain.rotate_omega( *x, at),
                                    at,
                                    instance_evals[query_index],
                                )
                            },
                        ))
                        .chain(vk.cs.advice_queries.iter().enumerate().map(
                            move |(query_index, &(column, at))| {
                                VerifierQuery::new_commitment(
                                    &advice_commitments[column.index()],
                                    vk.domain.rotate_omega( *x, at),
                                    at,
                                    advice_evals[query_index],
                                )
                            },
                        ))
                        .chain(permutation.queries(vk, x))
                        .chain(
                            lookups
                                .iter()
                                .flat_map(move |p| p.queries(vk, x))
                                .into_iter(),
                        )
                },
            )
            .chain(
                vk.cs
                    .fixed_queries
                    .iter()
                    .enumerate()
                    .map(|(query_index, &(column, at))| {
                        VerifierQuery::new_commitment(
                            &vk.fixed_commitments[column.index()],
                            vk.domain.rotate_omega( *x, at),
                            at,
                            fixed_evals[query_index],
                        )
                    }),
            )
            .chain(permutations_common.queries(&vk.permutation, x))
            .chain(vanishing.queries(x));
    
        // We are now convinced the circuit is satisfied so long as the
        // polynomial commitments open to the correct values.
        if use_gwc {
            strategy.process(|| {
                multiopen::gwc::verify_proof(params, transcript, queries).map_err(|_| Error::Opening)
            })
        } else {
            strategy.process(|| {
                multiopen::shplonk::verify_proof(params, transcript, queries)
                    .map_err(|_| Error::Opening)
            })
        }
    }
    *)
    Definition verify_proof_ext (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ C; E; T; V ], [ params; vk; strategy; instances; transcript; use_gwc ] =>
        ltac:(M.monadic
          (let params := M.alloc (| params |) in
          let vk := M.alloc (| vk |) in
          let strategy := M.alloc (| strategy |) in
          let instances := M.alloc (| instances |) in
          let transcript := M.alloc (| transcript |) in
          let use_gwc := M.alloc (| use_gwc |) in
          M.catch_return (|
            ltac:(M.monadic
              (M.read (|
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [ Ty.apply (Ty.path "slice") [ Ty.associated ] ]
                                      ]
                                  ]
                              ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [ Ty.apply (Ty.path "slice") [ Ty.associated ] ]
                                          ]
                                      ]
                                  ],
                                "iter",
                                []
                              |),
                              [ M.read (| instances |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            [ Ty.associated ]
                                                        ]
                                                    ]
                                                ]
                                            ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let instances := M.copy (| γ0_0 |) in
                                          M.match_operator (|
                                            M.alloc (| Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        BinOp.Pure.ne
                                                          (M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        [ Ty.associated ]
                                                                    ]
                                                                ],
                                                              "len",
                                                              []
                                                            |),
                                                            [ M.read (| M.read (| instances |) |) ]
                                                          |))
                                                          (M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| vk |),
                                                                "halo2_proofs::plonk::VerifyingKey",
                                                                "cs"
                                                              |),
                                                              "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                              "num_instance_columns"
                                                            |)
                                                          |))
                                                      |)) in
                                                  let _ :=
                                                    M.is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.alloc (|
                                                    M.never_to_any (|
                                                      M.read (|
                                                        M.return_ (|
                                                          Value.StructTuple
                                                            "core::result::Result::Err"
                                                            [
                                                              Value.StructTuple
                                                                "halo2_proofs::plonk::error::Error::InvalidInstances"
                                                                []
                                                            ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                            ]
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let instance_commitments :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "halo2_proofs::plonk::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [ Ty.apply (Ty.path "slice") [ Ty.associated ] ]
                                              ]
                                          ]
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              [ Ty.associated ]
                                                          ]
                                                      ]
                                                  ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ])
                                  ],
                                [],
                                "collect",
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "halo2_proofs::plonk::error::Error"
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [ Ty.apply (Ty.path "slice") [ Ty.associated ] ]
                                              ]
                                          ]
                                      ],
                                    [],
                                    "map",
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                [ Ty.associated ]
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ])
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [ Ty.apply (Ty.path "slice") [ Ty.associated ]
                                                      ]
                                                  ]
                                              ]
                                          ],
                                        "iter",
                                        []
                                      |),
                                      [ M.read (| instances |) ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let instance := M.copy (| γ |) in
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::map::Map")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      [ Ty.associated ]
                                                                  ]
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              [ Ty.associated ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ])
                                                          ],
                                                        [],
                                                        "collect",
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ]
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      [ Ty.associated ]
                                                                  ]
                                                              ],
                                                            [],
                                                            "map",
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "slice")
                                                                                [ Ty.associated ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ])
                                                            ]
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          [ Ty.associated ]
                                                                      ]
                                                                  ],
                                                                "iter",
                                                                []
                                                              |),
                                                              [ M.read (| M.read (| instance |) |) ]
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let instance :=
                                                                              M.copy (| γ |) in
                                                                            M.read (|
                                                                              let _ :=
                                                                                M.match_operator (|
                                                                                  M.alloc (|
                                                                                    Value.Tuple []
                                                                                  |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ :=
                                                                                          M.use
                                                                                            (M.alloc (|
                                                                                              BinOp.Pure.gt
                                                                                                (M.call_closure (|
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "slice")
                                                                                                      [
                                                                                                        Ty.associated
                                                                                                      ],
                                                                                                    "len",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      M.read (|
                                                                                                        instance
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |))
                                                                                                (BinOp.Panic.sub (|
                                                                                                  Integer.Usize,
                                                                                                  M.rust_cast
                                                                                                    (M.read (|
                                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                                        M.read (|
                                                                                                          params
                                                                                                        |),
                                                                                                        "halo2_proofs::poly::commitment::ParamsVerifier",
                                                                                                        "n"
                                                                                                      |)
                                                                                                    |)),
                                                                                                  BinOp.Panic.add (|
                                                                                                    Integer.Usize,
                                                                                                    M.call_closure (|
                                                                                                      M.get_associated_function (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "halo2_proofs::plonk::circuit::ConstraintSystem")
                                                                                                          [
                                                                                                            Ty.associated
                                                                                                          ],
                                                                                                        "blinding_factors",
                                                                                                        []
                                                                                                      |),
                                                                                                      [
                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                          M.read (|
                                                                                                            vk
                                                                                                          |),
                                                                                                          "halo2_proofs::plonk::VerifyingKey",
                                                                                                          "cs"
                                                                                                        |)
                                                                                                      ]
                                                                                                    |),
                                                                                                    Value.Integer
                                                                                                      1
                                                                                                  |)
                                                                                                |))
                                                                                            |)) in
                                                                                        let _ :=
                                                                                          M.is_constant_or_break_match (|
                                                                                            M.read (|
                                                                                              γ
                                                                                            |),
                                                                                            Value.Bool
                                                                                              true
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          M.never_to_any (|
                                                                                            M.read (|
                                                                                              M.return_ (|
                                                                                                Value.StructTuple
                                                                                                  "core::result::Result::Err"
                                                                                                  [
                                                                                                    Value.StructTuple
                                                                                                      "halo2_proofs::plonk::error::Error::InstanceTooLarge"
                                                                                                      []
                                                                                                  ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)));
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (M.alloc (|
                                                                                          Value.Tuple
                                                                                            []
                                                                                        |)))
                                                                                  ]
                                                                                |) in
                                                                              M.alloc (|
                                                                                Value.StructTuple
                                                                                  "core::result::Result::Ok"
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "group::Curve",
                                                                                        Ty.associated,
                                                                                        [],
                                                                                        "to_affine",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.alloc (|
                                                                                          M.call_closure (|
                                                                                            M.get_associated_function (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::poly::commitment::ParamsVerifier")
                                                                                                [ C
                                                                                                ],
                                                                                              "commit_lagrange",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                params
                                                                                              |);
                                                                                              M.call_closure (|
                                                                                                M.get_associated_function (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "slice")
                                                                                                    [
                                                                                                      Ty.associated
                                                                                                    ],
                                                                                                  "to_vec",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.read (|
                                                                                                    M.read (|
                                                                                                      instance
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                              |)
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.associated;
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let num_proofs :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "len",
                        []
                      |),
                      [ instance_commitments ]
                    |)
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::try_trait::Try",
                          Ty.apply
                            (Ty.path "core::result::Result")
                            [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                          [],
                          "branch",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::plonk::VerifyingKey")
                                [ Ty.associated ],
                              "hash_into",
                              [ E; T ]
                            |),
                            [ M.read (| vk |); M.read (| transcript |) ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Break",
                              0
                            |) in
                          let residual := M.copy (| γ0_0 |) in
                          M.alloc (|
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.associated; Ty.path "halo2_proofs::plonk::error::Error"
                                        ],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "std::io::error::Error"
                                          ]
                                      ],
                                      "from_residual",
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::ops::control_flow::ControlFlow::Continue",
                              0
                            |) in
                          let val := M.copy (| γ0_0 |) in
                          val))
                    ]
                  |) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                              ],
                            [],
                            "into_iter",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                                  ],
                                "iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "deref",
                                    []
                                  |),
                                  [ instance_commitments ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let instance_commitments := M.copy (| γ0_0 |) in
                                          M.use
                                            (M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ],
                                                    [],
                                                    "into_iter",
                                                    []
                                                  |),
                                                  [ M.read (| instance_commitments |) ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let iter := M.copy (| γ |) in
                                                    M.loop (|
                                                      ltac:(M.monadic
                                                        (let _ :=
                                                          M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    [ Ty.associated ],
                                                                  [],
                                                                  "next",
                                                                  []
                                                                |),
                                                                [ iter ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (| M.break (||) |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let commitment :=
                                                                    M.copy (| γ0_0 |) in
                                                                  M.match_operator (|
                                                                    M.alloc (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::try_trait::Try",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::result::Result")
                                                                            [
                                                                              Ty.tuple [];
                                                                              Ty.path
                                                                                "std::io::error::Error"
                                                                            ],
                                                                          [],
                                                                          "branch",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "halo2_proofs::transcript::Transcript",
                                                                              T,
                                                                              [ Ty.associated; E ],
                                                                              "common_point",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (|
                                                                                transcript
                                                                              |);
                                                                              M.read (|
                                                                                M.read (|
                                                                                  commitment
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ0_0 :=
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              γ,
                                                                              "core::ops::control_flow::ControlFlow::Break",
                                                                              0
                                                                            |) in
                                                                          let residual :=
                                                                            M.copy (| γ0_0 |) in
                                                                          M.alloc (|
                                                                            M.never_to_any (|
                                                                              M.read (|
                                                                                M.return_ (|
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::try_trait::FromResidual",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::result::Result")
                                                                                        [
                                                                                          Ty.associated;
                                                                                          Ty.path
                                                                                            "halo2_proofs::plonk::error::Error"
                                                                                        ],
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::result::Result")
                                                                                          [
                                                                                            Ty.path
                                                                                              "core::convert::Infallible";
                                                                                            Ty.path
                                                                                              "std::io::error::Error"
                                                                                          ]
                                                                                      ],
                                                                                      "from_residual",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.read (|
                                                                                        residual
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)));
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let γ0_0 :=
                                                                            M.SubPointer.get_struct_tuple_field (|
                                                                              γ,
                                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                                              0
                                                                            |) in
                                                                          let val :=
                                                                            M.copy (| γ0_0 |) in
                                                                          val))
                                                                    ]
                                                                  |)))
                                                            ]
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)))
                                                    |)))
                                              ]
                                            |))))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let advice_commitments :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "std::io::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [ Ty.path "usize" ];
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "std::io::error::Error"
                                        ])
                                  ],
                                [],
                                "collect",
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "std::io::error::Error"
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [ Ty.path "usize" ],
                                    [],
                                    "map",
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "std::io::error::Error"
                                        ];
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "usize" ] ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                            Ty.path "std::io::error::Error"
                                          ])
                                    ]
                                  |),
                                  [
                                    Value.StructRecord
                                      "core::ops::range::Range"
                                      [
                                        ("start", Value.Integer 0);
                                        ("end_", M.read (| num_proofs |))
                                      ];
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.call_closure (|
                                                      M.get_function (|
                                                        "halo2_proofs::transcript::read_n_points",
                                                        [ Ty.associated; E; T ]
                                                      |),
                                                      [
                                                        M.read (| transcript |);
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| vk |),
                                                              "halo2_proofs::plonk::VerifyingKey",
                                                              "cs"
                                                            |),
                                                            "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                            "num_advice_columns"
                                                          |)
                                                        |)
                                                      ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.associated;
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let theta :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "halo2_proofs::transcript::Transcript",
                        T,
                        [ Ty.associated; E ],
                        "squeeze_challenge_scalar",
                        [ Ty.path "halo2_proofs::plonk::Theta" ]
                      |),
                      [ M.read (| transcript |) ]
                    |)
                  |) in
                let lookups_permuted :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                          [ Ty.associated ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "halo2_proofs::plonk::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [ Ty.path "usize" ];
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                                [ Ty.associated ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ])
                                  ],
                                [],
                                "collect",
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                                [ Ty.associated ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "halo2_proofs::plonk::error::Error"
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [ Ty.path "usize" ],
                                    [],
                                    "map",
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                                [ Ty.associated ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ];
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "usize" ] ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                                  [ Ty.associated ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ])
                                    ]
                                  |),
                                  [
                                    Value.StructRecord
                                      "core::ops::range::Range"
                                      [
                                        ("start", Value.Integer 0);
                                        ("end_", M.read (| num_proofs |))
                                      ];
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::map::Map")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::lookup::Argument")
                                                                  [ Ty.associated ]
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::lookup::Argument")
                                                                          [ Ty.associated ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                                                    [ Ty.associated ];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ])
                                                          ],
                                                        [],
                                                        "collect",
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                                                    [ Ty.associated ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ]
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::lookup::Argument")
                                                                  [ Ty.associated ]
                                                              ],
                                                            [],
                                                            "map",
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                                                    [ Ty.associated ];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::lookup::Argument")
                                                                            [ Ty.associated ]
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                                                      [ Ty.associated ];
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ])
                                                            ]
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::lookup::Argument")
                                                                      [ Ty.associated ]
                                                                  ],
                                                                "iter",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::deref::Deref",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::lookup::Argument")
                                                                          [ Ty.associated ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [],
                                                                    "deref",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.read (| vk |),
                                                                        "halo2_proofs::plonk::VerifyingKey",
                                                                        "cs"
                                                                      |),
                                                                      "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                      "lookups"
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let argument :=
                                                                              M.copy (| γ |) in
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::lookup::Argument")
                                                                                  [ Ty.associated ],
                                                                                "read_permuted_commitments",
                                                                                [
                                                                                  Ty.associated;
                                                                                  E;
                                                                                  T
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.read (|
                                                                                  argument
                                                                                |);
                                                                                M.read (|
                                                                                  transcript
                                                                                |)
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.associated;
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let beta :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "halo2_proofs::transcript::Transcript",
                        T,
                        [ Ty.associated; E ],
                        "squeeze_challenge_scalar",
                        [ Ty.path "halo2_proofs::plonk::Beta" ]
                      |),
                      [ M.read (| transcript |) ]
                    |)
                  |) in
                let gamma :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "halo2_proofs::transcript::Transcript",
                        T,
                        [ Ty.associated; E ],
                        "squeeze_challenge_scalar",
                        [ Ty.path "halo2_proofs::plonk::Gamma" ]
                      |),
                      [ M.read (| transcript |) ]
                    |)
                  |) in
                let permutations_committed :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::permutation::verifier::Committed")
                                      [ Ty.associated ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "halo2_proofs::plonk::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [ Ty.path "usize" ];
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::verifier::Committed")
                                            [ Ty.associated ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ])
                                  ],
                                [],
                                "collect",
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::verifier::Committed")
                                            [ Ty.associated ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "halo2_proofs::plonk::error::Error"
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [ Ty.path "usize" ],
                                    [],
                                    "map",
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::verifier::Committed")
                                            [ Ty.associated ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ];
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "usize" ] ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::permutation::verifier::Committed")
                                              [ Ty.associated ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ])
                                    ]
                                  |),
                                  [
                                    Value.StructRecord
                                      "core::ops::range::Range"
                                      [
                                        ("start", Value.Integer 0);
                                        ("end_", M.read (| num_proofs |))
                                      ];
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "halo2_proofs::plonk::permutation::Argument",
                                                        "read_product_commitments",
                                                        [ Ty.associated; E; T ]
                                                      |),
                                                      [
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| vk |),
                                                            "halo2_proofs::plonk::VerifyingKey",
                                                            "cs"
                                                          |),
                                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                          "permutation"
                                                        |);
                                                        M.read (| vk |);
                                                        M.read (| transcript |)
                                                      ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.associated;
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let lookups_committed :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::plonk::lookup::verifier::Committed")
                                          [ Ty.associated ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "halo2_proofs::plonk::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                              [ Ty.associated ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                                  [ Ty.associated ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::lookup::verifier::Committed")
                                                [ Ty.associated ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ])
                                  ],
                                [],
                                "collect",
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::lookup::verifier::Committed")
                                                [ Ty.associated ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "halo2_proofs::plonk::error::Error"
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                              [ Ty.associated ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "map",
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::lookup::verifier::Committed")
                                                [ Ty.associated ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                                    [ Ty.associated ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::lookup::verifier::Committed")
                                                  [ Ty.associated ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ])
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                                  [ Ty.associated ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "into_iter",
                                        []
                                      |),
                                      [ M.read (| lookups_permuted |) ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let lookups := M.copy (| γ |) in
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::map::Map")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloc::vec::into_iter::IntoIter")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                                                  [ Ty.associated ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                                                      [ Ty.associated ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::lookup::verifier::Committed")
                                                                    [ Ty.associated ];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ])
                                                          ],
                                                        [],
                                                        "collect",
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::lookup::verifier::Committed")
                                                                    [ Ty.associated ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ]
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloc::vec::into_iter::IntoIter")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                                                  [ Ty.associated ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            "map",
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::lookup::verifier::Committed")
                                                                    [ Ty.associated ];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                                                        [ Ty.associated ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::lookup::verifier::Committed")
                                                                      [ Ty.associated ];
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ])
                                                            ]
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::collect::IntoIterator",
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                                                      [ Ty.associated ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [],
                                                                "into_iter",
                                                                []
                                                              |),
                                                              [ M.read (| lookups |) ]
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let lookup :=
                                                                              M.copy (| γ |) in
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::lookup::verifier::PermutationCommitments")
                                                                                  [ Ty.associated ],
                                                                                "read_product_commitment",
                                                                                [ E; T ]
                                                                              |),
                                                                              [
                                                                                M.read (| lookup |);
                                                                                M.read (|
                                                                                  transcript
                                                                                |)
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.associated;
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let vanishing :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::vanishing::verifier::Committed")
                                  [ Ty.associated ];
                                Ty.path "halo2_proofs::plonk::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::vanishing::Argument")
                                  [ Ty.associated ],
                                "read_commitments_before_y",
                                [ E; T ]
                              |),
                              [ M.read (| transcript |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.associated;
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let y :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "halo2_proofs::transcript::Transcript",
                        T,
                        [ Ty.associated; E ],
                        "squeeze_challenge_scalar",
                        [ Ty.path "halo2_proofs::plonk::Y" ]
                      |),
                      [ M.read (| transcript |) ]
                    |)
                  |) in
                let vanishing :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::vanishing::verifier::Constructed")
                                  [ Ty.associated ];
                                Ty.path "halo2_proofs::plonk::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::vanishing::verifier::Committed")
                                  [ Ty.associated ],
                                "read_commitments_after_y",
                                [ E; T ]
                              |),
                              [ M.read (| vanishing |); M.read (| vk |); M.read (| transcript |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.associated;
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let x :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "halo2_proofs::transcript::Transcript",
                        T,
                        [ Ty.associated; E ],
                        "squeeze_challenge_scalar",
                        [ Ty.path "halo2_proofs::plonk::X" ]
                      |),
                      [ M.read (| transcript |) ]
                    |)
                  |) in
                let instance_evals :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "std::io::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [ Ty.path "usize" ];
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "std::io::error::Error"
                                        ])
                                  ],
                                [],
                                "collect",
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "std::io::error::Error"
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [ Ty.path "usize" ],
                                    [],
                                    "map",
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "std::io::error::Error"
                                        ];
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "usize" ] ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                            Ty.path "std::io::error::Error"
                                          ])
                                    ]
                                  |),
                                  [
                                    Value.StructRecord
                                      "core::ops::range::Range"
                                      [
                                        ("start", Value.Integer 0);
                                        ("end_", M.read (| num_proofs |))
                                      ];
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.call_closure (|
                                                      M.get_function (|
                                                        "halo2_proofs::transcript::read_n_scalars",
                                                        [ Ty.associated; E; T ]
                                                      |),
                                                      [
                                                        M.read (| transcript |);
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::Instance"
                                                                      ];
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Rotation"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "len",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| vk |),
                                                                "halo2_proofs::plonk::VerifyingKey",
                                                                "cs"
                                                              |),
                                                              "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                              "instance_queries"
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.associated;
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let advice_evals :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "std::io::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  [
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [ Ty.path "usize" ];
                                    Ty.function
                                      [ Ty.tuple [ Ty.path "usize" ] ]
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "std::io::error::Error"
                                        ])
                                  ],
                                [],
                                "collect",
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "std::io::error::Error"
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      [ Ty.path "usize" ],
                                    [],
                                    "map",
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                          Ty.path "std::io::error::Error"
                                        ];
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "usize" ] ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                            Ty.path "std::io::error::Error"
                                          ])
                                    ]
                                  |),
                                  [
                                    Value.StructRecord
                                      "core::ops::range::Range"
                                      [
                                        ("start", Value.Integer 0);
                                        ("end_", M.read (| num_proofs |))
                                      ];
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.call_closure (|
                                                      M.get_function (|
                                                        "halo2_proofs::transcript::read_n_scalars",
                                                        [ Ty.associated; E; T ]
                                                      |),
                                                      [
                                                        M.read (| transcript |);
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::Advice"
                                                                      ];
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Rotation"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            "len",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| vk |),
                                                                "halo2_proofs::plonk::VerifyingKey",
                                                                "cs"
                                                              |),
                                                              "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                              "advice_queries"
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.associated;
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let fixed_evals :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                Ty.path "std::io::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_function (|
                                "halo2_proofs::transcript::read_n_scalars",
                                [ Ty.associated; E; T ]
                              |),
                              [
                                M.read (| transcript |);
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::plonk::circuit::Column")
                                              [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ];
                                            Ty.path "halo2_proofs::poly::Rotation"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "len",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| vk |),
                                        "halo2_proofs::plonk::VerifyingKey",
                                        "cs"
                                      |),
                                      "halo2_proofs::plonk::circuit::ConstraintSystem",
                                      "fixed_queries"
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.associated;
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let vanishing :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path
                                    "halo2_proofs::plonk::vanishing::verifier::PartiallyEvaluated")
                                  [ Ty.associated ];
                                Ty.path "halo2_proofs::plonk::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::vanishing::verifier::Constructed")
                                  [ Ty.associated ],
                                "evaluate_after_x",
                                [ E; T ]
                              |),
                              [ M.read (| vanishing |); M.read (| transcript |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.associated;
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let permutations_common :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path
                                    "halo2_proofs::plonk::permutation::verifier::CommonEvaluated")
                                  [ Ty.associated ];
                                Ty.path "halo2_proofs::plonk::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "halo2_proofs::plonk::permutation::VerifyingKey")
                                  [ Ty.associated ],
                                "evaluate",
                                [ E; T ]
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| vk |),
                                  "halo2_proofs::plonk::VerifyingKey",
                                  "permutation"
                                |);
                                M.read (| transcript |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.associated;
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let permutations_evaluated :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                      [ Ty.associated ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "halo2_proofs::plonk::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::plonk::permutation::verifier::Committed")
                                          [ Ty.associated ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::permutation::verifier::Committed")
                                              [ Ty.associated ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                            [ Ty.associated ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ])
                                  ],
                                [],
                                "collect",
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                            [ Ty.associated ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "halo2_proofs::plonk::error::Error"
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::plonk::permutation::verifier::Committed")
                                          [ Ty.associated ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "map",
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                            [ Ty.associated ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::permutation::verifier::Committed")
                                                [ Ty.associated ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                              [ Ty.associated ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ])
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::permutation::verifier::Committed")
                                              [ Ty.associated ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "into_iter",
                                        []
                                      |),
                                      [ M.read (| permutations_committed |) ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let permutation := M.copy (| γ |) in
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::permutation::verifier::Committed")
                                                          [ Ty.associated ],
                                                        "evaluate",
                                                        [ E; T ]
                                                      |),
                                                      [
                                                        M.read (| permutation |);
                                                        M.read (| transcript |)
                                                      ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.associated;
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let lookups_evaluated :=
                  M.copy (|
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                          [ Ty.associated ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "halo2_proofs::plonk::error::Error"
                              ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::lookup::verifier::Committed")
                                              [ Ty.associated ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::lookup::verifier::Committed")
                                                  [ Ty.associated ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                [ Ty.associated ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ])
                                  ],
                                [],
                                "collect",
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                [ Ty.associated ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "halo2_proofs::plonk::error::Error"
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::lookup::verifier::Committed")
                                              [ Ty.associated ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "map",
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                [ Ty.associated ];
                                              Ty.path "alloc::alloc::Global"
                                            ];
                                          Ty.path "halo2_proofs::plonk::error::Error"
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::lookup::verifier::Committed")
                                                    [ Ty.associated ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                  [ Ty.associated ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ])
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::lookup::verifier::Committed")
                                                  [ Ty.associated ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "into_iter",
                                        []
                                      |),
                                      [ M.read (| lookups_committed |) ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let lookups := M.copy (| γ |) in
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::map::Map")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloc::vec::into_iter::IntoIter")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::lookup::verifier::Committed")
                                                                  [ Ty.associated ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::lookup::verifier::Committed")
                                                                      [ Ty.associated ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                    [ Ty.associated ];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ])
                                                          ],
                                                        [],
                                                        "collect",
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                    [ Ty.associated ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path
                                                                "halo2_proofs::plonk::error::Error"
                                                            ]
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "alloc::vec::into_iter::IntoIter")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::lookup::verifier::Committed")
                                                                  [ Ty.associated ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            "map",
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                    [ Ty.associated ];
                                                                  Ty.path
                                                                    "halo2_proofs::plonk::error::Error"
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::lookup::verifier::Committed")
                                                                        [ Ty.associated ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                      [ Ty.associated ];
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::error::Error"
                                                                  ])
                                                            ]
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::collect::IntoIterator",
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::lookup::verifier::Committed")
                                                                      [ Ty.associated ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [],
                                                                "into_iter",
                                                                []
                                                              |),
                                                              [ M.read (| lookups |) ]
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let lookup :=
                                                                              M.copy (| γ |) in
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::lookup::verifier::Committed")
                                                                                  [ Ty.associated ],
                                                                                "evaluate",
                                                                                [ E; T ]
                                                                              |),
                                                                              [
                                                                                M.read (| lookup |);
                                                                                M.read (|
                                                                                  transcript
                                                                                |)
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.associated;
                                            Ty.path "halo2_proofs::plonk::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "halo2_proofs::plonk::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |)
                  |) in
                let vanishing :=
                  M.copy (|
                    let xn :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "pairing_bn256::arithmetic::fields::BaseExt",
                            Ty.associated,
                            [],
                            "pow",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "halo2_proofs::transcript::ChallengeScalar")
                                  [ Ty.associated; Ty.path "halo2_proofs::plonk::X" ],
                                [],
                                "deref",
                                []
                              |),
                              [ x ]
                            |);
                            M.alloc (|
                              Value.Array
                                [
                                  M.read (|
                                    M.use
                                      (M.SubPointer.get_struct_record_field (|
                                        M.read (| params |),
                                        "halo2_proofs::poly::commitment::ParamsVerifier",
                                        "n"
                                      |))
                                  |);
                                  Value.Integer 0;
                                  Value.Integer 0;
                                  Value.Integer 0
                                ]
                            |)
                          ]
                        |)
                      |) in
                    let blinding_factors :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::plonk::circuit::ConstraintSystem")
                              [ Ty.associated ],
                            "blinding_factors",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| vk |),
                              "halo2_proofs::plonk::VerifyingKey",
                              "cs"
                            |)
                          ]
                        |)
                      |) in
                    let l_evals :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                              [ Ty.associated ],
                            "l_i_range",
                            [
                              Ty.apply
                                (Ty.path "core::ops::range::RangeInclusive")
                                [ Ty.path "i32" ]
                            ]
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| vk |),
                              "halo2_proofs::plonk::VerifyingKey",
                              "domain"
                            |);
                            M.read (|
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "halo2_proofs::transcript::ChallengeScalar")
                                    [ Ty.associated; Ty.path "halo2_proofs::plonk::X" ],
                                  [],
                                  "deref",
                                  []
                                |),
                                [ x ]
                              |)
                            |);
                            M.read (| xn |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeInclusive")
                                  [ Ty.path "i32" ],
                                "new",
                                []
                              |),
                              [
                                UnOp.Panic.neg (|
                                  Integer.I32,
                                  M.rust_cast
                                    (BinOp.Panic.add (|
                                      Integer.Usize,
                                      M.read (| blinding_factors |),
                                      Value.Integer 1
                                    |))
                                |);
                                Value.Integer 0
                              ]
                            |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.match_operator (|
                        M.alloc (|
                          Value.Tuple
                            [
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                    "len",
                                    []
                                  |),
                                  [ l_evals ]
                                |)
                              |);
                              M.alloc (|
                                BinOp.Panic.add (|
                                  Integer.Usize,
                                  Value.Integer 2,
                                  M.read (| blinding_factors |)
                                |)
                              |)
                            ]
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let left_val := M.copy (| γ0_0 |) in
                              let right_val := M.copy (| γ0_1 |) in
                              M.match_operator (|
                                M.alloc (| Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            UnOp.Pure.not
                                              (BinOp.Pure.eq
                                                (M.read (| M.read (| left_val |) |))
                                                (M.read (| M.read (| right_val |) |)))
                                          |)) in
                                      let _ :=
                                        M.is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            let kind :=
                                              M.alloc (|
                                                Value.StructTuple
                                                  "core::panicking::AssertKind::Eq"
                                                  []
                                              |) in
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_function (|
                                                  "core::panicking::assert_failed",
                                                  [ Ty.path "usize"; Ty.path "usize" ]
                                                |),
                                                [
                                                  M.read (| kind |);
                                                  M.read (| left_val |);
                                                  M.read (| right_val |);
                                                  Value.StructTuple "core::option::Option::None" []
                                                ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                ]
                              |)))
                        ]
                      |) in
                    let l_last :=
                      M.copy (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::index::Index",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                            [ Ty.path "usize" ],
                            "index",
                            []
                          |),
                          [ l_evals; Value.Integer 0 ]
                        |)
                      |) in
                    let l_blind :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.associated ],
                            [],
                            "fold",
                            [
                              Ty.associated;
                              Ty.function
                                [
                                  Ty.tuple
                                    [ Ty.associated; Ty.apply (Ty.path "&") [ Ty.associated ] ]
                                ]
                                Ty.associated
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [ Ty.associated ],
                                "iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::index::Index",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        [ Ty.path "usize" ]
                                    ],
                                    "index",
                                    []
                                  |),
                                  [
                                    l_evals;
                                    Value.StructRecord
                                      "core::ops::range::Range"
                                      [
                                        ("start", Value.Integer 1);
                                        ("end_",
                                          BinOp.Panic.add (|
                                            Integer.Usize,
                                            Value.Integer 1,
                                            M.read (| blinding_factors |)
                                          |))
                                      ]
                                  ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              M.get_trait_method (| "ff::Field", Ty.associated, [], "zero", [] |),
                              []
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0; α1 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let acc := M.copy (| γ |) in
                                            M.match_operator (|
                                              M.alloc (| α1 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let eval := M.copy (| γ |) in
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::arith::Add",
                                                        Ty.associated,
                                                        [ Ty.apply (Ty.path "&") [ Ty.associated ]
                                                        ],
                                                        "add",
                                                        []
                                                      |),
                                                      [ M.read (| acc |); M.read (| eval |) ]
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let l_0 :=
                      M.copy (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::index::Index",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                            [ Ty.path "usize" ],
                            "index",
                            []
                          |),
                          [
                            l_evals;
                            BinOp.Panic.add (|
                              Integer.Usize,
                              Value.Integer 1,
                              M.read (| blinding_factors |)
                            |)
                          ]
                        |)
                      |) in
                    let expressions :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::zip::Zip")
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::zip::Zip")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                          [ Ty.associated ]
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                          [ Ty.associated ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                              ],
                            [],
                            "flat_map",
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::sources::empty::Empty")
                                            [ Ty.associated ];
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                                    [ Ty.associated ]
                                                ];
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::map::Map")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Expression")
                                                        [ Ty.associated ]
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Expression")
                                                                [ Ty.associated ]
                                                            ]
                                                        ]
                                                    ]
                                                    Ty.associated
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Gate")
                                                            [ Ty.associated ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "core::iter::adapters::map::Map")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ Ty.associated ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ Ty.associated ]
                                                              ]
                                                          ]
                                                      ]
                                                      Ty.associated
                                                  ])
                                            ]
                                        ];
                                      Ty.associated
                                    ];
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::flatten::FlatMap")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                [ Ty.associated ]
                                            ];
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                                [ Ty.associated ]
                                            ]
                                        ];
                                      Ty.associated;
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                        [ Ty.associated ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::lookup::Argument")
                                                        [ Ty.associated ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                        Ty.associated
                                    ]
                                ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.tuple
                                        [
                                          Ty.tuple
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.associated;
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.associated;
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ];
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                    [ Ty.associated ]
                                                ]
                                            ];
                                          Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                    [ Ty.associated ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                    ]
                                ]
                                (Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::chain::Chain")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::chain::Chain")
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::sources::empty::Empty")
                                              [ Ty.associated ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::flatten::FlatMap")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                                      [ Ty.associated ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::map::Map")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ Ty.associated ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ Ty.associated ]
                                                              ]
                                                          ]
                                                      ]
                                                      Ty.associated
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Gate")
                                                              [ Ty.associated ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "core::iter::adapters::map::Map")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ Ty.associated ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ Ty.associated ]
                                                                ]
                                                            ]
                                                        ]
                                                        Ty.associated
                                                    ])
                                              ]
                                          ];
                                        Ty.associated
                                      ];
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::flatten::FlatMap")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                  [ Ty.associated ]
                                              ];
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                                  [ Ty.associated ]
                                              ]
                                          ];
                                        Ty.associated;
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                          [ Ty.associated ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::lookup::Argument")
                                                          [ Ty.associated ]
                                                      ]
                                                  ]
                                              ]
                                          ]
                                          Ty.associated
                                      ]
                                  ])
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::zip::Zip")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                          [ Ty.associated ]
                                      ]
                                  ],
                                [],
                                "zip",
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                            [ Ty.associated ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                                          ]
                                      ],
                                    [],
                                    "zip",
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                            [ Ty.associated ]
                                        ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        [],
                                        "zip",
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                                            ]
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            "iter",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [ advice_evals ]
                                            |)
                                          ]
                                        |);
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            "iter",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [ instance_evals ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                              [ Ty.associated ]
                                          ],
                                        "iter",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                  [ Ty.associated ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            "deref",
                                            []
                                          |),
                                          [ permutations_evaluated ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                              [ Ty.associated ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    "iter",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                  [ Ty.associated ];
                                                Ty.path "alloc::alloc::Global"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [ lookups_evaluated ]
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                            let γ2_0 :=
                                              M.SubPointer.get_tuple_field (| γ1_0, 0 |) in
                                            let γ2_1 :=
                                              M.SubPointer.get_tuple_field (| γ1_0, 1 |) in
                                            let advice_evals := M.copy (| γ2_0 |) in
                                            let instance_evals := M.copy (| γ2_1 |) in
                                            let permutation := M.copy (| γ1_1 |) in
                                            let lookups := M.copy (| γ0_1 |) in
                                            M.read (|
                                              let fixed_evals := M.alloc (| fixed_evals |) in
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::chain::Chain")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::chain::Chain")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::sources::empty::Empty")
                                                              [ Ty.associated ];
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::flatten::FlatMap")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Gate")
                                                                      [ Ty.associated ]
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::map::Map")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ Ty.associated ]
                                                                      ];
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ Ty.associated ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                      Ty.associated
                                                                  ];
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Gate")
                                                                              [ Ty.associated ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  (Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::map::Map")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ Ty.associated ]
                                                                        ];
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ Ty.associated
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                        Ty.associated
                                                                    ])
                                                              ]
                                                          ];
                                                        Ty.associated
                                                      ],
                                                    [],
                                                    "chain",
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::flatten::FlatMap")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::zip::Zip")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                    [ Ty.associated ]
                                                                ];
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::lookup::Argument")
                                                                    [ Ty.associated ]
                                                                ]
                                                            ];
                                                          Ty.associated;
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                            [ Ty.associated ]
                                                                        ];
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::lookup::Argument")
                                                                            [ Ty.associated ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                            Ty.associated
                                                        ]
                                                    ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::chain::Chain")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::sources::empty::Empty")
                                                              [ Ty.associated ];
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::flatten::FlatMap")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Gate")
                                                                      [ Ty.associated ]
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::map::Map")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                          [ Ty.associated ]
                                                                      ];
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                                  [ Ty.associated ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                      Ty.associated
                                                                  ];
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Gate")
                                                                              [ Ty.associated ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  (Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::map::Map")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ Ty.associated ]
                                                                        ];
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ Ty.associated
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                        Ty.associated
                                                                    ])
                                                              ]
                                                          ],
                                                        [],
                                                        "chain",
                                                        [ Ty.associated ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::sources::empty::Empty")
                                                              [ Ty.associated ],
                                                            [],
                                                            "chain",
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::flatten::FlatMap")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Gate")
                                                                        [ Ty.associated ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::map::Map")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ Ty.associated ]
                                                                        ];
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ Ty.associated
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                        Ty.associated
                                                                    ];
                                                                  Ty.function
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Gate")
                                                                                [ Ty.associated ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                    (Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::map::Map")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ Ty.associated ]
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [
                                                                                        Ty.associated
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          Ty.associated
                                                                      ])
                                                                ]
                                                            ]
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_function (|
                                                                "core::iter::sources::empty::empty",
                                                                [ Ty.associated ]
                                                              |),
                                                              []
                                                            |);
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Gate")
                                                                      [ Ty.associated ]
                                                                  ],
                                                                [],
                                                                "flat_map",
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::map::Map")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Expression")
                                                                            [ Ty.associated ]
                                                                        ];
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                    [ Ty.associated
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                        Ty.associated
                                                                    ];
                                                                  Ty.function
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Gate")
                                                                                [ Ty.associated ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                    (Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::map::Map")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                              [ Ty.associated ]
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                                      [
                                                                                        Ty.associated
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          Ty.associated
                                                                      ])
                                                                ]
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Gate")
                                                                          [ Ty.associated ]
                                                                      ],
                                                                    "iter",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::deref::Deref",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Gate")
                                                                              [ Ty.associated ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [],
                                                                        "deref",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| vk |),
                                                                            "halo2_proofs::plonk::VerifyingKey",
                                                                            "cs"
                                                                          |),
                                                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                          "gates"
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.closure
                                                                  (fun γ =>
                                                                    ltac:(M.monadic
                                                                      match γ with
                                                                      | [ α0 ] =>
                                                                        M.match_operator (|
                                                                          M.alloc (| α0 |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let gate :=
                                                                                  M.copy (| γ |) in
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::iter::traits::iterator::Iterator",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::slice::iter::Iter")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                          [
                                                                                            Ty.associated
                                                                                          ]
                                                                                      ],
                                                                                    [],
                                                                                    "map",
                                                                                    [
                                                                                      Ty.associated;
                                                                                      Ty.function
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                                                    [
                                                                                                      Ty.associated
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                        Ty.associated
                                                                                    ]
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "slice")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Expression")
                                                                                              [
                                                                                                Ty.associated
                                                                                              ]
                                                                                          ],
                                                                                        "iter",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Gate")
                                                                                              [
                                                                                                Ty.associated
                                                                                              ],
                                                                                            "polynomials",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              gate
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |);
                                                                                    M.closure
                                                                                      (fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          match γ
                                                                                          with
                                                                                          | [ α0
                                                                                              ] =>
                                                                                            M.match_operator (|
                                                                                              M.alloc (|
                                                                                                α0
                                                                                              |),
                                                                                              [
                                                                                                fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    (let
                                                                                                          poly :=
                                                                                                      M.copy (|
                                                                                                        γ
                                                                                                      |) in
                                                                                                    M.call_closure (|
                                                                                                      M.get_associated_function (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "halo2_proofs::plonk::circuit::Expression")
                                                                                                          [
                                                                                                            Ty.associated
                                                                                                          ],
                                                                                                        "evaluate",
                                                                                                        [
                                                                                                          Ty.associated;
                                                                                                          Ty.function
                                                                                                            [
                                                                                                              Ty.tuple
                                                                                                                [
                                                                                                                  Ty.associated
                                                                                                                ]
                                                                                                            ]
                                                                                                            Ty.associated;
                                                                                                          Ty.function
                                                                                                            [
                                                                                                              Ty.tuple
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "halo2_proofs::plonk::circuit::Selector"
                                                                                                                ]
                                                                                                            ]
                                                                                                            Ty.associated;
                                                                                                          Ty.function
                                                                                                            [
                                                                                                              Ty.tuple
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "usize";
                                                                                                                  Ty.path
                                                                                                                    "usize";
                                                                                                                  Ty.path
                                                                                                                    "halo2_proofs::poly::Rotation"
                                                                                                                ]
                                                                                                            ]
                                                                                                            Ty.associated;
                                                                                                          Ty.function
                                                                                                            [
                                                                                                              Ty.tuple
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "usize";
                                                                                                                  Ty.path
                                                                                                                    "usize";
                                                                                                                  Ty.path
                                                                                                                    "halo2_proofs::poly::Rotation"
                                                                                                                ]
                                                                                                            ]
                                                                                                            Ty.associated;
                                                                                                          Ty.function
                                                                                                            [
                                                                                                              Ty.tuple
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "usize";
                                                                                                                  Ty.path
                                                                                                                    "usize";
                                                                                                                  Ty.path
                                                                                                                    "halo2_proofs::poly::Rotation"
                                                                                                                ]
                                                                                                            ]
                                                                                                            Ty.associated;
                                                                                                          Ty.function
                                                                                                            [
                                                                                                              Ty.tuple
                                                                                                                [
                                                                                                                  Ty.associated
                                                                                                                ]
                                                                                                            ]
                                                                                                            Ty.associated;
                                                                                                          Ty.function
                                                                                                            [
                                                                                                              Ty.tuple
                                                                                                                [
                                                                                                                  Ty.associated;
                                                                                                                  Ty.associated
                                                                                                                ]
                                                                                                            ]
                                                                                                            Ty.associated;
                                                                                                          Ty.function
                                                                                                            [
                                                                                                              Ty.tuple
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "&")
                                                                                                                    [
                                                                                                                      Ty.dyn
                                                                                                                        [
                                                                                                                          ("core::ops::function::Fn::Trait",
                                                                                                                            [])
                                                                                                                        ]
                                                                                                                    ];
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "&")
                                                                                                                    [
                                                                                                                      Ty.dyn
                                                                                                                        [
                                                                                                                          ("core::ops::function::Fn::Trait",
                                                                                                                            [])
                                                                                                                        ]
                                                                                                                    ]
                                                                                                                ]
                                                                                                            ]
                                                                                                            Ty.associated;
                                                                                                          Ty.function
                                                                                                            [
                                                                                                              Ty.tuple
                                                                                                                [
                                                                                                                  Ty.associated;
                                                                                                                  Ty.associated
                                                                                                                ]
                                                                                                            ]
                                                                                                            Ty.associated
                                                                                                        ]
                                                                                                      |),
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          poly
                                                                                                        |);
                                                                                                        M.alloc (|
                                                                                                          M.closure
                                                                                                            (fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                match
                                                                                                                  γ
                                                                                                                with
                                                                                                                | [
                                                                                                                      α0
                                                                                                                    ] =>
                                                                                                                  M.match_operator (|
                                                                                                                    M.alloc (|
                                                                                                                      α0
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (let
                                                                                                                                scalar :=
                                                                                                                            M.copy (|
                                                                                                                              γ
                                                                                                                            |) in
                                                                                                                          M.read (|
                                                                                                                            scalar
                                                                                                                          |)))
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                | _ =>
                                                                                                                  M.impossible (||)
                                                                                                                end))
                                                                                                        |);
                                                                                                        M.alloc (|
                                                                                                          M.closure
                                                                                                            (fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                match
                                                                                                                  γ
                                                                                                                with
                                                                                                                | [
                                                                                                                      α0
                                                                                                                    ] =>
                                                                                                                  M.match_operator (|
                                                                                                                    M.alloc (|
                                                                                                                      α0
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (M.never_to_any (|
                                                                                                                            M.call_closure (|
                                                                                                                              M.get_function (|
                                                                                                                                "std::panicking::begin_panic",
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "&")
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "str"
                                                                                                                                    ]
                                                                                                                                ]
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.read (|
                                                                                                                                  Value.String
                                                                                                                                    "virtual selectors are removed during optimization"
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |)
                                                                                                                          |)))
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                | _ =>
                                                                                                                  M.impossible (||)
                                                                                                                end))
                                                                                                        |);
                                                                                                        M.alloc (|
                                                                                                          M.closure
                                                                                                            (fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                match
                                                                                                                  γ
                                                                                                                with
                                                                                                                | [
                                                                                                                      α0;
                                                                                                                      α1;
                                                                                                                      α2
                                                                                                                    ] =>
                                                                                                                  M.match_operator (|
                                                                                                                    M.alloc (|
                                                                                                                      α0
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (let
                                                                                                                                index :=
                                                                                                                            M.copy (|
                                                                                                                              γ
                                                                                                                            |) in
                                                                                                                          M.match_operator (|
                                                                                                                            M.alloc (|
                                                                                                                              α1
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              fun
                                                                                                                                  γ =>
                                                                                                                                ltac:(M.monadic
                                                                                                                                  (M.match_operator (|
                                                                                                                                    M.alloc (|
                                                                                                                                      α2
                                                                                                                                    |),
                                                                                                                                    [
                                                                                                                                      fun
                                                                                                                                          γ =>
                                                                                                                                        ltac:(M.monadic
                                                                                                                                          (M.read (|
                                                                                                                                            M.call_closure (|
                                                                                                                                              M.get_trait_method (|
                                                                                                                                                "core::ops::index::Index",
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                                  [
                                                                                                                                                    Ty.associated;
                                                                                                                                                    Ty.path
                                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                                  ],
                                                                                                                                                [
                                                                                                                                                  Ty.path
                                                                                                                                                    "usize"
                                                                                                                                                ],
                                                                                                                                                "index",
                                                                                                                                                []
                                                                                                                                              |),
                                                                                                                                              [
                                                                                                                                                M.read (|
                                                                                                                                                  fixed_evals
                                                                                                                                                |);
                                                                                                                                                M.read (|
                                                                                                                                                  index
                                                                                                                                                |)
                                                                                                                                              ]
                                                                                                                                            |)
                                                                                                                                          |)))
                                                                                                                                    ]
                                                                                                                                  |)))
                                                                                                                            ]
                                                                                                                          |)))
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                | _ =>
                                                                                                                  M.impossible (||)
                                                                                                                end))
                                                                                                        |);
                                                                                                        M.alloc (|
                                                                                                          M.closure
                                                                                                            (fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                match
                                                                                                                  γ
                                                                                                                with
                                                                                                                | [
                                                                                                                      α0;
                                                                                                                      α1;
                                                                                                                      α2
                                                                                                                    ] =>
                                                                                                                  M.match_operator (|
                                                                                                                    M.alloc (|
                                                                                                                      α0
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (let
                                                                                                                                index :=
                                                                                                                            M.copy (|
                                                                                                                              γ
                                                                                                                            |) in
                                                                                                                          M.match_operator (|
                                                                                                                            M.alloc (|
                                                                                                                              α1
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              fun
                                                                                                                                  γ =>
                                                                                                                                ltac:(M.monadic
                                                                                                                                  (M.match_operator (|
                                                                                                                                    M.alloc (|
                                                                                                                                      α2
                                                                                                                                    |),
                                                                                                                                    [
                                                                                                                                      fun
                                                                                                                                          γ =>
                                                                                                                                        ltac:(M.monadic
                                                                                                                                          (M.read (|
                                                                                                                                            M.call_closure (|
                                                                                                                                              M.get_trait_method (|
                                                                                                                                                "core::ops::index::Index",
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                                  [
                                                                                                                                                    Ty.associated;
                                                                                                                                                    Ty.path
                                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                                  ],
                                                                                                                                                [
                                                                                                                                                  Ty.path
                                                                                                                                                    "usize"
                                                                                                                                                ],
                                                                                                                                                "index",
                                                                                                                                                []
                                                                                                                                              |),
                                                                                                                                              [
                                                                                                                                                M.read (|
                                                                                                                                                  advice_evals
                                                                                                                                                |);
                                                                                                                                                M.read (|
                                                                                                                                                  index
                                                                                                                                                |)
                                                                                                                                              ]
                                                                                                                                            |)
                                                                                                                                          |)))
                                                                                                                                    ]
                                                                                                                                  |)))
                                                                                                                            ]
                                                                                                                          |)))
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                | _ =>
                                                                                                                  M.impossible (||)
                                                                                                                end))
                                                                                                        |);
                                                                                                        M.alloc (|
                                                                                                          M.closure
                                                                                                            (fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                match
                                                                                                                  γ
                                                                                                                with
                                                                                                                | [
                                                                                                                      α0;
                                                                                                                      α1;
                                                                                                                      α2
                                                                                                                    ] =>
                                                                                                                  M.match_operator (|
                                                                                                                    M.alloc (|
                                                                                                                      α0
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (let
                                                                                                                                index :=
                                                                                                                            M.copy (|
                                                                                                                              γ
                                                                                                                            |) in
                                                                                                                          M.match_operator (|
                                                                                                                            M.alloc (|
                                                                                                                              α1
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              fun
                                                                                                                                  γ =>
                                                                                                                                ltac:(M.monadic
                                                                                                                                  (M.match_operator (|
                                                                                                                                    M.alloc (|
                                                                                                                                      α2
                                                                                                                                    |),
                                                                                                                                    [
                                                                                                                                      fun
                                                                                                                                          γ =>
                                                                                                                                        ltac:(M.monadic
                                                                                                                                          (M.read (|
                                                                                                                                            M.call_closure (|
                                                                                                                                              M.get_trait_method (|
                                                                                                                                                "core::ops::index::Index",
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                                  [
                                                                                                                                                    Ty.associated;
                                                                                                                                                    Ty.path
                                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                                  ],
                                                                                                                                                [
                                                                                                                                                  Ty.path
                                                                                                                                                    "usize"
                                                                                                                                                ],
                                                                                                                                                "index",
                                                                                                                                                []
                                                                                                                                              |),
                                                                                                                                              [
                                                                                                                                                M.read (|
                                                                                                                                                  instance_evals
                                                                                                                                                |);
                                                                                                                                                M.read (|
                                                                                                                                                  index
                                                                                                                                                |)
                                                                                                                                              ]
                                                                                                                                            |)
                                                                                                                                          |)))
                                                                                                                                    ]
                                                                                                                                  |)))
                                                                                                                            ]
                                                                                                                          |)))
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                | _ =>
                                                                                                                  M.impossible (||)
                                                                                                                end))
                                                                                                        |);
                                                                                                        M.alloc (|
                                                                                                          M.closure
                                                                                                            (fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                match
                                                                                                                  γ
                                                                                                                with
                                                                                                                | [
                                                                                                                      α0
                                                                                                                    ] =>
                                                                                                                  M.match_operator (|
                                                                                                                    M.alloc (|
                                                                                                                      α0
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (let
                                                                                                                                a :=
                                                                                                                            M.copy (|
                                                                                                                              γ
                                                                                                                            |) in
                                                                                                                          M.call_closure (|
                                                                                                                            M.get_trait_method (|
                                                                                                                              "core::ops::arith::Neg",
                                                                                                                              Ty.associated,
                                                                                                                              [],
                                                                                                                              "neg",
                                                                                                                              []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              M.read (|
                                                                                                                                a
                                                                                                                              |)
                                                                                                                            ]
                                                                                                                          |)))
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                | _ =>
                                                                                                                  M.impossible (||)
                                                                                                                end))
                                                                                                        |);
                                                                                                        M.alloc (|
                                                                                                          M.closure
                                                                                                            (fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                match
                                                                                                                  γ
                                                                                                                with
                                                                                                                | [
                                                                                                                      α0;
                                                                                                                      α1
                                                                                                                    ] =>
                                                                                                                  M.match_operator (|
                                                                                                                    M.alloc (|
                                                                                                                      α0
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (let
                                                                                                                                a :=
                                                                                                                            M.copy (|
                                                                                                                              γ
                                                                                                                            |) in
                                                                                                                          M.match_operator (|
                                                                                                                            M.alloc (|
                                                                                                                              α1
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              fun
                                                                                                                                  γ =>
                                                                                                                                ltac:(M.monadic
                                                                                                                                  (let
                                                                                                                                        b :=
                                                                                                                                    M.copy (|
                                                                                                                                      γ
                                                                                                                                    |) in
                                                                                                                                  M.call_closure (|
                                                                                                                                    M.get_trait_method (|
                                                                                                                                      "core::ops::arith::Add",
                                                                                                                                      Ty.associated,
                                                                                                                                      [
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "&")
                                                                                                                                          [
                                                                                                                                            Ty.associated
                                                                                                                                          ]
                                                                                                                                      ],
                                                                                                                                      "add",
                                                                                                                                      []
                                                                                                                                    |),
                                                                                                                                    [
                                                                                                                                      M.read (|
                                                                                                                                        a
                                                                                                                                      |);
                                                                                                                                      b
                                                                                                                                    ]
                                                                                                                                  |)))
                                                                                                                            ]
                                                                                                                          |)))
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                | _ =>
                                                                                                                  M.impossible (||)
                                                                                                                end))
                                                                                                        |);
                                                                                                        M.alloc (|
                                                                                                          M.closure
                                                                                                            (fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                match
                                                                                                                  γ
                                                                                                                with
                                                                                                                | [
                                                                                                                      α0;
                                                                                                                      α1
                                                                                                                    ] =>
                                                                                                                  M.match_operator (|
                                                                                                                    M.alloc (|
                                                                                                                      α0
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (let
                                                                                                                                a :=
                                                                                                                            M.copy (|
                                                                                                                              γ
                                                                                                                            |) in
                                                                                                                          M.match_operator (|
                                                                                                                            M.alloc (|
                                                                                                                              α1
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              fun
                                                                                                                                  γ =>
                                                                                                                                ltac:(M.monadic
                                                                                                                                  (let
                                                                                                                                        b :=
                                                                                                                                    M.copy (|
                                                                                                                                      γ
                                                                                                                                    |) in
                                                                                                                                  M.call_closure (|
                                                                                                                                    M.get_trait_method (|
                                                                                                                                      "core::ops::arith::Mul",
                                                                                                                                      Ty.associated,
                                                                                                                                      [
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "&")
                                                                                                                                          [
                                                                                                                                            Ty.associated
                                                                                                                                          ]
                                                                                                                                      ],
                                                                                                                                      "mul",
                                                                                                                                      []
                                                                                                                                    |),
                                                                                                                                    [
                                                                                                                                      M.call_closure (|
                                                                                                                                        M.get_trait_method (|
                                                                                                                                          "core::ops::function::Fn",
                                                                                                                                          Ty.dyn
                                                                                                                                            [
                                                                                                                                              ("core::ops::function::Fn::Trait",
                                                                                                                                                [])
                                                                                                                                            ],
                                                                                                                                          [
                                                                                                                                            Ty.tuple
                                                                                                                                              []
                                                                                                                                          ],
                                                                                                                                          "call",
                                                                                                                                          []
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          M.read (|
                                                                                                                                            a
                                                                                                                                          |);
                                                                                                                                          Value.Tuple
                                                                                                                                            []
                                                                                                                                        ]
                                                                                                                                      |);
                                                                                                                                      M.alloc (|
                                                                                                                                        M.call_closure (|
                                                                                                                                          M.get_trait_method (|
                                                                                                                                            "core::ops::function::Fn",
                                                                                                                                            Ty.dyn
                                                                                                                                              [
                                                                                                                                                ("core::ops::function::Fn::Trait",
                                                                                                                                                  [])
                                                                                                                                              ],
                                                                                                                                            [
                                                                                                                                              Ty.tuple
                                                                                                                                                []
                                                                                                                                            ],
                                                                                                                                            "call",
                                                                                                                                            []
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            M.read (|
                                                                                                                                              b
                                                                                                                                            |);
                                                                                                                                            Value.Tuple
                                                                                                                                              []
                                                                                                                                          ]
                                                                                                                                        |)
                                                                                                                                      |)
                                                                                                                                    ]
                                                                                                                                  |)))
                                                                                                                            ]
                                                                                                                          |)))
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                | _ =>
                                                                                                                  M.impossible (||)
                                                                                                                end))
                                                                                                        |);
                                                                                                        M.alloc (|
                                                                                                          M.closure
                                                                                                            (fun
                                                                                                                γ =>
                                                                                                              ltac:(M.monadic
                                                                                                                match
                                                                                                                  γ
                                                                                                                with
                                                                                                                | [
                                                                                                                      α0;
                                                                                                                      α1
                                                                                                                    ] =>
                                                                                                                  M.match_operator (|
                                                                                                                    M.alloc (|
                                                                                                                      α0
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (let
                                                                                                                                a :=
                                                                                                                            M.copy (|
                                                                                                                              γ
                                                                                                                            |) in
                                                                                                                          M.match_operator (|
                                                                                                                            M.alloc (|
                                                                                                                              α1
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              fun
                                                                                                                                  γ =>
                                                                                                                                ltac:(M.monadic
                                                                                                                                  (let
                                                                                                                                        scalar :=
                                                                                                                                    M.copy (|
                                                                                                                                      γ
                                                                                                                                    |) in
                                                                                                                                  M.call_closure (|
                                                                                                                                    M.get_trait_method (|
                                                                                                                                      "core::ops::arith::Mul",
                                                                                                                                      Ty.associated,
                                                                                                                                      [
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "&")
                                                                                                                                          [
                                                                                                                                            Ty.associated
                                                                                                                                          ]
                                                                                                                                      ],
                                                                                                                                      "mul",
                                                                                                                                      []
                                                                                                                                    |),
                                                                                                                                    [
                                                                                                                                      M.read (|
                                                                                                                                        a
                                                                                                                                      |);
                                                                                                                                      scalar
                                                                                                                                    ]
                                                                                                                                  |)))
                                                                                                                            ]
                                                                                                                          |)))
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                | _ =>
                                                                                                                  M.impossible (||)
                                                                                                                end))
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)))
                                                                                              ]
                                                                                            |)
                                                                                          | _ =>
                                                                                            M.impossible (||)
                                                                                          end))
                                                                                  ]
                                                                                |)))
                                                                          ]
                                                                        |)
                                                                      | _ => M.impossible (||)
                                                                      end))
                                                              ]
                                                            |)
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                              [ Ty.associated ],
                                                            "expressions",
                                                            []
                                                          |),
                                                          [
                                                            M.read (| permutation |);
                                                            M.read (| vk |);
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| vk |),
                                                                "halo2_proofs::plonk::VerifyingKey",
                                                                "cs"
                                                              |),
                                                              "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                              "permutation"
                                                            |);
                                                            permutations_common;
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::deref::Deref",
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [],
                                                                "deref",
                                                                []
                                                              |),
                                                              [ M.read (| advice_evals |) ]
                                                            |);
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::deref::Deref",
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [],
                                                                "deref",
                                                                []
                                                              |),
                                                              [ M.read (| fixed_evals |) ]
                                                            |);
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::deref::Deref",
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [],
                                                                "deref",
                                                                []
                                                              |),
                                                              [ M.read (| instance_evals |) ]
                                                            |);
                                                            M.read (| l_0 |);
                                                            M.read (| l_last |);
                                                            M.read (| l_blind |);
                                                            M.read (| beta |);
                                                            M.read (| gamma |);
                                                            M.read (| x |)
                                                          ]
                                                        |)
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::collect::IntoIterator",
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::flatten::FlatMap")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::zip::Zip")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                      [ Ty.associated ]
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::lookup::Argument")
                                                                      [ Ty.associated ]
                                                                  ]
                                                              ];
                                                            Ty.associated;
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                              [ Ty.associated ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::lookup::Argument")
                                                                              [ Ty.associated ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              Ty.associated
                                                          ],
                                                        [],
                                                        "into_iter",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::zip::Zip")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                      [ Ty.associated ]
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::lookup::Argument")
                                                                      [ Ty.associated ]
                                                                  ]
                                                              ],
                                                            [],
                                                            "flat_map",
                                                            [
                                                              Ty.associated;
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                                [ Ty.associated ]
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::lookup::Argument")
                                                                                [ Ty.associated ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                                Ty.associated
                                                            ]
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                      [ Ty.associated ]
                                                                  ],
                                                                [],
                                                                "zip",
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::lookup::Argument")
                                                                        [ Ty.associated ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                          [ Ty.associated ]
                                                                      ],
                                                                    "iter",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::deref::Deref",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                              [ Ty.associated ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [],
                                                                        "deref",
                                                                        []
                                                                      |),
                                                                      [ M.read (| lookups |) ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::lookup::Argument")
                                                                          [ Ty.associated ]
                                                                      ],
                                                                    "iter",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::deref::Deref",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::lookup::Argument")
                                                                              [ Ty.associated ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [],
                                                                        "deref",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (| vk |),
                                                                            "halo2_proofs::plonk::VerifyingKey",
                                                                            "cs"
                                                                          |),
                                                                          "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                          "lookups"
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |);
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    M.match_operator (|
                                                                      M.alloc (| α0 |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                0
                                                                              |) in
                                                                            let γ0_1 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                1
                                                                              |) in
                                                                            let p :=
                                                                              M.copy (| γ0_0 |) in
                                                                            let argument :=
                                                                              M.copy (| γ0_1 |) in
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                                  [ Ty.associated ],
                                                                                "expressions",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| p |);
                                                                                M.read (| l_0 |);
                                                                                M.read (| l_last |);
                                                                                M.read (|
                                                                                  l_blind
                                                                                |);
                                                                                M.read (|
                                                                                  argument
                                                                                |);
                                                                                M.read (| theta |);
                                                                                M.read (| beta |);
                                                                                M.read (| gamma |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::deref::Deref",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      [
                                                                                        Ty.associated;
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    [],
                                                                                    "deref",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      advice_evals
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::deref::Deref",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      [
                                                                                        Ty.associated;
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    [],
                                                                                    "deref",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      fixed_evals
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::deref::Deref",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      [
                                                                                        Ty.associated;
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    [],
                                                                                    "deref",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      instance_evals
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |)
                                                                  | _ => M.impossible (||)
                                                                  end))
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "halo2_proofs::plonk::vanishing::verifier::PartiallyEvaluated")
                            [ Ty.associated ],
                          "verify",
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::flatten::FlatMap")
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::zip::Zip")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                                              ];
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                                              ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                              [ Ty.associated ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                              [ Ty.associated ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::chain::Chain")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::chain::Chain")
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::sources::empty::Empty")
                                              [ Ty.associated ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::flatten::FlatMap")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::plonk::circuit::Gate")
                                                      [ Ty.associated ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::map::Map")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Expression")
                                                          [ Ty.associated ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Expression")
                                                                  [ Ty.associated ]
                                                              ]
                                                          ]
                                                      ]
                                                      Ty.associated
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Gate")
                                                              [ Ty.associated ]
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.apply
                                                    (Ty.path "core::iter::adapters::map::Map")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ Ty.associated ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ Ty.associated ]
                                                                ]
                                                            ]
                                                        ]
                                                        Ty.associated
                                                    ])
                                              ]
                                          ];
                                        Ty.associated
                                      ];
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::flatten::FlatMap")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                  [ Ty.associated ]
                                              ];
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::plonk::lookup::Argument")
                                                  [ Ty.associated ]
                                              ]
                                          ];
                                        Ty.associated;
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                          [ Ty.associated ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::lookup::Argument")
                                                          [ Ty.associated ]
                                                      ]
                                                  ]
                                              ]
                                          ]
                                          Ty.associated
                                      ]
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                      [ Ty.associated ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path "&")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                      [ Ty.associated ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                          ]
                                      ]
                                  ]
                                  (Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::chain::Chain")
                                            [
                                              Ty.apply
                                                (Ty.path "core::iter::sources::empty::Empty")
                                                [ Ty.associated ];
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::flatten::FlatMap")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::plonk::circuit::Gate")
                                                        [ Ty.associated ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::map::Map")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Expression")
                                                            [ Ty.associated ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Expression")
                                                                    [ Ty.associated ]
                                                                ]
                                                            ]
                                                        ]
                                                        Ty.associated
                                                    ];
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::plonk::circuit::Gate")
                                                                [ Ty.associated ]
                                                            ]
                                                        ]
                                                    ]
                                                    (Ty.apply
                                                      (Ty.path "core::iter::adapters::map::Map")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::circuit::Expression")
                                                              [ Ty.associated ]
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Expression")
                                                                      [ Ty.associated ]
                                                                  ]
                                                              ]
                                                          ]
                                                          Ty.associated
                                                      ])
                                                ]
                                            ];
                                          Ty.associated
                                        ];
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::flatten::FlatMap")
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::zip::Zip")
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                    [ Ty.associated ]
                                                ];
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::lookup::Argument")
                                                    [ Ty.associated ]
                                                ]
                                            ];
                                          Ty.associated;
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                            [ Ty.associated ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::lookup::Argument")
                                                            [ Ty.associated ]
                                                        ]
                                                    ]
                                                ]
                                            ]
                                            Ty.associated
                                        ]
                                    ])
                              ]
                          ]
                        |),
                        [
                          M.read (| vanishing |);
                          M.read (| expressions |);
                          M.read (| y |);
                          M.read (| xn |)
                        ]
                      |)
                    |)
                  |) in
                let queries :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::zip::Zip")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                  [ Ty.associated ]
                                              ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                  [ Ty.associated ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::chain::Chain")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::chain::Chain")
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::chain::Chain")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::chain::Chain")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::sources::empty::Empty")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::multiopen::VerifierQuery")
                                                          [ Ty.associated ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::map::Map")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::enumerate::Enumerate")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::Instance"
                                                                      ];
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Rotation"
                                                                  ]
                                                              ]
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                              [
                                                                                Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Instance"
                                                                              ];
                                                                            Ty.path
                                                                              "halo2_proofs::poly::Rotation"
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                            [ Ty.associated ])
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::map::Map")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::enumerate::Enumerate")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::Advice"
                                                                  ];
                                                                Ty.path
                                                                  "halo2_proofs::poly::Rotation"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path "usize";
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Column")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::circuit::Advice"
                                                                          ];
                                                                        Ty.path
                                                                          "halo2_proofs::poly::Rotation"
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::poly::multiopen::VerifierQuery")
                                                        [ Ty.associated ])
                                                  ]
                                              ];
                                            Ty.associated
                                          ];
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::flatten::FlatMap")
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                  [ Ty.associated ]
                                              ];
                                            Ty.associated;
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                          [ Ty.associated ]
                                                      ]
                                                  ]
                                              ]
                                              Ty.associated
                                          ]
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.associated;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.associated;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ]
                                                              ];
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                          [ Ty.associated ]
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                          [ Ty.associated ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::chain::Chain")
                                            [
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::chain::Chain")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::chain::Chain")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::sources::empty::Empty")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                            [ Ty.associated ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::map::Map")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::enumerate::Enumerate")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::Instance"
                                                                        ];
                                                                      Ty.path
                                                                        "halo2_proofs::poly::Rotation"
                                                                    ]
                                                                ]
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                                [
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Instance"
                                                                                ];
                                                                              Ty.path
                                                                                "halo2_proofs::poly::Rotation"
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                                              [ Ty.associated ])
                                                        ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::map::Map")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::Advice"
                                                                    ];
                                                                  Ty.path
                                                                    "halo2_proofs::poly::Rotation"
                                                                ]
                                                            ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                            [
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::circuit::Advice"
                                                                            ];
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation"
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::multiopen::VerifierQuery")
                                                          [ Ty.associated ])
                                                    ]
                                                ];
                                              Ty.associated
                                            ];
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                    [ Ty.associated ]
                                                ];
                                              Ty.associated;
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                            [ Ty.associated ]
                                                        ]
                                                    ]
                                                ]
                                                Ty.associated
                                            ]
                                        ])
                                  ];
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                  [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ];
                                                Ty.path "halo2_proofs::poly::Rotation"
                                              ]
                                          ]
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "usize";
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Column")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::Fixed"
                                                          ];
                                                        Ty.path "halo2_proofs::poly::Rotation"
                                                      ]
                                                  ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                        [ Ty.associated ])
                                  ]
                              ];
                            Ty.associated
                          ],
                        [],
                        "chain",
                        [ Ty.associated ]
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::zip::Zip")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                  [ Ty.associated ]
                                              ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                  [ Ty.associated ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::chain::Chain")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::chain::Chain")
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::chain::Chain")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::chain::Chain")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::sources::empty::Empty")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::multiopen::VerifierQuery")
                                                          [ Ty.associated ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::map::Map")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::enumerate::Enumerate")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::Instance"
                                                                      ];
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Rotation"
                                                                  ]
                                                              ]
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                              [
                                                                                Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Instance"
                                                                              ];
                                                                            Ty.path
                                                                              "halo2_proofs::poly::Rotation"
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                            [ Ty.associated ])
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::map::Map")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::enumerate::Enumerate")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::Advice"
                                                                  ];
                                                                Ty.path
                                                                  "halo2_proofs::poly::Rotation"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path "usize";
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Column")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::circuit::Advice"
                                                                          ];
                                                                        Ty.path
                                                                          "halo2_proofs::poly::Rotation"
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::poly::multiopen::VerifierQuery")
                                                        [ Ty.associated ])
                                                  ]
                                              ];
                                            Ty.associated
                                          ];
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::flatten::FlatMap")
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                  [ Ty.associated ]
                                              ];
                                            Ty.associated;
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                          [ Ty.associated ]
                                                      ]
                                                  ]
                                              ]
                                              Ty.associated
                                          ]
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.associated;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.associated;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ]
                                                              ];
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                          [ Ty.associated ]
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                          [ Ty.associated ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::chain::Chain")
                                            [
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::chain::Chain")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::chain::Chain")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::sources::empty::Empty")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                            [ Ty.associated ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::map::Map")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::enumerate::Enumerate")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::Instance"
                                                                        ];
                                                                      Ty.path
                                                                        "halo2_proofs::poly::Rotation"
                                                                    ]
                                                                ]
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                                [
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Instance"
                                                                                ];
                                                                              Ty.path
                                                                                "halo2_proofs::poly::Rotation"
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                                              [ Ty.associated ])
                                                        ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::map::Map")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::Advice"
                                                                    ];
                                                                  Ty.path
                                                                    "halo2_proofs::poly::Rotation"
                                                                ]
                                                            ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                            [
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::circuit::Advice"
                                                                            ];
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation"
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::multiopen::VerifierQuery")
                                                          [ Ty.associated ])
                                                    ]
                                                ];
                                              Ty.associated
                                            ];
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                    [ Ty.associated ]
                                                ];
                                              Ty.associated;
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                            [ Ty.associated ]
                                                        ]
                                                    ]
                                                ]
                                                Ty.associated
                                            ]
                                        ])
                                  ];
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                  [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ];
                                                Ty.path "halo2_proofs::poly::Rotation"
                                              ]
                                          ]
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "usize";
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Column")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::Fixed"
                                                          ];
                                                        Ty.path "halo2_proofs::poly::Rotation"
                                                      ]
                                                  ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                        [ Ty.associated ])
                                  ]
                              ],
                            [],
                            "chain",
                            [ Ty.associated ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::zip::Zip")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                  [ Ty.associated ]
                                              ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                  [ Ty.associated ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::chain::Chain")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::chain::Chain")
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::chain::Chain")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::chain::Chain")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::sources::empty::Empty")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::multiopen::VerifierQuery")
                                                          [ Ty.associated ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::map::Map")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::enumerate::Enumerate")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::Instance"
                                                                      ];
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Rotation"
                                                                  ]
                                                              ]
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                              [
                                                                                Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Instance"
                                                                              ];
                                                                            Ty.path
                                                                              "halo2_proofs::poly::Rotation"
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                            [ Ty.associated ])
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::map::Map")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "core::iter::adapters::enumerate::Enumerate")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::Advice"
                                                                  ];
                                                                Ty.path
                                                                  "halo2_proofs::poly::Rotation"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.path "usize";
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Column")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::circuit::Advice"
                                                                          ];
                                                                        Ty.path
                                                                          "halo2_proofs::poly::Rotation"
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::poly::multiopen::VerifierQuery")
                                                        [ Ty.associated ])
                                                  ]
                                              ];
                                            Ty.associated
                                          ];
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::flatten::FlatMap")
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                  [ Ty.associated ]
                                              ];
                                            Ty.associated;
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                          [ Ty.associated ]
                                                      ]
                                                  ]
                                              ]
                                              Ty.associated
                                          ]
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.associated;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.associated;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ]
                                                              ];
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                          [ Ty.associated ]
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                          [ Ty.associated ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ]
                                          ]
                                      ]
                                      (Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::chain::Chain")
                                            [
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::chain::Chain")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::chain::Chain")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::sources::empty::Empty")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                            [ Ty.associated ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::map::Map")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::enumerate::Enumerate")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::Instance"
                                                                        ];
                                                                      Ty.path
                                                                        "halo2_proofs::poly::Rotation"
                                                                    ]
                                                                ]
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                                [
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Instance"
                                                                                ];
                                                                              Ty.path
                                                                                "halo2_proofs::poly::Rotation"
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                                              [ Ty.associated ])
                                                        ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::map::Map")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::Advice"
                                                                    ];
                                                                  Ty.path
                                                                    "halo2_proofs::poly::Rotation"
                                                                ]
                                                            ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                            [
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::circuit::Advice"
                                                                            ];
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation"
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::multiopen::VerifierQuery")
                                                          [ Ty.associated ])
                                                    ]
                                                ];
                                              Ty.associated
                                            ];
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                    [ Ty.associated ]
                                                ];
                                              Ty.associated;
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                            [ Ty.associated ]
                                                        ]
                                                    ]
                                                ]
                                                Ty.associated
                                            ]
                                        ])
                                  ],
                                [],
                                "chain",
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::map::Map")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                    [ Ty.path "halo2_proofs::plonk::circuit::Fixed"
                                                    ];
                                                  Ty.path "halo2_proofs::poly::Rotation"
                                                ]
                                            ]
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "usize";
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Column")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::Fixed"
                                                            ];
                                                          Ty.path "halo2_proofs::poly::Rotation"
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                          [ Ty.associated ])
                                    ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::zip::Zip")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                  [ Ty.associated ]
                                              ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                  [ Ty.associated ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ],
                                    [],
                                    "flat_map",
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::chain::Chain")
                                            [
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::chain::Chain")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::chain::Chain")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::sources::empty::Empty")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                            [ Ty.associated ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "core::iter::adapters::map::Map")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::enumerate::Enumerate")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                        [
                                                                          Ty.path
                                                                            "halo2_proofs::plonk::circuit::Instance"
                                                                        ];
                                                                      Ty.path
                                                                        "halo2_proofs::poly::Rotation"
                                                                    ]
                                                                ]
                                                            ];
                                                          Ty.function
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                                [
                                                                                  Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Instance"
                                                                                ];
                                                                              Ty.path
                                                                                "halo2_proofs::poly::Rotation"
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                                              [ Ty.associated ])
                                                        ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::map::Map")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                    [
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::circuit::Advice"
                                                                    ];
                                                                  Ty.path
                                                                    "halo2_proofs::poly::Rotation"
                                                                ]
                                                            ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.path "usize";
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                            [
                                                                              Ty.path
                                                                                "halo2_proofs::plonk::circuit::Advice"
                                                                            ];
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Rotation"
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::multiopen::VerifierQuery")
                                                          [ Ty.associated ])
                                                    ]
                                                ];
                                              Ty.associated
                                            ];
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::flatten::FlatMap")
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                    [ Ty.associated ]
                                                ];
                                              Ty.associated;
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                            [ Ty.associated ]
                                                        ]
                                                    ]
                                                ]
                                                Ty.associated
                                            ]
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.associated;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.associated;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ];
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.associated;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ]
                                                            ];
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                            [ Ty.associated ]
                                                        ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                            [ Ty.associated ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "core::iter::adapters::chain::Chain")
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::chain::Chain")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::chain::Chain")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::chain::Chain")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::sources::empty::Empty")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                                              [ Ty.associated ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "core::iter::adapters::map::Map")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::enumerate::Enumerate")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::circuit::Column")
                                                                          [
                                                                            Ty.path
                                                                              "halo2_proofs::plonk::circuit::Instance"
                                                                          ];
                                                                        Ty.path
                                                                          "halo2_proofs::poly::Rotation"
                                                                      ]
                                                                  ]
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                                  [
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Instance"
                                                                                  ];
                                                                                Ty.path
                                                                                  "halo2_proofs::poly::Rotation"
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                [ Ty.associated ])
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::map::Map")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::enumerate::Enumerate")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::slice::iter::Iter")
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                      [
                                                                        Ty.path
                                                                          "halo2_proofs::plonk::circuit::Advice"
                                                                      ];
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Rotation"
                                                                  ]
                                                              ]
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                              [
                                                                                Ty.path
                                                                                  "halo2_proofs::plonk::circuit::Advice"
                                                                              ];
                                                                            Ty.path
                                                                              "halo2_proofs::poly::Rotation"
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                            [ Ty.associated ])
                                                      ]
                                                  ];
                                                Ty.associated
                                              ];
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::flatten::FlatMap")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                      [ Ty.associated ]
                                                  ];
                                                Ty.associated;
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                              [ Ty.associated ]
                                                          ]
                                                      ]
                                                  ]
                                                  Ty.associated
                                              ]
                                          ])
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          [
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::zip::Zip")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                  [ Ty.associated ]
                                              ]
                                          ],
                                        [],
                                        "zip",
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                    [ Ty.associated ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::zip::Zip")
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                              ],
                                            [],
                                            "zip",
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                    [ Ty.associated ]
                                                ]
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ]
                                                  ],
                                                [],
                                                "zip",
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        [
                                                          Ty.associated;
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ]
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::iterator::Iterator",
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                      ],
                                                    [],
                                                    "zip",
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.associated;
                                                              Ty.path "alloc::alloc::Global"
                                                            ]
                                                        ]
                                                    ]
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ],
                                                        [],
                                                        "zip",
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ]
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ],
                                                            "iter",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::deref::Deref",
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.associated;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [],
                                                                "deref",
                                                                []
                                                              |),
                                                              [ instance_commitments ]
                                                            |)
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ]
                                                              ],
                                                            "iter",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::deref::Deref",
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.associated;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [],
                                                                "deref",
                                                                []
                                                              |),
                                                              [ instance_evals ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ],
                                                        "iter",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            "deref",
                                                            []
                                                          |),
                                                          [ advice_commitments ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |);
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "alloc::alloc::Global"
                                                          ]
                                                      ],
                                                    "iter",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::deref::Deref",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        "deref",
                                                        []
                                                      |),
                                                      [ advice_evals ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |);
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                      [ Ty.associated ]
                                                  ],
                                                "iter",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                          [ Ty.associated ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [ permutations_evaluated ]
                                                |)
                                              ]
                                            |)
                                          ]
                                        |);
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                      [ Ty.associated ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ],
                                            "iter",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                          [ Ty.associated ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [ lookups_evaluated ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let γ1_0 :=
                                                      M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                    let γ1_1 :=
                                                      M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                    let γ2_0 :=
                                                      M.SubPointer.get_tuple_field (| γ1_0, 0 |) in
                                                    let γ2_1 :=
                                                      M.SubPointer.get_tuple_field (| γ1_0, 1 |) in
                                                    let γ3_0 :=
                                                      M.SubPointer.get_tuple_field (| γ2_0, 0 |) in
                                                    let γ3_1 :=
                                                      M.SubPointer.get_tuple_field (| γ2_0, 1 |) in
                                                    let γ4_0 :=
                                                      M.SubPointer.get_tuple_field (| γ3_0, 0 |) in
                                                    let γ4_1 :=
                                                      M.SubPointer.get_tuple_field (| γ3_0, 1 |) in
                                                    let instance_commitments := M.copy (| γ4_0 |) in
                                                    let instance_evals := M.copy (| γ4_1 |) in
                                                    let advice_commitments := M.copy (| γ3_1 |) in
                                                    let advice_evals := M.copy (| γ2_1 |) in
                                                    let permutation := M.copy (| γ1_1 |) in
                                                    let lookups := M.copy (| γ0_1 |) in
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::chain::Chain")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::chain::Chain")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::chain::Chain")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::sources::empty::Empty")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                          [ Ty.associated ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::map::Map")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                      [
                                                                                        Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Instance"
                                                                                      ];
                                                                                    Ty.path
                                                                                      "halo2_proofs::poly::Rotation"
                                                                                  ]
                                                                              ]
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Instance"
                                                                                              ];
                                                                                            Ty.path
                                                                                              "halo2_proofs::poly::Rotation"
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                            [ Ty.associated ])
                                                                      ]
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::map::Map")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                                  [
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Advice"
                                                                                  ];
                                                                                Ty.path
                                                                                  "halo2_proofs::poly::Rotation"
                                                                              ]
                                                                          ]
                                                                      ];
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Column")
                                                                                          [
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Advice"
                                                                                          ];
                                                                                        Ty.path
                                                                                          "halo2_proofs::poly::Rotation"
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                      (Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                        [ Ty.associated ])
                                                                  ]
                                                              ];
                                                            Ty.associated
                                                          ],
                                                        [],
                                                        "chain",
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::flatten::FlatMap")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                    [ Ty.associated ]
                                                                ];
                                                              Ty.associated;
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                            [ Ty.associated ]
                                                                        ]
                                                                    ]
                                                                ]
                                                                Ty.associated
                                                            ]
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::chain::Chain")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::chain::Chain")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::sources::empty::Empty")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                          [ Ty.associated ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::map::Map")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                      [
                                                                                        Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Instance"
                                                                                      ];
                                                                                    Ty.path
                                                                                      "halo2_proofs::poly::Rotation"
                                                                                  ]
                                                                              ]
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Instance"
                                                                                              ];
                                                                                            Ty.path
                                                                                              "halo2_proofs::poly::Rotation"
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                            [ Ty.associated ])
                                                                      ]
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::map::Map")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                                  [
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Advice"
                                                                                  ];
                                                                                Ty.path
                                                                                  "halo2_proofs::poly::Rotation"
                                                                              ]
                                                                          ]
                                                                      ];
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.path "usize";
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Column")
                                                                                          [
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Advice"
                                                                                          ];
                                                                                        Ty.path
                                                                                          "halo2_proofs::poly::Rotation"
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                      (Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                        [ Ty.associated ])
                                                                  ]
                                                              ],
                                                            [],
                                                            "chain",
                                                            [ Ty.associated ]
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::chain::Chain")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::sources::empty::Empty")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                          [ Ty.associated ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::map::Map")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                      [
                                                                                        Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Instance"
                                                                                      ];
                                                                                    Ty.path
                                                                                      "halo2_proofs::poly::Rotation"
                                                                                  ]
                                                                              ]
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Instance"
                                                                                              ];
                                                                                            Ty.path
                                                                                              "halo2_proofs::poly::Rotation"
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                            [ Ty.associated ])
                                                                      ]
                                                                  ],
                                                                [],
                                                                "chain",
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::map::Map")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::enumerate::Enumerate")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::slice::iter::Iter")
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                                    [
                                                                                      Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Advice"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "halo2_proofs::poly::Rotation"
                                                                                ]
                                                                            ]
                                                                        ];
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.path "usize";
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                                            [
                                                                                              Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Advice"
                                                                                            ];
                                                                                          Ty.path
                                                                                            "halo2_proofs::poly::Rotation"
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                        (Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                          [ Ty.associated ])
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::sources::empty::Empty")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                          [ Ty.associated ]
                                                                      ],
                                                                    [],
                                                                    "chain",
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::iter::adapters::map::Map")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::iter::adapters::enumerate::Enumerate")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::Iter")
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                        [
                                                                                          Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Instance"
                                                                                        ];
                                                                                      Ty.path
                                                                                        "halo2_proofs::poly::Rotation"
                                                                                    ]
                                                                                ]
                                                                            ];
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize";
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::plonk::circuit::Instance"
                                                                                                ];
                                                                                              Ty.path
                                                                                                "halo2_proofs::poly::Rotation"
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                              [ Ty.associated ])
                                                                        ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_function (|
                                                                        "core::iter::sources::empty::empty",
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                            [ Ty.associated ]
                                                                        ]
                                                                      |),
                                                                      []
                                                                    |);
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                      [
                                                                                        Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Instance"
                                                                                      ];
                                                                                    Ty.path
                                                                                      "halo2_proofs::poly::Rotation"
                                                                                  ]
                                                                              ]
                                                                          ],
                                                                        [],
                                                                        "map",
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                            [ Ty.associated ];
                                                                          Ty.function
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.tuple
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize";
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        [
                                                                                          Ty.tuple
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::plonk::circuit::Instance"
                                                                                                ];
                                                                                              Ty.path
                                                                                                "halo2_proofs::poly::Rotation"
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                            (Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                              [ Ty.associated ])
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::iter::traits::iterator::Iterator",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                      [
                                                                                        Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Instance"
                                                                                      ];
                                                                                    Ty.path
                                                                                      "halo2_proofs::poly::Rotation"
                                                                                  ]
                                                                              ],
                                                                            [],
                                                                            "enumerate",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Column")
                                                                                          [
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Instance"
                                                                                          ];
                                                                                        Ty.path
                                                                                          "halo2_proofs::poly::Rotation"
                                                                                      ]
                                                                                  ],
                                                                                "iter",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::deref::Deref",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Instance"
                                                                                              ];
                                                                                            Ty.path
                                                                                              "halo2_proofs::poly::Rotation"
                                                                                          ];
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    [],
                                                                                    "deref",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                        M.read (|
                                                                                          vk
                                                                                        |),
                                                                                        "halo2_proofs::plonk::VerifyingKey",
                                                                                        "cs"
                                                                                      |),
                                                                                      "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                                      "instance_queries"
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.closure
                                                                          (fun γ =>
                                                                            ltac:(M.monadic
                                                                              match γ with
                                                                              | [ α0 ] =>
                                                                                M.match_operator (|
                                                                                  M.alloc (| α0 |),
                                                                                  [
                                                                                    fun γ =>
                                                                                      ltac:(M.monadic
                                                                                        (let γ0_0 :=
                                                                                          M.SubPointer.get_tuple_field (|
                                                                                            γ,
                                                                                            0
                                                                                          |) in
                                                                                        let γ0_1 :=
                                                                                          M.SubPointer.get_tuple_field (|
                                                                                            γ,
                                                                                            1
                                                                                          |) in
                                                                                        let
                                                                                              query_index :=
                                                                                          M.copy (|
                                                                                            γ0_0
                                                                                          |) in
                                                                                        let γ0_1 :=
                                                                                          M.read (|
                                                                                            γ0_1
                                                                                          |) in
                                                                                        let γ2_0 :=
                                                                                          M.SubPointer.get_tuple_field (|
                                                                                            γ0_1,
                                                                                            0
                                                                                          |) in
                                                                                        let γ2_1 :=
                                                                                          M.SubPointer.get_tuple_field (|
                                                                                            γ0_1,
                                                                                            1
                                                                                          |) in
                                                                                        let
                                                                                              column :=
                                                                                          M.copy (|
                                                                                            γ2_0
                                                                                          |) in
                                                                                        let at_ :=
                                                                                          M.copy (|
                                                                                            γ2_1
                                                                                          |) in
                                                                                        M.call_closure (|
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                                              [
                                                                                                Ty.associated
                                                                                              ],
                                                                                            "new_commitment",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::index::Index",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  [
                                                                                                    Ty.associated;
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ],
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize"
                                                                                                ],
                                                                                                "index",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  instance_commitments
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::Instance"
                                                                                                      ],
                                                                                                    "index",
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    column
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "halo2_proofs::poly::domain::EvaluationDomain")
                                                                                                  [
                                                                                                    Ty.associated
                                                                                                  ],
                                                                                                "rotate_omega",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.read (|
                                                                                                    vk
                                                                                                  |),
                                                                                                  "halo2_proofs::plonk::VerifyingKey",
                                                                                                  "domain"
                                                                                                |);
                                                                                                M.read (|
                                                                                                  M.call_closure (|
                                                                                                    M.get_trait_method (|
                                                                                                      "core::ops::deref::Deref",
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "halo2_proofs::transcript::ChallengeScalar")
                                                                                                        [
                                                                                                          Ty.associated;
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::X"
                                                                                                        ],
                                                                                                      [],
                                                                                                      "deref",
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      x
                                                                                                    ]
                                                                                                  |)
                                                                                                |);
                                                                                                M.read (|
                                                                                                  at_
                                                                                                |)
                                                                                              ]
                                                                                            |);
                                                                                            M.read (|
                                                                                              at_
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::index::Index",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "alloc::vec::Vec")
                                                                                                    [
                                                                                                      Ty.associated;
                                                                                                      Ty.path
                                                                                                        "alloc::alloc::Global"
                                                                                                    ],
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize"
                                                                                                  ],
                                                                                                  "index",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.read (|
                                                                                                    instance_evals
                                                                                                  |);
                                                                                                  M.read (|
                                                                                                    query_index
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)))
                                                                                  ]
                                                                                |)
                                                                              | _ =>
                                                                                M.impossible (||)
                                                                              end))
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::iter::traits::iterator::Iterator",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                                  [
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Advice"
                                                                                  ];
                                                                                Ty.path
                                                                                  "halo2_proofs::poly::Rotation"
                                                                              ]
                                                                          ]
                                                                      ],
                                                                    [],
                                                                    "map",
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                        [ Ty.associated ];
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.path "usize";
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                                            [
                                                                                              Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Advice"
                                                                                            ];
                                                                                          Ty.path
                                                                                            "halo2_proofs::poly::Rotation"
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                        (Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                          [ Ty.associated ])
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                                  [
                                                                                    Ty.path
                                                                                      "halo2_proofs::plonk::circuit::Advice"
                                                                                  ];
                                                                                Ty.path
                                                                                  "halo2_proofs::poly::Rotation"
                                                                              ]
                                                                          ],
                                                                        [],
                                                                        "enumerate",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                      [
                                                                                        Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Advice"
                                                                                      ];
                                                                                    Ty.path
                                                                                      "halo2_proofs::poly::Rotation"
                                                                                  ]
                                                                              ],
                                                                            "iter",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::deref::Deref",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::plonk::circuit::Column")
                                                                                          [
                                                                                            Ty.path
                                                                                              "halo2_proofs::plonk::circuit::Advice"
                                                                                          ];
                                                                                        Ty.path
                                                                                          "halo2_proofs::poly::Rotation"
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                [],
                                                                                "deref",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                    M.read (| vk |),
                                                                                    "halo2_proofs::plonk::VerifyingKey",
                                                                                    "cs"
                                                                                  |),
                                                                                  "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                                                  "advice_queries"
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.closure
                                                                      (fun γ =>
                                                                        ltac:(M.monadic
                                                                          match γ with
                                                                          | [ α0 ] =>
                                                                            M.match_operator (|
                                                                              M.alloc (| α0 |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ0_0 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ,
                                                                                        0
                                                                                      |) in
                                                                                    let γ0_1 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ,
                                                                                        1
                                                                                      |) in
                                                                                    let
                                                                                          query_index :=
                                                                                      M.copy (|
                                                                                        γ0_0
                                                                                      |) in
                                                                                    let γ0_1 :=
                                                                                      M.read (|
                                                                                        γ0_1
                                                                                      |) in
                                                                                    let γ2_0 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ0_1,
                                                                                        0
                                                                                      |) in
                                                                                    let γ2_1 :=
                                                                                      M.SubPointer.get_tuple_field (|
                                                                                        γ0_1,
                                                                                        1
                                                                                      |) in
                                                                                    let column :=
                                                                                      M.copy (|
                                                                                        γ2_0
                                                                                      |) in
                                                                                    let at_ :=
                                                                                      M.copy (|
                                                                                        γ2_1
                                                                                      |) in
                                                                                    M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                                          [
                                                                                            Ty.associated
                                                                                          ],
                                                                                        "new_commitment",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::index::Index",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              [
                                                                                                Ty.associated;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ],
                                                                                            [
                                                                                              Ty.path
                                                                                                "usize"
                                                                                            ],
                                                                                            "index",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              advice_commitments
                                                                                            |);
                                                                                            M.call_closure (|
                                                                                              M.get_associated_function (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "halo2_proofs::plonk::circuit::Advice"
                                                                                                  ],
                                                                                                "index",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                column
                                                                                              ]
                                                                                            |)
                                                                                          ]
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::poly::domain::EvaluationDomain")
                                                                                              [
                                                                                                Ty.associated
                                                                                              ],
                                                                                            "rotate_omega",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                              M.read (|
                                                                                                vk
                                                                                              |),
                                                                                              "halo2_proofs::plonk::VerifyingKey",
                                                                                              "domain"
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::deref::Deref",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::transcript::ChallengeScalar")
                                                                                                    [
                                                                                                      Ty.associated;
                                                                                                      Ty.path
                                                                                                        "halo2_proofs::plonk::X"
                                                                                                    ],
                                                                                                  [],
                                                                                                  "deref",
                                                                                                  []
                                                                                                |),
                                                                                                [ x
                                                                                                ]
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              at_
                                                                                            |)
                                                                                          ]
                                                                                        |);
                                                                                        M.read (|
                                                                                          at_
                                                                                        |);
                                                                                        M.read (|
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::index::Index",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                [
                                                                                                  Ty.associated;
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              [
                                                                                                Ty.path
                                                                                                  "usize"
                                                                                              ],
                                                                                              "index",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                advice_evals
                                                                                              |);
                                                                                              M.read (|
                                                                                                query_index
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)
                                                                          | _ => M.impossible (||)
                                                                          end))
                                                                  ]
                                                                |)
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                                  [ Ty.associated ],
                                                                "queries",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| permutation |);
                                                                M.read (| vk |);
                                                                M.read (| x |)
                                                              ]
                                                            |)
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::iter::traits::collect::IntoIterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::flatten::FlatMap")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                      [ Ty.associated ]
                                                                  ];
                                                                Ty.associated;
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                              [ Ty.associated ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  Ty.associated
                                                              ],
                                                            [],
                                                            "into_iter",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                      [ Ty.associated ]
                                                                  ],
                                                                [],
                                                                "flat_map",
                                                                [
                                                                  Ty.associated;
                                                                  Ty.function
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                                [ Ty.associated ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                    Ty.associated
                                                                ]
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                          [ Ty.associated ]
                                                                      ],
                                                                    "iter",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::deref::Deref",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::vec::Vec")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                              [ Ty.associated ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [],
                                                                        "deref",
                                                                        []
                                                                      |),
                                                                      [ M.read (| lookups |) ]
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.closure
                                                                  (fun γ =>
                                                                    ltac:(M.monadic
                                                                      match γ with
                                                                      | [ α0 ] =>
                                                                        M.match_operator (|
                                                                          M.alloc (| α0 |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let p :=
                                                                                  M.copy (| γ |) in
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                                      [
                                                                                        Ty.associated
                                                                                      ],
                                                                                    "queries",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (| p |);
                                                                                    M.read (| vk |);
                                                                                    M.read (| x |)
                                                                                  ]
                                                                                |)))
                                                                          ]
                                                                        |)
                                                                      | _ => M.impossible (||)
                                                                      end))
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |);
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                  [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ];
                                                Ty.path "halo2_proofs::poly::Rotation"
                                              ]
                                          ]
                                      ],
                                    [],
                                    "map",
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                        [ Ty.associated ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "usize";
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::plonk::circuit::Column")
                                                            [
                                                              Ty.path
                                                                "halo2_proofs::plonk::circuit::Fixed"
                                                            ];
                                                          Ty.path "halo2_proofs::poly::Rotation"
                                                        ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                          [ Ty.associated ])
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::plonk::circuit::Column")
                                                  [ Ty.path "halo2_proofs::plonk::circuit::Fixed" ];
                                                Ty.path "halo2_proofs::poly::Rotation"
                                              ]
                                          ],
                                        [],
                                        "enumerate",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::plonk::circuit::Column")
                                                      [
                                                        Ty.path
                                                          "halo2_proofs::plonk::circuit::Fixed"
                                                      ];
                                                    Ty.path "halo2_proofs::poly::Rotation"
                                                  ]
                                              ],
                                            "iter",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::plonk::circuit::Column")
                                                          [
                                                            Ty.path
                                                              "halo2_proofs::plonk::circuit::Fixed"
                                                          ];
                                                        Ty.path "halo2_proofs::poly::Rotation"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [
                                                M.SubPointer.get_struct_record_field (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| vk |),
                                                    "halo2_proofs::plonk::VerifyingKey",
                                                    "cs"
                                                  |),
                                                  "halo2_proofs::plonk::circuit::ConstraintSystem",
                                                  "fixed_queries"
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let query_index := M.copy (| γ0_0 |) in
                                                    let γ0_1 := M.read (| γ0_1 |) in
                                                    let γ2_0 :=
                                                      M.SubPointer.get_tuple_field (| γ0_1, 0 |) in
                                                    let γ2_1 :=
                                                      M.SubPointer.get_tuple_field (| γ0_1, 1 |) in
                                                    let column := M.copy (| γ2_0 |) in
                                                    let at_ := M.copy (| γ2_1 |) in
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::multiopen::VerifierQuery")
                                                          [ Ty.associated ],
                                                        "new_commitment",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::index::Index",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [ Ty.path "usize" ],
                                                            "index",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| vk |),
                                                              "halo2_proofs::plonk::VerifyingKey",
                                                              "fixed_commitments"
                                                            |);
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                  [
                                                                    Ty.path
                                                                      "halo2_proofs::plonk::circuit::Fixed"
                                                                  ],
                                                                "index",
                                                                []
                                                              |),
                                                              [ column ]
                                                            |)
                                                          ]
                                                        |);
                                                        M.call_closure (|
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::domain::EvaluationDomain")
                                                              [ Ty.associated ],
                                                            "rotate_omega",
                                                            []
                                                          |),
                                                          [
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.read (| vk |),
                                                              "halo2_proofs::plonk::VerifyingKey",
                                                              "domain"
                                                            |);
                                                            M.read (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::transcript::ChallengeScalar")
                                                                    [
                                                                      Ty.associated;
                                                                      Ty.path
                                                                        "halo2_proofs::plonk::X"
                                                                    ],
                                                                  [],
                                                                  "deref",
                                                                  []
                                                                |),
                                                                [ x ]
                                                              |)
                                                            |);
                                                            M.read (| at_ |)
                                                          ]
                                                        |);
                                                        M.read (| at_ |);
                                                        M.read (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::index::Index",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [ Ty.path "usize" ],
                                                              "index",
                                                              []
                                                            |),
                                                            [ fixed_evals; M.read (| query_index |)
                                                            ]
                                                          |)
                                                        |)
                                                      ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path
                                    "halo2_proofs::plonk::permutation::verifier::CommonEvaluated")
                                  [ Ty.associated ],
                                "queries",
                                []
                              |),
                              [
                                permutations_common;
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| vk |),
                                  "halo2_proofs::plonk::VerifyingKey",
                                  "permutation"
                                |);
                                M.read (| x |)
                              ]
                            |)
                          ]
                        |);
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::plonk::vanishing::verifier::Evaluated")
                              [ Ty.associated ],
                            "queries",
                            []
                          |),
                          [ vanishing; M.read (| x |) ]
                        |)
                      ]
                    |)
                  |) in
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use use_gwc in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "halo2_proofs::plonk::verifier::VerificationStrategy",
                              V,
                              [ Ty.associated ],
                              "process",
                              [
                                Ty.function
                                  [ Ty.tuple [] ]
                                  (Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::poly::msm::PairMSM")
                                        [ Ty.associated ];
                                      Ty.path "halo2_proofs::plonk::error::Error"
                                    ])
                              ]
                            |),
                            [
                              M.read (| strategy |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      M.match_operator (|
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::msm::PairMSM")
                                                        [ Ty.associated ];
                                                      Ty.path "halo2_proofs::poly::Error"
                                                    ],
                                                  "map_err",
                                                  [
                                                    Ty.path "halo2_proofs::plonk::error::Error";
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [ Ty.path "halo2_proofs::poly::Error" ]
                                                      ]
                                                      (Ty.path "halo2_proofs::plonk::error::Error")
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "halo2_proofs::poly::multiopen::gwc::verifier::verify_proof",
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::chain::Chain")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::chain::Chain")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::chain::Chain")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::flatten::FlatMap")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::zip::Zip")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::iter::adapters::zip::Zip")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::iter::adapters::zip::Zip")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::iter::adapters::zip::Zip")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::iter::adapters::zip::Zip")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::Iter")
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  [
                                                                                                    Ty.associated;
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ]
                                                                                              ];
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::Iter")
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  [
                                                                                                    Ty.associated;
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ]
                                                                                              ]
                                                                                          ];
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::slice::iter::Iter")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              [
                                                                                                Ty.associated;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ]
                                                                                          ]
                                                                                      ];
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::slice::iter::Iter")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          [
                                                                                            Ty.associated;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ]
                                                                                      ]
                                                                                  ];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::slice::iter::Iter")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                                                      [
                                                                                        Ty.associated
                                                                                      ]
                                                                                  ]
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                                      [
                                                                                        Ty.associated
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::chain::Chain")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::iter::adapters::chain::Chain")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::iter::adapters::chain::Chain")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::iter::adapters::chain::Chain")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::iter::sources::empty::Empty")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                                              [
                                                                                                Ty.associated
                                                                                              ]
                                                                                          ];
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::iter::adapters::map::Map")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::iter::adapters::enumerate::Enumerate")
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::slice::iter::Iter")
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "halo2_proofs::plonk::circuit::Column")
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "halo2_proofs::plonk::circuit::Instance"
                                                                                                          ];
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::poly::Rotation"
                                                                                                      ]
                                                                                                  ]
                                                                                              ];
                                                                                            Ty.function
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "usize";
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          [
                                                                                                            Ty.tuple
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "halo2_proofs::plonk::circuit::Instance"
                                                                                                                  ];
                                                                                                                Ty.path
                                                                                                                  "halo2_proofs::poly::Rotation"
                                                                                                              ]
                                                                                                          ]
                                                                                                      ]
                                                                                                  ]
                                                                                              ]
                                                                                              (Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                                                [
                                                                                                  Ty.associated
                                                                                                ])
                                                                                          ]
                                                                                      ];
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::iter::adapters::map::Map")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::Iter")
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::Advice"
                                                                                                      ];
                                                                                                    Ty.path
                                                                                                      "halo2_proofs::poly::Rotation"
                                                                                                  ]
                                                                                              ]
                                                                                          ];
                                                                                        Ty.function
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize";
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "halo2_proofs::plonk::circuit::Advice"
                                                                                                              ];
                                                                                                            Ty.path
                                                                                                              "halo2_proofs::poly::Rotation"
                                                                                                          ]
                                                                                                      ]
                                                                                                  ]
                                                                                              ]
                                                                                          ]
                                                                                          (Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                                            [
                                                                                              Ty.associated
                                                                                            ])
                                                                                      ]
                                                                                  ];
                                                                                Ty.associated
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::iter::adapters::flatten::FlatMap")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::slice::iter::Iter")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                                      [
                                                                                        Ty.associated
                                                                                      ]
                                                                                  ];
                                                                                Ty.associated;
                                                                                Ty.function
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                                              [
                                                                                                Ty.associated
                                                                                              ]
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                                  Ty.associated
                                                                              ]
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          [
                                                                                                            Ty.associated;
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ]
                                                                                                      ];
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          [
                                                                                                            Ty.associated;
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ]
                                                                                                      ]
                                                                                                  ];
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::vec::Vec")
                                                                                                      [
                                                                                                        Ty.associated;
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ]
                                                                                                  ]
                                                                                              ];
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  [
                                                                                                    Ty.associated;
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ]
                                                                                              ]
                                                                                          ];
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                                                              [
                                                                                                Ty.associated
                                                                                              ]
                                                                                          ]
                                                                                      ];
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                                              [
                                                                                                Ty.associated
                                                                                              ];
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "core::iter::adapters::chain::Chain")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::iter::adapters::chain::Chain")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::iter::adapters::chain::Chain")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::iter::adapters::chain::Chain")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::iter::sources::empty::Empty")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                                                [
                                                                                                  Ty.associated
                                                                                                ]
                                                                                            ];
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::iter::adapters::map::Map")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::iter::adapters::enumerate::Enumerate")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::slice::iter::Iter")
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "halo2_proofs::plonk::circuit::Instance"
                                                                                                            ];
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::poly::Rotation"
                                                                                                        ]
                                                                                                    ]
                                                                                                ];
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "usize";
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            [
                                                                                                              Ty.tuple
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "halo2_proofs::plonk::circuit::Instance"
                                                                                                                    ];
                                                                                                                  Ty.path
                                                                                                                    "halo2_proofs::poly::Rotation"
                                                                                                                ]
                                                                                                            ]
                                                                                                        ]
                                                                                                    ]
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                                                  [
                                                                                                    Ty.associated
                                                                                                  ])
                                                                                            ]
                                                                                        ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::iter::adapters::map::Map")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::iter::adapters::enumerate::Enumerate")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::slice::iter::Iter")
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::circuit::Advice"
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "halo2_proofs::poly::Rotation"
                                                                                                    ]
                                                                                                ]
                                                                                            ];
                                                                                          Ty.function
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "usize";
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        [
                                                                                                          Ty.tuple
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "halo2_proofs::plonk::circuit::Advice"
                                                                                                                ];
                                                                                                              Ty.path
                                                                                                                "halo2_proofs::poly::Rotation"
                                                                                                            ]
                                                                                                        ]
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                            (Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                                              [
                                                                                                Ty.associated
                                                                                              ])
                                                                                        ]
                                                                                    ];
                                                                                  Ty.associated
                                                                                ];
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::iter::adapters::flatten::FlatMap")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::Iter")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                                        [
                                                                                          Ty.associated
                                                                                        ]
                                                                                    ];
                                                                                  Ty.associated;
                                                                                  Ty.function
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                                                [
                                                                                                  Ty.associated
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                    Ty.associated
                                                                                ]
                                                                            ])
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::map::Map")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                      [
                                                                                        Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Fixed"
                                                                                      ];
                                                                                    Ty.path
                                                                                      "halo2_proofs::poly::Rotation"
                                                                                  ]
                                                                              ]
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Fixed"
                                                                                              ];
                                                                                            Ty.path
                                                                                              "halo2_proofs::poly::Rotation"
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                            [ Ty.associated ])
                                                                      ]
                                                                  ];
                                                                Ty.associated
                                                              ];
                                                            Ty.associated
                                                          ];
                                                        C;
                                                        E;
                                                        T
                                                      ]
                                                    |),
                                                    [
                                                      M.read (| params |);
                                                      M.read (| transcript |);
                                                      M.read (| queries |)
                                                    ]
                                                  |);
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          M.match_operator (|
                                                            M.alloc (| α0 |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (Value.StructTuple
                                                                    "halo2_proofs::plonk::error::Error::Opening"
                                                                    []))
                                                            ]
                                                          |)
                                                        | _ => M.impossible (||)
                                                        end))
                                                ]
                                              |)))
                                        ]
                                      |)
                                    | _ => M.impossible (||)
                                    end))
                            ]
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "halo2_proofs::plonk::verifier::VerificationStrategy",
                              V,
                              [ Ty.associated ],
                              "process",
                              [
                                Ty.function
                                  [ Ty.tuple [] ]
                                  (Ty.apply
                                    (Ty.path "core::result::Result")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::poly::msm::PairMSM")
                                        [ Ty.associated ];
                                      Ty.path "halo2_proofs::plonk::error::Error"
                                    ])
                              ]
                            |),
                            [
                              M.read (| strategy |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      M.match_operator (|
                                        M.alloc (| α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::msm::PairMSM")
                                                        [ Ty.associated ];
                                                      Ty.path "halo2_proofs::poly::Error"
                                                    ],
                                                  "map_err",
                                                  [
                                                    Ty.path "halo2_proofs::plonk::error::Error";
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [ Ty.path "halo2_proofs::poly::Error" ]
                                                      ]
                                                      (Ty.path "halo2_proofs::plonk::error::Error")
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_function (|
                                                      "halo2_proofs::poly::multiopen::shplonk::verifier::verify_proof",
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "core::iter::adapters::chain::Chain")
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "core::iter::adapters::chain::Chain")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::iter::adapters::chain::Chain")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::flatten::FlatMap")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::zip::Zip")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::iter::adapters::zip::Zip")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::iter::adapters::zip::Zip")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::iter::adapters::zip::Zip")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::iter::adapters::zip::Zip")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::Iter")
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  [
                                                                                                    Ty.associated;
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ]
                                                                                              ];
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::Iter")
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  [
                                                                                                    Ty.associated;
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ]
                                                                                              ]
                                                                                          ];
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::slice::iter::Iter")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              [
                                                                                                Ty.associated;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ]
                                                                                          ]
                                                                                      ];
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::slice::iter::Iter")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          [
                                                                                            Ty.associated;
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ]
                                                                                      ]
                                                                                  ];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::slice::iter::Iter")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                                                      [
                                                                                        Ty.associated
                                                                                      ]
                                                                                  ]
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::vec::Vec")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                                      [
                                                                                        Ty.associated
                                                                                      ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ]
                                                                              ]
                                                                          ];
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::chain::Chain")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::iter::adapters::chain::Chain")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::iter::adapters::chain::Chain")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::iter::adapters::chain::Chain")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::iter::sources::empty::Empty")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                                              [
                                                                                                Ty.associated
                                                                                              ]
                                                                                          ];
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::iter::adapters::map::Map")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::iter::adapters::enumerate::Enumerate")
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "core::slice::iter::Iter")
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "halo2_proofs::plonk::circuit::Column")
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "halo2_proofs::plonk::circuit::Instance"
                                                                                                          ];
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::poly::Rotation"
                                                                                                      ]
                                                                                                  ]
                                                                                              ];
                                                                                            Ty.function
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [
                                                                                                    Ty.tuple
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "usize";
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          [
                                                                                                            Ty.tuple
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "halo2_proofs::plonk::circuit::Column")
                                                                                                                  [
                                                                                                                    Ty.path
                                                                                                                      "halo2_proofs::plonk::circuit::Instance"
                                                                                                                  ];
                                                                                                                Ty.path
                                                                                                                  "halo2_proofs::poly::Rotation"
                                                                                                              ]
                                                                                                          ]
                                                                                                      ]
                                                                                                  ]
                                                                                              ]
                                                                                              (Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                                                [
                                                                                                  Ty.associated
                                                                                                ])
                                                                                          ]
                                                                                      ];
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::iter::adapters::map::Map")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::slice::iter::Iter")
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::Advice"
                                                                                                      ];
                                                                                                    Ty.path
                                                                                                      "halo2_proofs::poly::Rotation"
                                                                                                  ]
                                                                                              ]
                                                                                          ];
                                                                                        Ty.function
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [
                                                                                                    Ty.path
                                                                                                      "usize";
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "halo2_proofs::plonk::circuit::Advice"
                                                                                                              ];
                                                                                                            Ty.path
                                                                                                              "halo2_proofs::poly::Rotation"
                                                                                                          ]
                                                                                                      ]
                                                                                                  ]
                                                                                              ]
                                                                                          ]
                                                                                          (Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                                            [
                                                                                              Ty.associated
                                                                                            ])
                                                                                      ]
                                                                                  ];
                                                                                Ty.associated
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::iter::adapters::flatten::FlatMap")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::slice::iter::Iter")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                                      [
                                                                                        Ty.associated
                                                                                      ]
                                                                                  ];
                                                                                Ty.associated;
                                                                                Ty.function
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                                              [
                                                                                                Ty.associated
                                                                                              ]
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                                  Ty.associated
                                                                              ]
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.tuple
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.tuple
                                                                                              [
                                                                                                Ty.tuple
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          [
                                                                                                            Ty.associated;
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ]
                                                                                                      ];
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      [
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "alloc::vec::Vec")
                                                                                                          [
                                                                                                            Ty.associated;
                                                                                                            Ty.path
                                                                                                              "alloc::alloc::Global"
                                                                                                          ]
                                                                                                      ]
                                                                                                  ];
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "alloc::vec::Vec")
                                                                                                      [
                                                                                                        Ty.associated;
                                                                                                        Ty.path
                                                                                                          "alloc::alloc::Global"
                                                                                                      ]
                                                                                                  ]
                                                                                              ];
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "alloc::vec::Vec")
                                                                                                  [
                                                                                                    Ty.associated;
                                                                                                    Ty.path
                                                                                                      "alloc::alloc::Global"
                                                                                                  ]
                                                                                              ]
                                                                                          ];
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::permutation::verifier::Evaluated")
                                                                                              [
                                                                                                Ty.associated
                                                                                              ]
                                                                                          ]
                                                                                      ];
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::vec::Vec")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                                              [
                                                                                                Ty.associated
                                                                                              ];
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "core::iter::adapters::chain::Chain")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::iter::adapters::chain::Chain")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::iter::adapters::chain::Chain")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::iter::adapters::chain::Chain")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::iter::sources::empty::Empty")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                                                [
                                                                                                  Ty.associated
                                                                                                ]
                                                                                            ];
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::iter::adapters::map::Map")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::iter::adapters::enumerate::Enumerate")
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::slice::iter::Iter")
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "halo2_proofs::plonk::circuit::Column")
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "halo2_proofs::plonk::circuit::Instance"
                                                                                                            ];
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::poly::Rotation"
                                                                                                        ]
                                                                                                    ]
                                                                                                ];
                                                                                              Ty.function
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [
                                                                                                      Ty.tuple
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "usize";
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            [
                                                                                                              Ty.tuple
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "halo2_proofs::plonk::circuit::Column")
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "halo2_proofs::plonk::circuit::Instance"
                                                                                                                    ];
                                                                                                                  Ty.path
                                                                                                                    "halo2_proofs::poly::Rotation"
                                                                                                                ]
                                                                                                            ]
                                                                                                        ]
                                                                                                    ]
                                                                                                ]
                                                                                                (Ty.apply
                                                                                                  (Ty.path
                                                                                                    "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                                                  [
                                                                                                    Ty.associated
                                                                                                  ])
                                                                                            ]
                                                                                        ];
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::iter::adapters::map::Map")
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::iter::adapters::enumerate::Enumerate")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::slice::iter::Iter")
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "halo2_proofs::plonk::circuit::Column")
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "halo2_proofs::plonk::circuit::Advice"
                                                                                                        ];
                                                                                                      Ty.path
                                                                                                        "halo2_proofs::poly::Rotation"
                                                                                                    ]
                                                                                                ]
                                                                                            ];
                                                                                          Ty.function
                                                                                            [
                                                                                              Ty.tuple
                                                                                                [
                                                                                                  Ty.tuple
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "usize";
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        [
                                                                                                          Ty.tuple
                                                                                                            [
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "halo2_proofs::plonk::circuit::Column")
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "halo2_proofs::plonk::circuit::Advice"
                                                                                                                ];
                                                                                                              Ty.path
                                                                                                                "halo2_proofs::poly::Rotation"
                                                                                                            ]
                                                                                                        ]
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                            (Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                                              [
                                                                                                Ty.associated
                                                                                              ])
                                                                                        ]
                                                                                    ];
                                                                                  Ty.associated
                                                                                ];
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::iter::adapters::flatten::FlatMap")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::Iter")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                                        [
                                                                                          Ty.associated
                                                                                        ]
                                                                                    ];
                                                                                  Ty.associated;
                                                                                  Ty.function
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::plonk::lookup::verifier::Evaluated")
                                                                                                [
                                                                                                  Ty.associated
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                    Ty.associated
                                                                                ]
                                                                            ])
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::iter::adapters::map::Map")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::Iter")
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::plonk::circuit::Column")
                                                                                      [
                                                                                        Ty.path
                                                                                          "halo2_proofs::plonk::circuit::Fixed"
                                                                                      ];
                                                                                    Ty.path
                                                                                      "halo2_proofs::poly::Rotation"
                                                                                  ]
                                                                              ]
                                                                          ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.path "usize";
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      [
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::plonk::circuit::Column")
                                                                                              [
                                                                                                Ty.path
                                                                                                  "halo2_proofs::plonk::circuit::Fixed"
                                                                                              ];
                                                                                            Ty.path
                                                                                              "halo2_proofs::poly::Rotation"
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                            [ Ty.associated ])
                                                                      ]
                                                                  ];
                                                                Ty.associated
                                                              ];
                                                            Ty.associated
                                                          ];
                                                        C;
                                                        E;
                                                        T
                                                      ]
                                                    |),
                                                    [
                                                      M.read (| params |);
                                                      M.read (| transcript |);
                                                      M.read (| queries |)
                                                    ]
                                                  |);
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          M.match_operator (|
                                                            M.alloc (| α0 |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (Value.StructTuple
                                                                    "halo2_proofs::plonk::error::Error::Opening"
                                                                    []))
                                                            ]
                                                          |)
                                                        | _ => M.impossible (||)
                                                        end))
                                                ]
                                              |)))
                                        ]
                                      |)
                                    | _ => M.impossible (||)
                                    end))
                            ]
                          |)
                        |)))
                  ]
                |)
              |)))
          |)))
      | _, _ => M.impossible
      end.
    
    (*
    pub fn verify_proof<
        'params,
        C: MultiMillerLoop,
        E: EncodedChallenge<C::G1Affine>,
        T: TranscriptRead<C::G1Affine, E>,
        V: VerificationStrategy<C::G1Affine>,
    >(
        params: &'params ParamsVerifier<C>,
        vk: &VerifyingKey<C::G1Affine>,
        strategy: V,
        instances: &[&[&[C::Scalar]]],
        transcript: &mut T,
    ) -> Result<V::Output, Error> {
        verify_proof_ext(params, vk, strategy, instances, transcript, true)
    }
    *)
    Definition verify_proof (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ C; E; T; V ], [ params; vk; strategy; instances; transcript ] =>
        ltac:(M.monadic
          (let params := M.alloc (| params |) in
          let vk := M.alloc (| vk |) in
          let strategy := M.alloc (| strategy |) in
          let instances := M.alloc (| instances |) in
          let transcript := M.alloc (| transcript |) in
          M.call_closure (|
            M.get_function (| "halo2_proofs::plonk::verifier::verify_proof_ext", [ C; E; T; V ] |),
            [
              M.read (| params |);
              M.read (| vk |);
              M.read (| strategy |);
              M.read (| instances |);
              M.read (| transcript |);
              Value.Bool true
            ]
          |)))
      | _, _ => M.impossible
      end.
    
    (*
    pub fn verify_proof_with_shplonk<
        'params,
        C: MultiMillerLoop,
        E: EncodedChallenge<C::G1Affine>,
        T: TranscriptRead<C::G1Affine, E>,
        V: VerificationStrategy<C::G1Affine>,
    >(
        params: &'params ParamsVerifier<C>,
        vk: &VerifyingKey<C::G1Affine>,
        strategy: V,
        instances: &[&[&[C::Scalar]]],
        transcript: &mut T,
    ) -> Result<V::Output, Error> {
        verify_proof_ext(params, vk, strategy, instances, transcript, false)
    }
    *)
    Definition verify_proof_with_shplonk (τ : list Ty.t) (α : list Value.t) : M :=
      match τ, α with
      | [ C; E; T; V ], [ params; vk; strategy; instances; transcript ] =>
        ltac:(M.monadic
          (let params := M.alloc (| params |) in
          let vk := M.alloc (| vk |) in
          let strategy := M.alloc (| strategy |) in
          let instances := M.alloc (| instances |) in
          let transcript := M.alloc (| transcript |) in
          M.call_closure (|
            M.get_function (| "halo2_proofs::plonk::verifier::verify_proof_ext", [ C; E; T; V ] |),
            [
              M.read (| params |);
              M.read (| vk |);
              M.read (| strategy |);
              M.read (| instances |);
              M.read (| transcript |);
              Value.Bool false
            ]
          |)))
      | _, _ => M.impossible
      end.
  End verifier.
End plonk.
