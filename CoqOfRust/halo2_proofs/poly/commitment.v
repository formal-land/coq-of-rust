(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module poly.
  Module commitment.
    (* StructRecord
      {
        name := "Params";
        ty_params := [ "C" ];
        fields :=
          [
            ("k", Ty.path "u32");
            ("n", Ty.path "u64");
            ("g", Ty.apply (Ty.path "alloc::vec::Vec") [ C; Ty.path "alloc::alloc::Global" ]);
            ("g_lagrange",
              Ty.apply (Ty.path "alloc::vec::Vec") [ C; Ty.path "alloc::alloc::Global" ]);
            ("additional_data",
              Ty.apply (Ty.path "alloc::vec::Vec") [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_for_halo2_proofs_poly_commitment_Params_C.
      Definition Self (C : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::Params") [ C ].
      
      (* Debug *)
      Definition fmt (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field5_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "Params" |);
                M.read (| Value.String "k" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::poly::commitment::Params",
                    "k"
                  |));
                M.read (| Value.String "n" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::poly::commitment::Params",
                    "n"
                  |));
                M.read (| Value.String "g" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::poly::commitment::Params",
                    "g"
                  |));
                M.read (| Value.String "g_lagrange" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::poly::commitment::Params",
                    "g_lagrange"
                  |));
                M.read (| Value.String "additional_data" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::poly::commitment::Params",
                      "additional_data"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (C : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self C)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt C)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_for_halo2_proofs_poly_commitment_Params_C.
    
    (* StructRecord
      {
        name := "ParamsVerifier";
        ty_params := [ "E" ];
        fields :=
          [
            ("k", Ty.path "u32");
            ("n", Ty.path "u64");
            ("g1", Ty.associated);
            ("g2", Ty.associated);
            ("s_g2", Ty.associated);
            ("g_lagrange",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.associated; Ty.path "alloc::alloc::Global" ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_E_where_pairing_bn256_arithmetic_pairing_Engine_E_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_poly_commitment_ParamsVerifier_E.
      Definition Self (E : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::ParamsVerifier") [ E ].
      
      (* Debug *)
      Definition fmt (E : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              let names :=
                M.alloc (|
                  M.alloc (|
                    Value.Array
                      [
                        M.read (| Value.String "k" |);
                        M.read (| Value.String "n" |);
                        M.read (| Value.String "g1" |);
                        M.read (| Value.String "g2" |);
                        M.read (| Value.String "s_g2" |);
                        M.read (| Value.String "g_lagrange" |)
                      ]
                  |)
                |) in
              let values :=
                M.alloc (|
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      Value.Array
                        [
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::commitment::ParamsVerifier",
                              "k"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::commitment::ParamsVerifier",
                              "n"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::commitment::ParamsVerifier",
                              "g1"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::commitment::ParamsVerifier",
                              "g2"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::commitment::ParamsVerifier",
                              "s_g2"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.alloc (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::poly::commitment::ParamsVerifier",
                                "g_lagrange"
                              |)
                            |))
                        ]
                    |))
                |) in
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_fields_finish",
                    []
                  |),
                  [
                    M.read (| f |);
                    M.read (| Value.String "ParamsVerifier" |);
                    (* Unsize *) M.pointer_coercion (M.read (| names |));
                    M.read (| values |)
                  ]
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (E : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self E)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt E)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_E_where_pairing_bn256_arithmetic_pairing_Engine_E_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_poly_commitment_ParamsVerifier_E.
    
    Module Impl_halo2_proofs_poly_commitment_Params_C.
      Definition Self (C : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::Params") [ C ].
      
      (*
          pub fn unsafe_setup<E: Engine>(k: u32) -> Params<E::G1Affine> {
              // TODO: Make this function only available in test mod
              // Largest root of unity exponent of the Engine is `2^E::Scalar::S`, so we can
              // only support FFTs of polynomials below degree `2^E::Scalar::S`.
              assert!(k <= E::Scalar::S);
              let n: u64 = 1 << k;
      
              // Calculate g = [G1, [s] G1, [s^2] G1, ..., [s^(n-1)] G1] in parallel.
              let g1 = <E::G1Affine as PrimeCurveAffine>::generator();
              let s = E::Scalar::random(OsRng);
      
              let mut g_projective = vec![E::G1::group_zero(); n as usize];
              parallelize(&mut g_projective, |g, start| {
                  let mut current_g: E::G1 = g1.into();
                  current_g *= s.pow_vartime(&[start as u64]);
                  for g in g.iter_mut() {
                      *g = current_g;
                      current_g *= s;
                  }
              });
      
              let g = {
                  let mut g = vec![E::G1Affine::identity(); n as usize];
                  parallelize(&mut g, |g, starts| {
                      E::G1::batch_normalize(&g_projective[starts..(starts + g.len())], g);
                  });
                  g
              };
      
              let mut g_lagrange_projective = vec![E::G1::group_zero(); n as usize];
              let mut root = E::Scalar::ROOT_OF_UNITY_INV.invert().unwrap();
              for _ in k..E::Scalar::S {
                  root = root.square();
              }
              let n_inv = Option::<E::Scalar>::from(E::Scalar::from(n).invert())
                  .expect("inversion should be ok for n = 1<<k");
              let multiplier = (s.pow_vartime(&[n as u64]) - E::Scalar::one()) * n_inv;
              parallelize(&mut g_lagrange_projective, |g, start| {
                  for (idx, g) in g.iter_mut().enumerate() {
                      let offset = start + idx;
                      let root_pow = root.pow_vartime(&[offset as u64]);
                      let scalar = multiplier * root_pow * (s - root_pow).invert().unwrap();
                      *g = g1 * scalar;
                  }
              });
      
              let g_lagrange = {
                  let mut g_lagrange = vec![E::G1Affine::identity(); n as usize];
                  parallelize(&mut g_lagrange, |g_lagrange, starts| {
                      E::G1::batch_normalize(
                          &g_lagrange_projective[starts..(starts + g_lagrange.len())],
                          g_lagrange,
                      );
                  });
                  drop(g_lagrange_projective);
                  g_lagrange
              };
      
              let g2 = <E::G2Affine as PrimeCurveAffine>::generator();
              let s_g2 = g2 * s;
              let additional_data = Vec::from(s_g2.to_bytes().as_ref());
              Params {
                  k,
                  n,
                  g,
                  g_lagrange,
                  additional_data,
              }
          }
      *)
      Definition unsafe_setup (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [ E ], [ k ] =>
          ltac:(M.monadic
            (let k := M.alloc (| k |) in
            M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.Pure.not
                                (BinOp.Pure.le
                                  (M.read (| k |))
                                  (M.read (| M.get_constant (| "ff::PrimeField::S" |) |)))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              M.get_function (| "core::panicking::panic", [] |),
                              [ M.read (| Value.String "assertion failed: k <= E::Scalar::S" |) ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let n := M.alloc (| BinOp.Panic.shl (| Value.Integer 1, M.read (| k |) |) |) in
              let g1 :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "group::prime::PrimeCurveAffine",
                      Ty.associated,
                      [],
                      "generator",
                      []
                    |),
                    []
                  |)
                |) in
              let s :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "ff::Field",
                      Ty.associated,
                      [],
                      "random",
                      [ Ty.path "rand_core::os::OsRng" ]
                    |),
                    [ Value.StructTuple "rand_core::os::OsRng" [] ]
                  |)
                |) in
              let g_projective :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (| "alloc::vec::from_elem", [ Ty.associated ] |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "pairing_bn256::arithmetic::Group",
                          Ty.associated,
                          [],
                          "group_zero",
                          []
                        |),
                        []
                      |);
                      M.rust_cast (M.read (| n |))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "halo2_proofs::arithmetic::parallelize",
                      [
                        Ty.associated;
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [ Ty.apply (Ty.path "slice") [ Ty.associated ] ];
                                Ty.path "usize"
                              ]
                          ]
                          (Ty.tuple [])
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::DerefMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                          [],
                          "deref_mut",
                          []
                        |),
                        [ g_projective ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0; α1 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let g := M.copy (| γ |) in
                                      M.match_operator (|
                                        M.alloc (| α1 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let start := M.copy (| γ |) in
                                              M.read (|
                                                let current_g :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::convert::Into",
                                                        Ty.associated,
                                                        [ Ty.associated ],
                                                        "into",
                                                        []
                                                      |),
                                                      [ M.read (| g1 |) ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::arith::MulAssign",
                                                        Ty.associated,
                                                        [ Ty.associated ],
                                                        "mul_assign",
                                                        []
                                                      |),
                                                      [
                                                        current_g;
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "ff::Field",
                                                            Ty.associated,
                                                            [],
                                                            "pow_vartime",
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [ Ty.path "u64" ]
                                                                ]
                                                            ]
                                                          |),
                                                          [
                                                            s;
                                                            M.alloc (|
                                                              Value.Array
                                                                [ M.rust_cast (M.read (| start |)) ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |) in
                                                M.use
                                                  (M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::IntoIterator",
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::IterMut")
                                                            [ Ty.associated ],
                                                          [],
                                                          "into_iter",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                [ Ty.associated ],
                                                              "iter_mut",
                                                              []
                                                            |),
                                                            [ M.read (| g |) ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let iter := M.copy (| γ |) in
                                                          M.loop (|
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::IterMut")
                                                                          [ Ty.associated ],
                                                                        [],
                                                                        "next",
                                                                        []
                                                                      |),
                                                                      [ iter ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (M.alloc (|
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.break (||)
                                                                            |)
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::option::Option::Some",
                                                                            0
                                                                          |) in
                                                                        let g :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let _ :=
                                                                          M.write (|
                                                                            M.read (| g |),
                                                                            M.read (| current_g |)
                                                                          |) in
                                                                        let _ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::MulAssign",
                                                                                Ty.associated,
                                                                                [ Ty.associated ],
                                                                                "mul_assign",
                                                                                []
                                                                              |),
                                                                              [
                                                                                current_g;
                                                                                M.read (| s |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                          |)))
                                                    ]
                                                  |))
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let g :=
                M.copy (|
                  let g :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (| "alloc::vec::from_elem", [ Ty.associated ] |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "group::prime::PrimeCurveAffine",
                              Ty.associated,
                              [],
                              "identity",
                              []
                            |),
                            []
                          |);
                          M.rust_cast (M.read (| n |))
                        ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (|
                          "halo2_proofs::arithmetic::parallelize",
                          [
                            Ty.associated;
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [ Ty.apply (Ty.path "slice") [ Ty.associated ] ];
                                    Ty.path "usize"
                                  ]
                              ]
                              (Ty.tuple [])
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::DerefMut",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                              [],
                              "deref_mut",
                              []
                            |),
                            [ g ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0; α1 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let g := M.copy (| γ |) in
                                          M.match_operator (|
                                            M.alloc (| α1 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let starts := M.copy (| γ |) in
                                                  M.read (|
                                                    let _ :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "group::Curve",
                                                            Ty.associated,
                                                            [],
                                                            "batch_normalize",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::index::Index",
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    [ Ty.path "usize" ]
                                                                ],
                                                                "index",
                                                                []
                                                              |),
                                                              [
                                                                g_projective;
                                                                Value.StructRecord
                                                                  "core::ops::range::Range"
                                                                  [
                                                                    ("start", M.read (| starts |));
                                                                    ("end_",
                                                                      BinOp.Panic.add (|
                                                                        Integer.Usize,
                                                                        M.read (| starts |),
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              [ Ty.associated ],
                                                                            "len",
                                                                            []
                                                                          |),
                                                                          [ M.read (| g |) ]
                                                                        |)
                                                                      |))
                                                                  ]
                                                              ]
                                                            |);
                                                            M.read (| g |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)
                                                  |)))
                                            ]
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    |) in
                  g
                |) in
              let g_lagrange_projective :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (| "alloc::vec::from_elem", [ Ty.associated ] |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "pairing_bn256::arithmetic::Group",
                          Ty.associated,
                          [],
                          "group_zero",
                          []
                        |),
                        []
                      |);
                      M.rust_cast (M.read (| n |))
                    ]
                  |)
                |) in
              let root :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "subtle::CtOption") [ Ty.associated ],
                      "unwrap",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (| "ff::Field", Ty.associated, [], "invert", [] |),
                        [
                          M.get_constant (|
                            "pairing_bn256::arithmetic::fields::FieldExt::ROOT_OF_UNITY_INV"
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [
                              ("start", M.read (| k |));
                              ("end_", M.read (| M.get_constant (| "ff::PrimeField::S" |) |))
                            ]
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          [ Ty.path "u32" ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let _ :=
                                          M.write (|
                                            root,
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "ff::Field",
                                                Ty.associated,
                                                [],
                                                "square",
                                                []
                                              |),
                                              [ root ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              let n_inv :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "core::option::Option") [ Ty.associated ],
                      "expect",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::convert::From",
                          Ty.apply (Ty.path "core::option::Option") [ Ty.associated ],
                          [ Ty.apply (Ty.path "subtle::CtOption") [ Ty.associated ] ],
                          "from",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (| "ff::Field", Ty.associated, [], "invert", [] |),
                            [
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::convert::From",
                                    Ty.associated,
                                    [ Ty.path "u64" ],
                                    "from",
                                    []
                                  |),
                                  [ M.read (| n |) ]
                                |)
                              |)
                            ]
                          |)
                        ]
                      |);
                      M.read (| Value.String "inversion should be ok for n = 1<<k" |)
                    ]
                  |)
                |) in
              let multiplier :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::arith::Mul",
                      Ty.associated,
                      [ Ty.associated ],
                      "mul",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::arith::Sub",
                          Ty.associated,
                          [ Ty.associated ],
                          "sub",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "ff::Field",
                              Ty.associated,
                              [],
                              "pow_vartime",
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  [ Ty.apply (Ty.path "array") [ Ty.path "u64" ] ]
                              ]
                            |),
                            [ s; M.alloc (| Value.Array [ M.read (| M.use n |) ] |) ]
                          |);
                          M.call_closure (|
                            M.get_trait_method (| "ff::Field", Ty.associated, [], "one", [] |),
                            []
                          |)
                        ]
                      |);
                      M.read (| n_inv |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "halo2_proofs::arithmetic::parallelize",
                      [
                        Ty.associated;
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [ Ty.apply (Ty.path "slice") [ Ty.associated ] ];
                                Ty.path "usize"
                              ]
                          ]
                          (Ty.tuple [])
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::DerefMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                          [],
                          "deref_mut",
                          []
                        |),
                        [ g_lagrange_projective ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0; α1 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let g := M.copy (| γ |) in
                                      M.match_operator (|
                                        M.alloc (| α1 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let start := M.copy (| γ |) in
                                              M.read (|
                                                M.use
                                                  (M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::IntoIterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::enumerate::Enumerate")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                [ Ty.associated ]
                                                            ],
                                                          [],
                                                          "into_iter",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                [ Ty.associated ],
                                                              [],
                                                              "enumerate",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [ Ty.associated ],
                                                                  "iter_mut",
                                                                  []
                                                                |),
                                                                [ M.read (| g |) ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let iter := M.copy (| γ |) in
                                                          M.loop (|
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::iter::adapters::enumerate::Enumerate")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::slice::iter::IterMut")
                                                                              [ Ty.associated ]
                                                                          ],
                                                                        [],
                                                                        "next",
                                                                        []
                                                                      |),
                                                                      [ iter ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (M.alloc (|
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.break (||)
                                                                            |)
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::option::Option::Some",
                                                                            0
                                                                          |) in
                                                                        let γ1_0 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ0_0,
                                                                            0
                                                                          |) in
                                                                        let γ1_1 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ0_0,
                                                                            1
                                                                          |) in
                                                                        let idx :=
                                                                          M.copy (| γ1_0 |) in
                                                                        let g :=
                                                                          M.copy (| γ1_1 |) in
                                                                        let offset :=
                                                                          M.alloc (|
                                                                            BinOp.Panic.add (|
                                                                              Integer.Usize,
                                                                              M.read (| start |),
                                                                              M.read (| idx |)
                                                                            |)
                                                                          |) in
                                                                        let root_pow :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "ff::Field",
                                                                                Ty.associated,
                                                                                [],
                                                                                "pow_vartime",
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "array")
                                                                                        [
                                                                                          Ty.path
                                                                                            "u64"
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                              |),
                                                                              [
                                                                                root;
                                                                                M.alloc (|
                                                                                  Value.Array
                                                                                    [
                                                                                      M.rust_cast
                                                                                        (M.read (|
                                                                                          offset
                                                                                        |))
                                                                                    ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        let scalar :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Mul",
                                                                                Ty.associated,
                                                                                [ Ty.associated ],
                                                                                "mul",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Mul",
                                                                                    Ty.associated,
                                                                                    [ Ty.associated
                                                                                    ],
                                                                                    "mul",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      multiplier
                                                                                    |);
                                                                                    M.read (|
                                                                                      root_pow
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "subtle::CtOption")
                                                                                      [
                                                                                        Ty.associated
                                                                                      ],
                                                                                    "unwrap",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "ff::Field",
                                                                                        Ty.associated,
                                                                                        [],
                                                                                        "invert",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.alloc (|
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::arith::Sub",
                                                                                              Ty.associated,
                                                                                              [
                                                                                                Ty.associated
                                                                                              ],
                                                                                              "sub",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                s
                                                                                              |);
                                                                                              M.read (|
                                                                                                root_pow
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        let _ :=
                                                                          M.write (|
                                                                            M.read (| g |),
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Mul",
                                                                                Ty.associated,
                                                                                [ Ty.associated ],
                                                                                "mul",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| g1 |);
                                                                                M.read (| scalar |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                          |)))
                                                    ]
                                                  |))
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              let g_lagrange :=
                M.copy (|
                  let g_lagrange :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (| "alloc::vec::from_elem", [ Ty.associated ] |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "group::prime::PrimeCurveAffine",
                              Ty.associated,
                              [],
                              "identity",
                              []
                            |),
                            []
                          |);
                          M.rust_cast (M.read (| n |))
                        ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (|
                          "halo2_proofs::arithmetic::parallelize",
                          [
                            Ty.associated;
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      [ Ty.apply (Ty.path "slice") [ Ty.associated ] ];
                                    Ty.path "usize"
                                  ]
                              ]
                              (Ty.tuple [])
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::DerefMut",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                              [],
                              "deref_mut",
                              []
                            |),
                            [ g_lagrange ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0; α1 ] =>
                                  M.match_operator (|
                                    M.alloc (| α0 |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let g_lagrange := M.copy (| γ |) in
                                          M.match_operator (|
                                            M.alloc (| α1 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let starts := M.copy (| γ |) in
                                                  M.read (|
                                                    let _ :=
                                                      M.alloc (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "group::Curve",
                                                            Ty.associated,
                                                            [],
                                                            "batch_normalize",
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::index::Index",
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::ops::range::Range")
                                                                    [ Ty.path "usize" ]
                                                                ],
                                                                "index",
                                                                []
                                                              |),
                                                              [
                                                                g_lagrange_projective;
                                                                Value.StructRecord
                                                                  "core::ops::range::Range"
                                                                  [
                                                                    ("start", M.read (| starts |));
                                                                    ("end_",
                                                                      BinOp.Panic.add (|
                                                                        Integer.Usize,
                                                                        M.read (| starts |),
                                                                        M.call_closure (|
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              [ Ty.associated ],
                                                                            "len",
                                                                            []
                                                                          |),
                                                                          [ M.read (| g_lagrange |)
                                                                          ]
                                                                        |)
                                                                      |))
                                                                  ]
                                                              ]
                                                            |);
                                                            M.read (| g_lagrange |)
                                                          ]
                                                        |)
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)
                                                  |)))
                                            ]
                                          |)))
                                    ]
                                  |)
                                | _ => M.impossible (||)
                                end))
                        ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (|
                          "core::mem::drop",
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                          ]
                        |),
                        [ M.read (| g_lagrange_projective |) ]
                      |)
                    |) in
                  g_lagrange
                |) in
              let g2 :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "group::prime::PrimeCurveAffine",
                      Ty.associated,
                      [],
                      "generator",
                      []
                    |),
                    []
                  |)
                |) in
              let s_g2 :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::arith::Mul",
                      Ty.associated,
                      [ Ty.associated ],
                      "mul",
                      []
                    |),
                    [ M.read (| g2 |); M.read (| s |) ]
                  |)
                |) in
              let additional_data :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                      [ Ty.apply (Ty.path "&") [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ] ],
                      "from",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::convert::AsRef",
                          Ty.associated,
                          [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ],
                          "as_ref",
                          []
                        |),
                        [
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "group::GroupEncoding",
                                Ty.associated,
                                [],
                                "to_bytes",
                                []
                              |),
                              [ s_g2 ]
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                Value.StructRecord
                  "halo2_proofs::poly::commitment::Params"
                  [
                    ("k", M.read (| k |));
                    ("n", M.read (| n |));
                    ("g", M.read (| g |));
                    ("g_lagrange", M.read (| g_lagrange |));
                    ("additional_data", M.read (| additional_data |))
                  ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_unsafe_setup :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "unsafe_setup" (unsafe_setup C).
      
      (*
          pub fn commit(&self, poly: &Polynomial<C::Scalar, Coeff>) -> C::Curve {
              let size = poly.values.len();
              assert!(self.g.len() >= size);
              best_multiexp_gpu_cond(&poly.values[..], &self.g[0..size])
          }
      *)
      Definition commit (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; poly ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let poly := M.alloc (| poly |) in
            M.read (|
              let size :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                      "len",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| poly |),
                        "halo2_proofs::poly::Polynomial",
                        "values"
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.Pure.not
                                (BinOp.Pure.ge
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ C; Ty.path "alloc::alloc::Global" ],
                                      "len",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "halo2_proofs::poly::commitment::Params",
                                        "g"
                                      |)
                                    ]
                                  |))
                                  (M.read (| size |)))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              M.get_function (| "core::panicking::panic", [] |),
                              [ M.read (| Value.String "assertion failed: self.g.len() >= size" |) ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.alloc (|
                M.call_closure (|
                  M.get_function (| "halo2_proofs::arithmetic::best_multiexp_gpu_cond", [ C ] |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::index::Index",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                        [ Ty.path "core::ops::range::RangeFull" ],
                        "index",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| poly |),
                          "halo2_proofs::poly::Polynomial",
                          "values"
                        |);
                        Value.StructTuple "core::ops::range::RangeFull" []
                      ]
                    |);
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::index::Index",
                        Ty.apply (Ty.path "alloc::vec::Vec") [ C; Ty.path "alloc::alloc::Global" ],
                        [ Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ] ],
                        "index",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::poly::commitment::Params",
                          "g"
                        |);
                        Value.StructRecord
                          "core::ops::range::Range"
                          [ ("start", Value.Integer 0); ("end_", M.read (| size |)) ]
                      ]
                    |)
                  ]
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_commit :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "commit" (commit C).
      
      (*
          pub fn commit_lagrange(&self, poly: &Polynomial<C::Scalar, LagrangeCoeff>) -> C::Curve {
              let size = poly.values.len();
              assert!(self.g.len() >= size);
              best_multiexp_gpu_cond(&poly.values[..], &self.g_lagrange[0..size])
          }
      *)
      Definition commit_lagrange (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; poly ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let poly := M.alloc (| poly |) in
            M.read (|
              let size :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                      "len",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| poly |),
                        "halo2_proofs::poly::Polynomial",
                        "values"
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.Pure.not
                                (BinOp.Pure.ge
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ C; Ty.path "alloc::alloc::Global" ],
                                      "len",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "halo2_proofs::poly::commitment::Params",
                                        "g"
                                      |)
                                    ]
                                  |))
                                  (M.read (| size |)))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              M.get_function (| "core::panicking::panic", [] |),
                              [ M.read (| Value.String "assertion failed: self.g.len() >= size" |) ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.alloc (|
                M.call_closure (|
                  M.get_function (| "halo2_proofs::arithmetic::best_multiexp_gpu_cond", [ C ] |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::index::Index",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                        [ Ty.path "core::ops::range::RangeFull" ],
                        "index",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| poly |),
                          "halo2_proofs::poly::Polynomial",
                          "values"
                        |);
                        Value.StructTuple "core::ops::range::RangeFull" []
                      ]
                    |);
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::index::Index",
                        Ty.apply (Ty.path "alloc::vec::Vec") [ C; Ty.path "alloc::alloc::Global" ],
                        [ Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ] ],
                        "index",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::poly::commitment::Params",
                          "g_lagrange"
                        |);
                        Value.StructRecord
                          "core::ops::range::Range"
                          [ ("start", Value.Integer 0); ("end_", M.read (| size |)) ]
                      ]
                    |)
                  ]
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_commit_lagrange :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "commit_lagrange" (commit_lagrange C).
      
      (*
          pub fn commit_lagrange_and_ifft(
              &self,
              mut poly: Polynomial<C::Scalar, LagrangeCoeff>,
              omega: &C::Scalar,
              ifft_divisor: &C::Scalar,
          ) -> (Polynomial<C::Scalar, Coeff>, C::Curve) {
              let c = self.commit_lagrange(&poly);
              best_fft(&mut poly.values[..], *omega, self.k);
              parallelize(&mut poly.values[..], |a, _| {
                  for a in a {
                      // Finish iFFT
                      a.group_scale(&ifft_divisor);
                  }
              });
              (
                  Polynomial {
                      values: poly.values,
                      _marker: PhantomData,
                  },
                  c,
              )
          }
      *)
      Definition commit_lagrange_and_ifft (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; poly; omega; ifft_divisor ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let poly := M.alloc (| poly |) in
            let omega := M.alloc (| omega |) in
            let ifft_divisor := M.alloc (| ifft_divisor |) in
            M.read (|
              let c :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::poly::commitment::Params") [ C ],
                      "commit_lagrange",
                      []
                    |),
                    [ M.read (| self |); poly ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (| "halo2_proofs::arithmetic::best_fft", [ Ty.associated ] |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::index::IndexMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                          [ Ty.path "core::ops::range::RangeFull" ],
                          "index_mut",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            poly,
                            "halo2_proofs::poly::Polynomial",
                            "values"
                          |);
                          Value.StructTuple "core::ops::range::RangeFull" []
                        ]
                      |);
                      M.read (| M.read (| omega |) |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::poly::commitment::Params",
                          "k"
                        |)
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "halo2_proofs::arithmetic::parallelize",
                      [
                        Ty.associated;
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  [ Ty.apply (Ty.path "slice") [ Ty.associated ] ];
                                Ty.path "usize"
                              ]
                          ]
                          (Ty.tuple [])
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::index::IndexMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                          [ Ty.path "core::ops::range::RangeFull" ],
                          "index_mut",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            poly,
                            "halo2_proofs::poly::Polynomial",
                            "values"
                          |);
                          Value.StructTuple "core::ops::range::RangeFull" []
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0; α1 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let a := M.copy (| γ |) in
                                      M.match_operator (|
                                        M.alloc (| α1 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.read (|
                                                M.use
                                                  (M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::IntoIterator",
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                [ Ty.associated ]
                                                            ],
                                                          [],
                                                          "into_iter",
                                                          []
                                                        |),
                                                        [ M.read (| a |) ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let iter := M.copy (| γ |) in
                                                          M.loop (|
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::IterMut")
                                                                          [ Ty.associated ],
                                                                        [],
                                                                        "next",
                                                                        []
                                                                      |),
                                                                      [ iter ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (M.alloc (|
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.break (||)
                                                                            |)
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::option::Option::Some",
                                                                            0
                                                                          |) in
                                                                        let a :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let _ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "pairing_bn256::arithmetic::Group",
                                                                                Ty.associated,
                                                                                [],
                                                                                "group_scale",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| a |);
                                                                                M.read (|
                                                                                  ifft_divisor
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                          |)))
                                                    ]
                                                  |))
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              M.alloc (|
                Value.Tuple
                  [
                    Value.StructRecord
                      "halo2_proofs::poly::Polynomial"
                      [
                        ("values",
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              poly,
                              "halo2_proofs::poly::Polynomial",
                              "values"
                            |)
                          |));
                        ("_marker", Value.StructTuple "core::marker::PhantomData" [])
                      ];
                    M.read (| c |)
                  ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_commit_lagrange_and_ifft :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "commit_lagrange_and_ifft" (commit_lagrange_and_ifft C).
      
      (*
          pub fn commit_lagrange_with_bound(
              &self,
              poly: &Polynomial<C::Scalar, LagrangeCoeff>,
              _max_bits: usize,
          ) -> C::Curve {
              let mut scalars = vec![];
              let mut bases = vec![];
      
              for (s, b) in poly.values.iter().zip(self.g_lagrange.iter()) {
                  if !s.is_zero_vartime() {
                      scalars.push( *s);
                      bases.push( *b);
                  }
              }
      
              #[cfg(feature = "cuda")]
              let res =
                  crate::arithmetic::gpu_multiexp_single_gpu_with_bound(&scalars, &bases[..], _max_bits);
      
              #[cfg(not(feature = "cuda"))]
              let res = best_multiexp_gpu_cond(&scalars, &bases[..]);
      
              res
          }
      *)
      Definition commit_lagrange_with_bound (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; poly; _max_bits ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let poly := M.alloc (| poly |) in
            let _max_bits := M.alloc (| _max_bits |) in
            M.read (|
              let scalars :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let bases :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [ C; Ty.path "alloc::alloc::Global" ],
                      "new",
                      []
                    |),
                    []
                  |)
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            [
                              Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.associated ];
                              Ty.apply (Ty.path "core::slice::iter::Iter") [ C ]
                            ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.associated ],
                              [],
                              "zip",
                              [ Ty.apply (Ty.path "core::slice::iter::Iter") [ C ] ]
                            |),
                            [
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [ Ty.associated ],
                                  "iter",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| poly |),
                                        "halo2_proofs::poly::Polynomial",
                                        "values"
                                      |)
                                    ]
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [ C ],
                                  "iter",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ C; Ty.path "alloc::alloc::Global" ],
                                      [],
                                      "deref",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "halo2_proofs::poly::commitment::Params",
                                        "g_lagrange"
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [ Ty.associated ];
                                            Ty.apply (Ty.path "core::slice::iter::Iter") [ C ]
                                          ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                        let s := M.copy (| γ1_0 |) in
                                        let b := M.copy (| γ1_1 |) in
                                        M.match_operator (|
                                          M.alloc (| Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      UnOp.Pure.not
                                                        (M.call_closure (|
                                                          M.get_trait_method (|
                                                            "ff::Field",
                                                            Ty.associated,
                                                            [],
                                                            "is_zero_vartime",
                                                            []
                                                          |),
                                                          [ M.read (| s |) ]
                                                        |))
                                                    |)) in
                                                let _ :=
                                                  M.is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        "push",
                                                        []
                                                      |),
                                                      [ scalars; M.read (| M.read (| s |) |) ]
                                                    |)
                                                  |) in
                                                let _ :=
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [ C; Ty.path "alloc::alloc::Global" ],
                                                        "push",
                                                        []
                                                      |),
                                                      [ bases; M.read (| M.read (| b |) |) ]
                                                    |)
                                                  |) in
                                                M.alloc (| Value.Tuple [] |)));
                                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              let res :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (| "halo2_proofs::arithmetic::best_multiexp_gpu_cond", [ C ] |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                          [],
                          "deref",
                          []
                        |),
                        [ scalars ]
                      |);
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::index::Index",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ C; Ty.path "alloc::alloc::Global" ],
                          [ Ty.path "core::ops::range::RangeFull" ],
                          "index",
                          []
                        |),
                        [ bases; Value.StructTuple "core::ops::range::RangeFull" [] ]
                      |)
                    ]
                  |)
                |) in
              res
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_commit_lagrange_with_bound :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "commit_lagrange_with_bound" (commit_lagrange_with_bound C).
      
      (*
          pub fn empty_msm(&self) -> MSM<C> {
              MSM::new()
          }
      *)
      Definition empty_msm (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ C ],
                "new",
                []
              |),
              []
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_empty_msm :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "empty_msm" (empty_msm C).
      
      (*
          pub fn get_g(&self) -> Vec<C> {
              self.g.clone()
          }
      *)
      Definition get_g (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_trait_method (|
                "core::clone::Clone",
                Ty.apply (Ty.path "alloc::vec::Vec") [ C; Ty.path "alloc::alloc::Global" ],
                [],
                "clone",
                []
              |),
              [
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::poly::commitment::Params",
                  "g"
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_get_g :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "get_g" (get_g C).
      
      (*
          pub fn get_g_lagrange(&self) -> &Vec<C> {
              &self.g_lagrange
          }
      *)
      Definition get_g_lagrange (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.SubPointer.get_struct_record_field (|
              M.read (| self |),
              "halo2_proofs::poly::commitment::Params",
              "g_lagrange"
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_get_g_lagrange :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "get_g_lagrange" (get_g_lagrange C).
      
      (*
          pub fn write<W: io::Write>(&self, writer: &mut W) -> io::Result<()> {
              writer.write_all(&self.k.to_le_bytes())?;
              for el in &self.g {
                  writer.write_all(el.to_bytes().as_ref())?;
              }
              for el in &self.g_lagrange {
                  writer.write_all(el.to_bytes().as_ref())?;
              }
              let additional_data_len = self.additional_data.len() as u32;
              writer.write_all(&additional_data_len.to_le_bytes())?;
              writer.write_all(&self.additional_data)?;
              Ok(())
          }
      *)
      Definition write (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [ W ], [ self; writer ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let writer := M.alloc (| writer |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (| "std::io::Write", W, [], "write_all", [] |),
                              [
                                M.read (| writer |);
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "u32",
                                        "to_le_bytes",
                                        []
                                      |),
                                      [
                                        M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "halo2_proofs::poly::commitment::Params",
                                            "k"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let _ :=
                    M.use
                      (M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "&")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ C; Ty.path "alloc::alloc::Global" ]
                                ],
                              [],
                              "into_iter",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::poly::commitment::Params",
                                "g"
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                ltac:(M.monadic
                                  (let _ :=
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply (Ty.path "core::slice::iter::Iter") [ C ],
                                            [],
                                            "next",
                                            []
                                          |),
                                          [ iter ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let el := M.copy (| γ0_0 |) in
                                            let _ :=
                                              M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path "std::io::error::Error"
                                                        ],
                                                      [],
                                                      "branch",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "std::io::Write",
                                                          W,
                                                          [],
                                                          "write_all",
                                                          []
                                                        |),
                                                        [
                                                          M.read (| writer |);
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::AsRef",
                                                              Ty.associated,
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [ Ty.path "u8" ]
                                                              ],
                                                              "as_ref",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "group::GroupEncoding",
                                                                    C,
                                                                    [],
                                                                    "to_bytes",
                                                                    []
                                                                  |),
                                                                  [ M.read (| el |) ]
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path
                                                                        "std::io::error::Error"
                                                                    ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "std::io::error::Error"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  let _ :=
                    M.use
                      (M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "&")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ C; Ty.path "alloc::alloc::Global" ]
                                ],
                              [],
                              "into_iter",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::poly::commitment::Params",
                                "g_lagrange"
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                ltac:(M.monadic
                                  (let _ :=
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply (Ty.path "core::slice::iter::Iter") [ C ],
                                            [],
                                            "next",
                                            []
                                          |),
                                          [ iter ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let el := M.copy (| γ0_0 |) in
                                            let _ :=
                                              M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path "std::io::error::Error"
                                                        ],
                                                      [],
                                                      "branch",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "std::io::Write",
                                                          W,
                                                          [],
                                                          "write_all",
                                                          []
                                                        |),
                                                        [
                                                          M.read (| writer |);
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::AsRef",
                                                              Ty.associated,
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [ Ty.path "u8" ]
                                                              ],
                                                              "as_ref",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "group::GroupEncoding",
                                                                    C,
                                                                    [],
                                                                    "to_bytes",
                                                                    []
                                                                  |),
                                                                  [ M.read (| el |) ]
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path
                                                                        "std::io::error::Error"
                                                                    ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "std::io::error::Error"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  let additional_data_len :=
                    M.alloc (|
                      M.rust_cast
                        (M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                            "len",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::commitment::Params",
                              "additional_data"
                            |)
                          ]
                        |))
                    |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (| "std::io::Write", W, [], "write_all", [] |),
                              [
                                M.read (| writer |);
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "u32",
                                        "to_le_bytes",
                                        []
                                      |),
                                      [ M.read (| additional_data_len |) ]
                                    |)
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (| "std::io::Write", W, [], "write_all", [] |),
                              [
                                M.read (| writer |);
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                    [],
                                    "deref",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "halo2_proofs::poly::commitment::Params",
                                      "additional_data"
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_write :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "write" (write C).
      
      (*
          pub fn read<R: io::Read>(mut reader: R) -> io::Result<Self> {
              let mut k = [0u8; 4];
              reader.read_exact(&mut k[..])?;
              let k = u32::from_le_bytes(k);
              let n = 1 << k;
      
              let load_points_from_file_parallelly = |reader: &mut R| -> io::Result<Vec<C>> {
                  let mut points_compressed: Vec<C::Repr> = vec![C::Repr::default(); n];
                  for points_compressed in points_compressed.iter_mut() {
                      reader.read_exact(( *points_compressed).as_mut())?;
                  }
      
                  let mut points = vec![C::default(); n];
                  parallelize(&mut points, |points, chunks| {
                      for (i, point) in points.iter_mut().enumerate() {
                          *point = Option::from(C::from_bytes(&points_compressed[chunks + i])).unwrap();
                      }
                  });
                  Ok(points)
              };
      
              let g = load_points_from_file_parallelly(&mut reader)?;
              let g_lagrange = load_points_from_file_parallelly(&mut reader)?;
      
              let mut additional_data_len = [0u8; 4];
              reader.read_exact(&mut additional_data_len[..])?;
              let additional_data_len = u32::from_le_bytes(additional_data_len);
              let mut additional_data = vec![0u8; additional_data_len as usize];
      
              reader.read_exact(&mut additional_data[..])?;
      
              Ok(Params {
                  k,
                  n: n as u64,
                  g,
                  g_lagrange,
                  additional_data,
              })
          }
      *)
      Definition read (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [ R ], [ reader ] =>
          ltac:(M.monadic
            (let reader := M.alloc (| reader |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let k := M.alloc (| repeat (Value.Integer 0) 4 |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (| "std::io::Read", R, [], "read_exact", [] |),
                              [
                                reader;
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::index::IndexMut",
                                    Ty.apply (Ty.path "array") [ Ty.path "u8" ],
                                    [ Ty.path "core::ops::range::RangeFull" ],
                                    "index_mut",
                                    []
                                  |),
                                  [ k; Value.StructTuple "core::ops::range::RangeFull" [] ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::commitment::Params")
                                              [ C ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let k :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (| Ty.path "u32", "from_le_bytes", [] |),
                        [ M.read (| k |) ]
                      |)
                    |) in
                  let n := M.alloc (| BinOp.Panic.shl (| Value.Integer 1, M.read (| k |) |) |) in
                  let load_points_from_file_parallelly :=
                    M.alloc (|
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let reader := M.copy (| γ |) in
                                      M.read (|
                                        let points_compressed :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_function (|
                                                "alloc::vec::from_elem",
                                                [ Ty.associated ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::default::Default",
                                                    Ty.associated,
                                                    [],
                                                    "default",
                                                    []
                                                  |),
                                                  []
                                                |);
                                                M.read (| n |)
                                              ]
                                            |)
                                          |) in
                                        let _ :=
                                          M.use
                                            (M.match_operator (|
                                              M.alloc (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::iter::traits::collect::IntoIterator",
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::IterMut")
                                                      [ Ty.associated ],
                                                    [],
                                                    "into_iter",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          [ Ty.associated ],
                                                        "iter_mut",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::DerefMut",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            "deref_mut",
                                                            []
                                                          |),
                                                          [ points_compressed ]
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let iter := M.copy (| γ |) in
                                                    M.loop (|
                                                      ltac:(M.monadic
                                                        (let _ :=
                                                          M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::IterMut")
                                                                    [ Ty.associated ],
                                                                  [],
                                                                  "next",
                                                                  []
                                                                |),
                                                                [ iter ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (M.alloc (|
                                                                    M.never_to_any (|
                                                                      M.read (| M.break (||) |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ0_0 :=
                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                      γ,
                                                                      "core::option::Option::Some",
                                                                      0
                                                                    |) in
                                                                  let points_compressed :=
                                                                    M.copy (| γ0_0 |) in
                                                                  let _ :=
                                                                    M.match_operator (|
                                                                      M.alloc (|
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::try_trait::Try",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::result::Result")
                                                                              [
                                                                                Ty.tuple [];
                                                                                Ty.path
                                                                                  "std::io::error::Error"
                                                                              ],
                                                                            [],
                                                                            "branch",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "std::io::Read",
                                                                                R,
                                                                                [],
                                                                                "read_exact",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| reader |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::AsMut",
                                                                                    Ty.associated,
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "slice")
                                                                                        [
                                                                                          Ty.path
                                                                                            "u8"
                                                                                        ]
                                                                                    ],
                                                                                    "as_mut",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      points_compressed
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                γ,
                                                                                "core::ops::control_flow::ControlFlow::Break",
                                                                                0
                                                                              |) in
                                                                            let residual :=
                                                                              M.copy (| γ0_0 |) in
                                                                            M.alloc (|
                                                                              M.never_to_any (|
                                                                                M.read (|
                                                                                  M.return_ (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::try_trait::FromResidual",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::result::Result")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              [
                                                                                                C;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ];
                                                                                            Ty.path
                                                                                              "std::io::error::Error"
                                                                                          ],
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::result::Result")
                                                                                            [
                                                                                              Ty.path
                                                                                                "core::convert::Infallible";
                                                                                              Ty.path
                                                                                                "std::io::error::Error"
                                                                                            ]
                                                                                        ],
                                                                                        "from_residual",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          residual
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)));
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                γ,
                                                                                "core::ops::control_flow::ControlFlow::Continue",
                                                                                0
                                                                              |) in
                                                                            let val :=
                                                                              M.copy (| γ0_0 |) in
                                                                            val))
                                                                      ]
                                                                    |) in
                                                                  M.alloc (| Value.Tuple [] |)))
                                                            ]
                                                          |) in
                                                        M.alloc (| Value.Tuple [] |)))
                                                    |)))
                                              ]
                                            |)) in
                                        let points :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_function (| "alloc::vec::from_elem", [ C ] |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::default::Default",
                                                    C,
                                                    [],
                                                    "default",
                                                    []
                                                  |),
                                                  []
                                                |);
                                                M.read (| n |)
                                              ]
                                            |)
                                          |) in
                                        let _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_function (|
                                                "halo2_proofs::arithmetic::parallelize",
                                                [
                                                  C;
                                                  Ty.function
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            [ Ty.apply (Ty.path "slice") [ C ] ];
                                                          Ty.path "usize"
                                                        ]
                                                    ]
                                                    (Ty.tuple [])
                                                ]
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::DerefMut",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [ C; Ty.path "alloc::alloc::Global" ],
                                                    [],
                                                    "deref_mut",
                                                    []
                                                  |),
                                                  [ points ]
                                                |);
                                                M.closure
                                                  (fun γ =>
                                                    ltac:(M.monadic
                                                      match γ with
                                                      | [ α0; α1 ] =>
                                                        M.match_operator (|
                                                          M.alloc (| α0 |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let points := M.copy (| γ |) in
                                                                M.match_operator (|
                                                                  M.alloc (| α1 |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let chunks :=
                                                                          M.copy (| γ |) in
                                                                        M.read (|
                                                                          M.use
                                                                            (M.match_operator (|
                                                                              M.alloc (|
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::iter::traits::collect::IntoIterator",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::iter::adapters::enumerate::Enumerate")
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::slice::iter::IterMut")
                                                                                          [ C ]
                                                                                      ],
                                                                                    [],
                                                                                    "into_iter",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::iter::traits::iterator::Iterator",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::slice::iter::IterMut")
                                                                                          [ C ],
                                                                                        [],
                                                                                        "enumerate",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "slice")
                                                                                              [ C ],
                                                                                            "iter_mut",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              points
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let iter :=
                                                                                      M.copy (|
                                                                                        γ
                                                                                      |) in
                                                                                    M.loop (|
                                                                                      ltac:(M.monadic
                                                                                        (let _ :=
                                                                                          M.match_operator (|
                                                                                            M.alloc (|
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::iter::adapters::enumerate::Enumerate")
                                                                                                    [
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "core::slice::iter::IterMut")
                                                                                                        [
                                                                                                          C
                                                                                                        ]
                                                                                                    ],
                                                                                                  [],
                                                                                                  "next",
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  iter
                                                                                                ]
                                                                                              |)
                                                                                            |),
                                                                                            [
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (M.alloc (|
                                                                                                    M.never_to_any (|
                                                                                                      M.read (|
                                                                                                        M.break (||)
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)));
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (let
                                                                                                        γ0_0 :=
                                                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                                                      γ,
                                                                                                      "core::option::Option::Some",
                                                                                                      0
                                                                                                    |) in
                                                                                                  let
                                                                                                        γ1_0 :=
                                                                                                    M.SubPointer.get_tuple_field (|
                                                                                                      γ0_0,
                                                                                                      0
                                                                                                    |) in
                                                                                                  let
                                                                                                        γ1_1 :=
                                                                                                    M.SubPointer.get_tuple_field (|
                                                                                                      γ0_0,
                                                                                                      1
                                                                                                    |) in
                                                                                                  let
                                                                                                        i :=
                                                                                                    M.copy (|
                                                                                                      γ1_0
                                                                                                    |) in
                                                                                                  let
                                                                                                        point :=
                                                                                                    M.copy (|
                                                                                                      γ1_1
                                                                                                    |) in
                                                                                                  let
                                                                                                        _ :=
                                                                                                    M.write (|
                                                                                                      M.read (|
                                                                                                        point
                                                                                                      |),
                                                                                                      M.call_closure (|
                                                                                                        M.get_associated_function (|
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "core::option::Option")
                                                                                                            [
                                                                                                              C
                                                                                                            ],
                                                                                                          "unwrap",
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.call_closure (|
                                                                                                            M.get_trait_method (|
                                                                                                              "core::convert::From",
                                                                                                              Ty.apply
                                                                                                                (Ty.path
                                                                                                                  "core::option::Option")
                                                                                                                [
                                                                                                                  C
                                                                                                                ],
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "subtle::CtOption")
                                                                                                                  [
                                                                                                                    C
                                                                                                                  ]
                                                                                                              ],
                                                                                                              "from",
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.call_closure (|
                                                                                                                M.get_trait_method (|
                                                                                                                  "group::GroupEncoding",
                                                                                                                  C,
                                                                                                                  [],
                                                                                                                  "from_bytes",
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.call_closure (|
                                                                                                                    M.get_trait_method (|
                                                                                                                      "core::ops::index::Index",
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "alloc::vec::Vec")
                                                                                                                        [
                                                                                                                          Ty.associated;
                                                                                                                          Ty.path
                                                                                                                            "alloc::alloc::Global"
                                                                                                                        ],
                                                                                                                      [
                                                                                                                        Ty.path
                                                                                                                          "usize"
                                                                                                                      ],
                                                                                                                      "index",
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      points_compressed;
                                                                                                                      BinOp.Panic.add (|
                                                                                                                        Integer.Usize,
                                                                                                                        M.read (|
                                                                                                                          chunks
                                                                                                                        |),
                                                                                                                        M.read (|
                                                                                                                          i
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |) in
                                                                                                  M.alloc (|
                                                                                                    Value.Tuple
                                                                                                      []
                                                                                                  |)))
                                                                                            ]
                                                                                          |) in
                                                                                        M.alloc (|
                                                                                          Value.Tuple
                                                                                            []
                                                                                        |)))
                                                                                    |)))
                                                                              ]
                                                                            |))
                                                                        |)))
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)
                                                      | _ => M.impossible (||)
                                                      end))
                                              ]
                                            |)
                                          |) in
                                        M.alloc (|
                                          Value.StructTuple
                                            "core::result::Result::Ok"
                                            [ M.read (| points |) ]
                                        |)
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    |) in
                  let g :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ C; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "std::io::error::Error"
                                ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::function::Fn",
                                  Ty.function
                                    [ Ty.tuple [ Ty.apply (Ty.path "&mut") [ R ] ] ]
                                    (Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ C; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "std::io::error::Error"
                                      ]),
                                  [ Ty.tuple [ Ty.apply (Ty.path "&mut") [ R ] ] ],
                                  "call",
                                  []
                                |),
                                [ load_points_from_file_parallelly; Value.Tuple [ reader ] ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::commitment::Params")
                                                [ C ];
                                              Ty.path "std::io::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "std::io::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let g_lagrange :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ C; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "std::io::error::Error"
                                ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::ops::function::Fn",
                                  Ty.function
                                    [ Ty.tuple [ Ty.apply (Ty.path "&mut") [ R ] ] ]
                                    (Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ C; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "std::io::error::Error"
                                      ]),
                                  [ Ty.tuple [ Ty.apply (Ty.path "&mut") [ R ] ] ],
                                  "call",
                                  []
                                |),
                                [ load_points_from_file_parallelly; Value.Tuple [ reader ] ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::commitment::Params")
                                                [ C ];
                                              Ty.path "std::io::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "std::io::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let additional_data_len := M.alloc (| repeat (Value.Integer 0) 4 |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (| "std::io::Read", R, [], "read_exact", [] |),
                              [
                                reader;
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::index::IndexMut",
                                    Ty.apply (Ty.path "array") [ Ty.path "u8" ],
                                    [ Ty.path "core::ops::range::RangeFull" ],
                                    "index_mut",
                                    []
                                  |),
                                  [
                                    additional_data_len;
                                    Value.StructTuple "core::ops::range::RangeFull" []
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::commitment::Params")
                                              [ C ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let additional_data_len :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (| Ty.path "u32", "from_le_bytes", [] |),
                        [ M.read (| additional_data_len |) ]
                      |)
                    |) in
                  let additional_data :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (| "alloc::vec::from_elem", [ Ty.path "u8" ] |),
                        [ Value.Integer 0; M.rust_cast (M.read (| additional_data_len |)) ]
                      |)
                    |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (| "std::io::Read", R, [], "read_exact", [] |),
                              [
                                reader;
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::index::IndexMut",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                    [ Ty.path "core::ops::range::RangeFull" ],
                                    "index_mut",
                                    []
                                  |),
                                  [
                                    additional_data;
                                    Value.StructTuple "core::ops::range::RangeFull" []
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::commitment::Params")
                                              [ C ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      [
                        Value.StructRecord
                          "halo2_proofs::poly::commitment::Params"
                          [
                            ("k", M.read (| k |));
                            ("n", M.rust_cast (M.read (| n |)));
                            ("g", M.read (| g |));
                            ("g_lagrange", M.read (| g_lagrange |));
                            ("additional_data", M.read (| additional_data |))
                          ]
                      ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_read :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "read" (read C).
      
      (*
          pub fn verifier<E: Engine<G1Affine = C>>(
              &self,
              public_inputs_size: usize,
          ) -> io::Result<ParamsVerifier<E>> {
              assert!(public_inputs_size < self.n as usize);
              let g_lagrange = self.g_lagrange[..public_inputs_size].to_vec();
              let g2 = <E::G2Affine as PrimeCurveAffine>::generator();
      
              let additional_data = self.additional_data.clone();
      
              let s_g2 = E::G2Affine::read(&mut additional_data.as_slice())?;
      
              Ok(ParamsVerifier {
                  k: self.k,
                  n: self.n,
                  g1: self.g[0],
                  g_lagrange,
                  g2,
                  s_g2,
              })
          }
      *)
      Definition verifier (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [ E ], [ self; public_inputs_size ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let public_inputs_size := M.alloc (| public_inputs_size |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  UnOp.Pure.not
                                    (BinOp.Pure.lt
                                      (M.read (| public_inputs_size |))
                                      (M.rust_cast
                                        (M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "halo2_proofs::poly::commitment::Params",
                                            "n"
                                          |)
                                        |))))
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.call_closure (|
                                  M.get_function (| "core::panicking::panic", [] |),
                                  [
                                    M.read (|
                                      Value.String
                                        "assertion failed: public_inputs_size < self.n as usize"
                                    |)
                                  ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                      ]
                    |) in
                  let g_lagrange :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [ C ],
                          "to_vec",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::index::Index",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ C; Ty.path "alloc::alloc::Global" ],
                              [ Ty.apply (Ty.path "core::ops::range::RangeTo") [ Ty.path "usize" ]
                              ],
                              "index",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::poly::commitment::Params",
                                "g_lagrange"
                              |);
                              Value.StructRecord
                                "core::ops::range::RangeTo"
                                [ ("end_", M.read (| public_inputs_size |)) ]
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let g2 :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "group::prime::PrimeCurveAffine",
                          Ty.associated,
                          [],
                          "generator",
                          []
                        |),
                        []
                      |)
                    |) in
                  let additional_data :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                          [],
                          "clone",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::poly::commitment::Params",
                            "additional_data"
                          |)
                        ]
                      |)
                    |) in
                  let s_g2 :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.associated; Ty.path "std::io::error::Error" ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "halo2_proofs::helpers::CurveRead",
                                  Ty.associated,
                                  [],
                                  "read",
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ]
                                  ]
                                |),
                                [
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.path "u8"; Ty.path "alloc::alloc::Global" ],
                                        "as_slice",
                                        []
                                      |),
                                      [ additional_data ]
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::poly::commitment::ParamsVerifier")
                                                [ E ];
                                              Ty.path "std::io::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "std::io::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      [
                        Value.StructRecord
                          "halo2_proofs::poly::commitment::ParamsVerifier"
                          [
                            ("k",
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::poly::commitment::Params",
                                  "k"
                                |)
                              |));
                            ("n",
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::poly::commitment::Params",
                                  "n"
                                |)
                              |));
                            ("g1",
                              M.read (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::index::Index",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ C; Ty.path "alloc::alloc::Global" ],
                                    [ Ty.path "usize" ],
                                    "index",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "halo2_proofs::poly::commitment::Params",
                                      "g"
                                    |);
                                    Value.Integer 0
                                  ]
                                |)
                              |));
                            ("g_lagrange", M.read (| g_lagrange |));
                            ("g2", M.read (| g2 |));
                            ("s_g2", M.read (| s_g2 |))
                          ]
                      ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_verifier :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "verifier" (verifier C).
    End Impl_halo2_proofs_poly_commitment_Params_C.
    
    (* StructTuple
      {
        name := "Blind";
        ty_params := [ "F" ];
        fields := [ F ];
      } *)
    
    Module Impl_core_marker_Copy_where_core_marker_Copy_F_for_halo2_proofs_poly_commitment_Blind_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::Blind") [ F ].
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_Copy_where_core_marker_Copy_F_for_halo2_proofs_poly_commitment_Blind_F.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_for_halo2_proofs_poly_commitment_Blind_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::Blind") [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructTuple
              "halo2_proofs::poly::commitment::Blind"
              [
                M.call_closure (|
                  M.get_trait_method (| "core::clone::Clone", F, [], "clone", [] |),
                  [
                    M.SubPointer.get_struct_tuple_field (|
                      M.read (| self |),
                      "halo2_proofs::poly::commitment::Blind",
                      0
                    |)
                  ]
                |)
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_for_halo2_proofs_poly_commitment_Blind_F.
    
    Module Impl_core_marker_StructuralEq_for_halo2_proofs_poly_commitment_Blind_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::Blind") [ F ].
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::marker::StructuralEq"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralEq_for_halo2_proofs_poly_commitment_Blind_F.
    
    Module Impl_core_cmp_Eq_where_core_cmp_Eq_F_for_halo2_proofs_poly_commitment_Blind_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::Blind") [ F ].
      
      (* Eq *)
      Definition assert_receiver_is_total_eq (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.match_operator (|
                Value.DeclaredButUndefined,
                [ fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |))) ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::cmp::Eq"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *)
          [ ("assert_receiver_is_total_eq", InstanceField.Method (assert_receiver_is_total_eq F)) ].
    End Impl_core_cmp_Eq_where_core_cmp_Eq_F_for_halo2_proofs_poly_commitment_Blind_F.
    
    Module Impl_core_marker_StructuralPartialEq_for_halo2_proofs_poly_commitment_Blind_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::Blind") [ F ].
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_for_halo2_proofs_poly_commitment_Blind_F.
    
    Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_F_for_halo2_proofs_poly_commitment_Blind_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::Blind") [ F ].
      
      (* PartialEq *)
      Definition eq (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.call_closure (|
              M.get_trait_method (| "core::cmp::PartialEq", F, [ F ], "eq", [] |),
              [
                M.SubPointer.get_struct_tuple_field (|
                  M.read (| self |),
                  "halo2_proofs::poly::commitment::Blind",
                  0
                |);
                M.SubPointer.get_struct_tuple_field (|
                  M.read (| other |),
                  "halo2_proofs::poly::commitment::Blind",
                  0
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method (eq F)) ].
    End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_F_for_halo2_proofs_poly_commitment_Blind_F.
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_halo2_proofs_poly_commitment_Blind_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::Blind") [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_tuple_field1_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "Blind" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_tuple_field (|
                      M.read (| self |),
                      "halo2_proofs::poly::commitment::Blind",
                      0
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_halo2_proofs_poly_commitment_Blind_F.
    
    Module Impl_core_default_Default_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_halo2_proofs_poly_commitment_Blind_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::Blind") [ F ].
      
      (*
          fn default() -> Self {
              Blind(F::one())
          }
      *)
      Definition default (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (Value.StructTuple
              "halo2_proofs::poly::commitment::Blind"
              [ M.call_closure (| M.get_trait_method (| "ff::Field", F, [], "one", [] |), [] |) ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::default::Default"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("default", InstanceField.Method (default F)) ].
    End Impl_core_default_Default_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_halo2_proofs_poly_commitment_Blind_F.
    
    Module Impl_core_ops_arith_Add_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_halo2_proofs_poly_commitment_Blind_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::Blind") [ F ].
      
      (*     type Output = Self; *)
      Definition _Output (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::Blind") [ F ].
      
      (*
          fn add(self, rhs: Blind<F>) -> Self {
              Blind(self.0 + rhs.0)
          }
      *)
      Definition add (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; rhs ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let rhs := M.alloc (| rhs |) in
            Value.StructTuple
              "halo2_proofs::poly::commitment::Blind"
              [
                M.call_closure (|
                  M.get_trait_method (| "core::ops::arith::Add", F, [ F ], "add", [] |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_tuple_field (|
                        self,
                        "halo2_proofs::poly::commitment::Blind",
                        0
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_tuple_field (|
                        rhs,
                        "halo2_proofs::poly::commitment::Blind",
                        0
                      |)
                    |)
                  ]
                |)
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::ops::arith::Add"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *)
          [ ("Output", InstanceField.Ty (_Output F)); ("add", InstanceField.Method (add F)) ].
    End Impl_core_ops_arith_Add_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_halo2_proofs_poly_commitment_Blind_F.
    
    Module Impl_core_ops_arith_Mul_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_halo2_proofs_poly_commitment_Blind_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::Blind") [ F ].
      
      (*     type Output = Self; *)
      Definition _Output (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::Blind") [ F ].
      
      (*
          fn mul(self, rhs: Blind<F>) -> Self {
              Blind(self.0 * rhs.0)
          }
      *)
      Definition mul (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; rhs ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let rhs := M.alloc (| rhs |) in
            Value.StructTuple
              "halo2_proofs::poly::commitment::Blind"
              [
                M.call_closure (|
                  M.get_trait_method (| "core::ops::arith::Mul", F, [ F ], "mul", [] |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_tuple_field (|
                        self,
                        "halo2_proofs::poly::commitment::Blind",
                        0
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_tuple_field (|
                        rhs,
                        "halo2_proofs::poly::commitment::Blind",
                        0
                      |)
                    |)
                  ]
                |)
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::ops::arith::Mul"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *)
          [ ("Output", InstanceField.Ty (_Output F)); ("mul", InstanceField.Method (mul F)) ].
    End Impl_core_ops_arith_Mul_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_halo2_proofs_poly_commitment_Blind_F.
    
    Module Impl_core_ops_arith_AddAssign_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_halo2_proofs_poly_commitment_Blind_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::Blind") [ F ].
      
      (*
          fn add_assign(&mut self, rhs: Blind<F>) {
              self.0 += rhs.0;
          }
      *)
      Definition add_assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; rhs ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let rhs := M.alloc (| rhs |) in
            M.read (|
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::arith::AddAssign",
                      F,
                      [ F ],
                      "add_assign",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_tuple_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::commitment::Blind",
                        0
                      |);
                      M.read (|
                        M.SubPointer.get_struct_tuple_field (|
                          rhs,
                          "halo2_proofs::poly::commitment::Blind",
                          0
                        |)
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::ops::arith::AddAssign"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("add_assign", InstanceField.Method (add_assign F)) ].
    End Impl_core_ops_arith_AddAssign_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_halo2_proofs_poly_commitment_Blind_F.
    
    Module Impl_core_ops_arith_MulAssign_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_halo2_proofs_poly_commitment_Blind_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::Blind") [ F ].
      
      (*
          fn mul_assign(&mut self, rhs: Blind<F>) {
              self.0 *= rhs.0;
          }
      *)
      Definition mul_assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; rhs ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let rhs := M.alloc (| rhs |) in
            M.read (|
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::arith::MulAssign",
                      F,
                      [ F ],
                      "mul_assign",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_tuple_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::commitment::Blind",
                        0
                      |);
                      M.read (|
                        M.SubPointer.get_struct_tuple_field (|
                          rhs,
                          "halo2_proofs::poly::commitment::Blind",
                          0
                        |)
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::ops::arith::MulAssign"
          (Self F)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("mul_assign", InstanceField.Method (mul_assign F)) ].
    End Impl_core_ops_arith_MulAssign_where_pairing_bn256_arithmetic_fields_FieldExt_F_for_halo2_proofs_poly_commitment_Blind_F.
    
    Module Impl_core_ops_arith_AddAssign_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_halo2_proofs_poly_commitment_Blind_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::Blind") [ F ].
      
      (*
          fn add_assign(&mut self, rhs: F) {
              self.0 += rhs;
          }
      *)
      Definition add_assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; rhs ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let rhs := M.alloc (| rhs |) in
            M.read (|
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::arith::AddAssign",
                      F,
                      [ F ],
                      "add_assign",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_tuple_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::commitment::Blind",
                        0
                      |);
                      M.read (| rhs |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::ops::arith::AddAssign"
          (Self F)
          (* Trait polymorphic types *) [ (* Rhs *) F ]
          (* Instance *) [ ("add_assign", InstanceField.Method (add_assign F)) ].
    End Impl_core_ops_arith_AddAssign_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_halo2_proofs_poly_commitment_Blind_F.
    
    Module Impl_core_ops_arith_MulAssign_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_halo2_proofs_poly_commitment_Blind_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::Blind") [ F ].
      
      (*
          fn mul_assign(&mut self, rhs: F) {
              self.0 *= rhs;
          }
      *)
      Definition mul_assign (F : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match τ, α with
        | [], [ self; rhs ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let rhs := M.alloc (| rhs |) in
            M.read (|
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::arith::MulAssign",
                      F,
                      [ F ],
                      "mul_assign",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_tuple_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::commitment::Blind",
                        0
                      |);
                      M.read (| rhs |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::ops::arith::MulAssign"
          (Self F)
          (* Trait polymorphic types *) [ (* Rhs *) F ]
          (* Instance *) [ ("mul_assign", InstanceField.Method (mul_assign F)) ].
    End Impl_core_ops_arith_MulAssign_where_pairing_bn256_arithmetic_fields_FieldExt_F_F_for_halo2_proofs_poly_commitment_Blind_F.
    
    Module Impl_halo2_proofs_poly_commitment_ParamsVerifier_E.
      Definition Self (E : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::commitment::ParamsVerifier") [ E ].
      
      (*
          pub fn public_inputs_size(&self) -> usize {
              self.g_lagrange.len()
          }
      *)
      Definition public_inputs_size (E : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                "len",
                []
              |),
              [
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::poly::commitment::ParamsVerifier",
                  "g_lagrange"
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_public_inputs_size :
        forall (E : Ty.t),
        M.IsAssociatedFunction (Self E) "public_inputs_size" (public_inputs_size E).
      
      (*
          pub fn empty_msm(&self) -> MSM<E::G1Affine> {
              MSM::new()
          }
      *)
      Definition empty_msm (E : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ Ty.associated ],
                "new",
                []
              |),
              []
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_empty_msm :
        forall (E : Ty.t),
        M.IsAssociatedFunction (Self E) "empty_msm" (empty_msm E).
      
      (*
          pub fn commit_lagrange(&self, scalars: Vec<E::Scalar>) -> E::G1 {
              let bases = &self.g_lagrange;
              let size = scalars.len();
              assert!(bases.len() >= size);
              best_multiexp_gpu_cond(&scalars, &bases[0..size])
          }
      *)
      Definition commit_lagrange (E : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E in
        match τ, α with
        | [], [ self; scalars ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let scalars := M.alloc (| scalars |) in
            M.read (|
              let bases :=
                M.alloc (|
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::poly::commitment::ParamsVerifier",
                    "g_lagrange"
                  |)
                |) in
              let size :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                      "len",
                      []
                    |),
                    [ scalars ]
                  |)
                |) in
              let _ :=
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              UnOp.Pure.not
                                (BinOp.Pure.ge
                                  (M.call_closure (|
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                      "len",
                                      []
                                    |),
                                    [ M.read (| bases |) ]
                                  |))
                                  (M.read (| size |)))
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.alloc (|
                          M.never_to_any (|
                            M.call_closure (|
                              M.get_function (| "core::panicking::panic", [] |),
                              [ M.read (| Value.String "assertion failed: bases.len() >= size" |) ]
                            |)
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              M.alloc (|
                M.call_closure (|
                  M.get_function (|
                    "halo2_proofs::arithmetic::best_multiexp_gpu_cond",
                    [ Ty.associated ]
                  |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::deref::Deref",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                        [],
                        "deref",
                        []
                      |),
                      [ scalars ]
                    |);
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::index::Index",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                        [ Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "usize" ] ],
                        "index",
                        []
                      |),
                      [
                        M.read (| bases |);
                        Value.StructRecord
                          "core::ops::range::Range"
                          [ ("start", Value.Integer 0); ("end_", M.read (| size |)) ]
                      ]
                    |)
                  ]
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_commit_lagrange :
        forall (E : Ty.t),
        M.IsAssociatedFunction (Self E) "commit_lagrange" (commit_lagrange E).
      
      (*
          pub fn write<W: io::Write>(&self, writer: &mut W) -> io::Result<()> {
              writer.write_all(&self.k.to_le_bytes())?;
              let public_inputs_size = self.public_inputs_size() as u32;
              writer.write_all(&public_inputs_size.to_le_bytes())?;
      
              writer.write_all(self.g1.to_bytes().as_ref())?;
              writer.write_all(self.g2.to_bytes().as_ref())?;
              writer.write_all(self.s_g2.to_bytes().as_ref())?;
              for el in &self.g_lagrange {
                  writer.write_all(el.to_bytes().as_ref())?;
              }
              Ok(())
          }
      *)
      Definition write (E : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E in
        match τ, α with
        | [ W ], [ self; writer ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let writer := M.alloc (| writer |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (| "std::io::Write", W, [], "write_all", [] |),
                              [
                                M.read (| writer |);
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "u32",
                                        "to_le_bytes",
                                        []
                                      |),
                                      [
                                        M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "halo2_proofs::poly::commitment::ParamsVerifier",
                                            "k"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let public_inputs_size :=
                    M.alloc (|
                      M.rust_cast
                        (M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::poly::commitment::ParamsVerifier")
                              [ E ],
                            "public_inputs_size",
                            []
                          |),
                          [ M.read (| self |) ]
                        |))
                    |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (| "std::io::Write", W, [], "write_all", [] |),
                              [
                                M.read (| writer |);
                                (* Unsize *)
                                M.pointer_coercion
                                  (M.alloc (|
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.path "u32",
                                        "to_le_bytes",
                                        []
                                      |),
                                      [ M.read (| public_inputs_size |) ]
                                    |)
                                  |))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (| "std::io::Write", W, [], "write_all", [] |),
                              [
                                M.read (| writer |);
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::convert::AsRef",
                                    Ty.associated,
                                    [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ],
                                    "as_ref",
                                    []
                                  |),
                                  [
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "group::GroupEncoding",
                                          Ty.associated,
                                          [],
                                          "to_bytes",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "halo2_proofs::poly::commitment::ParamsVerifier",
                                            "g1"
                                          |)
                                        ]
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (| "std::io::Write", W, [], "write_all", [] |),
                              [
                                M.read (| writer |);
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::convert::AsRef",
                                    Ty.associated,
                                    [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ],
                                    "as_ref",
                                    []
                                  |),
                                  [
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "group::GroupEncoding",
                                          Ty.associated,
                                          [],
                                          "to_bytes",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "halo2_proofs::poly::commitment::ParamsVerifier",
                                            "g2"
                                          |)
                                        ]
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (| "std::io::Write", W, [], "write_all", [] |),
                              [
                                M.read (| writer |);
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::convert::AsRef",
                                    Ty.associated,
                                    [ Ty.apply (Ty.path "slice") [ Ty.path "u8" ] ],
                                    "as_ref",
                                    []
                                  |),
                                  [
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "group::GroupEncoding",
                                          Ty.associated,
                                          [],
                                          "to_bytes",
                                          []
                                        |),
                                        [
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "halo2_proofs::poly::commitment::ParamsVerifier",
                                            "s_g2"
                                          |)
                                        ]
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let _ :=
                    M.use
                      (M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "&")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                                ],
                              [],
                              "into_iter",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::poly::commitment::ParamsVerifier",
                                "g_lagrange"
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter := M.copy (| γ |) in
                              M.loop (|
                                ltac:(M.monadic
                                  (let _ :=
                                    M.match_operator (|
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [ Ty.associated ],
                                            [],
                                            "next",
                                            []
                                          |),
                                          [ iter ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.alloc (|
                                              M.never_to_any (| M.read (| M.break (||) |) |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let el := M.copy (| γ0_0 |) in
                                            let _ :=
                                              M.match_operator (|
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::try_trait::Try",
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path "std::io::error::Error"
                                                        ],
                                                      [],
                                                      "branch",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "std::io::Write",
                                                          W,
                                                          [],
                                                          "write_all",
                                                          []
                                                        |),
                                                        [
                                                          M.read (| writer |);
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::convert::AsRef",
                                                              Ty.associated,
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  [ Ty.path "u8" ]
                                                              ],
                                                              "as_ref",
                                                              []
                                                            |),
                                                            [
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "group::GroupEncoding",
                                                                    Ty.associated,
                                                                    [],
                                                                    "to_bytes",
                                                                    []
                                                                  |),
                                                                  [ M.read (| el |) ]
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Break",
                                                          0
                                                        |) in
                                                      let residual := M.copy (| γ0_0 |) in
                                                      M.alloc (|
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::try_trait::FromResidual",
                                                                  Ty.apply
                                                                    (Ty.path "core::result::Result")
                                                                    [
                                                                      Ty.tuple [];
                                                                      Ty.path
                                                                        "std::io::error::Error"
                                                                    ],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.path
                                                                          "core::convert::Infallible";
                                                                        Ty.path
                                                                          "std::io::error::Error"
                                                                      ]
                                                                  ],
                                                                  "from_residual",
                                                                  []
                                                                |),
                                                                [ M.read (| residual |) ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::ops::control_flow::ControlFlow::Continue",
                                                          0
                                                        |) in
                                                      let val := M.copy (| γ0_0 |) in
                                                      val))
                                                ]
                                              |) in
                                            M.alloc (| Value.Tuple [] |)))
                                      ]
                                    |) in
                                  M.alloc (| Value.Tuple [] |)))
                              |)))
                        ]
                      |)) in
                  M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_write :
        forall (E : Ty.t),
        M.IsAssociatedFunction (Self E) "write" (write E).
      
      (*
          pub fn read<R: io::Read>(mut reader: R) -> io::Result<Self> {
              let mut k = [0u8; 4];
              reader.read_exact(&mut k[..])?;
              let k = u32::from_le_bytes(k);
      
              let mut public_inputs_size = [0u8; 4];
              reader.read_exact(&mut public_inputs_size[..])?;
              let public_inputs_size = u32::from_le_bytes(public_inputs_size);
      
              let n = 1 << k;
      
              let g1 = E::G1Affine::read(&mut reader)?;
              let g2 = E::G2Affine::read(&mut reader)?;
              let s_g2 = E::G2Affine::read(&mut reader)?;
              let g_lagrange: Vec<E::G1Affine> = (0..public_inputs_size)
                  .map(|_| E::G1Affine::read(&mut reader))
                  .collect::<Result<_, _>>()?;
      
              Ok(ParamsVerifier {
                  k,
                  n,
                  g1,
                  g2,
                  s_g2,
                  g_lagrange,
              })
          }
      *)
      Definition read (E : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E in
        match τ, α with
        | [ R ], [ reader ] =>
          ltac:(M.monadic
            (let reader := M.alloc (| reader |) in
            M.catch_return (|
              ltac:(M.monadic
                (M.read (|
                  let k := M.alloc (| repeat (Value.Integer 0) 4 |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (| "std::io::Read", R, [], "read_exact", [] |),
                              [
                                reader;
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::index::IndexMut",
                                    Ty.apply (Ty.path "array") [ Ty.path "u8" ],
                                    [ Ty.path "core::ops::range::RangeFull" ],
                                    "index_mut",
                                    []
                                  |),
                                  [ k; Value.StructTuple "core::ops::range::RangeFull" [] ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::commitment::ParamsVerifier")
                                              [ E ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let k :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (| Ty.path "u32", "from_le_bytes", [] |),
                        [ M.read (| k |) ]
                      |)
                    |) in
                  let public_inputs_size := M.alloc (| repeat (Value.Integer 0) 4 |) in
                  let _ :=
                    M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                            [],
                            "branch",
                            []
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (| "std::io::Read", R, [], "read_exact", [] |),
                              [
                                reader;
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::index::IndexMut",
                                    Ty.apply (Ty.path "array") [ Ty.path "u8" ],
                                    [ Ty.path "core::ops::range::RangeFull" ],
                                    "index_mut",
                                    []
                                  |),
                                  [
                                    public_inputs_size;
                                    Value.StructTuple "core::ops::range::RangeFull" []
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual := M.copy (| γ0_0 |) in
                            M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::commitment::ParamsVerifier")
                                              [ E ];
                                            Ty.path "std::io::error::Error"
                                          ],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.path "std::io::error::Error"
                                            ]
                                        ],
                                        "from_residual",
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| γ0_0 |) in
                            val))
                      ]
                    |) in
                  let public_inputs_size :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (| Ty.path "u32", "from_le_bytes", [] |),
                        [ M.read (| public_inputs_size |) ]
                      |)
                    |) in
                  let n := M.alloc (| BinOp.Panic.shl (| Value.Integer 1, M.read (| k |) |) |) in
                  let g1 :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.associated; Ty.path "std::io::error::Error" ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "halo2_proofs::helpers::CurveRead",
                                  Ty.associated,
                                  [],
                                  "read",
                                  [ R ]
                                |),
                                [ reader ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::poly::commitment::ParamsVerifier")
                                                [ E ];
                                              Ty.path "std::io::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "std::io::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let g2 :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.associated; Ty.path "std::io::error::Error" ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "halo2_proofs::helpers::CurveRead",
                                  Ty.associated,
                                  [],
                                  "read",
                                  [ R ]
                                |),
                                [ reader ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::poly::commitment::ParamsVerifier")
                                                [ E ];
                                              Ty.path "std::io::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "std::io::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let s_g2 :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [ Ty.associated; Ty.path "std::io::error::Error" ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "halo2_proofs::helpers::CurveRead",
                                  Ty.associated,
                                  [],
                                  "read",
                                  [ R ]
                                |),
                                [ reader ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::poly::commitment::ParamsVerifier")
                                                [ E ];
                                              Ty.path "std::io::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "std::io::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  let g_lagrange :=
                    M.copy (|
                      M.match_operator (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "std::io::error::Error"
                                ],
                              [],
                              "branch",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::map::Map")
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        [ Ty.path "u32" ];
                                      Ty.function
                                        [ Ty.tuple [ Ty.path "u32" ] ]
                                        (Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.associated; Ty.path "std::io::error::Error" ])
                                    ],
                                  [],
                                  "collect",
                                  [
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "std::io::error::Error"
                                      ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        [ Ty.path "u32" ],
                                      [],
                                      "map",
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          [ Ty.associated; Ty.path "std::io::error::Error" ];
                                        Ty.function
                                          [ Ty.tuple [ Ty.path "u32" ] ]
                                          (Ty.apply
                                            (Ty.path "core::result::Result")
                                            [ Ty.associated; Ty.path "std::io::error::Error" ])
                                      ]
                                    |),
                                    [
                                      Value.StructRecord
                                        "core::ops::range::Range"
                                        [
                                          ("start", Value.Integer 0);
                                          ("end_", M.read (| public_inputs_size |))
                                        ];
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              M.match_operator (|
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        M.get_trait_method (|
                                                          "halo2_proofs::helpers::CurveRead",
                                                          Ty.associated,
                                                          [],
                                                          "read",
                                                          [ R ]
                                                        |),
                                                        [ reader ]
                                                      |)))
                                                ]
                                              |)
                                            | _ => M.impossible (||)
                                            end))
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual := M.copy (| γ0_0 |) in
                              M.alloc (|
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::poly::commitment::ParamsVerifier")
                                                [ E ];
                                              Ty.path "std::io::error::Error"
                                            ],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path "std::io::error::Error"
                                              ]
                                          ],
                                          "from_residual",
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| γ0_0 |) in
                              val))
                        ]
                      |)
                    |) in
                  M.alloc (|
                    Value.StructTuple
                      "core::result::Result::Ok"
                      [
                        Value.StructRecord
                          "halo2_proofs::poly::commitment::ParamsVerifier"
                          [
                            ("k", M.read (| k |));
                            ("n", M.read (| n |));
                            ("g1", M.read (| g1 |));
                            ("g2", M.read (| g2 |));
                            ("s_g2", M.read (| s_g2 |));
                            ("g_lagrange", M.read (| g_lagrange |))
                          ]
                      ]
                  |)
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_read :
        forall (E : Ty.t),
        M.IsAssociatedFunction (Self E) "read" (read E).
    End Impl_halo2_proofs_poly_commitment_ParamsVerifier_E.
  End commitment.
End poly.
