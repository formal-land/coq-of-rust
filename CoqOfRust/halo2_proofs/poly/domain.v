(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module poly.
  Module domain.
    (* StructRecord
      {
        name := "EvaluationDomain";
        ty_params := [ "G" ];
        fields :=
          [
            ("n", Ty.path "u64");
            ("k", Ty.path "u32");
            ("extended_k", Ty.path "u32");
            ("omega", Ty.associated);
            ("omega_inv", Ty.associated);
            ("extended_omega", Ty.associated);
            ("extended_omega_inv", Ty.associated);
            ("g_coset", Ty.associated);
            ("g_coset_inv", Ty.associated);
            ("quotient_poly_degree", Ty.path "u64");
            ("ifft_divisor", Ty.associated);
            ("extended_ifft_divisor", Ty.associated);
            ("t_evaluations",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.associated; Ty.path "alloc::alloc::Global" ]);
            ("barycentric_weight", Ty.associated)
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_G_where_pairing_bn256_arithmetic_Group_G_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_poly_domain_EvaluationDomain_G.
      Definition Self (G : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::domain::EvaluationDomain") [ G ].
      
      (* Debug *)
      Definition fmt (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.read (|
              let names :=
                M.alloc (|
                  M.alloc (|
                    Value.Array
                      [
                        M.read (| Value.String "n" |);
                        M.read (| Value.String "k" |);
                        M.read (| Value.String "extended_k" |);
                        M.read (| Value.String "omega" |);
                        M.read (| Value.String "omega_inv" |);
                        M.read (| Value.String "extended_omega" |);
                        M.read (| Value.String "extended_omega_inv" |);
                        M.read (| Value.String "g_coset" |);
                        M.read (| Value.String "g_coset_inv" |);
                        M.read (| Value.String "quotient_poly_degree" |);
                        M.read (| Value.String "ifft_divisor" |);
                        M.read (| Value.String "extended_ifft_divisor" |);
                        M.read (| Value.String "t_evaluations" |);
                        M.read (| Value.String "barycentric_weight" |)
                      ]
                  |)
                |) in
              let values :=
                M.alloc (|
                  (* Unsize *)
                  M.pointer_coercion
                    (M.alloc (|
                      Value.Array
                        [
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::domain::EvaluationDomain",
                              "n"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::domain::EvaluationDomain",
                              "k"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::domain::EvaluationDomain",
                              "extended_k"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::domain::EvaluationDomain",
                              "omega"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::domain::EvaluationDomain",
                              "omega_inv"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::domain::EvaluationDomain",
                              "extended_omega"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::domain::EvaluationDomain",
                              "extended_omega_inv"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::domain::EvaluationDomain",
                              "g_coset"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::domain::EvaluationDomain",
                              "g_coset_inv"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::domain::EvaluationDomain",
                              "quotient_poly_degree"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::domain::EvaluationDomain",
                              "ifft_divisor"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::domain::EvaluationDomain",
                              "extended_ifft_divisor"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::domain::EvaluationDomain",
                              "t_evaluations"
                            |));
                          (* Unsize *)
                          M.pointer_coercion
                            (M.alloc (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::poly::domain::EvaluationDomain",
                                "barycentric_weight"
                              |)
                            |))
                        ]
                    |))
                |) in
              M.alloc (|
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_fields_finish",
                    []
                  |),
                  [
                    M.read (| f |);
                    M.read (| Value.String "EvaluationDomain" |);
                    (* Unsize *) M.pointer_coercion (M.read (| names |));
                    M.read (| values |)
                  ]
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (G : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self G)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt G)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_G_where_pairing_bn256_arithmetic_Group_G_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_poly_domain_EvaluationDomain_G.
    
    Module Impl_core_marker_StructuralPartialEq_where_pairing_bn256_arithmetic_Group_G_for_halo2_proofs_poly_domain_EvaluationDomain_G.
      Definition Self (G : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::domain::EvaluationDomain") [ G ].
      
      Axiom Implements :
        forall (G : Ty.t),
        M.IsTraitInstance
          "core::marker::StructuralPartialEq"
          (Self G)
          (* Trait polymorphic types *) []
          (* Instance *) [].
    End Impl_core_marker_StructuralPartialEq_where_pairing_bn256_arithmetic_Group_G_for_halo2_proofs_poly_domain_EvaluationDomain_G.
    
    Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_G_where_pairing_bn256_arithmetic_Group_G_where_core_cmp_PartialEq_associated_type_where_core_cmp_PartialEq_associated_type_where_core_cmp_PartialEq_associated_type_where_core_cmp_PartialEq_associated_type_where_core_cmp_PartialEq_associated_type_where_core_cmp_PartialEq_associated_type_where_core_cmp_PartialEq_associated_type_where_core_cmp_PartialEq_associated_type_where_core_cmp_PartialEq_associated_type_where_core_cmp_PartialEq_associated_type_for_halo2_proofs_poly_domain_EvaluationDomain_G.
      Definition Self (G : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::domain::EvaluationDomain") [ G ].
      
      (* PartialEq *)
      Definition eq (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            LogicalOp.and (|
              LogicalOp.and (|
                LogicalOp.and (|
                  LogicalOp.and (|
                    LogicalOp.and (|
                      LogicalOp.and (|
                        LogicalOp.and (|
                          LogicalOp.and (|
                            LogicalOp.and (|
                              LogicalOp.and (|
                                LogicalOp.and (|
                                  LogicalOp.and (|
                                    LogicalOp.and (|
                                      BinOp.Pure.eq
                                        (M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "halo2_proofs::poly::domain::EvaluationDomain",
                                            "n"
                                          |)
                                        |))
                                        (M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| other |),
                                            "halo2_proofs::poly::domain::EvaluationDomain",
                                            "n"
                                          |)
                                        |)),
                                      ltac:(M.monadic
                                        (BinOp.Pure.eq
                                          (M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "halo2_proofs::poly::domain::EvaluationDomain",
                                              "k"
                                            |)
                                          |))
                                          (M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| other |),
                                              "halo2_proofs::poly::domain::EvaluationDomain",
                                              "k"
                                            |)
                                          |))))
                                    |),
                                    ltac:(M.monadic
                                      (BinOp.Pure.eq
                                        (M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| self |),
                                            "halo2_proofs::poly::domain::EvaluationDomain",
                                            "extended_k"
                                          |)
                                        |))
                                        (M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.read (| other |),
                                            "halo2_proofs::poly::domain::EvaluationDomain",
                                            "extended_k"
                                          |)
                                        |))))
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.associated,
                                        [ Ty.associated ],
                                        "eq",
                                        []
                                      |),
                                      [
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| self |),
                                          "halo2_proofs::poly::domain::EvaluationDomain",
                                          "omega"
                                        |);
                                        M.SubPointer.get_struct_record_field (|
                                          M.read (| other |),
                                          "halo2_proofs::poly::domain::EvaluationDomain",
                                          "omega"
                                        |)
                                      ]
                                    |)))
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.associated,
                                      [ Ty.associated ],
                                      "eq",
                                      []
                                    |),
                                    [
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| self |),
                                        "halo2_proofs::poly::domain::EvaluationDomain",
                                        "omega_inv"
                                      |);
                                      M.SubPointer.get_struct_record_field (|
                                        M.read (| other |),
                                        "halo2_proofs::poly::domain::EvaluationDomain",
                                        "omega_inv"
                                      |)
                                    ]
                                  |)))
                              |),
                              ltac:(M.monadic
                                (M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.associated,
                                    [ Ty.associated ],
                                    "eq",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "halo2_proofs::poly::domain::EvaluationDomain",
                                      "extended_omega"
                                    |);
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| other |),
                                      "halo2_proofs::poly::domain::EvaluationDomain",
                                      "extended_omega"
                                    |)
                                  ]
                                |)))
                            |),
                            ltac:(M.monadic
                              (M.call_closure (|
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.associated,
                                  [ Ty.associated ],
                                  "eq",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "halo2_proofs::poly::domain::EvaluationDomain",
                                    "extended_omega_inv"
                                  |);
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| other |),
                                    "halo2_proofs::poly::domain::EvaluationDomain",
                                    "extended_omega_inv"
                                  |)
                                ]
                              |)))
                          |),
                          ltac:(M.monadic
                            (M.call_closure (|
                              M.get_trait_method (|
                                "core::cmp::PartialEq",
                                Ty.associated,
                                [ Ty.associated ],
                                "eq",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::poly::domain::EvaluationDomain",
                                  "g_coset"
                                |);
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| other |),
                                  "halo2_proofs::poly::domain::EvaluationDomain",
                                  "g_coset"
                                |)
                              ]
                            |)))
                        |),
                        ltac:(M.monadic
                          (M.call_closure (|
                            M.get_trait_method (|
                              "core::cmp::PartialEq",
                              Ty.associated,
                              [ Ty.associated ],
                              "eq",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::poly::domain::EvaluationDomain",
                                "g_coset_inv"
                              |);
                              M.SubPointer.get_struct_record_field (|
                                M.read (| other |),
                                "halo2_proofs::poly::domain::EvaluationDomain",
                                "g_coset_inv"
                              |)
                            ]
                          |)))
                      |),
                      ltac:(M.monadic
                        (BinOp.Pure.eq
                          (M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::domain::EvaluationDomain",
                              "quotient_poly_degree"
                            |)
                          |))
                          (M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| other |),
                              "halo2_proofs::poly::domain::EvaluationDomain",
                              "quotient_poly_degree"
                            |)
                          |))))
                    |),
                    ltac:(M.monadic
                      (M.call_closure (|
                        M.get_trait_method (|
                          "core::cmp::PartialEq",
                          Ty.associated,
                          [ Ty.associated ],
                          "eq",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::poly::domain::EvaluationDomain",
                            "ifft_divisor"
                          |);
                          M.SubPointer.get_struct_record_field (|
                            M.read (| other |),
                            "halo2_proofs::poly::domain::EvaluationDomain",
                            "ifft_divisor"
                          |)
                        ]
                      |)))
                  |),
                  ltac:(M.monadic
                    (M.call_closure (|
                      M.get_trait_method (|
                        "core::cmp::PartialEq",
                        Ty.associated,
                        [ Ty.associated ],
                        "eq",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::poly::domain::EvaluationDomain",
                          "extended_ifft_divisor"
                        |);
                        M.SubPointer.get_struct_record_field (|
                          M.read (| other |),
                          "halo2_proofs::poly::domain::EvaluationDomain",
                          "extended_ifft_divisor"
                        |)
                      ]
                    |)))
                |),
                ltac:(M.monadic
                  (M.call_closure (|
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                      ],
                      "eq",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::domain::EvaluationDomain",
                        "t_evaluations"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        M.read (| other |),
                        "halo2_proofs::poly::domain::EvaluationDomain",
                        "t_evaluations"
                      |)
                    ]
                  |)))
              |),
              ltac:(M.monadic
                (M.call_closure (|
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.associated,
                    [ Ty.associated ],
                    "eq",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::poly::domain::EvaluationDomain",
                      "barycentric_weight"
                    |);
                    M.SubPointer.get_struct_record_field (|
                      M.read (| other |),
                      "halo2_proofs::poly::domain::EvaluationDomain",
                      "barycentric_weight"
                    |)
                  ]
                |)))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (G : Ty.t),
        M.IsTraitInstance
          "core::cmp::PartialEq"
          (Self G)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("eq", InstanceField.Method (eq G)) ].
    End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_G_where_pairing_bn256_arithmetic_Group_G_where_core_cmp_PartialEq_associated_type_where_core_cmp_PartialEq_associated_type_where_core_cmp_PartialEq_associated_type_where_core_cmp_PartialEq_associated_type_where_core_cmp_PartialEq_associated_type_where_core_cmp_PartialEq_associated_type_where_core_cmp_PartialEq_associated_type_where_core_cmp_PartialEq_associated_type_where_core_cmp_PartialEq_associated_type_where_core_cmp_PartialEq_associated_type_for_halo2_proofs_poly_domain_EvaluationDomain_G.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_G_where_pairing_bn256_arithmetic_Group_G_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_for_halo2_proofs_poly_domain_EvaluationDomain_G.
      Definition Self (G : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::domain::EvaluationDomain") [ G ].
      
      (* Clone *)
      Definition clone (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "halo2_proofs::poly::domain::EvaluationDomain"
              [
                ("n",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.path "u64", [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::domain::EvaluationDomain",
                        "n"
                      |)
                    ]
                  |));
                ("k",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.path "u32", [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::domain::EvaluationDomain",
                        "k"
                      |)
                    ]
                  |));
                ("extended_k",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.path "u32", [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::domain::EvaluationDomain",
                        "extended_k"
                      |)
                    ]
                  |));
                ("omega",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.associated, [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::domain::EvaluationDomain",
                        "omega"
                      |)
                    ]
                  |));
                ("omega_inv",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.associated, [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::domain::EvaluationDomain",
                        "omega_inv"
                      |)
                    ]
                  |));
                ("extended_omega",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.associated, [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::domain::EvaluationDomain",
                        "extended_omega"
                      |)
                    ]
                  |));
                ("extended_omega_inv",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.associated, [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::domain::EvaluationDomain",
                        "extended_omega_inv"
                      |)
                    ]
                  |));
                ("g_coset",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.associated, [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::domain::EvaluationDomain",
                        "g_coset"
                      |)
                    ]
                  |));
                ("g_coset_inv",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.associated, [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::domain::EvaluationDomain",
                        "g_coset_inv"
                      |)
                    ]
                  |));
                ("quotient_poly_degree",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.path "u64", [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::domain::EvaluationDomain",
                        "quotient_poly_degree"
                      |)
                    ]
                  |));
                ("ifft_divisor",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.associated, [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::domain::EvaluationDomain",
                        "ifft_divisor"
                      |)
                    ]
                  |));
                ("extended_ifft_divisor",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.associated, [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::domain::EvaluationDomain",
                        "extended_ifft_divisor"
                      |)
                    ]
                  |));
                ("t_evaluations",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::domain::EvaluationDomain",
                        "t_evaluations"
                      |)
                    ]
                  |));
                ("barycentric_weight",
                  M.call_closure (|
                    M.get_trait_method (| "core::clone::Clone", Ty.associated, [], "clone", [] |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::domain::EvaluationDomain",
                        "barycentric_weight"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (G : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self G)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone G)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_G_where_pairing_bn256_arithmetic_Group_G_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_for_halo2_proofs_poly_domain_EvaluationDomain_G.
    
    Module Impl_halo2_proofs_poly_domain_EvaluationDomain_G.
      Definition Self (G : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::domain::EvaluationDomain") [ G ].
      
      (*
          pub fn new(j: u32, k: u32) -> Self {
              // quotient_poly_degree * params.n - 1 is the degree of the quotient polynomial
              let quotient_poly_degree = (j - 1) as u64;
      
              // n = 2^k
              let n = 1u64 << k;
      
              debug!("quotient_poly_degree {}", quotient_poly_degree);
      
              // We need to work within an extended domain, not params.k but params.k + i
              // for some integer i such that 2^(params.k + i) is sufficiently large to
              // describe the quotient polynomial.
              let mut extended_k = k;
              while (1 << extended_k) < (n * quotient_poly_degree) {
                  extended_k += 1;
              }
      
              let mut extended_omega = G::Scalar::root_of_unity();
      
              // Get extended_omega, the 2^{extended_k}'th root of unity
              // The loop computes extended_omega = omega^{2 ^ (S - extended_k)}
              // Notice that extended_omega ^ {2 ^ extended_k} = omega ^ {2^S} = 1.
              for _ in extended_k..G::Scalar::S {
                  extended_omega = extended_omega.square();
              }
              let extended_omega = extended_omega;
              let mut extended_omega_inv = extended_omega; // Inversion computed later
      
              // Get omega, the 2^{k}'th root of unity (i.e. n'th root of unity)
              // The loop computes omega = extended_omega ^ {2 ^ (extended_k - k)}
              //           = (omega^{2 ^ (S - extended_k)})  ^ {2 ^ (extended_k - k)}
              //           = omega ^ {2 ^ (S - k)}.
              // Notice that omega ^ {2^k} = omega ^ {2^S} = 1.
              let mut omega = extended_omega;
              for _ in k..extended_k {
                  omega = omega.square();
              }
              let omega = omega;
              let mut omega_inv = omega; // Inversion computed later
      
              // We use zeta here because we know it generates a coset, and it's available
              // already.
              // The coset evaluation domain is:
              // zeta {1, extended_omega, extended_omega^2, ..., extended_omega^{(2^extended_k) - 1}}
              let g_coset = G::Scalar::ZETA;
              let g_coset_inv = g_coset.square();
      
              let mut t_evaluations = Vec::with_capacity(1 << (extended_k - k));
              {
                  // Compute the evaluations of t(X) = X^n - 1 in the coset evaluation domain.
                  // We don't have to compute all of them, because it will repeat.
                  let orig = G::Scalar::ZETA.pow_vartime(&[n as u64, 0, 0, 0]);
                  let step = extended_omega.pow_vartime(&[n as u64, 0, 0, 0]);
                  let mut cur = orig;
                  loop {
                      t_evaluations.push(cur);
                      cur *= &step;
                      if cur == orig {
                          break;
                      }
                  }
                  assert_eq!(t_evaluations.len(), 1 << (extended_k - k));
      
                  // Subtract 1 from each to give us t_evaluations[i] = t(zeta * extended_omega^i)
                  for coeff in &mut t_evaluations {
                      *coeff -= &G::Scalar::one();
                  }
      
                  // Invert, because we're dividing by this polynomial.
                  // We invert in a batch, below.
              }
      
              let mut ifft_divisor = G::Scalar::from(1 << k); // Inversion computed later
              let mut extended_ifft_divisor = G::Scalar::from(1 << extended_k); // Inversion computed later
      
              // The barycentric weight of 1 over the evaluation domain
              // 1 / \prod_{i != 0} (1 - omega^i)
              let mut barycentric_weight = G::Scalar::from(n); // Inversion computed later
      
              // Compute batch inversion
              t_evaluations
                  .iter_mut()
                  .chain(Some(&mut ifft_divisor))
                  .chain(Some(&mut extended_ifft_divisor))
                  .chain(Some(&mut barycentric_weight))
                  .chain(Some(&mut extended_omega_inv))
                  .chain(Some(&mut omega_inv))
                  .batch_invert();
      
              EvaluationDomain {
                  n,
                  k,
                  extended_k,
                  omega,
                  omega_inv,
                  extended_omega,
                  extended_omega_inv,
                  g_coset,
                  g_coset_inv,
                  quotient_poly_degree,
                  ifft_divisor,
                  extended_ifft_divisor,
                  t_evaluations,
                  barycentric_weight,
              }
          }
      *)
      Definition new (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ j; k ] =>
          ltac:(M.monadic
            (let j := M.alloc (| j |) in
            let k := M.alloc (| k |) in
            M.read (|
              let quotient_poly_degree :=
                M.alloc (|
                  M.rust_cast (BinOp.Panic.sub (| Integer.U32, M.read (| j |), Value.Integer 1 |))
                |) in
              let n := M.alloc (| BinOp.Panic.shl (| Value.Integer 1, M.read (| k |) |) |) in
              let _ :=
                let lvl := M.alloc (| Value.StructTuple "log::Level::Debug" [] |) in
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              LogicalOp.and (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::cmp::PartialOrd",
                                    Ty.path "log::Level",
                                    [ Ty.path "log::LevelFilter" ],
                                    "le",
                                    []
                                  |),
                                  [ lvl; M.get_constant (| "log::STATIC_MAX_LEVEL" |) ]
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    M.get_trait_method (|
                                      "core::cmp::PartialOrd",
                                      Ty.path "log::Level",
                                      [ Ty.path "log::LevelFilter" ],
                                      "le",
                                      []
                                    |),
                                    [
                                      lvl;
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (| "log::max_level", [] |),
                                          []
                                        |)
                                      |)
                                    ]
                                  |)))
                              |)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let _ :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_function (| "log::__private_api::log", [ Ty.tuple [] ] |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_v1",
                                    []
                                  |),
                                  [
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.alloc (|
                                        Value.Array
                                          [ M.read (| Value.String "quotient_poly_degree " |) ]
                                      |));
                                    (* Unsize *)
                                    M.pointer_coercion
                                      (M.alloc (|
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_display",
                                                [ Ty.path "u64" ]
                                              |),
                                              [ quotient_poly_degree ]
                                            |)
                                          ]
                                      |))
                                  ]
                                |);
                                M.read (| lvl |);
                                M.alloc (|
                                  Value.Tuple
                                    [
                                      M.read (| Value.String "halo2_proofs::poly::domain" |);
                                      M.read (| Value.String "halo2_proofs::poly::domain" |);
                                      M.read (| Value.String "halo2_proofs/src/poly/domain.rs" |)
                                    ]
                                |);
                                Value.Integer 51;
                                Value.Tuple []
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              let extended_k := M.copy (| k |) in
              let _ :=
                M.loop (|
                  ltac:(M.monadic
                    (M.match_operator (|
                      M.alloc (| Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  BinOp.Pure.lt
                                    (BinOp.Panic.shl (| Value.Integer 1, M.read (| extended_k |) |))
                                    (BinOp.Panic.mul (|
                                      Integer.U64,
                                      M.read (| n |),
                                      M.read (| quotient_poly_degree |)
                                    |))
                                |)) in
                            let _ :=
                              M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            let _ :=
                              let β := extended_k in
                              M.write (|
                                β,
                                BinOp.Panic.add (| Integer.U32, M.read (| β |), Value.Integer 1 |)
                              |) in
                            M.alloc (| Value.Tuple [] |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.alloc (|
                              M.never_to_any (|
                                M.read (|
                                  let _ :=
                                    M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |) in
                                  M.alloc (| Value.Tuple [] |)
                                |)
                              |)
                            |)))
                      ]
                    |)))
                |) in
              let extended_omega :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "ff::PrimeField",
                      Ty.associated,
                      [],
                      "root_of_unity",
                      []
                    |),
                    []
                  |)
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [
                              ("start", M.read (| extended_k |));
                              ("end_", M.read (| M.get_constant (| "ff::PrimeField::S" |) |))
                            ]
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          [ Ty.path "u32" ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let _ :=
                                          M.write (|
                                            extended_omega,
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "ff::Field",
                                                Ty.associated,
                                                [],
                                                "square",
                                                []
                                              |),
                                              [ extended_omega ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              let extended_omega := M.copy (| extended_omega |) in
              let extended_omega_inv := M.copy (| extended_omega |) in
              let omega := M.copy (| extended_omega |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [ Ty.path "u32" ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          Value.StructRecord
                            "core::ops::range::Range"
                            [ ("start", M.read (| k |)); ("end_", M.read (| extended_k |)) ]
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          [ Ty.path "u32" ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let _ :=
                                          M.write (|
                                            omega,
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "ff::Field",
                                                Ty.associated,
                                                [],
                                                "square",
                                                []
                                              |),
                                              [ omega ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              let omega := M.copy (| omega |) in
              let omega_inv := M.copy (| omega |) in
              let g_coset :=
                M.copy (|
                  M.get_constant (| "pairing_bn256::arithmetic::fields::FieldExt::ZETA" |)
                |) in
              let g_coset_inv :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (| "ff::Field", Ty.associated, [], "square", [] |),
                    [ g_coset ]
                  |)
                |) in
              let t_evaluations :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                      "with_capacity",
                      []
                    |),
                    [
                      BinOp.Panic.shl (|
                        Value.Integer 1,
                        BinOp.Panic.sub (| Integer.U32, M.read (| extended_k |), M.read (| k |) |)
                      |)
                    ]
                  |)
                |) in
              let _ :=
                let orig :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "ff::Field",
                        Ty.associated,
                        [],
                        "pow_vartime",
                        [ Ty.apply (Ty.path "&") [ Ty.apply (Ty.path "array") [ Ty.path "u64" ] ] ]
                      |),
                      [
                        M.get_constant (| "pairing_bn256::arithmetic::fields::FieldExt::ZETA" |);
                        M.alloc (|
                          Value.Array
                            [
                              M.read (| M.use n |);
                              Value.Integer 0;
                              Value.Integer 0;
                              Value.Integer 0
                            ]
                        |)
                      ]
                    |)
                  |) in
                let step :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "ff::Field",
                        Ty.associated,
                        [],
                        "pow_vartime",
                        [ Ty.apply (Ty.path "&") [ Ty.apply (Ty.path "array") [ Ty.path "u64" ] ] ]
                      |),
                      [
                        extended_omega;
                        M.alloc (|
                          Value.Array
                            [
                              M.read (| M.use n |);
                              Value.Integer 0;
                              Value.Integer 0;
                              Value.Integer 0
                            ]
                        |)
                      ]
                    |)
                  |) in
                let cur := M.copy (| orig |) in
                let _ :=
                  M.loop (|
                    ltac:(M.monadic
                      (let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                              "push",
                              []
                            |),
                            [ t_evaluations; M.read (| cur |) ]
                          |)
                        |) in
                      let _ :=
                        M.alloc (|
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::arith::MulAssign",
                              Ty.associated,
                              [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                              "mul_assign",
                              []
                            |),
                            [ cur; step ]
                          |)
                        |) in
                      M.match_operator (|
                        M.alloc (| Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.associated,
                                        [ Ty.associated ],
                                        "eq",
                                        []
                                      |),
                                      [ cur; orig ]
                                    |)
                                  |)) in
                              let _ :=
                                M.is_constant_or_break_match (|
                                  M.read (| γ |),
                                  Value.Bool true
                                |) in
                              M.alloc (| M.never_to_any (| M.read (| M.break (||) |) |) |)));
                          fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                        ]
                      |)))
                  |) in
                let _ :=
                  M.match_operator (|
                    M.alloc (|
                      Value.Tuple
                        [
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                "len",
                                []
                              |),
                              [ t_evaluations ]
                            |)
                          |);
                          M.alloc (|
                            BinOp.Panic.shl (|
                              Value.Integer 1,
                              BinOp.Panic.sub (|
                                Integer.U32,
                                M.read (| extended_k |),
                                M.read (| k |)
                              |)
                            |)
                          |)
                        ]
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let left_val := M.copy (| γ0_0 |) in
                          let right_val := M.copy (| γ0_1 |) in
                          M.match_operator (|
                            M.alloc (| Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        UnOp.Pure.not
                                          (BinOp.Pure.eq
                                            (M.read (| M.read (| left_val |) |))
                                            (M.read (| M.read (| right_val |) |)))
                                      |)) in
                                  let _ :=
                                    M.is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.alloc (|
                                    M.never_to_any (|
                                      M.read (|
                                        let kind :=
                                          M.alloc (|
                                            Value.StructTuple "core::panicking::AssertKind::Eq" []
                                          |) in
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_function (|
                                              "core::panicking::assert_failed",
                                              [ Ty.path "usize"; Ty.path "usize" ]
                                            |),
                                            [
                                              M.read (| kind |);
                                              M.read (| left_val |);
                                              M.read (| right_val |);
                                              Value.StructTuple "core::option::Option::None" []
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                            ]
                          |)))
                    ]
                  |) in
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "&mut")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                            ],
                          [],
                          "into_iter",
                          []
                        |),
                        [ t_evaluations ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::IterMut")
                                          [ Ty.associated ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let coeff := M.copy (| γ0_0 |) in
                                        let _ :=
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::arith::SubAssign",
                                                Ty.associated,
                                                [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                                                "sub_assign",
                                                []
                                              |),
                                              [
                                                M.read (| coeff |);
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "ff::Field",
                                                      Ty.associated,
                                                      [],
                                                      "one",
                                                      []
                                                    |),
                                                    []
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              let ifft_divisor :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.associated,
                      [ Ty.path "u64" ],
                      "from",
                      []
                    |),
                    [ BinOp.Panic.shl (| Value.Integer 1, M.read (| k |) |) ]
                  |)
                |) in
              let extended_ifft_divisor :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.associated,
                      [ Ty.path "u64" ],
                      "from",
                      []
                    |),
                    [ BinOp.Panic.shl (| Value.Integer 1, M.read (| extended_k |) |) ]
                  |)
                |) in
              let barycentric_weight :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::convert::From",
                      Ty.associated,
                      [ Ty.path "u64" ],
                      "from",
                      []
                    |),
                    [ M.read (| n |) ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "ff::batch::BatchInvert",
                      Ty.apply
                        (Ty.path "core::iter::adapters::chain::Chain")
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::IterMut")
                                            [ Ty.associated ];
                                          Ty.apply
                                            (Ty.path "core::option::IntoIter")
                                            [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::option::IntoIter")
                                        [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                                    ];
                                  Ty.apply
                                    (Ty.path "core::option::IntoIter")
                                    [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                                ];
                              Ty.apply
                                (Ty.path "core::option::IntoIter")
                                [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                            ];
                          Ty.apply
                            (Ty.path "core::option::IntoIter")
                            [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                        ],
                      [ Ty.associated ],
                      "batch_invert",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::IterMut")
                                            [ Ty.associated ];
                                          Ty.apply
                                            (Ty.path "core::option::IntoIter")
                                            [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::option::IntoIter")
                                        [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                                    ];
                                  Ty.apply
                                    (Ty.path "core::option::IntoIter")
                                    [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                                ];
                              Ty.apply
                                (Ty.path "core::option::IntoIter")
                                [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                            ],
                          [],
                          "chain",
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::IterMut")
                                            [ Ty.associated ];
                                          Ty.apply
                                            (Ty.path "core::option::IntoIter")
                                            [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::option::IntoIter")
                                        [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                                    ];
                                  Ty.apply
                                    (Ty.path "core::option::IntoIter")
                                    [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                                ],
                              [],
                              "chain",
                              [
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                              ]
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::IterMut")
                                            [ Ty.associated ];
                                          Ty.apply
                                            (Ty.path "core::option::IntoIter")
                                            [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::option::IntoIter")
                                        [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                                    ],
                                  [],
                                  "chain",
                                  [
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::IterMut")
                                            [ Ty.associated ];
                                          Ty.apply
                                            (Ty.path "core::option::IntoIter")
                                            [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                                        ],
                                      [],
                                      "chain",
                                      [
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::slice::iter::IterMut")
                                            [ Ty.associated ],
                                          [],
                                          "chain",
                                          [
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              [ Ty.apply (Ty.path "&mut") [ Ty.associated ] ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "slice") [ Ty.associated ],
                                              "iter_mut",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::deref::DerefMut",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.associated; Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  "deref_mut",
                                                  []
                                                |),
                                                [ t_evaluations ]
                                              |)
                                            ]
                                          |);
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            [ ifft_divisor ]
                                        ]
                                      |);
                                      Value.StructTuple
                                        "core::option::Option::Some"
                                        [ extended_ifft_divisor ]
                                    ]
                                  |);
                                  Value.StructTuple
                                    "core::option::Option::Some"
                                    [ barycentric_weight ]
                                ]
                              |);
                              Value.StructTuple "core::option::Option::Some" [ extended_omega_inv ]
                            ]
                          |);
                          Value.StructTuple "core::option::Option::Some" [ omega_inv ]
                        ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                Value.StructRecord
                  "halo2_proofs::poly::domain::EvaluationDomain"
                  [
                    ("n", M.read (| n |));
                    ("k", M.read (| k |));
                    ("extended_k", M.read (| extended_k |));
                    ("omega", M.read (| omega |));
                    ("omega_inv", M.read (| omega_inv |));
                    ("extended_omega", M.read (| extended_omega |));
                    ("extended_omega_inv", M.read (| extended_omega_inv |));
                    ("g_coset", M.read (| g_coset |));
                    ("g_coset_inv", M.read (| g_coset_inv |));
                    ("quotient_poly_degree", M.read (| quotient_poly_degree |));
                    ("ifft_divisor", M.read (| ifft_divisor |));
                    ("extended_ifft_divisor", M.read (| extended_ifft_divisor |));
                    ("t_evaluations", M.read (| t_evaluations |));
                    ("barycentric_weight", M.read (| barycentric_weight |))
                  ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "new" (new G).
      
      (*
          pub fn lagrange_from_vec(&self, values: Vec<G>) -> Polynomial<G, LagrangeCoeff> {
              assert_eq!(values.len(), self.n as usize);
      
              Polynomial {
                  values,
                  _marker: PhantomData,
              }
          }
      *)
      Definition lagrange_from_vec (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self; values ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let values := M.alloc (| values |) in
            M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    Value.Tuple
                      [
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ G; Ty.path "alloc::alloc::Global" ],
                              "len",
                              []
                            |),
                            [ values ]
                          |)
                        |);
                        M.alloc (|
                          M.rust_cast
                            (M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::poly::domain::EvaluationDomain",
                                "n"
                              |)
                            |))
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val := M.copy (| γ0_0 |) in
                        let right_val := M.copy (| γ0_1 |) in
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.Pure.not
                                        (BinOp.Pure.eq
                                          (M.read (| M.read (| left_val |) |))
                                          (M.read (| M.read (| right_val |) |)))
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      let kind :=
                                        M.alloc (|
                                          Value.StructTuple "core::panicking::AssertKind::Eq" []
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.read (| left_val |);
                                            M.read (| right_val |);
                                            Value.StructTuple "core::option::Option::None" []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |) in
              M.alloc (|
                Value.StructRecord
                  "halo2_proofs::poly::Polynomial"
                  [
                    ("values", M.read (| values |));
                    ("_marker", Value.StructTuple "core::marker::PhantomData" [])
                  ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_lagrange_from_vec :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "lagrange_from_vec" (lagrange_from_vec G).
      
      (*
          pub fn coeff_from_vec(&self, values: Vec<G>) -> Polynomial<G, Coeff> {
              assert_eq!(values.len(), self.n as usize);
      
              Polynomial {
                  values,
                  _marker: PhantomData,
              }
          }
      *)
      Definition coeff_from_vec (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self; values ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let values := M.alloc (| values |) in
            M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    Value.Tuple
                      [
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ G; Ty.path "alloc::alloc::Global" ],
                              "len",
                              []
                            |),
                            [ values ]
                          |)
                        |);
                        M.alloc (|
                          M.rust_cast
                            (M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::poly::domain::EvaluationDomain",
                                "n"
                              |)
                            |))
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val := M.copy (| γ0_0 |) in
                        let right_val := M.copy (| γ0_1 |) in
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.Pure.not
                                        (BinOp.Pure.eq
                                          (M.read (| M.read (| left_val |) |))
                                          (M.read (| M.read (| right_val |) |)))
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      let kind :=
                                        M.alloc (|
                                          Value.StructTuple "core::panicking::AssertKind::Eq" []
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.read (| left_val |);
                                            M.read (| right_val |);
                                            Value.StructTuple "core::option::Option::None" []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |) in
              M.alloc (|
                Value.StructRecord
                  "halo2_proofs::poly::Polynomial"
                  [
                    ("values", M.read (| values |));
                    ("_marker", Value.StructTuple "core::marker::PhantomData" [])
                  ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_coeff_from_vec :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "coeff_from_vec" (coeff_from_vec G).
      
      (*
          pub fn empty_coeff(&self) -> Polynomial<G, Coeff> {
              Polynomial {
                  values: vec![G::group_zero(); self.n as usize],
                  _marker: PhantomData,
              }
          }
      *)
      Definition empty_coeff (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "halo2_proofs::poly::Polynomial"
              [
                ("values",
                  M.call_closure (|
                    M.get_function (| "alloc::vec::from_elem", [ G ] |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "pairing_bn256::arithmetic::Group",
                          G,
                          [],
                          "group_zero",
                          []
                        |),
                        []
                      |);
                      M.rust_cast
                        (M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::poly::domain::EvaluationDomain",
                            "n"
                          |)
                        |))
                    ]
                  |));
                ("_marker", Value.StructTuple "core::marker::PhantomData" [])
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_empty_coeff :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "empty_coeff" (empty_coeff G).
      
      (*
          pub fn empty_lagrange(&self) -> Polynomial<G, LagrangeCoeff> {
              Polynomial {
                  values: vec![G::group_zero(); self.n as usize],
                  _marker: PhantomData,
              }
          }
      *)
      Definition empty_lagrange (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "halo2_proofs::poly::Polynomial"
              [
                ("values",
                  M.call_closure (|
                    M.get_function (| "alloc::vec::from_elem", [ G ] |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "pairing_bn256::arithmetic::Group",
                          G,
                          [],
                          "group_zero",
                          []
                        |),
                        []
                      |);
                      M.rust_cast
                        (M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::poly::domain::EvaluationDomain",
                            "n"
                          |)
                        |))
                    ]
                  |));
                ("_marker", Value.StructTuple "core::marker::PhantomData" [])
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_empty_lagrange :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "empty_lagrange" (empty_lagrange G).
      
      (*
          pub(crate) fn empty_lagrange_assigned(&self) -> Polynomial<Assigned<G>, LagrangeCoeff>
          where
              G: Field,
          {
              Polynomial {
                  values: vec![G::group_zero().into(); self.n as usize],
                  _marker: PhantomData,
              }
          }
      *)
      Definition empty_lagrange_assigned (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "halo2_proofs::poly::Polynomial"
              [
                ("values",
                  M.call_closure (|
                    M.get_function (|
                      "alloc::vec::from_elem",
                      [ Ty.apply (Ty.path "halo2_proofs::plonk::assigned::Assigned") [ G ] ]
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::convert::Into",
                          G,
                          [ Ty.apply (Ty.path "halo2_proofs::plonk::assigned::Assigned") [ G ] ],
                          "into",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "pairing_bn256::arithmetic::Group",
                              G,
                              [],
                              "group_zero",
                              []
                            |),
                            []
                          |)
                        ]
                      |);
                      M.rust_cast
                        (M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::poly::domain::EvaluationDomain",
                            "n"
                          |)
                        |))
                    ]
                  |));
                ("_marker", Value.StructTuple "core::marker::PhantomData" [])
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_empty_lagrange_assigned :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "empty_lagrange_assigned" (empty_lagrange_assigned G).
      
      (*
          pub fn constant_lagrange(&self, scalar: G) -> Polynomial<G, LagrangeCoeff> {
              Polynomial {
                  values: vec![scalar; self.n as usize],
                  _marker: PhantomData,
              }
          }
      *)
      Definition constant_lagrange (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self; scalar ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let scalar := M.alloc (| scalar |) in
            Value.StructRecord
              "halo2_proofs::poly::Polynomial"
              [
                ("values",
                  M.call_closure (|
                    M.get_function (| "alloc::vec::from_elem", [ G ] |),
                    [
                      M.read (| scalar |);
                      M.rust_cast
                        (M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::poly::domain::EvaluationDomain",
                            "n"
                          |)
                        |))
                    ]
                  |));
                ("_marker", Value.StructTuple "core::marker::PhantomData" [])
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_constant_lagrange :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "constant_lagrange" (constant_lagrange G).
      
      (*
          pub fn empty_extended(&self) -> Polynomial<G, ExtendedLagrangeCoeff> {
              Polynomial {
                  values: vec![G::group_zero(); self.extended_len()],
                  _marker: PhantomData,
              }
          }
      *)
      Definition empty_extended (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "halo2_proofs::poly::Polynomial"
              [
                ("values",
                  M.call_closure (|
                    M.get_function (| "alloc::vec::from_elem", [ G ] |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "pairing_bn256::arithmetic::Group",
                          G,
                          [],
                          "group_zero",
                          []
                        |),
                        []
                      |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "halo2_proofs::poly::domain::EvaluationDomain") [ G ],
                          "extended_len",
                          []
                        |),
                        [ M.read (| self |) ]
                      |)
                    ]
                  |));
                ("_marker", Value.StructTuple "core::marker::PhantomData" [])
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_empty_extended :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "empty_extended" (empty_extended G).
      
      (*
          pub fn constant_extended(&self, scalar: G) -> Polynomial<G, ExtendedLagrangeCoeff> {
              Polynomial {
                  values: vec![scalar; self.extended_len()],
                  _marker: PhantomData,
              }
          }
      *)
      Definition constant_extended (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self; scalar ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let scalar := M.alloc (| scalar |) in
            Value.StructRecord
              "halo2_proofs::poly::Polynomial"
              [
                ("values",
                  M.call_closure (|
                    M.get_function (| "alloc::vec::from_elem", [ G ] |),
                    [
                      M.read (| scalar |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "halo2_proofs::poly::domain::EvaluationDomain") [ G ],
                          "extended_len",
                          []
                        |),
                        [ M.read (| self |) ]
                      |)
                    ]
                  |));
                ("_marker", Value.StructTuple "core::marker::PhantomData" [])
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_constant_extended :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "constant_extended" (constant_extended G).
      
      (*
          pub fn lagrange_to_coeff(&self, mut a: Polynomial<G, LagrangeCoeff>) -> Polynomial<G, Coeff> {
              assert_eq!(a.values.len(), 1 << self.k);
      
              // Perform inverse FFT to obtain the polynomial in coefficient form
              Self::ifft(&mut a.values, self.omega_inv, self.k, self.ifft_divisor);
      
              Polynomial {
                  values: a.values,
                  _marker: PhantomData,
              }
          }
      *)
      Definition lagrange_to_coeff (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self; a ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let a := M.alloc (| a |) in
            M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    Value.Tuple
                      [
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ G; Ty.path "alloc::alloc::Global" ],
                              "len",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                a,
                                "halo2_proofs::poly::Polynomial",
                                "values"
                              |)
                            ]
                          |)
                        |);
                        M.alloc (|
                          BinOp.Panic.shl (|
                            Value.Integer 1,
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::poly::domain::EvaluationDomain",
                                "k"
                              |)
                            |)
                          |)
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val := M.copy (| γ0_0 |) in
                        let right_val := M.copy (| γ0_1 |) in
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.Pure.not
                                        (BinOp.Pure.eq
                                          (M.read (| M.read (| left_val |) |))
                                          (M.read (| M.read (| right_val |) |)))
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      let kind :=
                                        M.alloc (|
                                          Value.StructTuple "core::panicking::AssertKind::Eq" []
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.read (| left_val |);
                                            M.read (| right_val |);
                                            Value.StructTuple "core::option::Option::None" []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::poly::domain::EvaluationDomain") [ G ],
                      "ifft",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::DerefMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ G; Ty.path "alloc::alloc::Global" ],
                          [],
                          "deref_mut",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            a,
                            "halo2_proofs::poly::Polynomial",
                            "values"
                          |)
                        ]
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::poly::domain::EvaluationDomain",
                          "omega_inv"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::poly::domain::EvaluationDomain",
                          "k"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::poly::domain::EvaluationDomain",
                          "ifft_divisor"
                        |)
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                Value.StructRecord
                  "halo2_proofs::poly::Polynomial"
                  [
                    ("values",
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          a,
                          "halo2_proofs::poly::Polynomial",
                          "values"
                        |)
                      |));
                    ("_marker", Value.StructTuple "core::marker::PhantomData" [])
                  ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_lagrange_to_coeff :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "lagrange_to_coeff" (lagrange_to_coeff G).
      
      (*
          pub fn lagrange_to_coeff_st(
              &self,
              mut a: Polynomial<G, LagrangeCoeff>,
          ) -> Polynomial<G, Coeff> {
              assert_eq!(a.values.len(), 1 << self.k);
      
              #[cfg(feature = "cuda")]
              // Perform inverse FFT to obtain the polynomial in coefficient form
              crate::arithmetic::gpu_ifft(&mut a.values, self.omega_inv, self.k, self.ifft_divisor);
      
              #[cfg(not(feature = "cuda"))]
              Self::ifft_st(&mut a.values, self.omega_inv, self.k, self.ifft_divisor);
      
              Polynomial {
                  values: a.values,
                  _marker: PhantomData,
              }
          }
      *)
      Definition lagrange_to_coeff_st (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self; a ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let a := M.alloc (| a |) in
            M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    Value.Tuple
                      [
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ G; Ty.path "alloc::alloc::Global" ],
                              "len",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                a,
                                "halo2_proofs::poly::Polynomial",
                                "values"
                              |)
                            ]
                          |)
                        |);
                        M.alloc (|
                          BinOp.Panic.shl (|
                            Value.Integer 1,
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::poly::domain::EvaluationDomain",
                                "k"
                              |)
                            |)
                          |)
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val := M.copy (| γ0_0 |) in
                        let right_val := M.copy (| γ0_1 |) in
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.Pure.not
                                        (BinOp.Pure.eq
                                          (M.read (| M.read (| left_val |) |))
                                          (M.read (| M.read (| right_val |) |)))
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      let kind :=
                                        M.alloc (|
                                          Value.StructTuple "core::panicking::AssertKind::Eq" []
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.read (| left_val |);
                                            M.read (| right_val |);
                                            Value.StructTuple "core::option::Option::None" []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::poly::domain::EvaluationDomain") [ G ],
                      "ifft_st",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::DerefMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ G; Ty.path "alloc::alloc::Global" ],
                          [],
                          "deref_mut",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            a,
                            "halo2_proofs::poly::Polynomial",
                            "values"
                          |)
                        ]
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::poly::domain::EvaluationDomain",
                          "omega_inv"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::poly::domain::EvaluationDomain",
                          "k"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::poly::domain::EvaluationDomain",
                          "ifft_divisor"
                        |)
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                Value.StructRecord
                  "halo2_proofs::poly::Polynomial"
                  [
                    ("values",
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          a,
                          "halo2_proofs::poly::Polynomial",
                          "values"
                        |)
                      |));
                    ("_marker", Value.StructTuple "core::marker::PhantomData" [])
                  ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_lagrange_to_coeff_st :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "lagrange_to_coeff_st" (lagrange_to_coeff_st G).
      
      (*
          pub fn coeff_to_extended(
              &self,
              mut a: Polynomial<G, Coeff>,
          ) -> Polynomial<G, ExtendedLagrangeCoeff> {
              assert_eq!(a.values.len(), 1 << self.k);
      
              //let timer = start_timer!(|| format!("prepare {}", self.k));
              self.distribute_powers_zeta(&mut a.values, true);
              //end_timer!(timer);
      
              a.values.resize(self.extended_len(), G::group_zero());
              best_fft(&mut a.values, self.extended_omega, self.extended_k);
      
              Polynomial {
                  values: a.values,
                  _marker: PhantomData,
              }
          }
      *)
      Definition coeff_to_extended (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self; a ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let a := M.alloc (| a |) in
            M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    Value.Tuple
                      [
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ G; Ty.path "alloc::alloc::Global" ],
                              "len",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                a,
                                "halo2_proofs::poly::Polynomial",
                                "values"
                              |)
                            ]
                          |)
                        |);
                        M.alloc (|
                          BinOp.Panic.shl (|
                            Value.Integer 1,
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::poly::domain::EvaluationDomain",
                                "k"
                              |)
                            |)
                          |)
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val := M.copy (| γ0_0 |) in
                        let right_val := M.copy (| γ0_1 |) in
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.Pure.not
                                        (BinOp.Pure.eq
                                          (M.read (| M.read (| left_val |) |))
                                          (M.read (| M.read (| right_val |) |)))
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      let kind :=
                                        M.alloc (|
                                          Value.StructTuple "core::panicking::AssertKind::Eq" []
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.read (| left_val |);
                                            M.read (| right_val |);
                                            Value.StructTuple "core::option::Option::None" []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::poly::domain::EvaluationDomain") [ G ],
                      "distribute_powers_zeta",
                      []
                    |),
                    [
                      M.read (| self |);
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::DerefMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ G; Ty.path "alloc::alloc::Global" ],
                          [],
                          "deref_mut",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            a,
                            "halo2_proofs::poly::Polynomial",
                            "values"
                          |)
                        ]
                      |);
                      Value.Bool true
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [ G; Ty.path "alloc::alloc::Global" ],
                      "resize",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        a,
                        "halo2_proofs::poly::Polynomial",
                        "values"
                      |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "halo2_proofs::poly::domain::EvaluationDomain") [ G ],
                          "extended_len",
                          []
                        |),
                        [ M.read (| self |) ]
                      |);
                      M.call_closure (|
                        M.get_trait_method (|
                          "pairing_bn256::arithmetic::Group",
                          G,
                          [],
                          "group_zero",
                          []
                        |),
                        []
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (| "halo2_proofs::arithmetic::best_fft", [ G ] |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::DerefMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ G; Ty.path "alloc::alloc::Global" ],
                          [],
                          "deref_mut",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            a,
                            "halo2_proofs::poly::Polynomial",
                            "values"
                          |)
                        ]
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::poly::domain::EvaluationDomain",
                          "extended_omega"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::poly::domain::EvaluationDomain",
                          "extended_k"
                        |)
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                Value.StructRecord
                  "halo2_proofs::poly::Polynomial"
                  [
                    ("values",
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          a,
                          "halo2_proofs::poly::Polynomial",
                          "values"
                        |)
                      |));
                    ("_marker", Value.StructTuple "core::marker::PhantomData" [])
                  ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_coeff_to_extended :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "coeff_to_extended" (coeff_to_extended G).
      
      (*
          pub fn coeff_to_extended_without_fft(
              &self,
              mut a: Polynomial<G, Coeff>,
          ) -> Polynomial<G, PreparedExtendedLagrangeCoeff> {
              assert_eq!(a.values.len(), 1 << self.k);
      
              self.distribute_powers_zeta(&mut a.values, true);
      
              Polynomial {
                  values: a.values,
                  _marker: PhantomData,
              }
          }
      *)
      Definition coeff_to_extended_without_fft (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self; a ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let a := M.alloc (| a |) in
            M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    Value.Tuple
                      [
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ G; Ty.path "alloc::alloc::Global" ],
                              "len",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                a,
                                "halo2_proofs::poly::Polynomial",
                                "values"
                              |)
                            ]
                          |)
                        |);
                        M.alloc (|
                          BinOp.Panic.shl (|
                            Value.Integer 1,
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::poly::domain::EvaluationDomain",
                                "k"
                              |)
                            |)
                          |)
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val := M.copy (| γ0_0 |) in
                        let right_val := M.copy (| γ0_1 |) in
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.Pure.not
                                        (BinOp.Pure.eq
                                          (M.read (| M.read (| left_val |) |))
                                          (M.read (| M.read (| right_val |) |)))
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      let kind :=
                                        M.alloc (|
                                          Value.StructTuple "core::panicking::AssertKind::Eq" []
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.read (| left_val |);
                                            M.read (| right_val |);
                                            Value.StructTuple "core::option::Option::None" []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::poly::domain::EvaluationDomain") [ G ],
                      "distribute_powers_zeta",
                      []
                    |),
                    [
                      M.read (| self |);
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::DerefMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ G; Ty.path "alloc::alloc::Global" ],
                          [],
                          "deref_mut",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            a,
                            "halo2_proofs::poly::Polynomial",
                            "values"
                          |)
                        ]
                      |);
                      Value.Bool true
                    ]
                  |)
                |) in
              M.alloc (|
                Value.StructRecord
                  "halo2_proofs::poly::Polynomial"
                  [
                    ("values",
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          a,
                          "halo2_proofs::poly::Polynomial",
                          "values"
                        |)
                      |));
                    ("_marker", Value.StructTuple "core::marker::PhantomData" [])
                  ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_coeff_to_extended_without_fft :
        forall (G : Ty.t),
        M.IsAssociatedFunction
          (Self G)
          "coeff_to_extended_without_fft"
          (coeff_to_extended_without_fft G).
      
      (*
          pub fn rotate_extended(
              &self,
              poly: &Polynomial<G, ExtendedLagrangeCoeff>,
              rotation: Rotation,
          ) -> Polynomial<G, ExtendedLagrangeCoeff> {
              let new_rotation = ((1 << (self.extended_k - self.k)) * rotation.0.abs()) as usize;
      
              let mut poly = poly.clone();
      
              if rotation.0 >= 0 {
                  poly.values.rotate_left(new_rotation);
              } else {
                  poly.values.rotate_right(new_rotation);
              }
      
              poly
          }
      *)
      Definition rotate_extended (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self; poly; rotation ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let poly := M.alloc (| poly |) in
            let rotation := M.alloc (| rotation |) in
            M.read (|
              let new_rotation :=
                M.alloc (|
                  M.rust_cast
                    (BinOp.Panic.mul (|
                      Integer.I32,
                      BinOp.Panic.shl (|
                        Value.Integer 1,
                        BinOp.Panic.sub (|
                          Integer.U32,
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::domain::EvaluationDomain",
                              "extended_k"
                            |)
                          |),
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::domain::EvaluationDomain",
                              "k"
                            |)
                          |)
                        |)
                      |),
                      M.call_closure (|
                        M.get_associated_function (| Ty.path "i32", "abs", [] |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_tuple_field (|
                              rotation,
                              "halo2_proofs::poly::Rotation",
                              0
                            |)
                          |)
                        ]
                      |)
                    |))
                |) in
              let poly :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "halo2_proofs::poly::Polynomial")
                        [ G; Ty.path "halo2_proofs::poly::ExtendedLagrangeCoeff" ],
                      [],
                      "clone",
                      []
                    |),
                    [ M.read (| poly |) ]
                  |)
                |) in
              let _ :=
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              BinOp.Pure.ge
                                (M.read (|
                                  M.SubPointer.get_struct_tuple_field (|
                                    rotation,
                                    "halo2_proofs::poly::Rotation",
                                    0
                                  |)
                                |))
                                (Value.Integer 0)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let _ :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [ G ],
                                "rotate_left",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::DerefMut",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ G; Ty.path "alloc::alloc::Global" ],
                                    [],
                                    "deref_mut",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      poly,
                                      "halo2_proofs::poly::Polynomial",
                                      "values"
                                    |)
                                  ]
                                |);
                                M.read (| new_rotation |)
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let _ :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [ G ],
                                "rotate_right",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::ops::deref::DerefMut",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [ G; Ty.path "alloc::alloc::Global" ],
                                    [],
                                    "deref_mut",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      poly,
                                      "halo2_proofs::poly::Polynomial",
                                      "values"
                                    |)
                                  ]
                                |);
                                M.read (| new_rotation |)
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              poly
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_rotate_extended :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "rotate_extended" (rotate_extended G).
      
      (*
          pub fn extended_to_coeff(&self, mut a: Polynomial<G, ExtendedLagrangeCoeff>) -> Vec<G> {
              assert_eq!(a.values.len(), self.extended_len());
      
              // Inverse FFT
              Self::ifft(
                  &mut a.values,
                  self.extended_omega_inv,
                  self.extended_k,
                  self.extended_ifft_divisor,
              );
      
              // Distribute powers to move from coset; opposite from the
              // transformation we performed earlier.
              self.distribute_powers_zeta(&mut a.values, false);
      
              // Truncate it to match the size of the quotient polynomial; the
              // evaluation domain might be slightly larger than necessary because
              // it always lies on a power-of-two boundary.
              a.values
                  .truncate((&self.n * self.quotient_poly_degree) as usize);
      
              a.values
          }
      *)
      Definition extended_to_coeff (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self; a ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let a := M.alloc (| a |) in
            M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    Value.Tuple
                      [
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ G; Ty.path "alloc::alloc::Global" ],
                              "len",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                a,
                                "halo2_proofs::poly::Polynomial",
                                "values"
                              |)
                            ]
                          |)
                        |);
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                                [ G ],
                              "extended_len",
                              []
                            |),
                            [ M.read (| self |) ]
                          |)
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val := M.copy (| γ0_0 |) in
                        let right_val := M.copy (| γ0_1 |) in
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.Pure.not
                                        (BinOp.Pure.eq
                                          (M.read (| M.read (| left_val |) |))
                                          (M.read (| M.read (| right_val |) |)))
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      let kind :=
                                        M.alloc (|
                                          Value.StructTuple "core::panicking::AssertKind::Eq" []
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.read (| left_val |);
                                            M.read (| right_val |);
                                            Value.StructTuple "core::option::Option::None" []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::poly::domain::EvaluationDomain") [ G ],
                      "ifft",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::DerefMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ G; Ty.path "alloc::alloc::Global" ],
                          [],
                          "deref_mut",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            a,
                            "halo2_proofs::poly::Polynomial",
                            "values"
                          |)
                        ]
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::poly::domain::EvaluationDomain",
                          "extended_omega_inv"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::poly::domain::EvaluationDomain",
                          "extended_k"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::poly::domain::EvaluationDomain",
                          "extended_ifft_divisor"
                        |)
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::poly::domain::EvaluationDomain") [ G ],
                      "distribute_powers_zeta",
                      []
                    |),
                    [
                      M.read (| self |);
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::DerefMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ G; Ty.path "alloc::alloc::Global" ],
                          [],
                          "deref_mut",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            a,
                            "halo2_proofs::poly::Polynomial",
                            "values"
                          |)
                        ]
                      |);
                      Value.Bool false
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [ G; Ty.path "alloc::alloc::Global" ],
                      "truncate",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        a,
                        "halo2_proofs::poly::Polynomial",
                        "values"
                      |);
                      M.rust_cast
                        (M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            Ty.apply (Ty.path "&") [ Ty.path "u64" ],
                            [ Ty.path "u64" ],
                            "mul",
                            []
                          |),
                          [
                            M.SubPointer.get_struct_record_field (|
                              M.read (| self |),
                              "halo2_proofs::poly::domain::EvaluationDomain",
                              "n"
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::poly::domain::EvaluationDomain",
                                "quotient_poly_degree"
                              |)
                            |)
                          ]
                        |))
                    ]
                  |)
                |) in
              M.SubPointer.get_struct_record_field (|
                a,
                "halo2_proofs::poly::Polynomial",
                "values"
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_extended_to_coeff :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "extended_to_coeff" (extended_to_coeff G).
      
      (*
          pub fn divide_by_vanishing_poly(
              &self,
              mut a: Polynomial<G, ExtendedLagrangeCoeff>,
          ) -> Polynomial<G, ExtendedLagrangeCoeff> {
              assert_eq!(a.values.len(), self.extended_len());
      
              // Divide to obtain the quotient polynomial in the coset evaluation
              // domain.
              parallelize(&mut a.values, |h, mut index| {
                  for h in h {
                      h.group_scale(&self.t_evaluations[index % self.t_evaluations.len()]);
                      index += 1;
                  }
              });
      
              Polynomial {
                  values: a.values,
                  _marker: PhantomData,
              }
          }
      *)
      Definition divide_by_vanishing_poly (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self; a ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let a := M.alloc (| a |) in
            M.read (|
              let _ :=
                M.match_operator (|
                  M.alloc (|
                    Value.Tuple
                      [
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ G; Ty.path "alloc::alloc::Global" ],
                              "len",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                a,
                                "halo2_proofs::poly::Polynomial",
                                "values"
                              |)
                            ]
                          |)
                        |);
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::poly::domain::EvaluationDomain")
                                [ G ],
                              "extended_len",
                              []
                            |),
                            [ M.read (| self |) ]
                          |)
                        |)
                      ]
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let left_val := M.copy (| γ0_0 |) in
                        let right_val := M.copy (| γ0_1 |) in
                        M.match_operator (|
                          M.alloc (| Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      UnOp.Pure.not
                                        (BinOp.Pure.eq
                                          (M.read (| M.read (| left_val |) |))
                                          (M.read (| M.read (| right_val |) |)))
                                    |)) in
                                let _ :=
                                  M.is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.alloc (|
                                  M.never_to_any (|
                                    M.read (|
                                      let kind :=
                                        M.alloc (|
                                          Value.StructTuple "core::panicking::AssertKind::Eq" []
                                        |) in
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.read (| left_val |);
                                            M.read (| right_val |);
                                            Value.StructTuple "core::option::Option::None" []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                          ]
                        |)))
                  ]
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "halo2_proofs::arithmetic::parallelize",
                      [
                        G;
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply (Ty.path "&mut") [ Ty.apply (Ty.path "slice") [ G ] ];
                                Ty.path "usize"
                              ]
                          ]
                          (Ty.tuple [])
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::DerefMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ G; Ty.path "alloc::alloc::Global" ],
                          [],
                          "deref_mut",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            a,
                            "halo2_proofs::poly::Polynomial",
                            "values"
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0; α1 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let h := M.copy (| γ |) in
                                      M.match_operator (|
                                        M.alloc (| α1 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let index := M.copy (| γ |) in
                                              M.read (|
                                                M.use
                                                  (M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::IntoIterator",
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            [ Ty.apply (Ty.path "slice") [ G ] ],
                                                          [],
                                                          "into_iter",
                                                          []
                                                        |),
                                                        [ M.read (| h |) ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let iter := M.copy (| γ |) in
                                                          M.loop (|
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::IterMut")
                                                                          [ G ],
                                                                        [],
                                                                        "next",
                                                                        []
                                                                      |),
                                                                      [ iter ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (M.alloc (|
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.break (||)
                                                                            |)
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::option::Option::Some",
                                                                            0
                                                                          |) in
                                                                        let h :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let _ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "pairing_bn256::arithmetic::Group",
                                                                                G,
                                                                                [],
                                                                                "group_scale",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| h |);
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::index::Index",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "alloc::vec::Vec")
                                                                                      [
                                                                                        Ty.associated;
                                                                                        Ty.path
                                                                                          "alloc::alloc::Global"
                                                                                      ],
                                                                                    [
                                                                                      Ty.path
                                                                                        "usize"
                                                                                    ],
                                                                                    "index",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.read (|
                                                                                        self
                                                                                      |),
                                                                                      "halo2_proofs::poly::domain::EvaluationDomain",
                                                                                      "t_evaluations"
                                                                                    |);
                                                                                    BinOp.Panic.rem (|
                                                                                      Integer.Usize,
                                                                                      M.read (|
                                                                                        index
                                                                                      |),
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "alloc::vec::Vec")
                                                                                            [
                                                                                              Ty.associated;
                                                                                              Ty.path
                                                                                                "alloc::alloc::Global"
                                                                                            ],
                                                                                          "len",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            M.read (|
                                                                                              self
                                                                                            |),
                                                                                            "halo2_proofs::poly::domain::EvaluationDomain",
                                                                                            "t_evaluations"
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        let _ :=
                                                                          let β := index in
                                                                          M.write (|
                                                                            β,
                                                                            BinOp.Panic.add (|
                                                                              Integer.Usize,
                                                                              M.read (| β |),
                                                                              Value.Integer 1
                                                                            |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                          |)))
                                                    ]
                                                  |))
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              M.alloc (|
                Value.StructRecord
                  "halo2_proofs::poly::Polynomial"
                  [
                    ("values",
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          a,
                          "halo2_proofs::poly::Polynomial",
                          "values"
                        |)
                      |));
                    ("_marker", Value.StructTuple "core::marker::PhantomData" [])
                  ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_divide_by_vanishing_poly :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "divide_by_vanishing_poly" (divide_by_vanishing_poly G).
      
      (*
          fn distribute_powers_zeta(&self, a: &mut [G], into_coset: bool) {
              let coset_powers = if into_coset {
                  [self.g_coset, self.g_coset_inv]
              } else {
                  [self.g_coset_inv, self.g_coset]
              };
              parallelize(a, |a, mut index| {
                  for a in a {
                      // Distribute powers to move into/from coset
                      let i = index % (coset_powers.len() + 1);
                      if i != 0 {
                          a.group_scale(&coset_powers[i - 1]);
                      }
                      index += 1;
                  }
              });
          }
      *)
      Definition distribute_powers_zeta (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self; a; into_coset ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let a := M.alloc (| a |) in
            let into_coset := M.alloc (| into_coset |) in
            M.read (|
              let coset_powers :=
                M.copy (|
                  M.match_operator (|
                    M.alloc (| Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use into_coset in
                          let _ :=
                            M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.alloc (|
                            Value.Array
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "halo2_proofs::poly::domain::EvaluationDomain",
                                    "g_coset"
                                  |)
                                |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "halo2_proofs::poly::domain::EvaluationDomain",
                                    "g_coset_inv"
                                  |)
                                |)
                              ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.alloc (|
                            Value.Array
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "halo2_proofs::poly::domain::EvaluationDomain",
                                    "g_coset_inv"
                                  |)
                                |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "halo2_proofs::poly::domain::EvaluationDomain",
                                    "g_coset"
                                  |)
                                |)
                              ]
                          |)))
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "halo2_proofs::arithmetic::parallelize",
                      [
                        G;
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply (Ty.path "&mut") [ Ty.apply (Ty.path "slice") [ G ] ];
                                Ty.path "usize"
                              ]
                          ]
                          (Ty.tuple [])
                      ]
                    |),
                    [
                      M.read (| a |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0; α1 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let a := M.copy (| γ |) in
                                      M.match_operator (|
                                        M.alloc (| α1 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let index := M.copy (| γ |) in
                                              M.read (|
                                                M.use
                                                  (M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::IntoIterator",
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            [ Ty.apply (Ty.path "slice") [ G ] ],
                                                          [],
                                                          "into_iter",
                                                          []
                                                        |),
                                                        [ M.read (| a |) ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let iter := M.copy (| γ |) in
                                                          M.loop (|
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::IterMut")
                                                                          [ G ],
                                                                        [],
                                                                        "next",
                                                                        []
                                                                      |),
                                                                      [ iter ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (M.alloc (|
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.break (||)
                                                                            |)
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::option::Option::Some",
                                                                            0
                                                                          |) in
                                                                        let a :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let i :=
                                                                          M.alloc (|
                                                                            BinOp.Panic.rem (|
                                                                              Integer.Usize,
                                                                              M.read (| index |),
                                                                              BinOp.Panic.add (|
                                                                                Integer.Usize,
                                                                                M.call_closure (|
                                                                                  M.get_associated_function (|
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "slice")
                                                                                      [
                                                                                        Ty.associated
                                                                                      ],
                                                                                    "len",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    (* Unsize *)
                                                                                    M.pointer_coercion
                                                                                      coset_powers
                                                                                  ]
                                                                                |),
                                                                                Value.Integer 1
                                                                              |)
                                                                            |)
                                                                          |) in
                                                                        let _ :=
                                                                          M.match_operator (|
                                                                            M.alloc (|
                                                                              Value.Tuple []
                                                                            |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let γ :=
                                                                                    M.use
                                                                                      (M.alloc (|
                                                                                        BinOp.Pure.ne
                                                                                          (M.read (|
                                                                                            i
                                                                                          |))
                                                                                          (Value.Integer
                                                                                            0)
                                                                                      |)) in
                                                                                  let _ :=
                                                                                    M.is_constant_or_break_match (|
                                                                                      M.read (|
                                                                                        γ
                                                                                      |),
                                                                                      Value.Bool
                                                                                        true
                                                                                    |) in
                                                                                  let _ :=
                                                                                    M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "pairing_bn256::arithmetic::Group",
                                                                                          G,
                                                                                          [],
                                                                                          "group_scale",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            a
                                                                                          |);
                                                                                          M.SubPointer.get_array_field (|
                                                                                            coset_powers,
                                                                                            M.alloc (|
                                                                                              BinOp.Panic.sub (|
                                                                                                Integer.Usize,
                                                                                                M.read (|
                                                                                                  i
                                                                                                |),
                                                                                                Value.Integer
                                                                                                  1
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |) in
                                                                                  M.alloc (|
                                                                                    Value.Tuple []
                                                                                  |)));
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (M.alloc (|
                                                                                    Value.Tuple []
                                                                                  |)))
                                                                            ]
                                                                          |) in
                                                                        let _ :=
                                                                          let β := index in
                                                                          M.write (|
                                                                            β,
                                                                            BinOp.Panic.add (|
                                                                              Integer.Usize,
                                                                              M.read (| β |),
                                                                              Value.Integer 1
                                                                            |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                          |)))
                                                    ]
                                                  |))
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_distribute_powers_zeta :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "distribute_powers_zeta" (distribute_powers_zeta G).
      
      (*
          fn ifft(a: &mut [G], omega_inv: G::Scalar, log_n: u32, divisor: G::Scalar) {
              #[cfg(not(feature = "cuda"))]
              {
                  best_fft(a, omega_inv, log_n);
                  parallelize(a, |a, _| {
                      for a in a {
                          // Finish iFFT
                          a.group_scale(&divisor);
                      }
                  });
              }
      
              #[cfg(feature = "cuda")]
              crate::arithmetic::gpu_ifft(a, omega_inv, log_n, divisor)
          }
      *)
      Definition ifft (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ a; omega_inv; log_n; divisor ] =>
          ltac:(M.monadic
            (let a := M.alloc (| a |) in
            let omega_inv := M.alloc (| omega_inv |) in
            let log_n := M.alloc (| log_n |) in
            let divisor := M.alloc (| divisor |) in
            M.read (|
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (| "halo2_proofs::arithmetic::best_fft", [ G ] |),
                    [ M.read (| a |); M.read (| omega_inv |); M.read (| log_n |) ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (|
                      "halo2_proofs::arithmetic::parallelize",
                      [
                        G;
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply (Ty.path "&mut") [ Ty.apply (Ty.path "slice") [ G ] ];
                                Ty.path "usize"
                              ]
                          ]
                          (Ty.tuple [])
                      ]
                    |),
                    [
                      M.read (| a |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0; α1 ] =>
                              M.match_operator (|
                                M.alloc (| α0 |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let a := M.copy (| γ |) in
                                      M.match_operator (|
                                        M.alloc (| α1 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.read (|
                                                M.use
                                                  (M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::IntoIterator",
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            [ Ty.apply (Ty.path "slice") [ G ] ],
                                                          [],
                                                          "into_iter",
                                                          []
                                                        |),
                                                        [ M.read (| a |) ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let iter := M.copy (| γ |) in
                                                          M.loop (|
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::IterMut")
                                                                          [ G ],
                                                                        [],
                                                                        "next",
                                                                        []
                                                                      |),
                                                                      [ iter ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (M.alloc (|
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.break (||)
                                                                            |)
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::option::Option::Some",
                                                                            0
                                                                          |) in
                                                                        let a :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let _ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "pairing_bn256::arithmetic::Group",
                                                                                G,
                                                                                [],
                                                                                "group_scale",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.read (| a |);
                                                                                divisor
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                          |)))
                                                    ]
                                                  |))
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)
                            | _ => M.impossible (||)
                            end))
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_ifft :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "ifft" (ifft G).
      
      (*
          fn ifft_st(a: &mut [G], omega_inv: G::Scalar, log_n: u32, divisor: G::Scalar) {
              best_fft(a, omega_inv, log_n);
              for a in a {
                  // Finish iFFT
                  a.group_scale(&divisor);
              }
          }
      *)
      Definition ifft_st (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ a; omega_inv; log_n; divisor ] =>
          ltac:(M.monadic
            (let a := M.alloc (| a |) in
            let omega_inv := M.alloc (| omega_inv |) in
            let log_n := M.alloc (| log_n |) in
            let divisor := M.alloc (| divisor |) in
            M.read (|
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (| "halo2_proofs::arithmetic::best_fft", [ G ] |),
                    [ M.read (| a |); M.read (| omega_inv |); M.read (| log_n |) ]
                  |)
                |) in
              M.use
                (M.match_operator (|
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply (Ty.path "&mut") [ Ty.apply (Ty.path "slice") [ G ] ],
                        [],
                        "into_iter",
                        []
                      |),
                      [ M.read (| a |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter := M.copy (| γ |) in
                        M.loop (|
                          ltac:(M.monadic
                            (let _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply (Ty.path "core::slice::iter::IterMut") [ G ],
                                      [],
                                      "next",
                                      []
                                    |),
                                    [ iter ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.alloc (|
                                        M.never_to_any (| M.read (| M.break (||) |) |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let a := M.copy (| γ0_0 |) in
                                      let _ :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "pairing_bn256::arithmetic::Group",
                                              G,
                                              [],
                                              "group_scale",
                                              []
                                            |),
                                            [ M.read (| a |); divisor ]
                                          |)
                                        |) in
                                      M.alloc (| Value.Tuple [] |)))
                                ]
                              |) in
                            M.alloc (| Value.Tuple [] |)))
                        |)))
                  ]
                |))
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_ifft_st :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "ifft_st" (ifft_st G).
      
      (*
          pub fn k(&self) -> u32 {
              self.k
          }
      *)
      Definition k (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "halo2_proofs::poly::domain::EvaluationDomain",
                "k"
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_k : forall (G : Ty.t), M.IsAssociatedFunction (Self G) "k" (k G).
      
      (*
          pub fn extended_k(&self) -> u32 {
              self.extended_k
          }
      *)
      Definition extended_k (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "halo2_proofs::poly::domain::EvaluationDomain",
                "extended_k"
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_extended_k :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "extended_k" (extended_k G).
      
      (*
          pub fn extended_len(&self) -> usize {
              1 << self.extended_k
          }
      *)
      Definition extended_len (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            BinOp.Panic.shl (|
              Value.Integer 1,
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::poly::domain::EvaluationDomain",
                  "extended_k"
                |)
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_extended_len :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "extended_len" (extended_len G).
      
      (*
          pub fn get_omega(&self) -> G::Scalar {
              self.omega
          }
      *)
      Definition get_omega (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "halo2_proofs::poly::domain::EvaluationDomain",
                "omega"
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_get_omega :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "get_omega" (get_omega G).
      
      (*
          pub fn get_omega_inv(&self) -> G::Scalar {
              self.omega_inv
          }
      *)
      Definition get_omega_inv (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "halo2_proofs::poly::domain::EvaluationDomain",
                "omega_inv"
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_get_omega_inv :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "get_omega_inv" (get_omega_inv G).
      
      (*
          pub fn get_extended_omega(&self) -> G::Scalar {
              self.extended_omega
          }
      *)
      Definition get_extended_omega (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.read (| self |),
                "halo2_proofs::poly::domain::EvaluationDomain",
                "extended_omega"
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_get_extended_omega :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "get_extended_omega" (get_extended_omega G).
      
      (*
          pub fn rotate_omega(&self, value: G::Scalar, rotation: Rotation) -> G::Scalar {
              let mut point = value;
              if rotation.0 >= 0 {
                  point *= &self.get_omega().pow_vartime(&[rotation.0 as u64]);
              } else {
                  point *= &self
                      .get_omega_inv()
                      .pow_vartime(&[(rotation.0 as i64).abs() as u64]);
              }
              point
          }
      *)
      Definition rotate_omega (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self; value; rotation ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let value := M.alloc (| value |) in
            let rotation := M.alloc (| rotation |) in
            M.read (|
              let point := M.copy (| value |) in
              let _ :=
                M.match_operator (|
                  M.alloc (| Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              BinOp.Pure.ge
                                (M.read (|
                                  M.SubPointer.get_struct_tuple_field (|
                                    rotation,
                                    "halo2_proofs::poly::Rotation",
                                    0
                                  |)
                                |))
                                (Value.Integer 0)
                            |)) in
                        let _ :=
                          M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        let _ :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::arith::MulAssign",
                                Ty.associated,
                                [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                                "mul_assign",
                                []
                              |),
                              [
                                point;
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "ff::Field",
                                      Ty.associated,
                                      [],
                                      "pow_vartime",
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [ Ty.apply (Ty.path "array") [ Ty.path "u64" ] ]
                                      ]
                                    |),
                                    [
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::domain::EvaluationDomain")
                                              [ G ],
                                            "get_omega",
                                            []
                                          |),
                                          [ M.read (| self |) ]
                                        |)
                                      |);
                                      M.alloc (|
                                        Value.Array
                                          [
                                            M.rust_cast
                                              (M.read (|
                                                M.SubPointer.get_struct_tuple_field (|
                                                  rotation,
                                                  "halo2_proofs::poly::Rotation",
                                                  0
                                                |)
                                              |))
                                          ]
                                      |)
                                    ]
                                  |)
                                |)
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let _ :=
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::arith::MulAssign",
                                Ty.associated,
                                [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                                "mul_assign",
                                []
                              |),
                              [
                                point;
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "ff::Field",
                                      Ty.associated,
                                      [],
                                      "pow_vartime",
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [ Ty.apply (Ty.path "array") [ Ty.path "u64" ] ]
                                      ]
                                    |),
                                    [
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::domain::EvaluationDomain")
                                              [ G ],
                                            "get_omega_inv",
                                            []
                                          |),
                                          [ M.read (| self |) ]
                                        |)
                                      |);
                                      M.alloc (|
                                        Value.Array
                                          [
                                            M.rust_cast
                                              (M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.path "i64",
                                                  "abs",
                                                  []
                                                |),
                                                [
                                                  M.rust_cast
                                                    (M.read (|
                                                      M.SubPointer.get_struct_tuple_field (|
                                                        rotation,
                                                        "halo2_proofs::poly::Rotation",
                                                        0
                                                      |)
                                                    |))
                                                ]
                                              |))
                                          ]
                                      |)
                                    ]
                                  |)
                                |)
                              ]
                            |)
                          |) in
                        M.alloc (| Value.Tuple [] |)))
                  ]
                |) in
              point
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_rotate_omega :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "rotate_omega" (rotate_omega G).
      
      (*
          pub fn l_i_range<I: IntoIterator<Item = i32> + Clone>(
              &self,
              x: G::Scalar,
              xn: G::Scalar,
              rotations: I,
          ) -> Vec<G::Scalar> {
              let mut results;
              {
                  let rotations = rotations.clone().into_iter();
                  results = Vec::with_capacity(rotations.size_hint().1.unwrap_or(0));
                  for rotation in rotations {
                      let rotation = Rotation(rotation);
                      let result = x - self.rotate_omega(G::Scalar::one(), rotation);
                      results.push(result);
                  }
                  batch_invert(&mut results);
              }
      
              let common = (xn - G::Scalar::one()) * self.barycentric_weight;
              for (rotation, result) in rotations.into_iter().zip(results.iter_mut()) {
                  let rotation = Rotation(rotation);
                  *result = self.rotate_omega( *result * common, rotation);
              }
      
              results
          }
      *)
      Definition l_i_range (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [ _ as I ], [ self; x; xn; rotations ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let x := M.alloc (| x |) in
            let xn := M.alloc (| xn |) in
            let rotations := M.alloc (| rotations |) in
            M.read (|
              let results := M.copy (| Value.DeclaredButUndefined |) in
              let _ :=
                let rotations :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        I,
                        [],
                        "into_iter",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (| "core::clone::Clone", I, [], "clone", [] |),
                          [ rotations ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.write (|
                    results,
                    M.call_closure (|
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                        "with_capacity",
                        []
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "core::option::Option") [ Ty.path "usize" ],
                            "unwrap_or",
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_tuple_field (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.associated,
                                      [],
                                      "size_hint",
                                      []
                                    |),
                                    [ rotations ]
                                  |)
                                |),
                                1
                              |)
                            |);
                            Value.Integer 0
                          ]
                        |)
                      ]
                    |)
                  |) in
                let _ :=
                  M.use
                    (M.match_operator (|
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.associated,
                            [],
                            "into_iter",
                            []
                          |),
                          [ M.read (| rotations |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter := M.copy (| γ |) in
                            M.loop (|
                              ltac:(M.monadic
                                (let _ :=
                                  M.match_operator (|
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.associated,
                                          [],
                                          "next",
                                          []
                                        |),
                                        [ iter ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.alloc (|
                                            M.never_to_any (| M.read (| M.break (||) |) |)
                                          |)));
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 :=
                                            M.SubPointer.get_struct_tuple_field (|
                                              γ,
                                              "core::option::Option::Some",
                                              0
                                            |) in
                                          let rotation := M.copy (| γ0_0 |) in
                                          let rotation :=
                                            M.alloc (|
                                              Value.StructTuple
                                                "halo2_proofs::poly::Rotation"
                                                [ M.read (| rotation |) ]
                                            |) in
                                          let result :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::arith::Sub",
                                                  Ty.associated,
                                                  [ Ty.associated ],
                                                  "sub",
                                                  []
                                                |),
                                                [
                                                  M.read (| x |);
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::poly::domain::EvaluationDomain")
                                                        [ G ],
                                                      "rotate_omega",
                                                      []
                                                    |),
                                                    [
                                                      M.read (| self |);
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "ff::Field",
                                                          Ty.associated,
                                                          [],
                                                          "one",
                                                          []
                                                        |),
                                                        []
                                                      |);
                                                      M.read (| rotation |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.associated; Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "push",
                                                  []
                                                |),
                                                [ results; M.read (| result |) ]
                                              |)
                                            |) in
                                          M.alloc (| Value.Tuple [] |)))
                                    ]
                                  |) in
                                M.alloc (| Value.Tuple [] |)))
                            |)))
                      ]
                    |)) in
                let _ :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_function (|
                        "halo2_proofs::arithmetic::batch_invert",
                        [ Ty.associated ]
                      |),
                      [
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::ops::deref::DerefMut",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                            [],
                            "deref_mut",
                            []
                          |),
                          [ results ]
                        |)
                      ]
                    |)
                  |) in
                M.alloc (| Value.Tuple [] |) in
              let common :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::ops::arith::Mul",
                      Ty.associated,
                      [ Ty.associated ],
                      "mul",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::arith::Sub",
                          Ty.associated,
                          [ Ty.associated ],
                          "sub",
                          []
                        |),
                        [
                          M.read (| xn |);
                          M.call_closure (|
                            M.get_trait_method (| "ff::Field", Ty.associated, [], "one", [] |),
                            []
                          |)
                        ]
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::poly::domain::EvaluationDomain",
                          "barycentric_weight"
                        |)
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.use
                  (M.match_operator (|
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            [
                              Ty.associated;
                              Ty.apply (Ty.path "core::slice::iter::IterMut") [ Ty.associated ]
                            ],
                          [],
                          "into_iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.associated,
                              [],
                              "zip",
                              [ Ty.apply (Ty.path "core::slice::iter::IterMut") [ Ty.associated ] ]
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  I,
                                  [],
                                  "into_iter",
                                  []
                                |),
                                [ M.read (| rotations |) ]
                              |);
                              M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [ Ty.associated ],
                                  "iter_mut",
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::deref::DerefMut",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                      [],
                                      "deref_mut",
                                      []
                                    |),
                                    [ results ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let iter := M.copy (| γ |) in
                          M.loop (|
                            ltac:(M.monadic
                              (let _ :=
                                M.match_operator (|
                                  M.alloc (|
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          [
                                            Ty.associated;
                                            Ty.apply
                                              (Ty.path "core::slice::iter::IterMut")
                                              [ Ty.associated ]
                                          ],
                                        [],
                                        "next",
                                        []
                                      |),
                                      [ iter ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (M.alloc (|
                                          M.never_to_any (| M.read (| M.break (||) |) |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                        let rotation := M.copy (| γ1_0 |) in
                                        let result := M.copy (| γ1_1 |) in
                                        let rotation :=
                                          M.alloc (|
                                            Value.StructTuple
                                              "halo2_proofs::poly::Rotation"
                                              [ M.read (| rotation |) ]
                                          |) in
                                        let _ :=
                                          M.write (|
                                            M.read (| result |),
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::poly::domain::EvaluationDomain")
                                                  [ G ],
                                                "rotate_omega",
                                                []
                                              |),
                                              [
                                                M.read (| self |);
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::arith::Mul",
                                                    Ty.associated,
                                                    [ Ty.associated ],
                                                    "mul",
                                                    []
                                                  |),
                                                  [
                                                    M.read (| M.read (| result |) |);
                                                    M.read (| common |)
                                                  ]
                                                |);
                                                M.read (| rotation |)
                                              ]
                                            |)
                                          |) in
                                        M.alloc (| Value.Tuple [] |)))
                                  ]
                                |) in
                              M.alloc (| Value.Tuple [] |)))
                          |)))
                    ]
                  |)) in
              results
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_l_i_range :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "l_i_range" (l_i_range G).
      
      (*
          pub fn get_quotient_poly_degree(&self) -> usize {
              self.quotient_poly_degree as usize
          }
      *)
      Definition get_quotient_poly_degree (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.rust_cast
              (M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.read (| self |),
                  "halo2_proofs::poly::domain::EvaluationDomain",
                  "quotient_poly_degree"
                |)
              |))))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_get_quotient_poly_degree :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "get_quotient_poly_degree" (get_quotient_poly_degree G).
      
      (*
          pub fn pinned(&self) -> PinnedEvaluationDomain<'_, G> {
              PinnedEvaluationDomain {
                  k: &self.k,
                  extended_k: &self.extended_k,
                  omega: &self.omega,
              }
          }
      *)
      Definition pinned (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "halo2_proofs::poly::domain::PinnedEvaluationDomain"
              [
                ("k",
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::poly::domain::EvaluationDomain",
                    "k"
                  |));
                ("extended_k",
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::poly::domain::EvaluationDomain",
                    "extended_k"
                  |));
                ("omega",
                  M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::poly::domain::EvaluationDomain",
                    "omega"
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_pinned :
        forall (G : Ty.t),
        M.IsAssociatedFunction (Self G) "pinned" (pinned G).
    End Impl_halo2_proofs_poly_domain_EvaluationDomain_G.
    
    (* StructRecord
      {
        name := "PinnedEvaluationDomain";
        ty_params := [ "G" ];
        fields :=
          [
            ("k", Ty.apply (Ty.path "&") [ Ty.path "u32" ]);
            ("extended_k", Ty.apply (Ty.path "&") [ Ty.path "u32" ]);
            ("omega", Ty.apply (Ty.path "&") [ Ty.associated ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_G_where_pairing_bn256_arithmetic_Group_G_where_core_fmt_Debug_associated_type_for_halo2_proofs_poly_domain_PinnedEvaluationDomain_G.
      Definition Self (G : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::domain::PinnedEvaluationDomain") [ G ].
      
      (* Debug *)
      Definition fmt (G : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self G in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field3_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "PinnedEvaluationDomain" |);
                M.read (| Value.String "k" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::poly::domain::PinnedEvaluationDomain",
                    "k"
                  |));
                M.read (| Value.String "extended_k" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::poly::domain::PinnedEvaluationDomain",
                    "extended_k"
                  |));
                M.read (| Value.String "omega" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::poly::domain::PinnedEvaluationDomain",
                      "omega"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (G : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self G)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt G)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_G_where_pairing_bn256_arithmetic_Group_G_where_core_fmt_Debug_associated_type_for_halo2_proofs_poly_domain_PinnedEvaluationDomain_G.
  End domain.
End poly.
