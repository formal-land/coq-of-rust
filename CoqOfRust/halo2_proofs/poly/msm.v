(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module poly.
  Module msm.
    (* StructRecord
      {
        name := "MSM";
        ty_params := [ "C" ];
        fields :=
          [
            ("scalars",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.associated; Ty.path "alloc::alloc::Global" ]);
            ("bases", Ty.apply (Ty.path "alloc::vec::Vec") [ C; Ty.path "alloc::alloc::Global" ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_for_halo2_proofs_poly_msm_MSM_C.
      Definition Self (C : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ C ].
      
      (* Debug *)
      Definition fmt (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "MSM" |);
                M.read (| Value.String "scalars" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::poly::msm::MSM",
                    "scalars"
                  |));
                M.read (| Value.String "bases" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::poly::msm::MSM",
                      "bases"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (C : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self C)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt C)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_fmt_Debug_associated_type_for_halo2_proofs_poly_msm_MSM_C.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_clone_Clone_associated_type_for_halo2_proofs_poly_msm_MSM_C.
      Definition Self (C : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ C ].
      
      (* Clone *)
      Definition clone (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "halo2_proofs::poly::msm::MSM"
              [
                ("scalars",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::msm::MSM",
                        "scalars"
                      |)
                    ]
                  |));
                ("bases",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "alloc::vec::Vec") [ C; Ty.path "alloc::alloc::Global" ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::msm::MSM",
                        "bases"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (C : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self C)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone C)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_where_core_clone_Clone_associated_type_for_halo2_proofs_poly_msm_MSM_C.
    
    Module Impl_core_default_Default_where_pairing_bn256_arithmetic_curves_CurveAffine_C_for_halo2_proofs_poly_msm_MSM_C.
      Definition Self (C : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ C ].
      
      (*
          fn default() -> Self {
              Self::new()
          }
      *)
      Definition default (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              M.get_associated_function (|
                Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ C ],
                "new",
                []
              |),
              []
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (C : Ty.t),
        M.IsTraitInstance
          "core::default::Default"
          (Self C)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("default", InstanceField.Method (default C)) ].
    End Impl_core_default_Default_where_pairing_bn256_arithmetic_curves_CurveAffine_C_for_halo2_proofs_poly_msm_MSM_C.
    
    Module Impl_halo2_proofs_poly_msm_MSM_C.
      Definition Self (C : Ty.t) : Ty.t := Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ C ].
      
      (*
          pub fn new() -> Self {
              MSM {
                  scalars: vec![],
                  bases: vec![],
              }
          }
      *)
      Definition new (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (Value.StructRecord
              "halo2_proofs::poly::msm::MSM"
              [
                ("scalars",
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                      "new",
                      []
                    |),
                    []
                  |));
                ("bases",
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [ C; Ty.path "alloc::alloc::Global" ],
                      "new",
                      []
                    |),
                    []
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "new" (new C).
      
      (*
          pub fn add_msm(&mut self, other: &Self) {
              self.scalars.extend(other.scalars.iter());
              self.bases.extend(other.bases.iter());
          }
      *)
      Definition add_msm (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::collect::Extend",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                      [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                      "extend",
                      [ Ty.apply (Ty.path "core::slice::iter::Iter") [ Ty.associated ] ]
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::msm::MSM",
                        "scalars"
                      |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [ Ty.associated ],
                          "iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                              [],
                              "deref",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| other |),
                                "halo2_proofs::poly::msm::MSM",
                                "scalars"
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::collect::Extend",
                      Ty.apply (Ty.path "alloc::vec::Vec") [ C; Ty.path "alloc::alloc::Global" ],
                      [ Ty.apply (Ty.path "&") [ C ] ],
                      "extend",
                      [ Ty.apply (Ty.path "core::slice::iter::Iter") [ C ] ]
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::msm::MSM",
                        "bases"
                      |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [ C ],
                          "iter",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ C; Ty.path "alloc::alloc::Global" ],
                              [],
                              "deref",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| other |),
                                "halo2_proofs::poly::msm::MSM",
                                "bases"
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_add_msm :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "add_msm" (add_msm C).
      
      (*
          pub fn append_term(&mut self, scalar: C::Scalar, point: C) {
              self.scalars.push(scalar);
              self.bases.push(point);
          }
      *)
      Definition append_term (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; scalar; point ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let scalar := M.alloc (| scalar |) in
            let point := M.alloc (| point |) in
            M.read (|
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                      "push",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::msm::MSM",
                        "scalars"
                      |);
                      M.read (| scalar |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [ C; Ty.path "alloc::alloc::Global" ],
                      "push",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::msm::MSM",
                        "bases"
                      |);
                      M.read (| point |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_append_term :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "append_term" (append_term C).
      
      (*
          pub fn scale(&mut self, factor: C::Scalar) {
              if !self.scalars.is_empty() {
                  parallelize(&mut self.scalars, |scalars, _| {
                      for other_scalar in scalars {
                          *other_scalar *= &factor;
                      }
                  })
              }
          }
      *)
      Definition scale (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; factor ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let factor := M.alloc (| factor |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.Pure.not
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                  "is_empty",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "halo2_proofs::poly::msm::MSM",
                                    "scalars"
                                  |)
                                ]
                              |))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "halo2_proofs::arithmetic::parallelize",
                            [
                              Ty.associated;
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [ Ty.apply (Ty.path "slice") [ Ty.associated ] ];
                                      Ty.path "usize"
                                    ]
                                ]
                                (Ty.tuple [])
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::DerefMut",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                [],
                                "deref_mut",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::poly::msm::MSM",
                                  "scalars"
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0; α1 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let scalars := M.copy (| γ |) in
                                            M.match_operator (|
                                              M.alloc (| α1 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.read (|
                                                      M.use
                                                        (M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::collect::IntoIterator",
                                                                Ty.apply
                                                                  (Ty.path "&mut")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      [ Ty.associated ]
                                                                  ],
                                                                [],
                                                                "into_iter",
                                                                []
                                                              |),
                                                              [ M.read (| scalars |) ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let iter := M.copy (| γ |) in
                                                                M.loop (|
                                                                  ltac:(M.monadic
                                                                    (let _ :=
                                                                      M.match_operator (|
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::IterMut")
                                                                                [ Ty.associated ],
                                                                              [],
                                                                              "next",
                                                                              []
                                                                            |),
                                                                            [ iter ]
                                                                          |)
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (M.alloc (|
                                                                                M.never_to_any (|
                                                                                  M.read (|
                                                                                    M.break (||)
                                                                                  |)
                                                                                |)
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ0_0 :=
                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                  γ,
                                                                                  "core::option::Option::Some",
                                                                                  0
                                                                                |) in
                                                                              let other_scalar :=
                                                                                M.copy (| γ0_0 |) in
                                                                              let _ :=
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::arith::MulAssign",
                                                                                      Ty.associated,
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          [
                                                                                            Ty.associated
                                                                                          ]
                                                                                      ],
                                                                                      "mul_assign",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.read (|
                                                                                        other_scalar
                                                                                      |);
                                                                                      factor
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |)))
                                                                        ]
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)))
                                                                |)))
                                                          ]
                                                        |))
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_scale :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "scale" (scale C).
      
      (*
          pub fn combine_with_base(&mut self, base: C::Scalar) {
              use ff::Field;
              let mut acc = C::Scalar::one();
              if !self.scalars.is_empty() {
                  for scalar in self.scalars.iter_mut().rev() {
                      *scalar *= &acc;
                      acc *= base;
                  }
              }
          }
      *)
      Definition combine_with_base (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; base ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let base := M.alloc (| base |) in
            M.read (|
              let acc :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (| "ff::Field", Ty.associated, [], "one", [] |),
                    []
                  |)
                |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.Pure.not
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                  "is_empty",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "halo2_proofs::poly::msm::MSM",
                                    "scalars"
                                  |)
                                ]
                              |))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::IterMut")
                                      [ Ty.associated ]
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::slice::iter::IterMut")
                                      [ Ty.associated ],
                                    [],
                                    "rev",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "slice") [ Ty.associated ],
                                        "iter_mut",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::DerefMut",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                            [],
                                            "deref_mut",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "halo2_proofs::poly::msm::MSM",
                                              "scalars"
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::rev::Rev")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::IterMut")
                                                    [ Ty.associated ]
                                                ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let scalar := M.copy (| γ0_0 |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::arith::MulAssign",
                                                      Ty.associated,
                                                      [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                                                      "mul_assign",
                                                      []
                                                    |),
                                                    [ M.read (| scalar |); acc ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::arith::MulAssign",
                                                      Ty.associated,
                                                      [ Ty.associated ],
                                                      "mul_assign",
                                                      []
                                                    |),
                                                    [ acc; M.read (| base |) ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |))));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_combine_with_base :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "combine_with_base" (combine_with_base C).
      
      (*
          pub fn eval(&self) -> C {
              best_multiexp(&self.scalars, &self.bases).into()
          }
      *)
      Definition eval (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_trait_method (| "core::convert::Into", Ty.associated, [ C ], "into", [] |),
              [
                M.call_closure (|
                  M.get_function (| "halo2_proofs::arithmetic::best_multiexp", [ C ] |),
                  [
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::deref::Deref",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                        [],
                        "deref",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::poly::msm::MSM",
                          "scalars"
                        |)
                      ]
                    |);
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::deref::Deref",
                        Ty.apply (Ty.path "alloc::vec::Vec") [ C; Ty.path "alloc::alloc::Global" ],
                        [],
                        "deref",
                        []
                      |),
                      [
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::poly::msm::MSM",
                          "bases"
                        |)
                      ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_eval :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "eval" (eval C).
      
      (*
          pub fn check(self) -> bool {
              bool::from(self.eval().is_identity())
          }
      *)
      Definition check (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.call_closure (|
              M.get_trait_method (|
                "core::convert::From",
                Ty.path "bool",
                [ Ty.path "subtle::Choice" ],
                "from",
                []
              |),
              [
                M.call_closure (|
                  M.get_trait_method (|
                    "group::prime::PrimeCurveAffine",
                    C,
                    [],
                    "is_identity",
                    []
                  |),
                  [
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ C ],
                          "eval",
                          []
                        |),
                        [ self ]
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_check :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "check" (check C).
    End Impl_halo2_proofs_poly_msm_MSM_C.
    
    (* StructRecord
      {
        name := "PairMSM";
        ty_params := [ "C" ];
        fields :=
          [
            ("left", Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ C ]);
            ("right", Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ C ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_for_halo2_proofs_poly_msm_PairMSM_C.
      Definition Self (C : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::msm::PairMSM") [ C ].
      
      (* Debug *)
      Definition fmt (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "PairMSM" |);
                M.read (| Value.String "left" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::poly::msm::PairMSM",
                    "left"
                  |));
                M.read (| Value.String "right" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::poly::msm::PairMSM",
                      "right"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (C : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self C)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt C)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_for_halo2_proofs_poly_msm_PairMSM_C.
    
    Module Impl_core_default_Default_where_core_default_Default_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_for_halo2_proofs_poly_msm_PairMSM_C.
      Definition Self (C : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::msm::PairMSM") [ C ].
      
      (* Default *)
      Definition default (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (Value.StructRecord
              "halo2_proofs::poly::msm::PairMSM"
              [
                ("left",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ C ],
                      [],
                      "default",
                      []
                    |),
                    []
                  |));
                ("right",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ C ],
                      [],
                      "default",
                      []
                    |),
                    []
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (C : Ty.t),
        M.IsTraitInstance
          "core::default::Default"
          (Self C)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("default", InstanceField.Method (default C)) ].
    End Impl_core_default_Default_where_core_default_Default_C_where_pairing_bn256_arithmetic_curves_CurveAffine_C_for_halo2_proofs_poly_msm_PairMSM_C.
    
    Module Impl_halo2_proofs_poly_msm_PairMSM_C.
      Definition Self (C : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::msm::PairMSM") [ C ].
      
      (*
          pub fn with(left: MSM<C>, right: MSM<C>) -> Self {
              Self { left, right }
          }
      *)
      Definition with_ (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ _ as left; _ as right ] =>
          ltac:(M.monadic
            (let left := M.alloc (| left |) in
            let right := M.alloc (| right |) in
            Value.StructRecord
              "halo2_proofs::poly::msm::PairMSM"
              [ ("left", M.read (| left |)); ("right", M.read (| right |)) ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_with_ :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "with_" (with_ C).
      
      (*
          pub fn eval(&self) -> (C, C) {
              (self.left.eval(), self.right.eval())
          }
      *)
      Definition eval (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.Tuple
              [
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ C ],
                    "eval",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::poly::msm::PairMSM",
                      "left"
                    |)
                  ]
                |);
                M.call_closure (|
                  M.get_associated_function (|
                    Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ C ],
                    "eval",
                    []
                  |),
                  [
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::poly::msm::PairMSM",
                      "right"
                    |)
                  ]
                |)
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_eval :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "eval" (eval C).
      
      (*
          pub fn scale(&mut self, e: C::Scalar) {
              self.left.scale(e);
              self.right.scale(e);
          }
      *)
      Definition scale (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; e ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let e := M.alloc (| e |) in
            M.read (|
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ C ],
                      "scale",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::msm::PairMSM",
                        "left"
                      |);
                      M.read (| e |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ C ],
                      "scale",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::msm::PairMSM",
                        "right"
                      |);
                      M.read (| e |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_scale :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "scale" (scale C).
      
      (*
          pub fn add_msm(&mut self, other: Self) {
              self.left.add_msm(&other.left);
              self.right.add_msm(&other.right);
          }
      *)
      Definition add_msm (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self C in
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ C ],
                      "add_msm",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::msm::PairMSM",
                        "left"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        other,
                        "halo2_proofs::poly::msm::PairMSM",
                        "left"
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ C ],
                      "add_msm",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::msm::PairMSM",
                        "right"
                      |);
                      M.SubPointer.get_struct_record_field (|
                        other,
                        "halo2_proofs::poly::msm::PairMSM",
                        "right"
                      |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_add_msm :
        forall (C : Ty.t),
        M.IsAssociatedFunction (Self C) "add_msm" (add_msm C).
    End Impl_halo2_proofs_poly_msm_PairMSM_C.
    
    (* StructRecord
      {
        name := "ProjectiveMSM";
        ty_params := [ "E" ];
        fields :=
          [
            ("scalars",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.associated; Ty.path "alloc::alloc::Global" ]);
            ("bases",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [ Ty.associated; Ty.path "alloc::alloc::Global" ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_E_where_pairing_bn256_arithmetic_pairing_Engine_E_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_poly_msm_ProjectiveMSM_E.
      Definition Self (E : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::msm::ProjectiveMSM") [ E ].
      
      (* Debug *)
      Definition fmt (E : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "ProjectiveMSM" |);
                M.read (| Value.String "scalars" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.SubPointer.get_struct_record_field (|
                    M.read (| self |),
                    "halo2_proofs::poly::msm::ProjectiveMSM",
                    "scalars"
                  |));
                M.read (| Value.String "bases" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::poly::msm::ProjectiveMSM",
                      "bases"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (E : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self E)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt E)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_E_where_pairing_bn256_arithmetic_pairing_Engine_E_where_core_fmt_Debug_associated_type_where_core_fmt_Debug_associated_type_for_halo2_proofs_poly_msm_ProjectiveMSM_E.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_E_where_pairing_bn256_arithmetic_pairing_Engine_E_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_for_halo2_proofs_poly_msm_ProjectiveMSM_E.
      Definition Self (E : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::msm::ProjectiveMSM") [ E ].
      
      (* Clone *)
      Definition clone (E : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "halo2_proofs::poly::msm::ProjectiveMSM"
              [
                ("scalars",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::msm::ProjectiveMSM",
                        "scalars"
                      |)
                    ]
                  |));
                ("bases",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::msm::ProjectiveMSM",
                        "bases"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (E : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self E)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone E)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_E_where_pairing_bn256_arithmetic_pairing_Engine_E_where_core_clone_Clone_associated_type_where_core_clone_Clone_associated_type_for_halo2_proofs_poly_msm_ProjectiveMSM_E.
    
    Module Impl_halo2_proofs_poly_msm_ProjectiveMSM_E.
      Definition Self (E : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::msm::ProjectiveMSM") [ E ].
      
      (*
          pub fn new() -> Self {
              ProjectiveMSM {
                  scalars: vec![],
                  bases: vec![],
              }
          }
      *)
      Definition new (E : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E in
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (Value.StructRecord
              "halo2_proofs::poly::msm::ProjectiveMSM"
              [
                ("scalars",
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                      "new",
                      []
                    |),
                    []
                  |));
                ("bases",
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                      "new",
                      []
                    |),
                    []
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new :
        forall (E : Ty.t),
        M.IsAssociatedFunction (Self E) "new" (new E).
      
      (*
          pub fn append_term(&mut self, scalar: E::Scalar, point: E::G1) {
              self.scalars.push(scalar);
              self.bases.push(point);
          }
      *)
      Definition append_term (E : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E in
        match τ, α with
        | [], [ self; scalar; point ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let scalar := M.alloc (| scalar |) in
            let point := M.alloc (| point |) in
            M.read (|
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                      "push",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::msm::ProjectiveMSM",
                        "scalars"
                      |);
                      M.read (| scalar |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                      "push",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::msm::ProjectiveMSM",
                        "bases"
                      |);
                      M.read (| point |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_append_term :
        forall (E : Ty.t),
        M.IsAssociatedFunction (Self E) "append_term" (append_term E).
      
      (*
          pub fn scale(&mut self, factor: E::Scalar) {
              if !self.scalars.is_empty() {
                  parallelize(&mut self.scalars, |scalars, _| {
                      for other_scalar in scalars {
                          *other_scalar *= &factor;
                      }
                  })
              }
          }
      *)
      Definition scale (E : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E in
        match τ, α with
        | [], [ self; factor ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let factor := M.alloc (| factor |) in
            M.read (|
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.Pure.not
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                  "is_empty",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "halo2_proofs::poly::msm::ProjectiveMSM",
                                    "scalars"
                                  |)
                                ]
                              |))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "halo2_proofs::arithmetic::parallelize",
                            [
                              Ty.associated;
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&mut")
                                        [ Ty.apply (Ty.path "slice") [ Ty.associated ] ];
                                      Ty.path "usize"
                                    ]
                                ]
                                (Ty.tuple [])
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::DerefMut",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                [],
                                "deref_mut",
                                []
                              |),
                              [
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::poly::msm::ProjectiveMSM",
                                  "scalars"
                                |)
                              ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0; α1 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let scalars := M.copy (| γ |) in
                                            M.match_operator (|
                                              M.alloc (| α1 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.read (|
                                                      M.use
                                                        (M.match_operator (|
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::iter::traits::collect::IntoIterator",
                                                                Ty.apply
                                                                  (Ty.path "&mut")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      [ Ty.associated ]
                                                                  ],
                                                                [],
                                                                "into_iter",
                                                                []
                                                              |),
                                                              [ M.read (| scalars |) ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let iter := M.copy (| γ |) in
                                                                M.loop (|
                                                                  ltac:(M.monadic
                                                                    (let _ :=
                                                                      M.match_operator (|
                                                                        M.alloc (|
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::iter::traits::iterator::Iterator",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::slice::iter::IterMut")
                                                                                [ Ty.associated ],
                                                                              [],
                                                                              "next",
                                                                              []
                                                                            |),
                                                                            [ iter ]
                                                                          |)
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (M.alloc (|
                                                                                M.never_to_any (|
                                                                                  M.read (|
                                                                                    M.break (||)
                                                                                  |)
                                                                                |)
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ0_0 :=
                                                                                M.SubPointer.get_struct_tuple_field (|
                                                                                  γ,
                                                                                  "core::option::Option::Some",
                                                                                  0
                                                                                |) in
                                                                              let other_scalar :=
                                                                                M.copy (| γ0_0 |) in
                                                                              let _ :=
                                                                                M.alloc (|
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::arith::MulAssign",
                                                                                      Ty.associated,
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          [
                                                                                            Ty.associated
                                                                                          ]
                                                                                      ],
                                                                                      "mul_assign",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.read (|
                                                                                        other_scalar
                                                                                      |);
                                                                                      factor
                                                                                    ]
                                                                                  |)
                                                                                |) in
                                                                              M.alloc (|
                                                                                Value.Tuple []
                                                                              |)))
                                                                        ]
                                                                      |) in
                                                                    M.alloc (| Value.Tuple [] |)))
                                                                |)))
                                                          ]
                                                        |))
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_scale :
        forall (E : Ty.t),
        M.IsAssociatedFunction (Self E) "scale" (scale E).
      
      (*
          pub fn combine_with_base(&mut self, base: E::Scalar) {
              use ff::Field;
              let mut acc = E::Scalar::one();
              if !self.scalars.is_empty() {
                  for scalar in self.scalars.iter_mut().rev() {
                      *scalar *= &acc;
                      acc *= base;
                  }
              }
          }
      *)
      Definition combine_with_base (E : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E in
        match τ, α with
        | [], [ self; base ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let base := M.alloc (| base |) in
            M.read (|
              let acc :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (| "ff::Field", Ty.associated, [], "one", [] |),
                    []
                  |)
                |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.Pure.not
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                  "is_empty",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "halo2_proofs::poly::msm::ProjectiveMSM",
                                    "scalars"
                                  |)
                                ]
                              |))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::IterMut")
                                      [ Ty.associated ]
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::slice::iter::IterMut")
                                      [ Ty.associated ],
                                    [],
                                    "rev",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply (Ty.path "slice") [ Ty.associated ],
                                        "iter_mut",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::DerefMut",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                            [],
                                            "deref_mut",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "halo2_proofs::poly::msm::ProjectiveMSM",
                                              "scalars"
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::rev::Rev")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::IterMut")
                                                    [ Ty.associated ]
                                                ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let scalar := M.copy (| γ0_0 |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::arith::MulAssign",
                                                      Ty.associated,
                                                      [ Ty.apply (Ty.path "&") [ Ty.associated ] ],
                                                      "mul_assign",
                                                      []
                                                    |),
                                                    [ M.read (| scalar |); acc ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::arith::MulAssign",
                                                      Ty.associated,
                                                      [ Ty.associated ],
                                                      "mul_assign",
                                                      []
                                                    |),
                                                    [ acc; M.read (| base |) ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |))));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_combine_with_base :
        forall (E : Ty.t),
        M.IsAssociatedFunction (Self E) "combine_with_base" (combine_with_base E).
    End Impl_halo2_proofs_poly_msm_ProjectiveMSM_E.
    
    (* StructRecord
      {
        name := "PreMSM";
        ty_params := [ "E" ];
        fields :=
          [
            ("projectives_msms",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                [
                  Ty.apply (Ty.path "halo2_proofs::poly::msm::ProjectiveMSM") [ E ];
                  Ty.path "alloc::alloc::Global"
                ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_E_where_pairing_bn256_arithmetic_pairing_Engine_E_for_halo2_proofs_poly_msm_PreMSM_E.
      Definition Self (E : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::msm::PreMSM") [ E ].
      
      (* Debug *)
      Definition fmt (E : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E in
        match τ, α with
        | [], [ self; f ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let f := M.alloc (| f |) in
            M.call_closure (|
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                []
              |),
              [
                M.read (| f |);
                M.read (| Value.String "PreMSM" |);
                M.read (| Value.String "projectives_msms" |);
                (* Unsize *)
                M.pointer_coercion
                  (M.alloc (|
                    M.SubPointer.get_struct_record_field (|
                      M.read (| self |),
                      "halo2_proofs::poly::msm::PreMSM",
                      "projectives_msms"
                    |)
                  |))
              ]
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (E : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (Self E)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("fmt", InstanceField.Method (fmt E)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_E_where_pairing_bn256_arithmetic_pairing_Engine_E_for_halo2_proofs_poly_msm_PreMSM_E.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_E_where_pairing_bn256_arithmetic_pairing_Engine_E_for_halo2_proofs_poly_msm_PreMSM_E.
      Definition Self (E : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::msm::PreMSM") [ E ].
      
      (* Clone *)
      Definition clone (E : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            Value.StructRecord
              "halo2_proofs::poly::msm::PreMSM"
              [
                ("projectives_msms",
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.apply (Ty.path "halo2_proofs::poly::msm::ProjectiveMSM") [ E ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      "clone",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::msm::PreMSM",
                        "projectives_msms"
                      |)
                    ]
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom Implements :
        forall (E : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (Self E)
          (* Trait polymorphic types *) []
          (* Instance *) [ ("clone", InstanceField.Method (clone E)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_E_where_pairing_bn256_arithmetic_pairing_Engine_E_for_halo2_proofs_poly_msm_PreMSM_E.
    
    Module Impl_halo2_proofs_poly_msm_PreMSM_E.
      Definition Self (E : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "halo2_proofs::poly::msm::PreMSM") [ E ].
      
      (*
          pub fn new() -> Self {
              PreMSM {
                  projectives_msms: vec![],
              }
          }
      *)
      Definition new (E : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E in
        match τ, α with
        | [], [] =>
          ltac:(M.monadic
            (Value.StructRecord
              "halo2_proofs::poly::msm::PreMSM"
              [
                ("projectives_msms",
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.apply (Ty.path "halo2_proofs::poly::msm::ProjectiveMSM") [ E ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      []
                    |),
                    []
                  |))
              ]))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_new :
        forall (E : Ty.t),
        M.IsAssociatedFunction (Self E) "new" (new E).
      
      (*
          pub fn normalize(self) -> MSM<E::G1Affine> {
              use group::prime::PrimeCurveAffine;
      
              let bases: Vec<E::G1> = self
                  .projectives_msms
                  .iter()
                  .map(|msm| msm.bases.clone())
                  .collect::<Vec<Vec<E::G1>>>()
                  .into_iter()
                  .flatten()
                  .collect();
      
              let scalars: Vec<E::Scalar> = self
                  .projectives_msms
                  .iter()
                  .map(|msm| msm.scalars.clone())
                  .collect::<Vec<Vec<E::Scalar>>>()
                  .into_iter()
                  .flatten()
                  .collect();
      
              let mut affine_bases = vec![E::G1Affine::identity(); bases.len()];
              E::G1::batch_normalize(&bases[..], &mut affine_bases);
              MSM {
                  scalars,
                  bases: affine_bases,
              }
          }
      *)
      Definition normalize (E : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E in
        match τ, α with
        | [], [ self ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            M.read (|
              let bases :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::flatten::Flatten")
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                      [],
                      "collect",
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          "flatten",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              "into_iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::map::Map")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::msm::ProjectiveMSM")
                                            [ E ]
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::poly::msm::ProjectiveMSM")
                                                    [ E ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.associated; Ty.path "alloc::alloc::Global" ])
                                    ],
                                  [],
                                  "collect",
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::msm::ProjectiveMSM")
                                            [ E ]
                                        ],
                                      [],
                                      "map",
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::msm::ProjectiveMSM")
                                                      [ E ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.associated; Ty.path "alloc::alloc::Global" ])
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::msm::ProjectiveMSM")
                                                [ E ]
                                            ],
                                          "iter",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::poly::msm::ProjectiveMSM")
                                                    [ E ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                self,
                                                "halo2_proofs::poly::msm::PreMSM",
                                                "projectives_msms"
                                              |)
                                            ]
                                          |)
                                        ]
                                      |);
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              M.match_operator (|
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let msm := M.copy (| γ |) in
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::clone::Clone",
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.associated;
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [],
                                                          "clone",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| msm |),
                                                            "halo2_proofs::poly::msm::ProjectiveMSM",
                                                            "bases"
                                                          |)
                                                        ]
                                                      |)))
                                                ]
                                              |)
                                            | _ => M.impossible (||)
                                            end))
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let scalars :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::flatten::Flatten")
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                      [],
                      "collect",
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          "flatten",
                          []
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              "into_iter",
                              []
                            |),
                            [
                              M.call_closure (|
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::map::Map")
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::msm::ProjectiveMSM")
                                            [ E ]
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::poly::msm::ProjectiveMSM")
                                                    [ E ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.associated; Ty.path "alloc::alloc::Global" ])
                                    ],
                                  [],
                                  "collect",
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::msm::ProjectiveMSM")
                                            [ E ]
                                        ],
                                      [],
                                      "map",
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.associated; Ty.path "alloc::alloc::Global" ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::msm::ProjectiveMSM")
                                                      [ E ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            [ Ty.associated; Ty.path "alloc::alloc::Global" ])
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "slice")
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::msm::ProjectiveMSM")
                                                [ E ]
                                            ],
                                          "iter",
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::poly::msm::ProjectiveMSM")
                                                    [ E ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "deref",
                                              []
                                            |),
                                            [
                                              M.SubPointer.get_struct_record_field (|
                                                self,
                                                "halo2_proofs::poly::msm::PreMSM",
                                                "projectives_msms"
                                              |)
                                            ]
                                          |)
                                        ]
                                      |);
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              M.match_operator (|
                                                M.alloc (| α0 |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let msm := M.copy (| γ |) in
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::clone::Clone",
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.associated;
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [],
                                                          "clone",
                                                          []
                                                        |),
                                                        [
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.read (| msm |),
                                                            "halo2_proofs::poly::msm::ProjectiveMSM",
                                                            "scalars"
                                                          |)
                                                        ]
                                                      |)))
                                                ]
                                              |)
                                            | _ => M.impossible (||)
                                            end))
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let affine_bases :=
                M.alloc (|
                  M.call_closure (|
                    M.get_function (| "alloc::vec::from_elem", [ Ty.associated ] |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "group::prime::PrimeCurveAffine",
                          Ty.associated,
                          [],
                          "identity",
                          []
                        |),
                        []
                      |);
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                          "len",
                          []
                        |),
                        [ bases ]
                      |)
                    ]
                  |)
                |) in
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (|
                      "group::Curve",
                      Ty.associated,
                      [],
                      "batch_normalize",
                      []
                    |),
                    [
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::index::Index",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                          [ Ty.path "core::ops::range::RangeFull" ],
                          "index",
                          []
                        |),
                        [ bases; Value.StructTuple "core::ops::range::RangeFull" [] ]
                      |);
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::ops::deref::DerefMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                          [],
                          "deref_mut",
                          []
                        |),
                        [ affine_bases ]
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                Value.StructRecord
                  "halo2_proofs::poly::msm::MSM"
                  [ ("scalars", M.read (| scalars |)); ("bases", M.read (| affine_bases |)) ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_normalize :
        forall (E : Ty.t),
        M.IsAssociatedFunction (Self E) "normalize" (normalize E).
      
      (*
          pub fn add_msm(&mut self, other: ProjectiveMSM<E>) {
              self.projectives_msms.push(other);
          }
      *)
      Definition add_msm (E : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E in
        match τ, α with
        | [], [ self; other ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let other := M.alloc (| other |) in
            M.read (|
              let _ :=
                M.alloc (|
                  M.call_closure (|
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        [
                          Ty.apply (Ty.path "halo2_proofs::poly::msm::ProjectiveMSM") [ E ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "push",
                      []
                    |),
                    [
                      M.SubPointer.get_struct_record_field (|
                        M.read (| self |),
                        "halo2_proofs::poly::msm::PreMSM",
                        "projectives_msms"
                      |);
                      M.read (| other |)
                    ]
                  |)
                |) in
              M.alloc (| Value.Tuple [] |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_add_msm :
        forall (E : Ty.t),
        M.IsAssociatedFunction (Self E) "add_msm" (add_msm E).
      
      (*
          pub fn combine_with_base(&mut self, base: E::Scalar) {
              use ff::Field;
              let mut acc = E::Scalar::one();
              if !self.projectives_msms.is_empty() {
                  for msm in self.projectives_msms.iter_mut().rev() {
                      msm.scale(acc);
                      acc *= base;
                  }
              }
          }
      *)
      Definition combine_with_base (E : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self E in
        match τ, α with
        | [], [ self; base ] =>
          ltac:(M.monadic
            (let self := M.alloc (| self |) in
            let base := M.alloc (| base |) in
            M.read (|
              let acc :=
                M.alloc (|
                  M.call_closure (|
                    M.get_trait_method (| "ff::Field", Ty.associated, [], "one", [] |),
                    []
                  |)
                |) in
              M.match_operator (|
                M.alloc (| Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            UnOp.Pure.not
                              (M.call_closure (|
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::poly::msm::ProjectiveMSM")
                                        [ E ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "is_empty",
                                  []
                                |),
                                [
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| self |),
                                    "halo2_proofs::poly::msm::PreMSM",
                                    "projectives_msms"
                                  |)
                                ]
                              |))
                          |)) in
                      let _ := M.is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::rev::Rev")
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::IterMut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::msm::ProjectiveMSM")
                                          [ E ]
                                      ]
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::slice::iter::IterMut")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::msm::ProjectiveMSM")
                                          [ E ]
                                      ],
                                    [],
                                    "rev",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::msm::ProjectiveMSM")
                                              [ E ]
                                          ],
                                        "iter_mut",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::DerefMut",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::msm::ProjectiveMSM")
                                                  [ E ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            "deref_mut",
                                            []
                                          |),
                                          [
                                            M.SubPointer.get_struct_record_field (|
                                              M.read (| self |),
                                              "halo2_proofs::poly::msm::PreMSM",
                                              "projectives_msms"
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::rev::Rev")
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::IterMut")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::poly::msm::ProjectiveMSM")
                                                        [ E ]
                                                    ]
                                                ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let msm := M.copy (| γ0_0 |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::poly::msm::ProjectiveMSM")
                                                        [ E ],
                                                      "scale",
                                                      []
                                                    |),
                                                    [ M.read (| msm |); M.read (| acc |) ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::arith::MulAssign",
                                                      Ty.associated,
                                                      [ Ty.associated ],
                                                      "mul_assign",
                                                      []
                                                    |),
                                                    [ acc; M.read (| base |) ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |))));
                  fun γ => ltac:(M.monadic (M.alloc (| Value.Tuple [] |)))
                ]
              |)
            |)))
        | _, _ => M.impossible
        end.
      
      Axiom AssociatedFunction_combine_with_base :
        forall (E : Ty.t),
        M.IsAssociatedFunction (Self E) "combine_with_base" (combine_with_base E).
    End Impl_halo2_proofs_poly_msm_PreMSM_E.
  End msm.
End poly.
