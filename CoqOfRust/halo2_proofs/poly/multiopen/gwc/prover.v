(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module poly.
  Module multiopen.
    Module gwc.
      Module prover.
        (*
        pub fn create_proof<'a, I, C: CurveAffine, E: EncodedChallenge<C>, T: TranscriptWrite<C, E>>(
            params: &Params<C>,
            transcript: &mut T,
            queries: I,
        ) -> io::Result<()>
        where
            I: IntoIterator<Item = ProverQuery<'a, C>>,
        {
            let v: ChallengeV<_> = transcript.squeeze_challenge_scalar();
            let commitment_data = construct_intermediate_sets(queries);
        
            let zero = || Polynomial::<C::Scalar, Coeff> {
                values: vec![C::Scalar::zero(); params.n as usize],
                _marker: PhantomData,
            };
        
            let mut commitment_data = commitment_data.into_iter().enumerate().collect::<Vec<_>>();
            commitment_data.sort_by(|a, b| a.1.queries.len().cmp(&b.1.queries.len()));
        
            // Sort by len to compute large batch first
            let mut ws = commitment_data
                .par_iter()
                .rev()
                .map(|(idx, commitment_at_a_point)| {
                    let z = commitment_at_a_point.point;
        
                    #[cfg(not(feature = "cuda"))]
                    let poly_batch = {
                        let mut poly_batch = zero();
                        for query in commitment_at_a_point.queries.iter() {
                            assert_eq!(query.get_point(), z);
        
                            let poly = query.get_commitment().poly;
                            poly_batch = poly_batch * *v + poly;
                        }
                        poly_batch
                    };
        
                    #[cfg(feature = "cuda")]
                    let poly_batch = {
                        if commitment_at_a_point.queries.len() <= 4 {
                            let mut poly_batch = zero();
                            for query in commitment_at_a_point.queries.iter() {
                                assert_eq!(query.get_point(), z);
        
                                let poly = query.get_commitment().poly;
                                poly_batch = poly_batch * *v + poly;
                            }
                            poly_batch
                        } else {
                            use crate::arithmetic::acquire_gpu;
                            use crate::arithmetic::release_gpu;
                            use crate::plonk::{GPU_COND_VAR, GPU_LOCK};
                            use ec_gpu_gen::rust_gpu_tools::program_closures;
                            use ec_gpu_gen::{
                                fft::FftKernel, multiexp::SingleMultiexpKernel, rust_gpu_tools::Device,
                                threadpool::Worker,
                            };
                            use group::Curve;
                            use pairing::bn256::Fr;
        
                            let mut poly_batch = zero();
        
                            let gpu_idx = acquire_gpu();
                            let closures =
                                program_closures!(|program,
                                                   input: &mut [C::ScalarExt]|
                                 -> ec_gpu_gen::EcResult<()> {
                                    let size = params.n as usize;
                                    let local_work_size = 128;
                                    let global_work_size = size / local_work_size;
                                    let vl = vec![*v];
                                    let v_buffer = program.create_buffer_from_slice(&vl[..])?;
                                    let mut it = commitment_at_a_point.queries.iter();
                                    let mut tmp_buffer = unsafe { program.create_buffer(size)? };
                                    let query = it.next().unwrap();
                                    let res_buffer = program.create_buffer_from_slice(
                                        &query.get_commitment().poly.values[..],
                                    )?;
                                    for query in it {
                                        let kernel_name = format!("{}_eval_mul_c", "Bn256_Fr");
                                        let kernel = program.create_kernel(
                                            &kernel_name,
                                            global_work_size as usize,
                                            local_work_size as usize,
                                        )?;
                                        kernel
                                            .arg(&res_buffer)
                                            .arg(&res_buffer)
                                            .arg(&0)
                                            .arg(&v_buffer)
                                            .arg(&(size as u32))
                                            .run()?;
        
                                        program.write_from_buffer(
                                            &mut tmp_buffer,
                                            &query.get_commitment().poly.values[..],
                                        )?;
        
                                        let kernel_name = format!("{}_eval_sum", "Bn256_Fr");
                                        let kernel = program.create_kernel(
                                            &kernel_name,
                                            global_work_size as usize,
                                            local_work_size as usize,
                                        )?;
                                        kernel
                                            .arg(&res_buffer)
                                            .arg(&res_buffer)
                                            .arg(&tmp_buffer)
                                            .arg(&0)
                                            .arg(&0)
                                            .arg(&(size as u32))
                                            .run()?;
                                    }
                                    program.read_into_buffer(&res_buffer, input)?;
                                    Ok(())
                                });
        
                            let devices = Device::all();
                            let device = devices[gpu_idx % devices.len()];
                            let program = ec_gpu_gen::program!(device).unwrap();
                            program
                                .run(closures, unsafe {
                                    std::mem::transmute::<_, &mut [C::ScalarExt]>(
                                        &mut poly_batch.values[..],
                                    )
                                })
                                .unwrap();
        
                            release_gpu(gpu_idx);
                            poly_batch
                        }
                    };
        
                    let eval_batch =
                        eval_polynomial_st(&poly_batch, commitment_at_a_point.queries[0].get_point());
        
                    let poly_batch = &poly_batch - eval_batch;
                    let witness_poly = Polynomial {
                        values: kate_division(&poly_batch.values, z),
                        _marker: PhantomData,
                    };
        
                    (idx, params.commit(&witness_poly).to_affine())
                })
                .collect::<Vec<_>>();
        
            ws.sort_by(|a, b| a.0.cmp(&b.0));
        
            for w in ws {
                transcript.write_point(w.1)?;
            }
        
            Ok(())
        }
        *)
        Definition create_proof (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ _ as I; C; E; T ], [ params; transcript; queries ] =>
            ltac:(M.monadic
              (let params := M.alloc (| params |) in
              let transcript := M.alloc (| transcript |) in
              let queries := M.alloc (| queries |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let v :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "halo2_proofs::transcript::Transcript",
                            T,
                            [ C; E ],
                            "squeeze_challenge_scalar",
                            [ Ty.path "halo2_proofs::poly::multiopen::gwc::V" ]
                          |),
                          [ M.read (| transcript |) ]
                        |)
                      |) in
                    let commitment_data :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "halo2_proofs::poly::multiopen::gwc::construct_intermediate_sets",
                            [
                              Ty.associated;
                              I;
                              Ty.apply (Ty.path "halo2_proofs::poly::multiopen::ProverQuery") [ C ]
                            ]
                          |),
                          [ M.read (| queries |) ]
                        |)
                      |) in
                    let zero :=
                      M.alloc (|
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (Value.StructRecord
                                          "halo2_proofs::poly::Polynomial"
                                          [
                                            ("values",
                                              M.call_closure (|
                                                M.get_function (|
                                                  "alloc::vec::from_elem",
                                                  [ Ty.associated ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "ff::Field",
                                                      Ty.associated,
                                                      [],
                                                      "zero",
                                                      []
                                                    |),
                                                    []
                                                  |);
                                                  M.rust_cast
                                                    (M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| params |),
                                                        "halo2_proofs::poly::commitment::Params",
                                                        "n"
                                                      |)
                                                    |))
                                                ]
                                              |));
                                            ("_marker",
                                              Value.StructTuple "core::marker::PhantomData" [])
                                          ]))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      |) in
                    let commitment_data :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::poly::multiopen::gwc::CommitmentData")
                                      [
                                        Ty.associated;
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                          [ C ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            [],
                            "collect",
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.tuple
                                    [
                                      Ty.path "usize";
                                      Ty.apply
                                        (Ty.path
                                          "halo2_proofs::poly::multiopen::gwc::CommitmentData")
                                        [
                                          Ty.associated;
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                            [ C ]
                                        ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::poly::multiopen::gwc::CommitmentData")
                                      [
                                        Ty.associated;
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                          [ C ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "enumerate",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::collect::IntoIterator",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::poly::multiopen::gwc::CommitmentData")
                                          [
                                            Ty.associated;
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                              [ C ]
                                          ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    "into_iter",
                                    []
                                  |),
                                  [ M.read (| commitment_data |) ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              [
                                Ty.tuple
                                  [
                                    Ty.path "usize";
                                    Ty.apply
                                      (Ty.path "halo2_proofs::poly::multiopen::gwc::CommitmentData")
                                      [
                                        Ty.associated;
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                          [ C ]
                                      ]
                                  ]
                              ],
                            "sort_by",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::poly::multiopen::gwc::CommitmentData")
                                                [
                                                  Ty.associated;
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::poly::multiopen::ProverQuery")
                                                    [ C ]
                                                ]
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "&")
                                        [
                                          Ty.tuple
                                            [
                                              Ty.path "usize";
                                              Ty.apply
                                                (Ty.path
                                                  "halo2_proofs::poly::multiopen::gwc::CommitmentData")
                                                [
                                                  Ty.associated;
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::poly::multiopen::ProverQuery")
                                                    [ C ]
                                                ]
                                            ]
                                        ]
                                    ]
                                ]
                                (Ty.path "core::cmp::Ordering")
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::DerefMut",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.tuple
                                      [
                                        Ty.path "usize";
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::poly::multiopen::gwc::CommitmentData")
                                          [
                                            Ty.associated;
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::multiopen::ProverQuery")
                                              [ C ]
                                          ]
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "deref_mut",
                                []
                              |),
                              [ commitment_data ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0; α1 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let a := M.copy (| γ |) in
                                            M.match_operator (|
                                              M.alloc (| α1 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let b := M.copy (| γ |) in
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::cmp::Ord",
                                                        Ty.path "usize",
                                                        [],
                                                        "cmp",
                                                        []
                                                      |),
                                                      [
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::poly::multiopen::ProverQuery")
                                                                    [ C ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "len",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_tuple_field (|
                                                                  M.read (| a |),
                                                                  1
                                                                |),
                                                                "halo2_proofs::poly::multiopen::gwc::CommitmentData",
                                                                "queries"
                                                              |)
                                                            ]
                                                          |)
                                                        |);
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::poly::multiopen::ProverQuery")
                                                                    [ C ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              "len",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_tuple_field (|
                                                                  M.read (| b |),
                                                                  1
                                                                |),
                                                                "halo2_proofs::poly::multiopen::gwc::CommitmentData",
                                                                "queries"
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let ws :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "rayon::iter::ParallelIterator",
                            Ty.apply
                              (Ty.path "rayon::iter::map::Map")
                              [
                                Ty.apply
                                  (Ty.path "rayon::iter::rev::Rev")
                                  [
                                    Ty.apply
                                      (Ty.path "rayon::slice::Iter")
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "usize";
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::multiopen::gwc::CommitmentData")
                                              [
                                                Ty.associated;
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::poly::multiopen::ProverQuery")
                                                  [ C ]
                                              ]
                                          ]
                                      ]
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "usize";
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::poly::multiopen::gwc::CommitmentData")
                                                  [
                                                    Ty.associated;
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::multiopen::ProverQuery")
                                                      [ C ]
                                                  ]
                                              ]
                                          ]
                                      ]
                                  ]
                                  (Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "usize" ]; C ])
                              ],
                            [],
                            "collect",
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [
                                  Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "usize" ]; C ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "rayon::iter::ParallelIterator",
                                Ty.apply
                                  (Ty.path "rayon::iter::rev::Rev")
                                  [
                                    Ty.apply
                                      (Ty.path "rayon::slice::Iter")
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "usize";
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::multiopen::gwc::CommitmentData")
                                              [
                                                Ty.associated;
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::poly::multiopen::ProverQuery")
                                                  [ C ]
                                              ]
                                          ]
                                      ]
                                  ],
                                [],
                                "map",
                                [
                                  Ty.function
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "usize";
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::poly::multiopen::gwc::CommitmentData")
                                                    [
                                                      Ty.associated;
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::poly::multiopen::ProverQuery")
                                                        [ C ]
                                                    ]
                                                ]
                                            ]
                                        ]
                                    ]
                                    (Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "usize" ]; C ]);
                                  Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "usize" ]; C ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "rayon::iter::IndexedParallelIterator",
                                    Ty.apply
                                      (Ty.path "rayon::slice::Iter")
                                      [
                                        Ty.tuple
                                          [
                                            Ty.path "usize";
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::multiopen::gwc::CommitmentData")
                                              [
                                                Ty.associated;
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::poly::multiopen::ProverQuery")
                                                  [ C ]
                                              ]
                                          ]
                                      ],
                                    [],
                                    "rev",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "rayon::iter::IntoParallelRefIterator",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "usize";
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::poly::multiopen::gwc::CommitmentData")
                                                  [
                                                    Ty.associated;
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::multiopen::ProverQuery")
                                                      [ C ]
                                                  ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "par_iter",
                                        []
                                      |),
                                      [ commitment_data ]
                                    |)
                                  ]
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.read (| γ |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let idx := M.alloc (| γ1_0 |) in
                                                let commitment_at_a_point := M.alloc (| γ1_1 |) in
                                                M.read (|
                                                  let z :=
                                                    M.copy (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| commitment_at_a_point |),
                                                        "halo2_proofs::poly::multiopen::gwc::CommitmentData",
                                                        "point"
                                                      |)
                                                    |) in
                                                  let poly_batch :=
                                                    M.copy (|
                                                      let poly_batch :=
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::function::Fn",
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::Polynomial")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Coeff"
                                                                  ]),
                                                              [ Ty.tuple [] ],
                                                              "call",
                                                              []
                                                            |),
                                                            [ zero; Value.Tuple [] ]
                                                          |)
                                                        |) in
                                                      let _ :=
                                                        M.use
                                                          (M.match_operator (|
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::collect::IntoIterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::poly::multiopen::ProverQuery")
                                                                        [ C ]
                                                                    ],
                                                                  [],
                                                                  "into_iter",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::poly::multiopen::ProverQuery")
                                                                            [ C ]
                                                                        ],
                                                                      "iter",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::poly::multiopen::ProverQuery")
                                                                                [ C ];
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [],
                                                                          "deref",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.read (|
                                                                              commitment_at_a_point
                                                                            |),
                                                                            "halo2_proofs::poly::multiopen::gwc::CommitmentData",
                                                                            "queries"
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let iter := M.copy (| γ |) in
                                                                  M.loop (|
                                                                    ltac:(M.monadic
                                                                      (let _ :=
                                                                        M.match_operator (|
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::iter::traits::iterator::Iterator",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::slice::iter::Iter")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::poly::multiopen::ProverQuery")
                                                                                      [ C ]
                                                                                  ],
                                                                                [],
                                                                                "next",
                                                                                []
                                                                              |),
                                                                              [ iter ]
                                                                            |)
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (M.alloc (|
                                                                                  M.never_to_any (|
                                                                                    M.read (|
                                                                                      M.break (||)
                                                                                    |)
                                                                                  |)
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ0_0 :=
                                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                                    γ,
                                                                                    "core::option::Option::Some",
                                                                                    0
                                                                                  |) in
                                                                                let query :=
                                                                                  M.copy (|
                                                                                    γ0_0
                                                                                  |) in
                                                                                let _ :=
                                                                                  M.match_operator (|
                                                                                    M.alloc (|
                                                                                      Value.Tuple
                                                                                        [
                                                                                          M.alloc (|
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "halo2_proofs::poly::multiopen::Query",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "halo2_proofs::poly::multiopen::ProverQuery")
                                                                                                  [
                                                                                                    C
                                                                                                  ],
                                                                                                [
                                                                                                  Ty.associated
                                                                                                ],
                                                                                                "get_point",
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.read (|
                                                                                                  query
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |);
                                                                                          z
                                                                                        ]
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let
                                                                                                γ0_0 :=
                                                                                            M.SubPointer.get_tuple_field (|
                                                                                              γ,
                                                                                              0
                                                                                            |) in
                                                                                          let
                                                                                                γ0_1 :=
                                                                                            M.SubPointer.get_tuple_field (|
                                                                                              γ,
                                                                                              1
                                                                                            |) in
                                                                                          let
                                                                                                left_val :=
                                                                                            M.copy (|
                                                                                              γ0_0
                                                                                            |) in
                                                                                          let
                                                                                                right_val :=
                                                                                            M.copy (|
                                                                                              γ0_1
                                                                                            |) in
                                                                                          M.match_operator (|
                                                                                            M.alloc (|
                                                                                              Value.Tuple
                                                                                                []
                                                                                            |),
                                                                                            [
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (let
                                                                                                        γ :=
                                                                                                    M.use
                                                                                                      (M.alloc (|
                                                                                                        UnOp.Pure.not
                                                                                                          (M.call_closure (|
                                                                                                            M.get_trait_method (|
                                                                                                              "core::cmp::PartialEq",
                                                                                                              Ty.associated,
                                                                                                              [
                                                                                                                Ty.associated
                                                                                                              ],
                                                                                                              "eq",
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.read (|
                                                                                                                left_val
                                                                                                              |);
                                                                                                              M.read (|
                                                                                                                right_val
                                                                                                              |)
                                                                                                            ]
                                                                                                          |))
                                                                                                      |)) in
                                                                                                  let
                                                                                                        _ :=
                                                                                                    M.is_constant_or_break_match (|
                                                                                                      M.read (|
                                                                                                        γ
                                                                                                      |),
                                                                                                      Value.Bool
                                                                                                        true
                                                                                                    |) in
                                                                                                  M.alloc (|
                                                                                                    M.never_to_any (|
                                                                                                      M.read (|
                                                                                                        let
                                                                                                              kind :=
                                                                                                          M.alloc (|
                                                                                                            Value.StructTuple
                                                                                                              "core::panicking::AssertKind::Eq"
                                                                                                              []
                                                                                                          |) in
                                                                                                        M.alloc (|
                                                                                                          M.call_closure (|
                                                                                                            M.get_function (|
                                                                                                              "core::panicking::assert_failed",
                                                                                                              [
                                                                                                                Ty.associated;
                                                                                                                Ty.associated
                                                                                                              ]
                                                                                                            |),
                                                                                                            [
                                                                                                              M.read (|
                                                                                                                kind
                                                                                                              |);
                                                                                                              M.read (|
                                                                                                                left_val
                                                                                                              |);
                                                                                                              M.read (|
                                                                                                                right_val
                                                                                                              |);
                                                                                                              Value.StructTuple
                                                                                                                "core::option::Option::None"
                                                                                                                []
                                                                                                            ]
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)));
                                                                                              fun
                                                                                                  γ =>
                                                                                                ltac:(M.monadic
                                                                                                  (M.alloc (|
                                                                                                    Value.Tuple
                                                                                                      []
                                                                                                  |)))
                                                                                            ]
                                                                                          |)))
                                                                                    ]
                                                                                  |) in
                                                                                let poly :=
                                                                                  M.copy (|
                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                      M.alloc (|
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "halo2_proofs::poly::multiopen::Query",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::poly::multiopen::ProverQuery")
                                                                                              [ C ],
                                                                                            [
                                                                                              Ty.associated
                                                                                            ],
                                                                                            "get_commitment",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              query
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |),
                                                                                      "halo2_proofs::poly::multiopen::PolynomialPointer",
                                                                                      "poly"
                                                                                    |)
                                                                                  |) in
                                                                                let _ :=
                                                                                  M.write (|
                                                                                    poly_batch,
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::arith::Add",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::poly::Polynomial")
                                                                                          [
                                                                                            Ty.associated;
                                                                                            Ty.path
                                                                                              "halo2_proofs::poly::Coeff"
                                                                                          ],
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::poly::Polynomial")
                                                                                                [
                                                                                                  Ty.associated;
                                                                                                  Ty.path
                                                                                                    "halo2_proofs::poly::Coeff"
                                                                                                ]
                                                                                            ]
                                                                                        ],
                                                                                        "add",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::arith::Mul",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::poly::Polynomial")
                                                                                              [
                                                                                                Ty.associated;
                                                                                                Ty.path
                                                                                                  "halo2_proofs::poly::Coeff"
                                                                                              ],
                                                                                            [
                                                                                              Ty.associated
                                                                                            ],
                                                                                            "mul",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.read (|
                                                                                              poly_batch
                                                                                            |);
                                                                                            M.read (|
                                                                                              M.call_closure (|
                                                                                                M.get_trait_method (|
                                                                                                  "core::ops::deref::Deref",
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "halo2_proofs::transcript::ChallengeScalar")
                                                                                                    [
                                                                                                      C;
                                                                                                      Ty.path
                                                                                                        "halo2_proofs::poly::multiopen::gwc::V"
                                                                                                    ],
                                                                                                  [],
                                                                                                  "deref",
                                                                                                  []
                                                                                                |),
                                                                                                [ v
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |);
                                                                                        M.read (|
                                                                                          poly
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Value.Tuple []
                                                                                |)))
                                                                          ]
                                                                        |) in
                                                                      M.alloc (| Value.Tuple [] |)))
                                                                  |)))
                                                            ]
                                                          |)) in
                                                      poly_batch
                                                    |) in
                                                  let eval_batch :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "halo2_proofs::arithmetic::eval_polynomial_st",
                                                          [ Ty.associated ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::poly::Polynomial")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path
                                                                    "halo2_proofs::poly::Coeff"
                                                                ],
                                                              [],
                                                              "deref",
                                                              []
                                                            |),
                                                            [ poly_batch ]
                                                          |);
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "halo2_proofs::poly::multiopen::Query",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::poly::multiopen::ProverQuery")
                                                                [ C ],
                                                              [ Ty.associated ],
                                                              "get_point",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::index::Index",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::poly::multiopen::ProverQuery")
                                                                        [ C ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [ Ty.path "usize" ],
                                                                  "index",
                                                                  []
                                                                |),
                                                                [
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (|
                                                                      commitment_at_a_point
                                                                    |),
                                                                    "halo2_proofs::poly::multiopen::gwc::CommitmentData",
                                                                    "queries"
                                                                  |);
                                                                  Value.Integer 0
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |) in
                                                  let poly_batch :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Sub",
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::poly::Polynomial")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path
                                                                    "halo2_proofs::poly::Coeff"
                                                                ]
                                                            ],
                                                          [ Ty.associated ],
                                                          "sub",
                                                          []
                                                        |),
                                                        [ poly_batch; M.read (| eval_batch |) ]
                                                      |)
                                                    |) in
                                                  let witness_poly :=
                                                    M.alloc (|
                                                      Value.StructRecord
                                                        "halo2_proofs::poly::Polynomial"
                                                        [
                                                          ("values",
                                                            M.call_closure (|
                                                              M.get_function (|
                                                                "halo2_proofs::arithmetic::kate_division",
                                                                [
                                                                  Ty.associated;
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.associated;
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.SubPointer.get_struct_record_field (|
                                                                  poly_batch,
                                                                  "halo2_proofs::poly::Polynomial",
                                                                  "values"
                                                                |);
                                                                M.read (| z |)
                                                              ]
                                                            |));
                                                          ("_marker",
                                                            Value.StructTuple
                                                              "core::marker::PhantomData"
                                                              [])
                                                        ]
                                                    |) in
                                                  M.alloc (|
                                                    Value.Tuple
                                                      [
                                                        M.read (| idx |);
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "group::Curve",
                                                            Ty.associated,
                                                            [],
                                                            "to_affine",
                                                            []
                                                          |),
                                                          [
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::poly::commitment::Params")
                                                                    [ C ],
                                                                  "commit",
                                                                  []
                                                                |),
                                                                [ M.read (| params |); witness_poly
                                                                ]
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                  |)
                                                |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "usize" ]; C ] ],
                            "sort_by",
                            [
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "usize" ]; C ]
                                        ];
                                      Ty.apply
                                        (Ty.path "&")
                                        [ Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "usize" ]; C ]
                                        ]
                                    ]
                                ]
                                (Ty.path "core::cmp::Ordering")
                            ]
                          |),
                          [
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::deref::DerefMut",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "usize" ]; C ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "deref_mut",
                                []
                              |),
                              [ ws ]
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0; α1 ] =>
                                    M.match_operator (|
                                      M.alloc (| α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let a := M.copy (| γ |) in
                                            M.match_operator (|
                                              M.alloc (| α1 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let b := M.copy (| γ |) in
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::cmp::Ord",
                                                        Ty.path "usize",
                                                        [],
                                                        "cmp",
                                                        []
                                                      |),
                                                      [
                                                        M.read (|
                                                          M.SubPointer.get_tuple_field (|
                                                            M.read (| a |),
                                                            0
                                                          |)
                                                        |);
                                                        M.read (|
                                                          M.SubPointer.get_tuple_field (|
                                                            M.read (| b |),
                                                            0
                                                          |)
                                                        |)
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)
                                  | _ => M.impossible (||)
                                  end))
                          ]
                        |)
                      |) in
                    let _ :=
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  [
                                    Ty.tuple [ Ty.apply (Ty.path "&") [ Ty.path "usize" ]; C ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [ M.read (| ws |) ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                [
                                                  Ty.tuple
                                                    [ Ty.apply (Ty.path "&") [ Ty.path "usize" ]; C
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let w := M.copy (| γ0_0 |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (|
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::try_trait::Try",
                                                        Ty.apply
                                                          (Ty.path "core::result::Result")
                                                          [
                                                            Ty.tuple [];
                                                            Ty.path "std::io::error::Error"
                                                          ],
                                                        [],
                                                        "branch",
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "halo2_proofs::transcript::TranscriptWrite",
                                                            T,
                                                            [ C; E ],
                                                            "write_point",
                                                            []
                                                          |),
                                                          [
                                                            M.read (| transcript |);
                                                            M.read (|
                                                              M.SubPointer.get_tuple_field (|
                                                                w,
                                                                1
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Break",
                                                            0
                                                          |) in
                                                        let residual := M.copy (| γ0_0 |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              M.return_ (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::try_trait::FromResidual",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      [
                                                                        Ty.tuple [];
                                                                        Ty.path
                                                                          "std::io::error::Error"
                                                                      ],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.path
                                                                            "core::convert::Infallible";
                                                                          Ty.path
                                                                            "std::io::error::Error"
                                                                        ]
                                                                    ],
                                                                    "from_residual",
                                                                    []
                                                                  |),
                                                                  [ M.read (| residual |) ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::ops::control_flow::ControlFlow::Continue",
                                                            0
                                                          |) in
                                                        let val := M.copy (| γ0_0 |) in
                                                        val))
                                                  ]
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |)) in
                    M.alloc (| Value.StructTuple "core::result::Result::Ok" [ Value.Tuple [] ] |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
      End prover.
    End gwc.
  End multiopen.
End poly.
