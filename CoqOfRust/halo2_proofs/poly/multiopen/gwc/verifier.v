(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module poly.
  Module multiopen.
    Module gwc.
      Module verifier.
        (*
        pub fn verify_proof<
            'r,
            'params: 'r,
            I,
            C: MultiMillerLoop,
            E: EncodedChallenge<C::G1Affine>,
            T: TranscriptRead<C::G1Affine, E>,
        >(
            params: &'params ParamsVerifier<C>,
            transcript: &mut T,
            queries: I,
        ) -> Result<PairMSM<C::G1Affine>, Error>
        where
            I: IntoIterator<Item = VerifierQuery<'r, C::G1Affine>> + Clone,
        {
            let v: ChallengeV<_> = transcript.squeeze_challenge_scalar();
            let u: ChallengeU<_> = transcript.squeeze_challenge_scalar();
        
            let commitment_data = construct_intermediate_sets(queries);
        
            let mut commitment_multi = params.empty_msm();
            let mut eval_multi = C::Scalar::zero();
        
            let mut witness = params.empty_msm();
            let mut witness_with_aux = params.empty_msm();
        
            for commitment_at_a_point in commitment_data.iter() {
                assert!(!commitment_at_a_point.queries.is_empty());
                let z = commitment_at_a_point.point;
        
                let wi = transcript.read_point().map_err(|_| Error::SamplingError)?;
        
                witness_with_aux.scale( *u);
                witness_with_aux.append_term(z, wi);
                witness.scale( *u);
                witness.append_term(C::Scalar::one(), wi);
                commitment_multi.scale( *u);
                eval_multi = eval_multi * *u;
        
                let mut commitment_batch = params.empty_msm();
                let mut eval_batch = C::Scalar::zero();
        
                for query in commitment_at_a_point.queries.iter() {
                    assert_eq!(query.get_point(), z);
        
                    let commitment = query.get_commitment();
                    let eval = query.get_eval();
        
                    commitment_batch.scale( *v);
                    match commitment {
                        CommitmentReference::Commitment(c) => {
                            commitment_batch.append_term(C::Scalar::one(), *c);
                        }
                        CommitmentReference::MSM(msm) => {
                            commitment_batch.add_msm(msm);
                        }
                    }
        
                    eval_batch = eval_batch * *v + eval;
                }
        
                commitment_multi.add_msm(&commitment_batch);
                eval_multi += eval_batch;
            }
        
            let mut left = params.empty_msm();
            left.add_msm(&witness);
        
            let mut right = params.empty_msm();
            right.add_msm(&witness_with_aux);
            right.add_msm(&commitment_multi);
            right.append_term(eval_multi, -params.g1);
        
            Ok(PairMSM::with(left, right))
        }
        *)
        Definition verify_proof (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ _ as I; C; E; T ], [ params; transcript; queries ] =>
            ltac:(M.monadic
              (let params := M.alloc (| params |) in
              let transcript := M.alloc (| transcript |) in
              let queries := M.alloc (| queries |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let v :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "halo2_proofs::transcript::Transcript",
                            T,
                            [ Ty.associated; E ],
                            "squeeze_challenge_scalar",
                            [ Ty.path "halo2_proofs::poly::multiopen::gwc::V" ]
                          |),
                          [ M.read (| transcript |) ]
                        |)
                      |) in
                    let u :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "halo2_proofs::transcript::Transcript",
                            T,
                            [ Ty.associated; E ],
                            "squeeze_challenge_scalar",
                            [ Ty.path "halo2_proofs::poly::multiopen::gwc::U" ]
                          |),
                          [ M.read (| transcript |) ]
                        |)
                      |) in
                    let commitment_data :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "halo2_proofs::poly::multiopen::gwc::construct_intermediate_sets",
                            [
                              Ty.associated;
                              I;
                              Ty.apply
                                (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                [ Ty.associated ]
                            ]
                          |),
                          [ M.read (| queries |) ]
                        |)
                      |) in
                    let commitment_multi :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::poly::commitment::ParamsVerifier")
                              [ C ],
                            "empty_msm",
                            []
                          |),
                          [ M.read (| params |) ]
                        |)
                      |) in
                    let eval_multi :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (| "ff::Field", Ty.associated, [], "zero", [] |),
                          []
                        |)
                      |) in
                    let witness :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::poly::commitment::ParamsVerifier")
                              [ C ],
                            "empty_msm",
                            []
                          |),
                          [ M.read (| params |) ]
                        |)
                      |) in
                    let witness_with_aux :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::poly::commitment::ParamsVerifier")
                              [ C ],
                            "empty_msm",
                            []
                          |),
                          [ M.read (| params |) ]
                        |)
                      |) in
                    let _ :=
                      M.use
                        (M.match_operator (|
                          M.alloc (|
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  [
                                    Ty.apply
                                      (Ty.path "halo2_proofs::poly::multiopen::gwc::CommitmentData")
                                      [
                                        Ty.associated;
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::multiopen::VerifierQuery")
                                          [ Ty.associated ]
                                      ]
                                  ],
                                [],
                                "into_iter",
                                []
                              |),
                              [
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::poly::multiopen::gwc::CommitmentData")
                                          [
                                            Ty.associated;
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                              [ Ty.associated ]
                                          ]
                                      ],
                                    "iter",
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::multiopen::gwc::CommitmentData")
                                              [
                                                Ty.associated;
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::poly::multiopen::VerifierQuery")
                                                  [ Ty.associated ]
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "deref",
                                        []
                                      |),
                                      [ commitment_data ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter := M.copy (| γ |) in
                                M.loop (|
                                  ltac:(M.monadic
                                    (let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::poly::multiopen::gwc::CommitmentData")
                                                    [
                                                      Ty.associated;
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::poly::multiopen::VerifierQuery")
                                                        [ Ty.associated ]
                                                    ]
                                                ],
                                              [],
                                              "next",
                                              []
                                            |),
                                            [ iter ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.alloc (|
                                                M.never_to_any (| M.read (| M.break (||) |) |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let commitment_at_a_point := M.copy (| γ0_0 |) in
                                              let _ :=
                                                M.match_operator (|
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              UnOp.Pure.not
                                                                (UnOp.Pure.not
                                                                  (M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                            [ Ty.associated ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      "is_empty",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.read (|
                                                                          commitment_at_a_point
                                                                        |),
                                                                        "halo2_proofs::poly::multiopen::gwc::CommitmentData",
                                                                        "queries"
                                                                      |)
                                                                    ]
                                                                  |)))
                                                            |)) in
                                                        let _ :=
                                                          M.is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.call_closure (|
                                                              M.get_function (|
                                                                "core::panicking::panic",
                                                                []
                                                              |),
                                                              [
                                                                M.read (|
                                                                  Value.String
                                                                    "assertion failed: !commitment_at_a_point.queries.is_empty()"
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |) in
                                              let z :=
                                                M.copy (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| commitment_at_a_point |),
                                                    "halo2_proofs::poly::multiopen::gwc::CommitmentData",
                                                    "point"
                                                  |)
                                                |) in
                                              let wi :=
                                                M.copy (|
                                                  M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::Try",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.associated;
                                                              Ty.path "halo2_proofs::poly::Error"
                                                            ],
                                                          [],
                                                          "branch",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path "std::io::error::Error"
                                                                ],
                                                              "map_err",
                                                              [
                                                                Ty.path "halo2_proofs::poly::Error";
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.path
                                                                          "std::io::error::Error"
                                                                      ]
                                                                  ]
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::Error")
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "halo2_proofs::transcript::TranscriptRead",
                                                                  T,
                                                                  [ Ty.associated; E ],
                                                                  "read_point",
                                                                  []
                                                                |),
                                                                [ M.read (| transcript |) ]
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0 ] =>
                                                                      M.match_operator (|
                                                                        M.alloc (| α0 |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (Value.StructTuple
                                                                                "halo2_proofs::poly::Error::SamplingError"
                                                                                []))
                                                                        ]
                                                                      |)
                                                                    | _ => M.impossible (||)
                                                                    end))
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Break",
                                                              0
                                                            |) in
                                                          let residual := M.copy (| γ0_0 |) in
                                                          M.alloc (|
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::try_trait::FromResidual",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::poly::msm::PairMSM")
                                                                            [ Ty.associated ];
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Error"
                                                                        ],
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::result::Result")
                                                                          [
                                                                            Ty.path
                                                                              "core::convert::Infallible";
                                                                            Ty.path
                                                                              "halo2_proofs::poly::Error"
                                                                          ]
                                                                      ],
                                                                      "from_residual",
                                                                      []
                                                                    |),
                                                                    [ M.read (| residual |) ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_struct_tuple_field (|
                                                              γ,
                                                              "core::ops::control_flow::ControlFlow::Continue",
                                                              0
                                                            |) in
                                                          let val := M.copy (| γ0_0 |) in
                                                          val))
                                                    ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::msm::MSM")
                                                        [ Ty.associated ],
                                                      "scale",
                                                      []
                                                    |),
                                                    [
                                                      witness_with_aux;
                                                      M.read (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::transcript::ChallengeScalar")
                                                              [
                                                                Ty.associated;
                                                                Ty.path
                                                                  "halo2_proofs::poly::multiopen::gwc::U"
                                                              ],
                                                            [],
                                                            "deref",
                                                            []
                                                          |),
                                                          [ u ]
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::msm::MSM")
                                                        [ Ty.associated ],
                                                      "append_term",
                                                      []
                                                    |),
                                                    [
                                                      witness_with_aux;
                                                      M.read (| z |);
                                                      M.read (| wi |)
                                                    ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::msm::MSM")
                                                        [ Ty.associated ],
                                                      "scale",
                                                      []
                                                    |),
                                                    [
                                                      witness;
                                                      M.read (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::transcript::ChallengeScalar")
                                                              [
                                                                Ty.associated;
                                                                Ty.path
                                                                  "halo2_proofs::poly::multiopen::gwc::U"
                                                              ],
                                                            [],
                                                            "deref",
                                                            []
                                                          |),
                                                          [ u ]
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::msm::MSM")
                                                        [ Ty.associated ],
                                                      "append_term",
                                                      []
                                                    |),
                                                    [
                                                      witness;
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "ff::Field",
                                                          Ty.associated,
                                                          [],
                                                          "one",
                                                          []
                                                        |),
                                                        []
                                                      |);
                                                      M.read (| wi |)
                                                    ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::msm::MSM")
                                                        [ Ty.associated ],
                                                      "scale",
                                                      []
                                                    |),
                                                    [
                                                      commitment_multi;
                                                      M.read (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::transcript::ChallengeScalar")
                                                              [
                                                                Ty.associated;
                                                                Ty.path
                                                                  "halo2_proofs::poly::multiopen::gwc::U"
                                                              ],
                                                            [],
                                                            "deref",
                                                            []
                                                          |),
                                                          [ u ]
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.write (|
                                                  eval_multi,
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Mul",
                                                      Ty.associated,
                                                      [ Ty.associated ],
                                                      "mul",
                                                      []
                                                    |),
                                                    [
                                                      M.read (| eval_multi |);
                                                      M.read (|
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::transcript::ChallengeScalar")
                                                              [
                                                                Ty.associated;
                                                                Ty.path
                                                                  "halo2_proofs::poly::multiopen::gwc::U"
                                                              ],
                                                            [],
                                                            "deref",
                                                            []
                                                          |),
                                                          [ u ]
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              let commitment_batch :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::poly::commitment::ParamsVerifier")
                                                        [ C ],
                                                      "empty_msm",
                                                      []
                                                    |),
                                                    [ M.read (| params |) ]
                                                  |)
                                                |) in
                                              let eval_batch :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "ff::Field",
                                                      Ty.associated,
                                                      [],
                                                      "zero",
                                                      []
                                                    |),
                                                    []
                                                  |)
                                                |) in
                                              let _ :=
                                                M.use
                                                  (M.match_operator (|
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::collect::IntoIterator",
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                [ Ty.associated ]
                                                            ],
                                                          [],
                                                          "into_iter",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                    [ Ty.associated ]
                                                                ],
                                                              "iter",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                        [ Ty.associated ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "deref",
                                                                  []
                                                                |),
                                                                [
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.read (|
                                                                      commitment_at_a_point
                                                                    |),
                                                                    "halo2_proofs::poly::multiopen::gwc::CommitmentData",
                                                                    "queries"
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let iter := M.copy (| γ |) in
                                                          M.loop (|
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.match_operator (|
                                                                  M.alloc (|
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::iter::traits::iterator::Iterator",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::slice::iter::Iter")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                              [ Ty.associated ]
                                                                          ],
                                                                        [],
                                                                        "next",
                                                                        []
                                                                      |),
                                                                      [ iter ]
                                                                    |)
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (M.alloc (|
                                                                          M.never_to_any (|
                                                                            M.read (|
                                                                              M.break (||)
                                                                            |)
                                                                          |)
                                                                        |)));
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ0_0 :=
                                                                          M.SubPointer.get_struct_tuple_field (|
                                                                            γ,
                                                                            "core::option::Option::Some",
                                                                            0
                                                                          |) in
                                                                        let query :=
                                                                          M.copy (| γ0_0 |) in
                                                                        let _ :=
                                                                          M.match_operator (|
                                                                            M.alloc (|
                                                                              Value.Tuple
                                                                                [
                                                                                  M.alloc (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "halo2_proofs::poly::multiopen::Query",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                                          [
                                                                                            Ty.associated
                                                                                          ],
                                                                                        [
                                                                                          Ty.associated
                                                                                        ],
                                                                                        "get_point",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          query
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |);
                                                                                  z
                                                                                ]
                                                                            |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let γ0_0 :=
                                                                                    M.SubPointer.get_tuple_field (|
                                                                                      γ,
                                                                                      0
                                                                                    |) in
                                                                                  let γ0_1 :=
                                                                                    M.SubPointer.get_tuple_field (|
                                                                                      γ,
                                                                                      1
                                                                                    |) in
                                                                                  let left_val :=
                                                                                    M.copy (|
                                                                                      γ0_0
                                                                                    |) in
                                                                                  let right_val :=
                                                                                    M.copy (|
                                                                                      γ0_1
                                                                                    |) in
                                                                                  M.match_operator (|
                                                                                    M.alloc (|
                                                                                      Value.Tuple []
                                                                                    |),
                                                                                    [
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (let γ :=
                                                                                            M.use
                                                                                              (M.alloc (|
                                                                                                UnOp.Pure.not
                                                                                                  (M.call_closure (|
                                                                                                    M.get_trait_method (|
                                                                                                      "core::cmp::PartialEq",
                                                                                                      Ty.associated,
                                                                                                      [
                                                                                                        Ty.associated
                                                                                                      ],
                                                                                                      "eq",
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.read (|
                                                                                                        left_val
                                                                                                      |);
                                                                                                      M.read (|
                                                                                                        right_val
                                                                                                      |)
                                                                                                    ]
                                                                                                  |))
                                                                                              |)) in
                                                                                          let _ :=
                                                                                            M.is_constant_or_break_match (|
                                                                                              M.read (|
                                                                                                γ
                                                                                              |),
                                                                                              Value.Bool
                                                                                                true
                                                                                            |) in
                                                                                          M.alloc (|
                                                                                            M.never_to_any (|
                                                                                              M.read (|
                                                                                                let
                                                                                                      kind :=
                                                                                                  M.alloc (|
                                                                                                    Value.StructTuple
                                                                                                      "core::panicking::AssertKind::Eq"
                                                                                                      []
                                                                                                  |) in
                                                                                                M.alloc (|
                                                                                                  M.call_closure (|
                                                                                                    M.get_function (|
                                                                                                      "core::panicking::assert_failed",
                                                                                                      [
                                                                                                        Ty.associated;
                                                                                                        Ty.associated
                                                                                                      ]
                                                                                                    |),
                                                                                                    [
                                                                                                      M.read (|
                                                                                                        kind
                                                                                                      |);
                                                                                                      M.read (|
                                                                                                        left_val
                                                                                                      |);
                                                                                                      M.read (|
                                                                                                        right_val
                                                                                                      |);
                                                                                                      Value.StructTuple
                                                                                                        "core::option::Option::None"
                                                                                                        []
                                                                                                    ]
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)));
                                                                                      fun γ =>
                                                                                        ltac:(M.monadic
                                                                                          (M.alloc (|
                                                                                            Value.Tuple
                                                                                              []
                                                                                          |)))
                                                                                    ]
                                                                                  |)))
                                                                            ]
                                                                          |) in
                                                                        let commitment :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "halo2_proofs::poly::multiopen::Query",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                                  [ Ty.associated ],
                                                                                [ Ty.associated ],
                                                                                "get_commitment",
                                                                                []
                                                                              |),
                                                                              [ M.read (| query |) ]
                                                                            |)
                                                                          |) in
                                                                        let eval :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "halo2_proofs::poly::multiopen::Query",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::poly::multiopen::VerifierQuery")
                                                                                  [ Ty.associated ],
                                                                                [ Ty.associated ],
                                                                                "get_eval",
                                                                                []
                                                                              |),
                                                                              [ M.read (| query |) ]
                                                                            |)
                                                                          |) in
                                                                        let _ :=
                                                                          M.alloc (|
                                                                            M.call_closure (|
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "halo2_proofs::poly::msm::MSM")
                                                                                  [ Ty.associated ],
                                                                                "scale",
                                                                                []
                                                                              |),
                                                                              [
                                                                                commitment_batch;
                                                                                M.read (|
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::deref::Deref",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::transcript::ChallengeScalar")
                                                                                        [
                                                                                          Ty.associated;
                                                                                          Ty.path
                                                                                            "halo2_proofs::poly::multiopen::gwc::V"
                                                                                        ],
                                                                                      [],
                                                                                      "deref",
                                                                                      []
                                                                                    |),
                                                                                    [ v ]
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        let _ :=
                                                                          M.match_operator (|
                                                                            commitment,
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let γ0_0 :=
                                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                                      γ,
                                                                                      "halo2_proofs::poly::multiopen::CommitmentReference::Commitment",
                                                                                      0
                                                                                    |) in
                                                                                  let c :=
                                                                                    M.copy (|
                                                                                      γ0_0
                                                                                    |) in
                                                                                  let _ :=
                                                                                    M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::poly::msm::MSM")
                                                                                            [
                                                                                              Ty.associated
                                                                                            ],
                                                                                          "append_term",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          commitment_batch;
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "ff::Field",
                                                                                              Ty.associated,
                                                                                              [],
                                                                                              "one",
                                                                                              []
                                                                                            |),
                                                                                            []
                                                                                          |);
                                                                                          M.read (|
                                                                                            M.read (|
                                                                                              c
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |) in
                                                                                  M.alloc (|
                                                                                    Value.Tuple []
                                                                                  |)));
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let γ0_0 :=
                                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                                      γ,
                                                                                      "halo2_proofs::poly::multiopen::CommitmentReference::MSM",
                                                                                      0
                                                                                    |) in
                                                                                  let msm :=
                                                                                    M.copy (|
                                                                                      γ0_0
                                                                                    |) in
                                                                                  let _ :=
                                                                                    M.alloc (|
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::poly::msm::MSM")
                                                                                            [
                                                                                              Ty.associated
                                                                                            ],
                                                                                          "add_msm",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          commitment_batch;
                                                                                          M.read (|
                                                                                            msm
                                                                                          |)
                                                                                        ]
                                                                                      |)
                                                                                    |) in
                                                                                  M.alloc (|
                                                                                    Value.Tuple []
                                                                                  |)))
                                                                            ]
                                                                          |) in
                                                                        let _ :=
                                                                          M.write (|
                                                                            eval_batch,
                                                                            M.call_closure (|
                                                                              M.get_trait_method (|
                                                                                "core::ops::arith::Add",
                                                                                Ty.associated,
                                                                                [ Ty.associated ],
                                                                                "add",
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.call_closure (|
                                                                                  M.get_trait_method (|
                                                                                    "core::ops::arith::Mul",
                                                                                    Ty.associated,
                                                                                    [ Ty.associated
                                                                                    ],
                                                                                    "mul",
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      eval_batch
                                                                                    |);
                                                                                    M.read (|
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::deref::Deref",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::transcript::ChallengeScalar")
                                                                                            [
                                                                                              Ty.associated;
                                                                                              Ty.path
                                                                                                "halo2_proofs::poly::multiopen::gwc::V"
                                                                                            ],
                                                                                          [],
                                                                                          "deref",
                                                                                          []
                                                                                        |),
                                                                                        [ v ]
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.read (| eval |)
                                                                              ]
                                                                            |)
                                                                          |) in
                                                                        M.alloc (|
                                                                          Value.Tuple []
                                                                        |)))
                                                                  ]
                                                                |) in
                                                              M.alloc (| Value.Tuple [] |)))
                                                          |)))
                                                    ]
                                                  |)) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::msm::MSM")
                                                        [ Ty.associated ],
                                                      "add_msm",
                                                      []
                                                    |),
                                                    [ commitment_multi; commitment_batch ]
                                                  |)
                                                |) in
                                              let _ :=
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::arith::AddAssign",
                                                      Ty.associated,
                                                      [ Ty.associated ],
                                                      "add_assign",
                                                      []
                                                    |),
                                                    [ eval_multi; M.read (| eval_batch |) ]
                                                  |)
                                                |) in
                                              M.alloc (| Value.Tuple [] |)))
                                        ]
                                      |) in
                                    M.alloc (| Value.Tuple [] |)))
                                |)))
                          ]
                        |)) in
                    let left :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::poly::commitment::ParamsVerifier")
                              [ C ],
                            "empty_msm",
                            []
                          |),
                          [ M.read (| params |) ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ Ty.associated ],
                            "add_msm",
                            []
                          |),
                          [ left; witness ]
                        |)
                      |) in
                    let right :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "halo2_proofs::poly::commitment::ParamsVerifier")
                              [ C ],
                            "empty_msm",
                            []
                          |),
                          [ M.read (| params |) ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ Ty.associated ],
                            "add_msm",
                            []
                          |),
                          [ right; witness_with_aux ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ Ty.associated ],
                            "add_msm",
                            []
                          |),
                          [ right; commitment_multi ]
                        |)
                      |) in
                    let _ :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "halo2_proofs::poly::msm::MSM") [ Ty.associated ],
                            "append_term",
                            []
                          |),
                          [
                            right;
                            M.read (| eval_multi |);
                            M.call_closure (|
                              M.get_trait_method (|
                                "core::ops::arith::Neg",
                                Ty.associated,
                                [],
                                "neg",
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.read (| params |),
                                    "halo2_proofs::poly::commitment::ParamsVerifier",
                                    "g1"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |) in
                    M.alloc (|
                      Value.StructTuple
                        "core::result::Result::Ok"
                        [
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::poly::msm::PairMSM")
                                [ Ty.associated ],
                              "with",
                              []
                            |),
                            [ M.read (| left |); M.read (| right |) ]
                          |)
                        ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
      End verifier.
    End gwc.
  End multiopen.
End poly.
