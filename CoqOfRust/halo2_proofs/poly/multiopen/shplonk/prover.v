(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module poly.
  Module multiopen.
    Module shplonk.
      Module prover.
        (*
        fn div_by_vanishing<F: FieldExt>(poly: Polynomial<F, Coeff>, roots: &[F]) -> Vec<F> {
            let poly = roots
                .iter()
                .fold(poly.values, |poly, point| kate_division(&poly, *point));
        
            poly
        }
        *)
        Definition div_by_vanishing (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ F ], [ poly; roots ] =>
            ltac:(M.monadic
              (let poly := M.alloc (| poly |) in
              let roots := M.alloc (| roots |) in
              M.read (|
                let poly :=
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::slice::iter::Iter") [ F ],
                        [],
                        "fold",
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ F; Ty.path "alloc::alloc::Global" ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    [ F; Ty.path "alloc::alloc::Global" ];
                                  Ty.apply (Ty.path "&") [ F ]
                                ]
                            ]
                            (Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              [ F; Ty.path "alloc::alloc::Global" ])
                        ]
                      |),
                      [
                        M.call_closure (|
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [ F ],
                            "iter",
                            []
                          |),
                          [ M.read (| roots |) ]
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            poly,
                            "halo2_proofs::poly::Polynomial",
                            "values"
                          |)
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0; α1 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let poly := M.copy (| γ |) in
                                        M.match_operator (|
                                          M.alloc (| α1 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let point := M.copy (| γ |) in
                                                M.call_closure (|
                                                  M.get_function (|
                                                    "halo2_proofs::arithmetic::kate_division",
                                                    [
                                                      F;
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [ F; Ty.path "alloc::alloc::Global" ]
                                                        ]
                                                    ]
                                                  |),
                                                  [ poly; M.read (| M.read (| point |) |) ]
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      ]
                    |)
                  |) in
                poly
              |)))
          | _, _ => M.impossible
          end.
        
        (* StructRecord
          {
            name := "CommitmentExtension";
            ty_params := [ "C" ];
            fields :=
              [
                ("commitment",
                  Ty.apply
                    (Ty.path "halo2_proofs::poly::multiopen::shplonk::Commitment")
                    [
                      Ty.associated;
                      Ty.apply (Ty.path "halo2_proofs::poly::multiopen::PolynomialPointer") [ C ]
                    ]);
                ("low_degree_equivalent",
                  Ty.apply
                    (Ty.path "halo2_proofs::poly::Polynomial")
                    [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ])
              ];
          } *)
        
        Module Impl_halo2_proofs_poly_multiopen_shplonk_Commitment_associated_type_halo2_proofs_poly_multiopen_PolynomialPointer_C.
          Definition Self (C : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "halo2_proofs::poly::multiopen::shplonk::Commitment")
              [
                Ty.associated;
                Ty.apply (Ty.path "halo2_proofs::poly::multiopen::PolynomialPointer") [ C ]
              ].
          
          (*
              fn extend(&self, n: u64, points: Vec<C::Scalar>) -> CommitmentExtension<'a, C> {
                  let mut poly = lagrange_interpolate(&points[..], &self.evals()[..]);
                  poly.resize(n as usize, C::Scalar::zero());
          
                  let low_degree_equivalent = Polynomial {
                      values: poly,
                      _marker: PhantomData,
                  };
          
                  CommitmentExtension {
                      commitment: self.clone(),
                      low_degree_equivalent,
                  }
              }
          *)
          Definition extend (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self C in
            match τ, α with
            | [], [ self; n; points ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let n := M.alloc (| n |) in
                let points := M.alloc (| points |) in
                M.read (|
                  let poly :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (|
                          "halo2_proofs::arithmetic::lagrange_interpolate",
                          [ Ty.associated ]
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::index::Index",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                              [ Ty.path "core::ops::range::RangeFull" ],
                              "index",
                              []
                            |),
                            [ points; Value.StructTuple "core::ops::range::RangeFull" [] ]
                          |);
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::index::Index",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                              [ Ty.path "core::ops::range::RangeFull" ],
                              "index",
                              []
                            |),
                            [
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "halo2_proofs::poly::multiopen::shplonk::Commitment")
                                      [
                                        Ty.associated;
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::poly::multiopen::PolynomialPointer")
                                          [ C ]
                                      ],
                                    "evals",
                                    []
                                  |),
                                  [ M.read (| self |) ]
                                |)
                              |);
                              Value.StructTuple "core::ops::range::RangeFull" []
                            ]
                          |)
                        ]
                      |)
                    |) in
                  let _ :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                          "resize",
                          []
                        |),
                        [
                          poly;
                          M.rust_cast (M.read (| n |));
                          M.call_closure (|
                            M.get_trait_method (| "ff::Field", Ty.associated, [], "zero", [] |),
                            []
                          |)
                        ]
                      |)
                    |) in
                  let low_degree_equivalent :=
                    M.alloc (|
                      Value.StructRecord
                        "halo2_proofs::poly::Polynomial"
                        [
                          ("values", M.read (| poly |));
                          ("_marker", Value.StructTuple "core::marker::PhantomData" [])
                        ]
                    |) in
                  M.alloc (|
                    Value.StructRecord
                      "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension"
                      [
                        ("commitment",
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.apply
                                (Ty.path "halo2_proofs::poly::multiopen::shplonk::Commitment")
                                [
                                  Ty.associated;
                                  Ty.apply
                                    (Ty.path "halo2_proofs::poly::multiopen::PolynomialPointer")
                                    [ C ]
                                ],
                              [],
                              "clone",
                              []
                            |),
                            [ M.read (| self |) ]
                          |));
                        ("low_degree_equivalent", M.read (| low_degree_equivalent |))
                      ]
                  |)
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_extend :
            forall (C : Ty.t),
            M.IsAssociatedFunction (Self C) "extend" (extend C).
        End Impl_halo2_proofs_poly_multiopen_shplonk_Commitment_associated_type_halo2_proofs_poly_multiopen_PolynomialPointer_C.
        
        Module Impl_halo2_proofs_poly_multiopen_shplonk_prover_CommitmentExtension_C.
          Definition Self (C : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
              [ C ].
          
          (*
              fn linearisation_contribution(&self, u: C::Scalar) -> Polynomial<C::Scalar, Coeff> {
                  let p_x = self.commitment.get().poly;
                  let r_eval = eval_polynomial(&self.low_degree_equivalent.values[..], u);
                  p_x - r_eval
              }
          *)
          Definition linearisation_contribution (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self C in
            match τ, α with
            | [], [ self; u ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let u := M.alloc (| u |) in
                M.read (|
                  let p_x :=
                    M.copy (|
                      M.SubPointer.get_struct_record_field (|
                        M.alloc (|
                          M.call_closure (|
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "halo2_proofs::poly::multiopen::shplonk::Commitment")
                                [
                                  Ty.associated;
                                  Ty.apply
                                    (Ty.path "halo2_proofs::poly::multiopen::PolynomialPointer")
                                    [ C ]
                                ],
                              "get",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.read (| self |),
                                "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension",
                                "commitment"
                              |)
                            ]
                          |)
                        |),
                        "halo2_proofs::poly::multiopen::PolynomialPointer",
                        "poly"
                      |)
                    |) in
                  let r_eval :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_function (|
                          "halo2_proofs::arithmetic::eval_polynomial",
                          [ Ty.associated ]
                        |),
                        [
                          M.call_closure (|
                            M.get_trait_method (|
                              "core::ops::index::Index",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                              [ Ty.path "core::ops::range::RangeFull" ],
                              "index",
                              []
                            |),
                            [
                              M.SubPointer.get_struct_record_field (|
                                M.SubPointer.get_struct_record_field (|
                                  M.read (| self |),
                                  "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension",
                                  "low_degree_equivalent"
                                |),
                                "halo2_proofs::poly::Polynomial",
                                "values"
                              |);
                              Value.StructTuple "core::ops::range::RangeFull" []
                            ]
                          |);
                          M.read (| u |)
                        ]
                      |)
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::arith::Sub",
                        Ty.apply
                          (Ty.path "&")
                          [
                            Ty.apply
                              (Ty.path "halo2_proofs::poly::Polynomial")
                              [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]
                          ],
                        [ Ty.associated ],
                        "sub",
                        []
                      |),
                      [ M.read (| p_x |); M.read (| r_eval |) ]
                    |)
                  |)
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_linearisation_contribution :
            forall (C : Ty.t),
            M.IsAssociatedFunction
              (Self C)
              "linearisation_contribution"
              (linearisation_contribution C).
          
          (*
              fn quotient_contribution(&self) -> Polynomial<C::Scalar, Coeff> {
                  let p_x = self.commitment.get().poly.clone();
                  p_x - &self.low_degree_equivalent
              }
          *)
          Definition quotient_contribution (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self C in
            match τ, α with
            | [], [ self ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                M.read (|
                  let p_x :=
                    M.alloc (|
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path "halo2_proofs::poly::Polynomial")
                            [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ],
                          [],
                          "clone",
                          []
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "halo2_proofs::poly::multiopen::shplonk::Commitment")
                                      [
                                        Ty.associated;
                                        Ty.apply
                                          (Ty.path
                                            "halo2_proofs::poly::multiopen::PolynomialPointer")
                                          [ C ]
                                      ],
                                    "get",
                                    []
                                  |),
                                  [
                                    M.SubPointer.get_struct_record_field (|
                                      M.read (| self |),
                                      "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension",
                                      "commitment"
                                    |)
                                  ]
                                |)
                              |),
                              "halo2_proofs::poly::multiopen::PolynomialPointer",
                              "poly"
                            |)
                          |)
                        ]
                      |)
                    |) in
                  M.alloc (|
                    M.call_closure (|
                      M.get_trait_method (|
                        "core::ops::arith::Sub",
                        Ty.apply
                          (Ty.path "halo2_proofs::poly::Polynomial")
                          [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ],
                        [
                          Ty.apply
                            (Ty.path "&")
                            [
                              Ty.apply
                                (Ty.path "halo2_proofs::poly::Polynomial")
                                [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]
                            ]
                        ],
                        "sub",
                        []
                      |),
                      [
                        M.read (| p_x |);
                        M.SubPointer.get_struct_record_field (|
                          M.read (| self |),
                          "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension",
                          "low_degree_equivalent"
                        |)
                      ]
                    |)
                  |)
                |)))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_quotient_contribution :
            forall (C : Ty.t),
            M.IsAssociatedFunction (Self C) "quotient_contribution" (quotient_contribution C).
        End Impl_halo2_proofs_poly_multiopen_shplonk_prover_CommitmentExtension_C.
        
        (* StructRecord
          {
            name := "RotationSetExtension";
            ty_params := [ "C" ];
            fields :=
              [
                ("commitments",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [
                      Ty.apply
                        (Ty.path
                          "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
                        [ C ];
                      Ty.path "alloc::alloc::Global"
                    ]);
                ("points",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    [ Ty.associated; Ty.path "alloc::alloc::Global" ])
              ];
          } *)
        
        Module Impl_halo2_proofs_poly_multiopen_shplonk_RotationSet_associated_type_halo2_proofs_poly_multiopen_PolynomialPointer_C.
          Definition Self (C : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "halo2_proofs::poly::multiopen::shplonk::RotationSet")
              [
                Ty.associated;
                Ty.apply (Ty.path "halo2_proofs::poly::multiopen::PolynomialPointer") [ C ]
              ].
          
          (*
              fn extend(&self, commitments: Vec<CommitmentExtension<'a, C>>) -> RotationSetExtension<'a, C> {
                  RotationSetExtension {
                      commitments,
                      points: self.points.clone(),
                  }
              }
          *)
          Definition extend (C : Ty.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self C in
            match τ, α with
            | [], [ self; commitments ] =>
              ltac:(M.monadic
                (let self := M.alloc (| self |) in
                let commitments := M.alloc (| commitments |) in
                Value.StructRecord
                  "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension"
                  [
                    ("commitments", M.read (| commitments |));
                    ("points",
                      M.call_closure (|
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                          [],
                          "clone",
                          []
                        |),
                        [
                          M.SubPointer.get_struct_record_field (|
                            M.read (| self |),
                            "halo2_proofs::poly::multiopen::shplonk::RotationSet",
                            "points"
                          |)
                        ]
                      |))
                  ]))
            | _, _ => M.impossible
            end.
          
          Axiom AssociatedFunction_extend :
            forall (C : Ty.t),
            M.IsAssociatedFunction (Self C) "extend" (extend C).
        End Impl_halo2_proofs_poly_multiopen_shplonk_RotationSet_associated_type_halo2_proofs_poly_multiopen_PolynomialPointer_C.
        
        (*
        pub fn create_proof<'a, I, C: CurveAffine, E: EncodedChallenge<C>, T: TranscriptWrite<C, E>>(
            params: &Params<C>,
            transcript: &mut T,
            queries: I,
        ) -> io::Result<()>
        where
            I: IntoIterator<Item = ProverQuery<'a, C>> + Clone,
        {
            let zero = || Polynomial::<C::Scalar, Coeff> {
                values: vec![C::Scalar::zero(); params.n as usize],
                _marker: PhantomData,
            };
        
            // TODO: explore if it is safe to use same challenge
            // for different sets that are already combined with anoter challenge
            let y: ChallengeY<_> = transcript.squeeze_challenge_scalar();
        
            let quotient_contribution =
                |rotation_set: &RotationSetExtension<C>| -> Polynomial<C::Scalar, Coeff> {
                    // [P_i_0(X) - R_i_0(X), P_i_1(X) - R_i_1(X), ... ]
                    let numerators: Vec<Polynomial<C::Scalar, Coeff>> = rotation_set
                        .commitments
                        .iter()
                        .map(|commitment| commitment.quotient_contribution())
                        .collect();
        
                    // define numerator polynomial as
                    // N_i_j(X) = (P_i_j(X) - R_i_j(X))
                    // and combine polynomials with same evaluation point set
                    // N_i(X) = linear_combinination(y, N_i_j(X))
                    // where y is random scalar to combine numerator polynomials
                    let n_x: Polynomial<C::Scalar, Coeff> =
                        numerators.iter().fold(zero(), |acc, q_x| (acc * *y) + q_x);
        
                    let points = &rotation_set.points[..];
        
                    // quotient contribution of this evaluation set is
                    // Q_i(X) = N_i(X) / Z_i(X) where
                    // Z_i(X) = (x - r_i_0) * (x - r_i_1) * ...
                    let mut poly = div_by_vanishing(n_x, points);
                    poly.resize(params.n as usize, C::Scalar::zero());
        
                    Polynomial {
                        values: poly,
                        _marker: PhantomData,
                    }
                };
        
            let intermediate_sets = construct_intermediate_sets(queries);
            let (rotation_sets, super_point_set) = (
                intermediate_sets.rotation_sets,
                intermediate_sets.super_point_set,
            );
        
            let rotation_sets: Vec<RotationSetExtension<C>> = rotation_sets
                .iter()
                .map(|rotation_set| {
                    let commitments: Vec<CommitmentExtension<C>> = rotation_set
                        .commitments
                        .iter()
                        .map(|commitment_data| {
                            commitment_data.extend(params.n, rotation_set.points.clone())
                        })
                        .collect();
                    rotation_set.extend(commitments)
                })
                .collect();
        
            let v: ChallengeV<_> = transcript.squeeze_challenge_scalar();
        
            let quotient_polynomials: Vec<Polynomial<C::Scalar, Coeff>> =
                rotation_sets.iter().map(quotient_contribution).collect();
        
            let h_x: Polynomial<C::Scalar, Coeff> = quotient_polynomials
                .iter()
                .fold(zero(), |acc, u_x| (acc * *v) + u_x);
        
            let h = params.commit(&h_x).to_affine();
            transcript.write_point(h)?;
            let u: ChallengeU<_> = transcript.squeeze_challenge_scalar();
        
            let zt_eval = evaluate_vanishing_polynomial(&super_point_set[..], *u);
        
            let linearisation_contribution =
                |rotation_set: RotationSetExtension<C>| -> (Polynomial<C::Scalar, Coeff>, C::Scalar) {
                    let diffs: Vec<C::Scalar> = super_point_set
                        .iter()
                        .filter(|point| !rotation_set.points.contains(point))
                        .copied()
                        .collect();
        
                    // calculate difference vanishing polynomial evaluation
        
                    let z_i = evaluate_vanishing_polynomial(&diffs[..], *u);
        
                    // inner linearisation contibutions are
                    // [P_i_0(X) - r_i_0, P_i_1(X) - r_i_1, ... ] where
                    // r_i_j = R_i_j(u) is the evaluation of low degree equivalent polynomial
                    // where u is random evaluation point
                    let inner_contributions: Vec<Polynomial<C::Scalar, Coeff>> = rotation_set
                        .commitments
                        .iter()
                        .map(|commitment| commitment.linearisation_contribution( *u))
                        .collect();
        
                    // define inner contributor polynomial as
                    // L_i_j(X) = (P_i_j(X) - r_i_j)
                    // and combine polynomials with same evaluation point set
                    // L_i(X) = linear_combinination(y, L_i_j(X))
                    // where y is random scalar to combine inner contibutors
                    let l_x: Polynomial<C::Scalar, Coeff> = inner_contributions
                        .iter()
                        .fold(zero(), |acc, l_x| (acc * *y) + l_x);
        
                    // finally scale l_x by difference vanishing polynomial evaluation z_i
                    (l_x * z_i, z_i)
                };
        
            #[allow(clippy::type_complexity)]
            let (linearisation_contibutions, z_diffs): (
                Vec<Polynomial<C::Scalar, Coeff>>,
                Vec<C::Scalar>,
            ) = rotation_sets
                .into_iter()
                .map(linearisation_contribution)
                .unzip();
        
            let l_x: Polynomial<C::Scalar, Coeff> = linearisation_contibutions
                .iter()
                .fold(zero(), |acc, u_x| (acc * *v) + u_x);
        
            let l_x = l_x - &(h_x * zt_eval);
        
            // sanity check
            {
                let must_be_zero = eval_polynomial(&l_x.values[..], *u);
                assert_eq!(must_be_zero, C::Scalar::zero());
            }
        
            let mut h_x = div_by_vanishing(l_x, &[*u]);
        
            // normalize coefficients by the coefficient of the first polynomial
            let z_0_diff_inv = z_diffs[0].invert().unwrap();
            for h_i in h_x.iter_mut() {
                h_i.mul_assign(z_0_diff_inv)
            }
        
            let h_x = Polynomial {
                values: h_x,
                _marker: PhantomData,
            };
        
            let h = params.commit(&h_x).to_affine();
            transcript.write_point(h)?;
        
            Ok(())
        }
        *)
        Definition create_proof (τ : list Ty.t) (α : list Value.t) : M :=
          match τ, α with
          | [ _ as I; C; E; T ], [ params; transcript; queries ] =>
            ltac:(M.monadic
              (let params := M.alloc (| params |) in
              let transcript := M.alloc (| transcript |) in
              let queries := M.alloc (| queries |) in
              M.catch_return (|
                ltac:(M.monadic
                  (M.read (|
                    let zero :=
                      M.alloc (|
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (Value.StructRecord
                                          "halo2_proofs::poly::Polynomial"
                                          [
                                            ("values",
                                              M.call_closure (|
                                                M.get_function (|
                                                  "alloc::vec::from_elem",
                                                  [ Ty.associated ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "ff::Field",
                                                      Ty.associated,
                                                      [],
                                                      "zero",
                                                      []
                                                    |),
                                                    []
                                                  |);
                                                  M.rust_cast
                                                    (M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| params |),
                                                        "halo2_proofs::poly::commitment::Params",
                                                        "n"
                                                      |)
                                                    |))
                                                ]
                                              |));
                                            ("_marker",
                                              Value.StructTuple "core::marker::PhantomData" [])
                                          ]))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      |) in
                    let y :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_trait_method (|
                            "halo2_proofs::transcript::Transcript",
                            T,
                            [ C; E ],
                            "squeeze_challenge_scalar",
                            [ Ty.path "halo2_proofs::poly::multiopen::shplonk::Y" ]
                          |),
                          [ M.read (| transcript |) ]
                        |)
                      |) in
                    let quotient_contribution :=
                      M.alloc (|
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                M.match_operator (|
                                  M.alloc (| α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let rotation_set := M.copy (| γ |) in
                                        M.read (|
                                          let numerators :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::map::Map")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
                                                            [ C ]
                                                        ];
                                                      Ty.function
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
                                                                    [ C ]
                                                                ]
                                                            ]
                                                        ]
                                                        (Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "halo2_proofs::poly::Coeff"
                                                          ])
                                                    ],
                                                  [],
                                                  "collect",
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "halo2_proofs::poly::Coeff"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path "core::slice::iter::Iter")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
                                                            [ C ]
                                                        ],
                                                      [],
                                                      "map",
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "halo2_proofs::poly::Coeff"
                                                          ];
                                                        Ty.function
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
                                                                      [ C ]
                                                                  ]
                                                              ]
                                                          ]
                                                          (Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::Polynomial")
                                                            [
                                                              Ty.associated;
                                                              Ty.path "halo2_proofs::poly::Coeff"
                                                            ])
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
                                                                [ C ]
                                                            ],
                                                          "iter",
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::deref::Deref",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
                                                                    [ C ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              "deref",
                                                              []
                                                            |),
                                                            [
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.read (| rotation_set |),
                                                                "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension",
                                                                "commitments"
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |);
                                                      M.closure
                                                        (fun γ =>
                                                          ltac:(M.monadic
                                                            match γ with
                                                            | [ α0 ] =>
                                                              M.match_operator (|
                                                                M.alloc (| α0 |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let commitment :=
                                                                        M.copy (| γ |) in
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
                                                                            [ C ],
                                                                          "quotient_contribution",
                                                                          []
                                                                        |),
                                                                        [ M.read (| commitment |) ]
                                                                      |)))
                                                                ]
                                                              |)
                                                            | _ => M.impossible (||)
                                                            end))
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let n_x :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.associated;
                                                          Ty.path "halo2_proofs::poly::Coeff"
                                                        ]
                                                    ],
                                                  [],
                                                  "fold",
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "halo2_proofs::poly::Coeff"
                                                      ];
                                                    Ty.function
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::Polynomial")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "halo2_proofs::poly::Coeff"
                                                              ];
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::Polynomial")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Coeff"
                                                                  ]
                                                              ]
                                                          ]
                                                      ]
                                                      (Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.associated;
                                                          Ty.path "halo2_proofs::poly::Coeff"
                                                        ])
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::Polynomial")
                                                            [
                                                              Ty.associated;
                                                              Ty.path "halo2_proofs::poly::Coeff"
                                                            ]
                                                        ],
                                                      "iter",
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::deref::Deref",
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::poly::Polynomial")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path
                                                                    "halo2_proofs::poly::Coeff"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [],
                                                          "deref",
                                                          []
                                                        |),
                                                        [ numerators ]
                                                      |)
                                                    ]
                                                  |);
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "core::ops::function::Fn",
                                                      Ty.function
                                                        [ Ty.tuple [] ]
                                                        (Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "halo2_proofs::poly::Coeff"
                                                          ]),
                                                      [ Ty.tuple [] ],
                                                      "call",
                                                      []
                                                    |),
                                                    [ zero; Value.Tuple [] ]
                                                  |);
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0; α1 ] =>
                                                          M.match_operator (|
                                                            M.alloc (| α0 |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let acc := M.copy (| γ |) in
                                                                  M.match_operator (|
                                                                    M.alloc (| α1 |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let q_x :=
                                                                            M.copy (| γ |) in
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::arith::Add",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::poly::Polynomial")
                                                                                [
                                                                                  Ty.associated;
                                                                                  Ty.path
                                                                                    "halo2_proofs::poly::Coeff"
                                                                                ],
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::poly::Polynomial")
                                                                                      [
                                                                                        Ty.associated;
                                                                                        Ty.path
                                                                                          "halo2_proofs::poly::Coeff"
                                                                                      ]
                                                                                  ]
                                                                              ],
                                                                              "add",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::arith::Mul",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::poly::Polynomial")
                                                                                    [
                                                                                      Ty.associated;
                                                                                      Ty.path
                                                                                        "halo2_proofs::poly::Coeff"
                                                                                    ],
                                                                                  [ Ty.associated ],
                                                                                  "mul",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (| acc |);
                                                                                  M.read (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::deref::Deref",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::transcript::ChallengeScalar")
                                                                                          [
                                                                                            C;
                                                                                            Ty.path
                                                                                              "halo2_proofs::poly::multiopen::shplonk::Y"
                                                                                          ],
                                                                                        [],
                                                                                        "deref",
                                                                                        []
                                                                                      |),
                                                                                      [ y ]
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |);
                                                                              M.read (| q_x |)
                                                                            ]
                                                                          |)))
                                                                    ]
                                                                  |)))
                                                            ]
                                                          |)
                                                        | _ => M.impossible (||)
                                                        end))
                                                ]
                                              |)
                                            |) in
                                          let points :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::index::Index",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.associated; Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [ Ty.path "core::ops::range::RangeFull" ],
                                                  "index",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.read (| rotation_set |),
                                                    "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension",
                                                    "points"
                                                  |);
                                                  Value.StructTuple "core::ops::range::RangeFull" []
                                                ]
                                              |)
                                            |) in
                                          let poly :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_function (|
                                                  "halo2_proofs::poly::multiopen::shplonk::prover::div_by_vanishing",
                                                  [ Ty.associated ]
                                                |),
                                                [ M.read (| n_x |); M.read (| points |) ]
                                              |)
                                            |) in
                                          let _ :=
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.associated; Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "resize",
                                                  []
                                                |),
                                                [
                                                  poly;
                                                  M.rust_cast
                                                    (M.read (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.read (| params |),
                                                        "halo2_proofs::poly::commitment::Params",
                                                        "n"
                                                      |)
                                                    |));
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "ff::Field",
                                                      Ty.associated,
                                                      [],
                                                      "zero",
                                                      []
                                                    |),
                                                    []
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (|
                                            Value.StructRecord
                                              "halo2_proofs::poly::Polynomial"
                                              [
                                                ("values", M.read (| poly |));
                                                ("_marker",
                                                  Value.StructTuple "core::marker::PhantomData" [])
                                              ]
                                          |)
                                        |)))
                                  ]
                                |)
                              | _ => M.impossible (||)
                              end))
                      |) in
                    let intermediate_sets :=
                      M.alloc (|
                        M.call_closure (|
                          M.get_function (|
                            "halo2_proofs::poly::multiopen::shplonk::construct_intermediate_sets",
                            [
                              Ty.associated;
                              I;
                              Ty.apply (Ty.path "halo2_proofs::poly::multiopen::ProverQuery") [ C ]
                            ]
                          |),
                          [ M.read (| queries |) ]
                        |)
                      |) in
                    M.match_operator (|
                      M.alloc (|
                        Value.Tuple
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                intermediate_sets,
                                "halo2_proofs::poly::multiopen::shplonk::IntermediateSets",
                                "rotation_sets"
                              |)
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                intermediate_sets,
                                "halo2_proofs::poly::multiopen::shplonk::IntermediateSets",
                                "super_point_set"
                              |)
                            |)
                          ]
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let rotation_sets := M.copy (| γ0_0 |) in
                            let super_point_set := M.copy (| γ0_1 |) in
                            let rotation_sets :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::map::Map")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::multiopen::shplonk::RotationSet")
                                              [
                                                Ty.associated;
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::poly::multiopen::PolynomialPointer")
                                                  [ C ]
                                              ]
                                          ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::multiopen::shplonk::RotationSet")
                                                      [
                                                        Ty.associated;
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::multiopen::PolynomialPointer")
                                                          [ C ]
                                                      ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.apply
                                            (Ty.path
                                              "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension")
                                            [ C ])
                                      ],
                                    [],
                                    "collect",
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension")
                                            [ C ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::multiopen::shplonk::RotationSet")
                                              [
                                                Ty.associated;
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::poly::multiopen::PolynomialPointer")
                                                  [ C ]
                                              ]
                                          ],
                                        [],
                                        "map",
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension")
                                            [ C ];
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::poly::multiopen::shplonk::RotationSet")
                                                        [
                                                          Ty.associated;
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::multiopen::PolynomialPointer")
                                                            [ C ]
                                                        ]
                                                    ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension")
                                              [ C ])
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::poly::multiopen::shplonk::RotationSet")
                                                  [
                                                    Ty.associated;
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::multiopen::PolynomialPointer")
                                                      [ C ]
                                                  ]
                                              ],
                                            "iter",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::multiopen::shplonk::RotationSet")
                                                      [
                                                        Ty.associated;
                                                        Ty.apply
                                                          (Ty.path
                                                            "halo2_proofs::poly::multiopen::PolynomialPointer")
                                                          [ C ]
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [ rotation_sets ]
                                            |)
                                          ]
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                M.match_operator (|
                                                  M.alloc (| α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let rotation_set := M.copy (| γ |) in
                                                        M.read (|
                                                          let commitments :=
                                                            M.alloc (|
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::iter::adapters::map::Map")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::poly::multiopen::shplonk::Commitment")
                                                                            [
                                                                              Ty.associated;
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::poly::multiopen::PolynomialPointer")
                                                                                [ C ]
                                                                            ]
                                                                        ];
                                                                      Ty.function
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::poly::multiopen::shplonk::Commitment")
                                                                                    [
                                                                                      Ty.associated;
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::poly::multiopen::PolynomialPointer")
                                                                                        [ C ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                        (Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
                                                                          [ C ])
                                                                    ],
                                                                  [],
                                                                  "collect",
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
                                                                          [ C ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::iter::traits::iterator::Iterator",
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::poly::multiopen::shplonk::Commitment")
                                                                            [
                                                                              Ty.associated;
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::poly::multiopen::PolynomialPointer")
                                                                                [ C ]
                                                                            ]
                                                                        ],
                                                                      [],
                                                                      "map",
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
                                                                          [ C ];
                                                                        Ty.function
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "halo2_proofs::poly::multiopen::shplonk::Commitment")
                                                                                      [
                                                                                        Ty.associated;
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::poly::multiopen::PolynomialPointer")
                                                                                          [ C ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                          (Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
                                                                            [ C ])
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_associated_function (|
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::poly::multiopen::shplonk::Commitment")
                                                                                [
                                                                                  Ty.associated;
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::poly::multiopen::PolynomialPointer")
                                                                                    [ C ]
                                                                                ]
                                                                            ],
                                                                          "iter",
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.call_closure (|
                                                                            M.get_trait_method (|
                                                                              "core::ops::deref::Deref",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::poly::multiopen::shplonk::Commitment")
                                                                                    [
                                                                                      Ty.associated;
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::poly::multiopen::PolynomialPointer")
                                                                                        [ C ]
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [],
                                                                              "deref",
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                M.read (|
                                                                                  rotation_set
                                                                                |),
                                                                                "halo2_proofs::poly::multiopen::shplonk::RotationSet",
                                                                                "commitments"
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |);
                                                                      M.closure
                                                                        (fun γ =>
                                                                          ltac:(M.monadic
                                                                            match γ with
                                                                            | [ α0 ] =>
                                                                              M.match_operator (|
                                                                                M.alloc (| α0 |),
                                                                                [
                                                                                  fun γ =>
                                                                                    ltac:(M.monadic
                                                                                      (let
                                                                                            commitment_data :=
                                                                                        M.copy (|
                                                                                          γ
                                                                                        |) in
                                                                                      M.call_closure (|
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::poly::multiopen::shplonk::Commitment")
                                                                                            [
                                                                                              Ty.associated;
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "halo2_proofs::poly::multiopen::PolynomialPointer")
                                                                                                [ C
                                                                                                ]
                                                                                            ],
                                                                                          "extend",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            commitment_data
                                                                                          |);
                                                                                          M.read (|
                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                              M.read (|
                                                                                                params
                                                                                              |),
                                                                                              "halo2_proofs::poly::commitment::Params",
                                                                                              "n"
                                                                                            |)
                                                                                          |);
                                                                                          M.call_closure (|
                                                                                            M.get_trait_method (|
                                                                                              "core::clone::Clone",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                [
                                                                                                  Ty.associated;
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              [],
                                                                                              "clone",
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                M.read (|
                                                                                                  rotation_set
                                                                                                |),
                                                                                                "halo2_proofs::poly::multiopen::shplonk::RotationSet",
                                                                                                "points"
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        ]
                                                                                      |)))
                                                                                ]
                                                                              |)
                                                                            | _ => M.impossible (||)
                                                                            end))
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          M.alloc (|
                                                            M.call_closure (|
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::multiopen::shplonk::RotationSet")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::poly::multiopen::PolynomialPointer")
                                                                      [ C ]
                                                                  ],
                                                                "extend",
                                                                []
                                                              |),
                                                              [
                                                                M.read (| rotation_set |);
                                                                M.read (| commitments |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)))
                                                  ]
                                                |)
                                              | _ => M.impossible (||)
                                              end))
                                      ]
                                    |)
                                  ]
                                |)
                              |) in
                            let v :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "halo2_proofs::transcript::Transcript",
                                    T,
                                    [ C; E ],
                                    "squeeze_challenge_scalar",
                                    [ Ty.path "halo2_proofs::poly::multiopen::shplonk::V" ]
                                  |),
                                  [ M.read (| transcript |) ]
                                |)
                              |) in
                            let quotient_polynomials :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::map::Map")
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension")
                                              [ C ]
                                          ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension")
                                                      [ C ]
                                                  ]
                                              ]
                                          ]
                                          (Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ])
                                      ],
                                    [],
                                    "collect",
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension")
                                              [ C ]
                                          ],
                                        [],
                                        "map",
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ];
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension")
                                                        [ C ]
                                                    ]
                                                ]
                                            ]
                                            (Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff"
                                              ])
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "slice")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension")
                                                  [ C ]
                                              ],
                                            "iter",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension")
                                                      [ C ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                "deref",
                                                []
                                              |),
                                              [ rotation_sets ]
                                            |)
                                          ]
                                        |);
                                        M.read (| quotient_contribution |)
                                      ]
                                    |)
                                  ]
                                |)
                              |) in
                            let h_x :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      [
                                        Ty.apply
                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                          [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]
                                      ],
                                    [],
                                    "fold",
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                        [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff"
                                                ];
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.associated;
                                                      Ty.path "halo2_proofs::poly::Coeff"
                                                    ]
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                          [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ])
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          [
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]
                                          ],
                                        "iter",
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::Coeff"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            "deref",
                                            []
                                          |),
                                          [ quotient_polynomials ]
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::function::Fn",
                                        Ty.function
                                          [ Ty.tuple [] ]
                                          (Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ]),
                                        [ Ty.tuple [] ],
                                        "call",
                                        []
                                      |),
                                      [ zero; Value.Tuple [] ]
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0; α1 ] =>
                                            M.match_operator (|
                                              M.alloc (| α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let acc := M.copy (| γ |) in
                                                    M.match_operator (|
                                                      M.alloc (| α1 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let u_x := M.copy (| γ |) in
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Add",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::Polynomial")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Coeff"
                                                                  ],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::poly::Polynomial")
                                                                        [
                                                                          Ty.associated;
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Coeff"
                                                                        ]
                                                                    ]
                                                                ],
                                                                "add",
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::Mul",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::poly::Polynomial")
                                                                      [
                                                                        Ty.associated;
                                                                        Ty.path
                                                                          "halo2_proofs::poly::Coeff"
                                                                      ],
                                                                    [ Ty.associated ],
                                                                    "mul",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| acc |);
                                                                    M.read (|
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::transcript::ChallengeScalar")
                                                                            [
                                                                              C;
                                                                              Ty.path
                                                                                "halo2_proofs::poly::multiopen::shplonk::V"
                                                                            ],
                                                                          [],
                                                                          "deref",
                                                                          []
                                                                        |),
                                                                        [ v ]
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.read (| u_x |)
                                                              ]
                                                            |)))
                                                      ]
                                                    |)))
                                              ]
                                            |)
                                          | _ => M.impossible (||)
                                          end))
                                  ]
                                |)
                              |) in
                            let h :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "group::Curve",
                                    Ty.associated,
                                    [],
                                    "to_affine",
                                    []
                                  |),
                                  [
                                    M.alloc (|
                                      M.call_closure (|
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::commitment::Params")
                                            [ C ],
                                          "commit",
                                          []
                                        |),
                                        [ M.read (| params |); h_x ]
                                      |)
                                    |)
                                  ]
                                |)
                              |) in
                            let _ :=
                              M.match_operator (|
                                M.alloc (|
                                  M.call_closure (|
                                    M.get_trait_method (|
                                      "core::ops::try_trait::Try",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                      [],
                                      "branch",
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "halo2_proofs::transcript::TranscriptWrite",
                                          T,
                                          [ C; E ],
                                          "write_point",
                                          []
                                        |),
                                        [ M.read (| transcript |); M.read (| h |) ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Break",
                                          0
                                        |) in
                                      let residual := M.copy (| γ0_0 |) in
                                      M.alloc (|
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    [ Ty.tuple []; Ty.path "std::io::error::Error"
                                                    ],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.path "std::io::error::Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::ops::control_flow::ControlFlow::Continue",
                                          0
                                        |) in
                                      let val := M.copy (| γ0_0 |) in
                                      val))
                                ]
                              |) in
                            let u :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "halo2_proofs::transcript::Transcript",
                                    T,
                                    [ C; E ],
                                    "squeeze_challenge_scalar",
                                    [ Ty.path "halo2_proofs::poly::multiopen::shplonk::U" ]
                                  |),
                                  [ M.read (| transcript |) ]
                                |)
                              |) in
                            let zt_eval :=
                              M.alloc (|
                                M.call_closure (|
                                  M.get_function (|
                                    "halo2_proofs::arithmetic::evaluate_vanishing_polynomial",
                                    [ Ty.associated ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::ops::index::Index",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          [ Ty.associated; Ty.path "alloc::alloc::Global" ],
                                        [ Ty.path "core::ops::range::RangeFull" ],
                                        "index",
                                        []
                                      |),
                                      [
                                        super_point_set;
                                        Value.StructTuple "core::ops::range::RangeFull" []
                                      ]
                                    |);
                                    M.read (|
                                      M.call_closure (|
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "halo2_proofs::transcript::ChallengeScalar")
                                            [ C; Ty.path "halo2_proofs::poly::multiopen::shplonk::U"
                                            ],
                                          [],
                                          "deref",
                                          []
                                        |),
                                        [ u ]
                                      |)
                                    |)
                                  ]
                                |)
                              |) in
                            let linearisation_contribution :=
                              M.alloc (|
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        M.match_operator (|
                                          M.alloc (| α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let rotation_set := M.copy (| γ |) in
                                                M.read (|
                                                  let diffs :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::copied::Copied")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::filter::Filter")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    [ Ty.associated ];
                                                                  Ty.function
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [ Ty.associated ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                    (Ty.path "bool")
                                                                ]
                                                            ],
                                                          [],
                                                          "collect",
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::filter::Filter")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    [ Ty.associated ];
                                                                  Ty.function
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                [ Ty.associated ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                    (Ty.path "bool")
                                                                ],
                                                              [],
                                                              "copied",
                                                              [ Ty.associated ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::iterator::Iterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    [ Ty.associated ],
                                                                  [],
                                                                  "filter",
                                                                  [
                                                                    Ty.function
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  [ Ty.associated ]
                                                                              ]
                                                                          ]
                                                                      ]
                                                                      (Ty.path "bool")
                                                                  ]
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        [ Ty.associated ],
                                                                      "iter",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.call_closure (|
                                                                        M.get_trait_method (|
                                                                          "core::ops::deref::Deref",
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "alloc::vec::Vec")
                                                                            [
                                                                              Ty.associated;
                                                                              Ty.path
                                                                                "alloc::alloc::Global"
                                                                            ],
                                                                          [],
                                                                          "deref",
                                                                          []
                                                                        |),
                                                                        [ super_point_set ]
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.closure
                                                                    (fun γ =>
                                                                      ltac:(M.monadic
                                                                        match γ with
                                                                        | [ α0 ] =>
                                                                          M.match_operator (|
                                                                            M.alloc (| α0 |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let point :=
                                                                                    M.copy (|
                                                                                      γ
                                                                                    |) in
                                                                                  UnOp.Pure.not
                                                                                    (M.call_closure (|
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "slice")
                                                                                          [
                                                                                            Ty.associated
                                                                                          ],
                                                                                        "contains",
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          M.get_trait_method (|
                                                                                            "core::ops::deref::Deref",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              [
                                                                                                Ty.associated;
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ],
                                                                                            [],
                                                                                            "deref",
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                              rotation_set,
                                                                                              "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension",
                                                                                              "points"
                                                                                            |)
                                                                                          ]
                                                                                        |);
                                                                                        M.read (|
                                                                                          M.read (|
                                                                                            point
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |))))
                                                                            ]
                                                                          |)
                                                                        | _ => M.impossible (||)
                                                                        end))
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |) in
                                                  let z_i :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_function (|
                                                          "halo2_proofs::arithmetic::evaluate_vanishing_polynomial",
                                                          [ Ty.associated ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::index::Index",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [
                                                                Ty.path
                                                                  "core::ops::range::RangeFull"
                                                              ],
                                                              "index",
                                                              []
                                                            |),
                                                            [
                                                              diffs;
                                                              Value.StructTuple
                                                                "core::ops::range::RangeFull"
                                                                []
                                                            ]
                                                          |);
                                                          M.read (|
                                                            M.call_closure (|
                                                              M.get_trait_method (|
                                                                "core::ops::deref::Deref",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::transcript::ChallengeScalar")
                                                                  [
                                                                    C;
                                                                    Ty.path
                                                                      "halo2_proofs::poly::multiopen::shplonk::U"
                                                                  ],
                                                                [],
                                                                "deref",
                                                                []
                                                              |),
                                                              [ u ]
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |) in
                                                  let inner_contributions :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path
                                                              "core::iter::adapters::map::Map")
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
                                                                    [ C ]
                                                                ];
                                                              Ty.function
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
                                                                            [ C ]
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::Polynomial")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Coeff"
                                                                  ])
                                                            ],
                                                          [],
                                                          "collect",
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::Polynomial")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Coeff"
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
                                                                    [ C ]
                                                                ],
                                                              [],
                                                              "map",
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::Polynomial")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Coeff"
                                                                  ];
                                                                Ty.function
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
                                                                              [ C ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                                  (Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::poly::Polynomial")
                                                                    [
                                                                      Ty.associated;
                                                                      Ty.path
                                                                        "halo2_proofs::poly::Coeff"
                                                                    ])
                                                              ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
                                                                        [ C ]
                                                                    ],
                                                                  "iter",
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    M.get_trait_method (|
                                                                      "core::ops::deref::Deref",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
                                                                            [ C ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      "deref",
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        rotation_set,
                                                                        "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension",
                                                                        "commitments"
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |);
                                                              M.closure
                                                                (fun γ =>
                                                                  ltac:(M.monadic
                                                                    match γ with
                                                                    | [ α0 ] =>
                                                                      M.match_operator (|
                                                                        M.alloc (| α0 |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let commitment :=
                                                                                M.copy (| γ |) in
                                                                              M.call_closure (|
                                                                                M.get_associated_function (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::poly::multiopen::shplonk::prover::CommitmentExtension")
                                                                                    [ C ],
                                                                                  "linearisation_contribution",
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    commitment
                                                                                  |);
                                                                                  M.read (|
                                                                                    M.call_closure (|
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::deref::Deref",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "halo2_proofs::transcript::ChallengeScalar")
                                                                                          [
                                                                                            C;
                                                                                            Ty.path
                                                                                              "halo2_proofs::poly::multiopen::shplonk::U"
                                                                                          ],
                                                                                        [],
                                                                                        "deref",
                                                                                        []
                                                                                      |),
                                                                                      [ u ]
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)))
                                                                        ]
                                                                      |)
                                                                    | _ => M.impossible (||)
                                                                    end))
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |) in
                                                  let l_x :=
                                                    M.alloc (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::iter::traits::iterator::Iterator",
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::poly::Polynomial")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path
                                                                    "halo2_proofs::poly::Coeff"
                                                                ]
                                                            ],
                                                          [],
                                                          "fold",
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::Polynomial")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "halo2_proofs::poly::Coeff"
                                                              ];
                                                            Ty.function
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "halo2_proofs::poly::Polynomial")
                                                                      [
                                                                        Ty.associated;
                                                                        Ty.path
                                                                          "halo2_proofs::poly::Coeff"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::poly::Polynomial")
                                                                          [
                                                                            Ty.associated;
                                                                            Ty.path
                                                                              "halo2_proofs::poly::Coeff"
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ]
                                                              (Ty.apply
                                                                (Ty.path
                                                                  "halo2_proofs::poly::Polynomial")
                                                                [
                                                                  Ty.associated;
                                                                  Ty.path
                                                                    "halo2_proofs::poly::Coeff"
                                                                ])
                                                          ]
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "halo2_proofs::poly::Polynomial")
                                                                    [
                                                                      Ty.associated;
                                                                      Ty.path
                                                                        "halo2_proofs::poly::Coeff"
                                                                    ]
                                                                ],
                                                              "iter",
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "halo2_proofs::poly::Polynomial")
                                                                        [
                                                                          Ty.associated;
                                                                          Ty.path
                                                                            "halo2_proofs::poly::Coeff"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  "deref",
                                                                  []
                                                                |),
                                                                [ inner_contributions ]
                                                              |)
                                                            ]
                                                          |);
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::ops::function::Fn",
                                                              Ty.function
                                                                [ Ty.tuple [] ]
                                                                (Ty.apply
                                                                  (Ty.path
                                                                    "halo2_proofs::poly::Polynomial")
                                                                  [
                                                                    Ty.associated;
                                                                    Ty.path
                                                                      "halo2_proofs::poly::Coeff"
                                                                  ]),
                                                              [ Ty.tuple [] ],
                                                              "call",
                                                              []
                                                            |),
                                                            [ zero; Value.Tuple [] ]
                                                          |);
                                                          M.closure
                                                            (fun γ =>
                                                              ltac:(M.monadic
                                                                match γ with
                                                                | [ α0; α1 ] =>
                                                                  M.match_operator (|
                                                                    M.alloc (| α0 |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let acc :=
                                                                            M.copy (| γ |) in
                                                                          M.match_operator (|
                                                                            M.alloc (| α1 |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let l_x :=
                                                                                    M.copy (|
                                                                                      γ
                                                                                    |) in
                                                                                  M.call_closure (|
                                                                                    M.get_trait_method (|
                                                                                      "core::ops::arith::Add",
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "halo2_proofs::poly::Polynomial")
                                                                                        [
                                                                                          Ty.associated;
                                                                                          Ty.path
                                                                                            "halo2_proofs::poly::Coeff"
                                                                                        ],
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "halo2_proofs::poly::Polynomial")
                                                                                              [
                                                                                                Ty.associated;
                                                                                                Ty.path
                                                                                                  "halo2_proofs::poly::Coeff"
                                                                                              ]
                                                                                          ]
                                                                                      ],
                                                                                      "add",
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        M.get_trait_method (|
                                                                                          "core::ops::arith::Mul",
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "halo2_proofs::poly::Polynomial")
                                                                                            [
                                                                                              Ty.associated;
                                                                                              Ty.path
                                                                                                "halo2_proofs::poly::Coeff"
                                                                                            ],
                                                                                          [
                                                                                            Ty.associated
                                                                                          ],
                                                                                          "mul",
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.read (|
                                                                                            acc
                                                                                          |);
                                                                                          M.read (|
                                                                                            M.call_closure (|
                                                                                              M.get_trait_method (|
                                                                                                "core::ops::deref::Deref",
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "halo2_proofs::transcript::ChallengeScalar")
                                                                                                  [
                                                                                                    C;
                                                                                                    Ty.path
                                                                                                      "halo2_proofs::poly::multiopen::shplonk::Y"
                                                                                                  ],
                                                                                                [],
                                                                                                "deref",
                                                                                                []
                                                                                              |),
                                                                                              [ y ]
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |);
                                                                                      M.read (|
                                                                                        l_x
                                                                                      |)
                                                                                    ]
                                                                                  |)))
                                                                            ]
                                                                          |)))
                                                                    ]
                                                                  |)
                                                                | _ => M.impossible (||)
                                                                end))
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (|
                                                    Value.Tuple
                                                      [
                                                        M.call_closure (|
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Mul",
                                                            Ty.apply
                                                              (Ty.path
                                                                "halo2_proofs::poly::Polynomial")
                                                              [
                                                                Ty.associated;
                                                                Ty.path "halo2_proofs::poly::Coeff"
                                                              ],
                                                            [ Ty.associated ],
                                                            "mul",
                                                            []
                                                          |),
                                                          [ M.read (| l_x |); M.read (| z_i |) ]
                                                        |);
                                                        M.read (| z_i |)
                                                      ]
                                                  |)
                                                |)))
                                          ]
                                        |)
                                      | _ => M.impossible (||)
                                      end))
                              |) in
                            M.match_operator (|
                              M.alloc (|
                                M.call_closure (|
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::map::Map")
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::into_iter::IntoIter")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension")
                                              [ C ];
                                            Ty.path "alloc::alloc::Global"
                                          ];
                                        Ty.function
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension")
                                                  [ C ]
                                              ]
                                          ]
                                          (Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff"
                                                ];
                                              Ty.associated
                                            ])
                                      ],
                                    [],
                                    "unzip",
                                    [
                                      Ty.apply
                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                        [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ];
                                      Ty.associated;
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [
                                          Ty.apply
                                            (Ty.path "halo2_proofs::poly::Polynomial")
                                            [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff" ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        [ Ty.associated; Ty.path "alloc::alloc::Global" ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "alloc::vec::into_iter::IntoIter")
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension")
                                              [ C ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        "map",
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff"
                                                ];
                                              Ty.associated
                                            ];
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension")
                                                    [ C ]
                                                ]
                                            ]
                                            (Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::Coeff"
                                                  ];
                                                Ty.associated
                                              ])
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::collect::IntoIterator",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "halo2_proofs::poly::multiopen::shplonk::prover::RotationSetExtension")
                                                  [ C ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            "into_iter",
                                            []
                                          |),
                                          [ M.read (| rotation_sets |) ]
                                        |);
                                        M.read (| linearisation_contribution |)
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let linearisation_contibutions := M.copy (| γ0_0 |) in
                                    let z_diffs := M.copy (| γ0_1 |) in
                                    let l_x :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              [
                                                Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::Coeff"
                                                  ]
                                              ],
                                            [],
                                            "fold",
                                            [
                                              Ty.apply
                                                (Ty.path "halo2_proofs::poly::Polynomial")
                                                [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff"
                                                ];
                                              Ty.function
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "halo2_proofs::poly::Polynomial")
                                                        [
                                                          Ty.associated;
                                                          Ty.path "halo2_proofs::poly::Coeff"
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::poly::Polynomial")
                                                            [
                                                              Ty.associated;
                                                              Ty.path "halo2_proofs::poly::Coeff"
                                                            ]
                                                        ]
                                                    ]
                                                ]
                                                (Ty.apply
                                                  (Ty.path "halo2_proofs::poly::Polynomial")
                                                  [
                                                    Ty.associated;
                                                    Ty.path "halo2_proofs::poly::Coeff"
                                                  ])
                                            ]
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  [
                                                    Ty.apply
                                                      (Ty.path "halo2_proofs::poly::Polynomial")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "halo2_proofs::poly::Coeff"
                                                      ]
                                                  ],
                                                "iter",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.apply
                                                          (Ty.path "halo2_proofs::poly::Polynomial")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "halo2_proofs::poly::Coeff"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [ linearisation_contibutions ]
                                                |)
                                              ]
                                            |);
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::ops::function::Fn",
                                                Ty.function
                                                  [ Ty.tuple [] ]
                                                  (Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.associated;
                                                      Ty.path "halo2_proofs::poly::Coeff"
                                                    ]),
                                                [ Ty.tuple [] ],
                                                "call",
                                                []
                                              |),
                                              [ zero; Value.Tuple [] ]
                                            |);
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0; α1 ] =>
                                                    M.match_operator (|
                                                      M.alloc (| α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let acc := M.copy (| γ |) in
                                                            M.match_operator (|
                                                              M.alloc (| α1 |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let u_x := M.copy (| γ |) in
                                                                    M.call_closure (|
                                                                      M.get_trait_method (|
                                                                        "core::ops::arith::Add",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "halo2_proofs::poly::Polynomial")
                                                                          [
                                                                            Ty.associated;
                                                                            Ty.path
                                                                              "halo2_proofs::poly::Coeff"
                                                                          ],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "halo2_proofs::poly::Polynomial")
                                                                                [
                                                                                  Ty.associated;
                                                                                  Ty.path
                                                                                    "halo2_proofs::poly::Coeff"
                                                                                ]
                                                                            ]
                                                                        ],
                                                                        "add",
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.call_closure (|
                                                                          M.get_trait_method (|
                                                                            "core::ops::arith::Mul",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "halo2_proofs::poly::Polynomial")
                                                                              [
                                                                                Ty.associated;
                                                                                Ty.path
                                                                                  "halo2_proofs::poly::Coeff"
                                                                              ],
                                                                            [ Ty.associated ],
                                                                            "mul",
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.read (| acc |);
                                                                            M.read (|
                                                                              M.call_closure (|
                                                                                M.get_trait_method (|
                                                                                  "core::ops::deref::Deref",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "halo2_proofs::transcript::ChallengeScalar")
                                                                                    [
                                                                                      C;
                                                                                      Ty.path
                                                                                        "halo2_proofs::poly::multiopen::shplonk::V"
                                                                                    ],
                                                                                  [],
                                                                                  "deref",
                                                                                  []
                                                                                |),
                                                                                [ v ]
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |);
                                                                        M.read (| u_x |)
                                                                      ]
                                                                    |)))
                                                              ]
                                                            |)))
                                                      ]
                                                    |)
                                                  | _ => M.impossible (||)
                                                  end))
                                          ]
                                        |)
                                      |) in
                                    let l_x :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "core::ops::arith::Sub",
                                            Ty.apply
                                              (Ty.path "halo2_proofs::poly::Polynomial")
                                              [ Ty.associated; Ty.path "halo2_proofs::poly::Coeff"
                                              ],
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                [
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.associated;
                                                      Ty.path "halo2_proofs::poly::Coeff"
                                                    ]
                                                ]
                                            ],
                                            "sub",
                                            []
                                          |),
                                          [
                                            M.read (| l_x |);
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::arith::Mul",
                                                  Ty.apply
                                                    (Ty.path "halo2_proofs::poly::Polynomial")
                                                    [
                                                      Ty.associated;
                                                      Ty.path "halo2_proofs::poly::Coeff"
                                                    ],
                                                  [ Ty.associated ],
                                                  "mul",
                                                  []
                                                |),
                                                [ M.read (| h_x |); M.read (| zt_eval |) ]
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let _ :=
                                      let must_be_zero :=
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_function (|
                                              "halo2_proofs::arithmetic::eval_polynomial",
                                              [ Ty.associated ]
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "core::ops::index::Index",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    [ Ty.associated; Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [ Ty.path "core::ops::range::RangeFull" ],
                                                  "index",
                                                  []
                                                |),
                                                [
                                                  M.SubPointer.get_struct_record_field (|
                                                    l_x,
                                                    "halo2_proofs::poly::Polynomial",
                                                    "values"
                                                  |);
                                                  Value.StructTuple "core::ops::range::RangeFull" []
                                                ]
                                              |);
                                              M.read (|
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::deref::Deref",
                                                    Ty.apply
                                                      (Ty.path
                                                        "halo2_proofs::transcript::ChallengeScalar")
                                                      [
                                                        C;
                                                        Ty.path
                                                          "halo2_proofs::poly::multiopen::shplonk::U"
                                                      ],
                                                    [],
                                                    "deref",
                                                    []
                                                  |),
                                                  [ u ]
                                                |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let _ :=
                                        M.match_operator (|
                                          M.alloc (|
                                            Value.Tuple
                                              [
                                                must_be_zero;
                                                M.alloc (|
                                                  M.call_closure (|
                                                    M.get_trait_method (|
                                                      "ff::Field",
                                                      Ty.associated,
                                                      [],
                                                      "zero",
                                                      []
                                                    |),
                                                    []
                                                  |)
                                                |)
                                              ]
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let left_val := M.copy (| γ0_0 |) in
                                                let right_val := M.copy (| γ0_1 |) in
                                                M.match_operator (|
                                                  M.alloc (| Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              UnOp.Pure.not
                                                                (M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::cmp::PartialEq",
                                                                    Ty.associated,
                                                                    [ Ty.associated ],
                                                                    "eq",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| left_val |);
                                                                    M.read (| right_val |)
                                                                  ]
                                                                |))
                                                            |)) in
                                                        let _ :=
                                                          M.is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.alloc (|
                                                          M.never_to_any (|
                                                            M.read (|
                                                              let kind :=
                                                                M.alloc (|
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                |) in
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_function (|
                                                                    "core::panicking::assert_failed",
                                                                    [ Ty.associated; Ty.associated ]
                                                                  |),
                                                                  [
                                                                    M.read (| kind |);
                                                                    M.read (| left_val |);
                                                                    M.read (| right_val |);
                                                                    Value.StructTuple
                                                                      "core::option::Option::None"
                                                                      []
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.alloc (| Value.Tuple [] |)))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Value.Tuple [] |) in
                                    let h_x :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_function (|
                                            "halo2_proofs::poly::multiopen::shplonk::prover::div_by_vanishing",
                                            [ Ty.associated ]
                                          |),
                                          [
                                            M.read (| l_x |);
                                            (* Unsize *)
                                            M.pointer_coercion
                                              (M.alloc (|
                                                Value.Array
                                                  [
                                                    M.read (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::deref::Deref",
                                                          Ty.apply
                                                            (Ty.path
                                                              "halo2_proofs::transcript::ChallengeScalar")
                                                            [
                                                              C;
                                                              Ty.path
                                                                "halo2_proofs::poly::multiopen::shplonk::U"
                                                            ],
                                                          [],
                                                          "deref",
                                                          []
                                                        |),
                                                        [ u ]
                                                      |)
                                                    |)
                                                  ]
                                              |))
                                          ]
                                        |)
                                      |) in
                                    let z_0_diff_inv :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "subtle::CtOption") [ Ty.associated ],
                                            "unwrap",
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "ff::Field",
                                                Ty.associated,
                                                [],
                                                "invert",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_trait_method (|
                                                    "core::ops::index::Index",
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      [
                                                        Ty.associated;
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    [ Ty.path "usize" ],
                                                    "index",
                                                    []
                                                  |),
                                                  [ z_diffs; Value.Integer 0 ]
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let _ :=
                                      M.use
                                        (M.match_operator (|
                                          M.alloc (|
                                            M.call_closure (|
                                              M.get_trait_method (|
                                                "core::iter::traits::collect::IntoIterator",
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::IterMut")
                                                  [ Ty.associated ],
                                                [],
                                                "into_iter",
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [ Ty.associated ],
                                                    "iter_mut",
                                                    []
                                                  |),
                                                  [
                                                    M.call_closure (|
                                                      M.get_trait_method (|
                                                        "core::ops::deref::DerefMut",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          [
                                                            Ty.associated;
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        "deref_mut",
                                                        []
                                                      |),
                                                      [ h_x ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let iter := M.copy (| γ |) in
                                                M.loop (|
                                                  ltac:(M.monadic
                                                    (let _ :=
                                                      M.match_operator (|
                                                        M.alloc (|
                                                          M.call_closure (|
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::slice::iter::IterMut")
                                                                [ Ty.associated ],
                                                              [],
                                                              "next",
                                                              []
                                                            |),
                                                            [ iter ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (M.alloc (|
                                                                M.never_to_any (|
                                                                  M.read (| M.break (||) |)
                                                                |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::option::Option::Some",
                                                                  0
                                                                |) in
                                                              let h_i := M.copy (| γ0_0 |) in
                                                              M.alloc (|
                                                                M.call_closure (|
                                                                  M.get_trait_method (|
                                                                    "core::ops::arith::MulAssign",
                                                                    Ty.associated,
                                                                    [ Ty.associated ],
                                                                    "mul_assign",
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (| h_i |);
                                                                    M.read (| z_0_diff_inv |)
                                                                  ]
                                                                |)
                                                              |)))
                                                        ]
                                                      |) in
                                                    M.alloc (| Value.Tuple [] |)))
                                                |)))
                                          ]
                                        |)) in
                                    let h_x :=
                                      M.alloc (|
                                        Value.StructRecord
                                          "halo2_proofs::poly::Polynomial"
                                          [
                                            ("values", M.read (| h_x |));
                                            ("_marker",
                                              Value.StructTuple "core::marker::PhantomData" [])
                                          ]
                                      |) in
                                    let h :=
                                      M.alloc (|
                                        M.call_closure (|
                                          M.get_trait_method (|
                                            "group::Curve",
                                            Ty.associated,
                                            [],
                                            "to_affine",
                                            []
                                          |),
                                          [
                                            M.alloc (|
                                              M.call_closure (|
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "halo2_proofs::poly::commitment::Params")
                                                    [ C ],
                                                  "commit",
                                                  []
                                                |),
                                                [ M.read (| params |); h_x ]
                                              |)
                                            |)
                                          ]
                                        |)
                                      |) in
                                    let _ :=
                                      M.match_operator (|
                                        M.alloc (|
                                          M.call_closure (|
                                            M.get_trait_method (|
                                              "core::ops::try_trait::Try",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                [ Ty.tuple []; Ty.path "std::io::error::Error" ],
                                              [],
                                              "branch",
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                M.get_trait_method (|
                                                  "halo2_proofs::transcript::TranscriptWrite",
                                                  T,
                                                  [ C; E ],
                                                  "write_point",
                                                  []
                                                |),
                                                [ M.read (| transcript |); M.read (| h |) ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Break",
                                                  0
                                                |) in
                                              let residual := M.copy (| γ0_0 |) in
                                              M.alloc (|
                                                M.never_to_any (|
                                                  M.read (|
                                                    M.return_ (|
                                                      M.call_closure (|
                                                        M.get_trait_method (|
                                                          "core::ops::try_trait::FromResidual",
                                                          Ty.apply
                                                            (Ty.path "core::result::Result")
                                                            [
                                                              Ty.tuple [];
                                                              Ty.path "std::io::error::Error"
                                                            ],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::result::Result")
                                                              [
                                                                Ty.path "core::convert::Infallible";
                                                                Ty.path "std::io::error::Error"
                                                              ]
                                                          ],
                                                          "from_residual",
                                                          []
                                                        |),
                                                        [ M.read (| residual |) ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::ops::control_flow::ControlFlow::Continue",
                                                  0
                                                |) in
                                              let val := M.copy (| γ0_0 |) in
                                              val))
                                        ]
                                      |) in
                                    M.alloc (|
                                      Value.StructTuple
                                        "core::result::Result::Ok"
                                        [ Value.Tuple [] ]
                                    |)))
                              ]
                            |)))
                      ]
                    |)
                  |)))
              |)))
          | _, _ => M.impossible
          end.
      End prover.
    End shplonk.
  End multiopen.
End poly.
